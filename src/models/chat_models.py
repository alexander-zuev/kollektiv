from enum import Enum
from typing import ClassVar
from uuid import UUID, uuid4

from pydantic import BaseModel, Field

from src.models.base_models import BaseDbModel


class SourceSummary(BaseDbModel):
    """A summary of a source document generated by an LLM."""

    summary_id: UUID = Field(default_factory=uuid4, description="Unique identifier for the summary")
    source_id: UUID = Field(..., description="ID of the source this summary belongs to")
    summary: str = Field(..., description="Summary of the source document generated by the LLM")
    keywords: list[str] = Field(..., description="List of keywords or key topics generated by the LLM")

    _db_config: ClassVar[dict] = {"schema": "chat", "table": "source_summaries", "primary_key": "summary_id"}

    class Config:
        """Pydantic model configuration."""

        from_attributes = True


class ChatRole(str, Enum):
    """Roles in the conversation."""

    ASSISTANT = "assistant"
    USER = "user"


class ConversationMessage(BaseDbModel):
    """A message in a conversation between a user and an LLM."""

    message_id: UUID = Field(default_factory=uuid4, description="UUID of a message generated by the application.")
    conversation_id: UUID | None = Field(
        None,
        description="FK reference to a conversation. Can be empty? How can it not be empty? We should create conversation before saving a message?",
    )
    user_id: UUID = Field(..., description="FK reference to UUID of the user message belongs to")
    content: str = Field(...)
    role: ChatRole = Field(..., description="Role of the message sender")

    _db_config: ClassVar[dict] = {"schema": "chat", "table": "conversation_messages", "primary_key": "message_id"}
    """Domain model for conversations."""


class ConversationRecency(str, Enum):
    """A domain model for a group of conversations ordered by time."""

    RECENT = "recent"
    LAST_THIRTY_DAYS = "last_thirty_days"
    OLDER = "older"


class Conversation(BaseDbModel):
    """Domain model for a conversation."""

    conversation_id: UUID = Field(default_factory=uuid4, description="UUID of the conversation")
    user_id: UUID = Field(..., description="FK reference to UUID of the user")
    title: str = Field(..., description="Title of the conversation")
    data_sources: list[UUID] = Field(
        default=...,
        description="FK references to UUIDs of the data sources last active for the conversation",
    )

    _db_config: ClassVar[dict] = {"schema": "chat", "table": "conversations", "primary_key": "conversation_id"}


class Conversations(BaseModel):
    """A domain model for a list of conversations that a user has."""

    user_id: UUID = Field(..., description="FK reference to UUID of the user")
