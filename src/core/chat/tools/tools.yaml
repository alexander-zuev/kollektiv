rag_search:
  name: rag_search
  description: |
    Retrieves relevant information from a local document database using RAG (Retrieval Augmented Generation)
    technology. This tool performs semantic search on a vector database containing pre-processed and embedded
    documents, returning the most relevant content based on the input query.

    What this tool does:
    1. Takes a direct search query and performs vector similarity search
    2. Retrieves and ranks the most relevant document chunks
    3. Returns formatted text passages with relevance scores

    Example input:
    {
      "rag_query": "How do React hooks manage component state?"
    }

    Example output:
    - A list of relevant text passages, each containing:
      * Document text
      * Relevance score
      * Source information (if available)
    - Returns null if no relevant content is found

    When to use this tool:
    1. When you need specific information from the indexed documentation
    2. When verifying technical details or implementation specifics
    3. When the user asks about topics covered in the loaded documents
    4. When you need authoritative source material for your response

    When NOT to use this tool:
    1. For general knowledge questions not requiring document lookup
    2. When the query is clearly outside the scope of indexed documents
    3. For real-time or dynamic data requests
    4. For questions about very recent changes not yet in your knowledge base

    Important caveats:
    1. The tool's effectiveness depends on the quality of the search query
    2. Results are ranked by vector similarity to the query
    3. Only searches within pre-loaded documentation
    4. Cannot access external resources or the internet

  input_schema:
    type: object
    properties:
      rag_query:
        type: string
        description: The direct search query to find relevant information in the document database
    required: ["rag_query"]

multi_query_tool:
  name: multi_query_tool
  description: |
    Generates multiple search queries based on the user's original question to improve RAG retrieval results.
    You must return a JSON object with a "queries" array containing the generated queries.

    What this tool does:
    1. Analyzes the user's question to identify key concepts and information needs
    2. Generates multiple variations and aspects of the question
    3. Returns a list of focused, single-topic queries in JSON format

    Example input:
    {
      "question": "What are the key features of React hooks?"
    }

    Example output:
    {
      "queries": [
        "What is the basic purpose of React hooks?",
        "How do React hooks differ from class components?",
        "What are the most commonly used React hooks?",
        "What are the rules of using React hooks?",
        "What are the performance benefits of React hooks?"
      ]
    }

    Requirements:
    1. Always return exactly n_queries number of queries (or 3 if not specified)
    2. Each query must be a complete, focused question
    3. Queries should cover different aspects of the original question
    4. Output must be valid JSON with a "queries" key containing an array of strings

  input_schema:
    type: object
    properties:
      queries:
        type: array
        items:
          type: string
        description: The list of queries to generate
    required: ["queries"]

summary_tool:
  name: summary_tool
  description: |
    Generates a summary of the source content.
  input_schema:
    type: object
    properties:
      summary:
        type: string
        description: The summary of the source content
      keywords:
        type: array
        items:
          type: string
        description: The keywords of the source content
    required: ["summary", "keywords"]
