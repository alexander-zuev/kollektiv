Chunk ID: 5c93f13d-ed21-4439-acbd-cb9333b55c78
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: dbbda733-e606-4299-bb0f-6fcc8cabc917
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 4679768c-496d-4d0a-a61a-b9a463366b90
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 6b0b9446-86a7-4969-b267-f734bdd661c4
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a0f630bd-4c40-4d9f-a096-5f1b9f1ea4b2
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 228050b7-f6a9-4e78-9a94-6ead115609e4
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7644b3cd-857e-42a4-93d3-bedd788e1829
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 8343fb60-d4cb-4464-91b7-4b153c309476
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8c9f0d3d-c226-4a0f-b8a7-d0612182c2a2
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 0b5dc444-4c5a-44c7-b3a0-c557ab3c3a2f
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a75f5b86-949a-4000-99fb-5ac060a6d97c
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: d67f1b7e-1a20-4264-97fc-a70284b101df
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a66f6546-52df-46df-8175-7b0b9721cfcf
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 2253afe9-3d43-4d92-aff3-6f7572223829
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f35dcef7-7d87-4005-b844-2be7ac6b3f22
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: ede3683b-7140-447d-b4d6-1643eb426637
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8c765300-299b-4bc7-91c9-cd71d7dd8a63
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 55ea3f9a-dda2-428b-b85b-5eed78d56ff9
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ca1f6b8c-967a-4e87-9e0a-24c803eb76f8
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: a73244fe-0ab5-4d8e-a9e7-efe2542777c4
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 119d87bd-ba47-4736-8105-60b5506e8cbf
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a70e6967-a339-4ce5-a3b6-dc51998bdf0a
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 13a4922e-2310-453d-87f4-c246783e0177
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f283df1a-0b20-4ea1-a431-7d70522625f6
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 1b1c8378-d3cb-4efb-ad2e-cb6193305417
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 99993946-6d19-47ea-9c0e-5166a37287b1
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: c8cc4d5c-953c-4d38-b9a7-289322b1d197
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ca5aba3d-08aa-4aaf-bc60-d91ca3b8650d
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 94d54551-4556-4f13-b00e-b06c57811369
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 113965bd-d1d5-4f4c-ad5f-e9332ec161ea
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 1bd12206-62e0-4651-a8e6-07d8ff1c2473
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7a2b2dad-3de3-40eb-8c62-aa81ab71b840
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: cf2bdd4f-dfa6-46bb-9e31-205886097ea3
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c5225421-53e6-478c-b80a-4f1938653029
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 5ac4ca25-08e8-4e38-98d9-04d5e0a9fa10
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e90f46de-9bde-4cfa-905f-aad5a6918698
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 40600d79-0a56-42f6-bca9-52340a1e08a1
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ba56a01d-1687-49c5-a0c1-1cded5a8616a
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 6f63210d-1297-4c76-b275-5886686505c7
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ec527583-1c8e-41cd-b297-1c6b7653d3e9
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 3374a0a7-04bc-459a-aac6-0e8ad3c0ec41
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 88009c93-f3e9-4292-b6a2-fe61e3171eb1
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 6492c5b3-04f9-4557-938d-8a5eaf7f0bbb
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f045ea5-a65a-4db5-b10c-f52061efcc1a
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 738c763e-9eaa-4dcb-b02d-f527723905c8
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 04bc5b8a-41d5-48c0-961c-43428f7697cd
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: c4bb475d-4173-49ac-ad11-4b64fd7a49cf
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 175db416-5452-4947-8dc3-af5c8a5aa5be
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 5c350d33-f39a-4079-947b-0ce65cdfbf95
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 890770db-5ba6-4d59-a187-46a023f35120
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: ddd5cd07-d63a-4aa8-8f84-09da2b30f87c
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ed43f48a-9f2c-4094-8ace-f9efe582b408
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: c983ed41-8f13-428c-b369-a8f6805d281e
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b4e7a540-ca92-4fc1-b828-85ad25443e67
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 0d668b48-3c59-4ea8-948e-7b5b2dbf8c5c
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 32ccda75-b1a9-4099-99c1-04dd22daadcf
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 4b0ffd9f-be09-4468-b832-e1541f03feda
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4c227527-e7a5-49da-afc5-877448d24e46
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 20c32f62-55ea-4b75-8976-b530eec74476
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 577426c7-5b46-4e39-8966-950c35131e5b
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0d46ffdb-1134-47d9-916b-661bca69714f
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 27a9d720-1f24-43e7-ab94-bd0fa92994ae
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0162e573-4232-4ed7-a583-0f4d72457e05
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 1b941d86-1ef0-40f3-9ec0-7f8e9bfc981d
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5238d326-4f82-490a-92e7-9473f4dd8ba3
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 8292ba84-3a70-4c18-a332-6594ea10522a
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 1c79d02a-ff73-4bee-ab36-dadc566de51e
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7fe14d78-cb3f-45bb-9b69-0a9d65a450e7
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: d1294154-70fa-4228-8c5e-86d137d91f1b
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 419ca012-4dca-42d3-958a-1686f7184f86
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 25909dd1-ced6-4299-9579-c1a2945d72ca
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9c54cc85-54b7-4c4b-8e85-d2cbaf7e989c
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 27beff6d-8d8c-4110-887e-a6a17cbbc0cc
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1d1d0222-e00d-4151-b69a-74b186b57e30
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 81c44e3e-8784-4c0d-adb6-e9f0b7a10a0b
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: cbd99817-9dbd-4dbb-be77-078c8111d155
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2d4ceaaf-27b7-4e77-9269-c3f09f7505a3
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: e6bd9ae7-c7cd-4b5b-9c57-229f0e5133d5
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 56910f9b-8206-429f-9ce3-0c9c3af0129a
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 53c4ed34-7f07-4418-896e-7a74d2389fa1
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5503e587-9c09-4377-8077-21f72831d2ff
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 501666b5-1088-4588-be28-d036aed0257d
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 631b506d-a17d-4135-a298-539ff12367eb
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: d3a89e61-8224-4371-b7ca-0941a56e4b10
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 79fe5a8a-f85f-4575-80b2-a69f7caa33cd
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: c1876331-16d1-4d8a-88b1-ffce85c993c4
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b7cc3d36-5ae9-41f5-ba95-eceeca6d6f92
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 869f294d-5ca8-4434-aa7c-595ed631c0ba
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4c70ed0c-7821-4d49-a5a4-b68c911f910c
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 02614c49-dcc5-4980-9531-5b49c1e664f2
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 37004ea2-a4ff-4d3f-9ba3-15aa5eb5d4d2
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: b4e5638e-517b-46de-bfcc-82e6880d6b73
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7defb743-f057-435e-8704-24e4c20b4b6f
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 564a75c8-e23e-4843-ab10-5f9df155f9b8
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: dad6675e-8625-4922-8db9-328298e55b0d
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4b14cf18-5a8c-4e57-b99e-a79dcf3c6726
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 5daa1033-b669-4ee7-b74f-2209271764f0
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: bd2f693a-2ced-4309-ad31-be2daf0e20b6
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 0036dc0c-9024-4f80-85f1-c4393fa8b256
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 141c2332-e61a-494e-9c20-7d9970d69aaf
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 8129ea85-ed94-42cc-9111-9842837ec9d4
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2132aec6-3fd3-461a-8eb0-e3bcb8cd8703
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: a7e233dd-b360-4189-8aeb-5e99d0ef2bd6
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 86c4f83b-445c-4566-b4c0-a57babd51338
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1dad77f8-bcd1-4899-b363-583fadec65ca
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: cd88a3ee-7dea-4d04-809e-2e2852382505
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6a81f997-b808-4beb-90cd-c3965fc2555c
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6334f674-3b12-47e4-a4eb-dee271c52043
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4470af99-f421-45c5-a5e8-bba44f273c50
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4edf0dac-17c5-48b5-b775-7b5d53fa9b60
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 22248bdb-6ea8-4efe-b29e-0d12b9149605
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ca1467a3-1472-4782-9ab8-5b0257fdb56f
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ec14b6ce-3aed-4f07-bde4-630f0dd5f03c
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5b4659ad-f519-42e8-8a13-dabc6fbe2225
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ed5bbee2-ef6e-4367-9860-bb2d71f58cf4
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 23fb7a80-a873-463d-96e5-26422a70e43b
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 84c633ea-27fe-45bf-bafd-e7e574e1e968
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f8d03a6f-0ed2-4181-9f4a-c2ba042e9886
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dc8fec69-a63f-462d-b73a-2ba2cdec34c9
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 036ab887-7446-47e2-b43c-7b6dcf53e0ed
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f326654c-f83f-40db-896e-f716cf8e3357
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8306498f-6c92-49ac-9d14-9dcda21ae9ae
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b9257145-c3ca-4d51-9f8d-e6e443fae5a2
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e5c63f6e-a9f2-44ec-a793-80b74978764e
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 430dc969-37ea-4171-8c65-0d6d5c7ec361
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a7e05ab5-18ad-4f75-a4d2-e50a2b987ba5
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 096a4f56-5b24-4b2d-b90b-e810e33084a8
Source URL: https://supabase.com/docs/reference/python/initializing
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: b13cd6b5-47b6-4c13-b953-46570587fa7a
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: c17a2d76-ff99-44aa-90ba-2b0ba4674c65
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 32b90928-030d-4061-9115-ae7a6cd9a999
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 4c731513-2444-48d1-aa88-6e55a3bf561b
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: db4fb96d-93b7-4e37-ac0b-e29c9af1c2e5
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: ed358fc1-4085-47c0-9ec7-90cad04c3a51
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a561c951-6b08-45fa-9405-bde37b7f9316
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 0f4183e1-0d9e-4681-90d7-95402497b689
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a7596298-16c6-4181-92f9-81da2d9a2262
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 50ba5763-d391-475f-a636-48fca8ea0fa4
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 39dbe3f0-524e-49b9-9cfa-5b730422bf9d
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 338d86db-894f-485c-a2bc-4b9072fea977
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9a534300-7a8f-45d1-aee5-6cef218b279e
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: d8ec4861-dd06-4130-809b-f8a4b3644fcb
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5fec7bc6-b98c-4b19-9130-f563190656f2
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 9ee79eda-ceb0-4ef1-887d-6a21fa5e0f68
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 77e2885c-9797-4f75-8e2d-4f50d7e08319
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 93003b05-d5e3-425c-b738-26e7fb373427
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 007ae9e9-a5eb-4464-90ef-07cd53aa688c
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 1134caf6-c52b-41ae-893b-c87591ad9b73
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 8253a62d-f08c-4416-a977-b2be9f060f00
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5fabb9c6-12e1-4ac8-a831-f58d6dccaea0
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 59d6e730-389b-4ecd-8de2-2c14c89b3de9
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 181732d9-2208-44b0-84a2-0dac98a161d3
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: cf77eb9d-7cd6-4090-9a8e-fa97578b2cab
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 732d8a60-ef31-45c9-942c-0b4692faa6f3
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 7fbc87a7-02fd-48a3-b7c4-ab63092dd4c6
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 44f463bb-7972-4afc-8d01-415331db63c2
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 160cecbf-137a-467c-90d3-fe5457de76e4
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 657df35a-ca13-4015-b88a-d33cc53ba958
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 44341e09-a32c-49b1-8675-b5bdb6b133e1
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 76c96abb-1cc7-4a21-9b32-4ac6851c0d6a
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: de5552c7-0019-4107-805f-bb29e0fa480a
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c7a4df8d-9669-42d8-a090-c8d2bab80e6a
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: eb4bb21b-68f2-4490-b8e9-620b102da9a2
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8bbd459a-d815-4d95-a472-5c9cae1ca856
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: d522b626-4871-49ac-a6a7-ac12c5cab89f
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 89cf1394-5d0c-4f86-ae77-b588d1c6d0a0
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 4f1515b0-0893-4b57-9667-890af34555f4
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 784050da-3de8-4cef-aca0-54c19a22c21c
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: ee2ba6e9-e366-4016-89aa-aaa98b6719ce
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6408dfd6-aa3c-48e1-8d00-386af304d200
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 67159089-892b-4d6b-a61a-b2247efb9757
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: db4f0511-2154-43b8-b453-0693cf9bbacb
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: ea3d6f0e-a279-4938-b6dc-815c0e85290d
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: fef2cbae-8fe0-4331-ba90-2ef8aaa86fd4
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: ba05f84d-189b-43b7-b256-7c3931529fa0
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f2f4a4b-d542-497a-91c1-38b12dff545b
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: f6c2b934-ce80-419c-bea1-2b7b31fdcb90
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 1de3c831-45ab-449a-a6fa-ba82d244ec21
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 81f425a5-6909-4a4f-a67a-676aa1e1b75f
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: f8ccb47d-fcc6-494b-a7ac-31d52f4a9ac3
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 75b7e6c8-da57-4a62-aa34-c0d30b062e80
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 39a47940-b5e6-4143-9351-f0ab74a57afa
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: d1b5ef16-1118-46df-a7a8-acaf91cc8599
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 96d40f84-2179-4064-82d8-e76e61ef7965
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: e6d166c2-1252-4dee-b8ed-fdf98dcde717
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ed4a6f86-4d81-4a1e-9558-42f5f143435a
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: e56e7a50-fe76-473b-84e3-5545567b0427
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e78d8b50-92a4-4153-bb9a-b670a7344135
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d45267e0-dbe6-484e-b31f-bc7359180def
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 28c4d2ca-0b36-4057-9f55-46ca3e9b8c1c
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 02e5d607-cbe0-42a0-ab6a-52d63c987d60
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: ed317551-ffd2-47af-bf81-3a3daf7e72d9
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2d95849c-f9d6-4985-be10-314371a2bb5e
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 56c5e973-6a4a-4996-9008-0dfe819634d8
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 300963df-0a4c-40d1-a9d0-c11a79d94f3a
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: aadae961-8012-48b1-aeb3-721f02ece459
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 36faa053-21ce-4f8d-aae4-b7ddd6cfa120
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 58d59542-93fa-434d-9617-e9e3a7c4296d
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 6a60341e-0cc4-4414-97ce-50f185913f4a
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 60a1ff01-a68f-4ce8-8d0f-ec6dd12d1352
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ae9844aa-9e73-45fd-bc0d-8a24f79f3520
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cc84704f-5e48-4498-b14d-d276f78ba50d
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 395ed1f0-b94a-43d1-9e63-e399aa9aacae
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: d9c8f6d8-5491-4ce1-aab1-72584687a930
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 1ed0ccdc-e4ad-461e-bec6-7e1b4d12f8f6
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: d533ecfb-6d3d-4d80-b94f-2b222469c22c
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8e7d820c-8679-4ad8-a7b9-f70042ccc0c6
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: cb5e62c1-70ad-481f-b4d5-35b596818120
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ef4ee2c3-d049-4602-b48d-6b264fbd6510
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: f128b555-dbb3-44b1-a2a4-69c9c5321c63
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5b83f5e2-e4a7-4488-ab96-5a0385effbb8
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 4ca5bb6e-03c9-4672-bebe-70c090bb25be
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5c48ba0f-40a8-46ad-801d-3c7f2d7e1998
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: e305f9b2-e376-4d82-86d5-ae59eae2b6bc
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: c9f20e8f-9fad-4e9f-beba-6d0050e67aa2
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 39227206-c273-49cb-bc3a-35f35dd58335
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5635fd59-7089-4d1f-86bc-7c6be4c075ac
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 4c7e18b9-3180-485d-be66-7a8cd7c7eb98
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 9a556709-f91d-4a6d-9893-6ccd38ade896
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 0d01b737-98e3-40a7-9c7d-acfda9228125
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 03e84ba3-ebc7-43e0-96e4-b632906d1fe1
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 6d264c88-9a58-4879-a682-bf09702e765c
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9924bf1e-281b-44b1-9790-f9f39eec8a30
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 623b67ca-b28c-49bf-9bf4-6a013721cdca
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: b54c4bf3-cd73-45d9-be3b-edb4ff3a9f59
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 59414f97-0f15-469d-bfaf-29f6f06a1416
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 1368db0f-a8c7-45a7-b6a1-9a8fb0837e3d
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2f673e1e-1a31-4e9f-909e-8b3012639dea
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 4cf5328b-dbb3-4c96-9b9d-948437c21901
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 39d2f2c1-d692-4f6c-b5eb-1bc7e1b5d412
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 59a434da-c055-4c25-8bd6-8e4e4e8e80a0
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a7070acb-c5ab-4d36-aa02-dcfb8358b2b2
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e533db7-cbde-4558-bde7-18d3ee280ffe
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a42c2ca4-944a-437e-a965-179080d4abf0
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 06f73a96-cd5f-4477-8e0e-d04a8ab67837
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3df4f63f-b4b7-49e0-83bd-e7a0ffb46bb8
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6005ad33-1cbb-456d-b5b4-c872e7948664
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f995c16a-9610-4760-9f0e-2cc226be0e86
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 29616336-1ee9-4435-8a37-666387458a73
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a78d30be-e115-4a6f-bff4-7bd382234f9b
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: db22259d-fb83-4b48-b05b-0e897886c4a1
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1920ed8a-5dd4-4715-b9d3-4623f55f09f0
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8aaa48ff-8dfd-4e0c-a5d7-e01b9b17f1d1
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2300fd43-898f-4619-bba2-64ce976f0e29
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 785a2b71-f4f5-4098-be4a-d9fdc00cc41f
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 64241387-f43e-4c70-b8f4-124df7c5da52
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 318345aa-ecea-4f3b-91c5-31dd042639cf
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b8d26db9-4bae-44df-b183-b34e90b60954
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a6efabc9-4a67-4462-9301-613f91db386c
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7888c39c-f23d-408f-8b84-e7c44f65fca4
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2bc45922-d0aa-479c-b531-1183c0be69b0
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 238e1045-35eb-4a01-b35b-fb2e773ab4ca
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 21cd3e59-0d22-4ce1-862b-76e31214b4c1
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 938cc589-e0d1-43f0-a96d-b44c87d07908
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 032ef9a8-298b-4514-85a2-00f8c251b554
Source URL: https://supabase.com/docs/reference/python/auth-signup
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 6f939eb3-fd55-4a76-bd96-a9470a893114
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 7c6cb47a-073e-4643-b840-7501b508ab69
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: b90871f3-a9e9-47b7-901f-aaecd855a103
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: f3a128f5-882d-4059-8ea5-26c5202de973
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d8abb9b3-c4d7-4e93-903c-3bdff15d7cdc
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 126cb8bd-da9c-46eb-8f1c-ce5a70a5890f
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1aa43940-2b01-488b-8a25-fea7b01cf34f
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 5aa883b6-7bdf-4774-8721-db342a7325cc
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 67a2ea43-c5d4-4745-b8a9-d602e55ce571
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 030f7033-9832-4b81-aaaf-00fa2be95542
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cb506cb8-0551-4082-886a-b831b9b3bbf8
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 2df8df26-de5b-4dc5-8d5e-af634642ffe9
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4a3fac86-29e8-4818-8e71-7d1c8ba4c127
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 5f9853d7-62b1-47fc-9808-3f60ee4f4cda
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b39f521e-b5a7-49e6-bda1-cfe20882f2de
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 1ca9ff11-8f5a-4131-bf9c-5d358247d93a
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 31474f62-9f52-4833-8d4a-1d4398533784
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: ca1d06a7-77ba-4137-8025-320a1112f82d
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ea15b47a-f0c0-47af-94cf-957c6921b60b
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 40267982-f65f-4354-9fc9-5e01865a0ad6
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: f7c4254f-4f90-48fa-ac46-97e22b360cec
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4980b973-334d-4d00-ac8d-5688f24c572f
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: e5844f32-9222-47f3-9645-ce1c29019c8f
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 106a9898-25c3-48fb-acd8-05cef990a7c0
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: ba1f0e77-2de1-46d7-8ccd-041a8a849892
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 96c01636-7b71-482f-9591-465e10fb1714
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 50185140-3b5b-4ccf-ba4b-6232ca03ab5c
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d1622e31-fb72-4742-812d-67f77c616afc
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: c5c8a090-907d-496c-bf6f-a3ff02199c18
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b8723d97-7bdd-4ae6-89eb-f3c97b2cd173
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 24b8f9a1-0af2-4cda-ae73-61e97183d288
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9d7e029d-9a85-4ec8-9f67-7bee0ca2ae53
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 368e4dee-5f0b-4705-9eaa-3ef3accedb05
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b272b0c6-5c60-4306-825f-ee8e72b72906
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 09e89fac-e4ce-4e6d-870d-071560f9b89c
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 564244dd-9187-497c-b2ef-df549f063813
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: dd81d0b4-bace-44ae-9240-c7f9a1b6d349
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: c9e23860-3879-46bd-ab1a-b3880a9a7a86
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 2e3a0b88-c589-437f-9db1-5dc66d49e739
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 63b8e7d0-6643-4676-8223-891f8c197875
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: e0a63584-c5a7-42b7-9e7b-eafa55f97e12
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 56b6fe2b-989b-4835-9aac-a03f90610112
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: c3fd542c-3529-43ef-bb78-01f2a2750cfa
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8bc14a83-d7f3-446b-90bf-537dc6a072fe
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 4bf72018-2708-4d57-b0e7-78f7ee098060
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 601cb040-2c34-4db5-9a13-7e5b931d203d
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 9f04cbf1-b29d-4e3d-b9a2-8602a4a2dc71
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b650b4e1-f226-4f81-a9dc-6c6ef5889a2c
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: fb6d9214-7718-4b9a-aed2-232ed17ce774
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e7edf1f6-7b85-4f45-a61e-5fb5a09da1a7
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: b6cae460-0fd6-4ab0-a5d1-0d600b988f59
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: eb4414e4-4a16-4a42-b4b3-fed437dbbb88
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: f6e0fdd5-83dc-4311-a2a5-6cc6115971e4
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: fc026517-915e-4498-a8b4-859671f846fb
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 9df4f538-a0a4-4897-be20-a48df861a18b
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 24e1c388-bd6f-4d65-a157-5b15b52a7bb8
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: abd6e219-196a-4e05-9c5e-70c7b5c4935e
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d8ba10d1-1e23-432a-b79a-39ca4624b367
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 9e08b646-5f0d-4b5e-b926-bacc2a96c69b
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7ff4c66d-d97e-4af2-8b5d-2d8045323f43
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 15084479-9ecf-4bf4-9d3a-d5ec2f1973d1
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 5e852734-d9f4-4371-a2ad-390da3abf843
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 232ace67-4c43-45eb-938a-e6ffbc47c26a
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: b9579f1e-d8a0-4849-a2b3-958c7c0c08e4
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d20da0d4-79f5-47c0-8135-afd1153c9278
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: f556097b-2bf7-47ce-a98e-9e314defeb97
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: c8088130-a7d0-4e4f-8a0a-da63bfa53472
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4100e350-f705-417c-b80b-2dce71dd8492
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: c3708f69-bea1-4173-acc5-d81d718269f7
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 51f4f3bf-99fd-4825-8df7-ff3e38d13cb6
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 1ee04fd9-7341-4332-b713-b017356fab06
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f51c9e3e-f8ef-4794-a7eb-293ba5bcbdea
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1e219570-0a18-49d4-819d-0feb215f99f5
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 95374e7e-ab5b-4f1f-a13f-e9b44b20a60e
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e05d11d7-b2b0-4668-97cd-8d8863e046e3
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 7c6bf7f3-8c79-4b34-81e1-9a73d9281973
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 59fcc068-5792-4aed-91f4-eb4944413cf6
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: cb88ce0d-5d61-45f4-93b0-99e2119d6ce8
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8655cb15-285b-4532-8240-d42967b04ff3
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: f09be001-f34a-46ff-aa2a-7dcde206d6cf
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: af1c91c6-439c-41c4-889d-f5c2ab4d901f
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: bb109598-daea-4ebf-80ac-ac6ee33f331b
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 439f1ae3-ee07-4f18-b0fb-6b76bf022d29
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 34c52a04-54f0-4780-98a0-4b33bd02e6aa
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 027ad56b-832f-4c82-a68c-1315117a44f0
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 8ecd6312-35f9-4465-a5bc-5fdd038e6879
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 36a56749-3f96-4b98-9d10-2a46d4508668
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 409f1359-9407-4409-8145-16db9d3451d7
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9c496c32-fef2-4b3d-bf1d-0ac2ac76f2e2
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 30599bef-7915-4427-a640-b8380c89febf
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2be8fa46-3001-4af0-ac1b-9311854c8052
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: bbd8507d-7efc-4beb-b6cc-e656163d1f39
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c36b9568-8d4c-4ca3-a4fd-ef87fae69b89
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: d21773c6-4fcc-4732-b0dc-3bdf51329abb
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ace788f0-8f9d-46c8-af8a-213e994847f9
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d8c83e93-18c6-4627-a6eb-197b5c09a450
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 6d2aa56a-bdba-4a68-9407-647ece02d700
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 49ca5c8c-31ff-44c7-be4c-a365799850a7
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: cdfbcd7b-e9bf-418c-9cee-7a3721d86aa4
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 73dc43c3-8630-4c1c-a706-d3e7d7d372bf
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 29927556-7b33-4ff7-a76b-bf5e36c1e9c4
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 5587ea0d-f0c3-4380-b5ef-833ec787bd39
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 61088e01-c00a-4f98-8cb3-6fcdbba8d8d9
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 376241d7-7c97-4b31-8a13-ef87ac66f084
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 56211c8a-0e7d-40eb-af1d-ea5acb4469eb
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c061a146-f16d-45a6-b54a-58aa2407484c
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0c12ec3c-69da-4819-9011-f17115c43164
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 66d31a2c-b5bc-451e-b47c-ad95d0a29856
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2888b34d-6250-4e4e-80fe-eb456896eb8f
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9166ad79-3d49-4217-ab3b-c2e56e7552ec
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c07397c2-f510-4733-98d2-bfcdd9534f31
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 48abd7e2-7a21-4222-b168-af25c5ee4302
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a49d6b57-34f8-423b-b46b-8f08ac4751c7
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 56e2274b-1e45-4c07-9c50-98a280e5552e
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2bccb8de-37f1-49d7-9689-3457ce7b7084
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d149e2a5-ff99-4494-9a76-8c27c026f3b8
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9abdc2dc-8a87-48c5-98aa-793023286e30
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bcdd5fb4-9601-4615-a91b-ff5f864b8c1d
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 373c57c1-e32a-47b9-94d8-177026a0ca77
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3a59e1a5-9ea0-48e9-ae55-5e51d85141d6
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3b90d0f6-ee83-4054-a53f-16a05e617910
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f2b43c7c-2edf-4e18-b02b-9276f46868ba
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 814ec52c-9ace-41a1-9677-aea35e8cd885
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5a37dfd9-b9a3-4b4c-aa42-fb54646dc94f
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f2d1c6b0-e926-4bac-bcfb-4e2ed972a851
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e251bc4c-32d9-4656-8396-6c450546890b
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 25685ecb-3d1a-47b2-8e62-56b1ddc74fbc
Source URL: https://supabase.com/docs/reference/python/auth-signinanonymously
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 411e6460-366e-4018-bb4c-fec8bad2dceb
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: dab290cd-a310-4f84-8d3e-7229ad32d3c4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 7a4e5bf0-86ed-4a4d-83cd-822f5d1eb51e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 1144a369-4338-46da-a432-76f547cbe91f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 34cd2772-596d-4c58-978a-7bf875340577
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: b34cf57b-8d93-4e0f-8c0d-be92d65cea09
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 84e134fb-1590-4d0a-b08a-2fc8d996ae7b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 43633154-54c1-4f6c-9622-f9d8e63a203f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d7f00963-d51a-4f0f-a332-a6e3a08a2f16
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: e0ee95e8-cbd4-405b-bf09-3c7e409bbe4a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 440df235-1e9f-42b3-b9f9-1e18b09cb8c6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: dbe07317-33c7-455b-b922-1cf62bff3ff8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 587d9bcf-8cf1-493d-a2af-746e680a9ed2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: ae678d68-de62-4875-a9b6-289c30ea1579
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ba11f87a-4f2a-4a31-911c-cdf4b17e7368
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: fecbf684-65ff-4ff2-8d8b-d730cb81910a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5cd7925e-091d-43f7-9ba5-060e7fb8f5ba
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 134c9a10-445d-4bee-b31b-3a6b5f4c28ae
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8a1f789e-6e3e-4480-872a-7a17d10fb3f7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 835708b7-226b-4f3d-af35-7ba9824e31b9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 02f6b3b0-5be5-4ef2-8556-0a98f122d423
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 017ebb46-53d8-44b5-b1f8-bcfd99470c4d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 35b07770-1fa8-4d72-bb17-a0b2fb39d9ed
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 322978aa-374d-40f0-84f2-7cd20dba760c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: ad0daf7b-a3f1-4c55-b8fb-6eda20c5912a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 428094db-6cc2-431e-8d6c-5ef014d88190
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 0e6c3e03-1058-4366-9b53-9d0f3522d1db
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 92dc6fb1-a145-4f02-9d98-5fc5f9cfb906
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 23996d17-e20b-4649-a853-cd64add1af69
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3aa9472a-97c2-45e3-8662-8b423545f73a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 8c1f7dd4-cc93-4b2e-b2ab-549fd2a4de27
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b763e4fa-db90-4b63-b94f-5539f0e029a3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 3810a197-136e-4f86-8b40-1df1f4c93f8c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e1a5aee-d71d-4b46-99bd-e41915027f18
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 2e006d70-5389-454a-8b25-a6bd86f04f06
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f23e780-3e17-4620-9ec9-1efa46a4d773
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 4099b991-7236-4d07-97a7-33b0aeeeeac8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 71e2ef5b-b202-42cb-ad99-574fe68c5849
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 32bcb4ab-810d-4136-ae85-155ce3363aa7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 933e2735-e718-44f1-a5a4-2bad256aff67
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 52fc0936-7026-48f8-b6d2-dc5edf832c14
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a7142bbc-dd38-4379-8862-25e4e7b9dc0a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: ac90e478-fd82-4514-9dd0-46b6b10a9ae5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c6b91941-46ec-4dfc-8529-39becfdc8626
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 3f693fab-ba90-4594-ac58-00be92fb593e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ee408d67-347a-40cd-931a-c7f77ae81d34
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: f3aeac4b-b7bc-45df-9676-a1d0e0fc0268
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 33bf7555-e04e-4942-9c9d-e0e0315f6e59
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 7201430b-172a-4fc5-81bc-ad7e43d7c144
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: accfef25-8894-4d16-951a-d44e32eacf38
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 01b338af-18f7-46c8-ae68-e14442998743
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 66f270fd-a793-4af8-9cee-97e7561e8eb1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: a4dafdd0-d239-4c1d-8ec9-d58b54f531dc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b33872ed-b4b1-4acf-a478-e3a5009e380a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: e880373d-ae3b-4c30-a5d1-f1b864879fd9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8c237abc-af53-4b45-b51e-f3cd64680bbb
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 8c674a37-ad26-49c2-82be-770eb84ac641
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4c77f52a-ff95-4678-b03d-e0b08937e4e4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 0f4e9b61-3fc8-4a8d-b9e1-1fceba53f538
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3996232a-88e6-4d74-aa25-2f7753d5fcce
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 23949d63-35cb-4265-9413-2220b1922ced
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 7f32861b-9285-47de-950c-578374bba7da
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: afc9fa1b-23cf-4eba-bc56-92f7dfc2c8da
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 68d5f50a-75d2-4a09-b806-8b128aaeede9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f1c83434-6637-4cf1-a39c-eddf4083e4db
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 7f9a00d6-246c-4c5e-9a7f-f1ca18a0305d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 3bd1576a-a9c5-4eac-b791-763507edb401
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3de67c2d-49cc-4a9b-a9c8-885fc431e538
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: ab03464d-c1c6-4723-a7a5-fdf833de403b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ad81e165-15e4-4dad-bcd9-3fe66be08906
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: c14d0b85-2610-4e54-aa79-a263fac51ec7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8e6aa89a-4ebb-411b-b49d-fb53610eb6b9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ed47a786-48ef-45b9-a210-9709153b465c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b9ac9790-f606-44cb-ac6f-6d5919f49350
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: cca094b1-4dc0-4ac2-9d25-974f0d6f9e84
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: f7777f6b-0e62-4dfc-9c91-253dfcac7818
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 27351635-38c4-4b54-878b-930c239491bd
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: f3af7afb-fb92-4bcf-9dc5-75cbb5cb39af
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f78a3581-9e32-4e71-859b-30c8edc3b9b2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 3399176f-d881-49da-83a9-3a93ea417414
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 811cd0c2-3a86-4d3e-be8d-cf6caea7ba4f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: db18afc9-32b2-408b-a7a2-d269be01c259
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d26c91d7-966d-4545-bf0f-72fc4a5ed18e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 7c554cb6-7632-44dc-940e-cfca12c058f7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e15bc95c-32e4-4b20-bd4a-2f6bd37bb3fc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: c7bfaf83-1248-4d4b-a0b3-b8950f2484c2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 67ac6ced-ebd5-41c3-8593-54d319dd954c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 99a98ee5-1eb0-4d38-879b-8ad416ee1f25
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 22d59779-e371-4e74-a51c-8d54e7560d37
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 41a87620-59a3-4146-93e2-3e61409ea244
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0436af3b-24d3-4631-aa84-507a88bd4094
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 140040c9-1bb9-4858-9d44-aa99850e8447
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4144dddf-efda-41a6-8304-2f242df5b06d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 0f57e42d-a96b-4726-bac9-004cdcadcc42
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ba9571f1-1460-4e5d-862e-5b1726e942a1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2d5e5cd3-e069-4a06-b693-ebe9d663cd1a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 7f30c084-b236-40b8-bd00-3c67c19a41fc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8c65e9c6-73f1-4737-b213-0f99ca2c44bb
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: aee23301-1296-47d5-9611-c92e196f751a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a80e9913-ef78-4306-91d8-55a240159e82
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 93329aa0-52f9-4290-a1d4-22c04afcfacc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2ac8b4ff-4b01-4975-b3c4-90a562297233
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: eb4866c3-1fad-4ced-b08e-c15f6d723e0a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0218d5f7-3888-4edc-9e50-631dfe86bbb4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 01dba39f-e813-4ec7-a5d6-a7400f791d00
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5eacafb1-34bc-4c1e-a1ec-249c41964430
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6165d4f2-a276-4c7e-b3fd-47493acf4ba5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e12b8aa4-de4f-4607-8ecf-2c06522f7a9d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 190b10a6-7ef3-4978-b602-2a90d66d943f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: aab61bca-5e76-4bc6-92e2-07055a020705
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fa8e558a-be76-45d4-a953-5d863f04c412
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: da5a7ff1-8c59-4308-ac77-f38a1381db83
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c526734e-7ee9-4e7c-bc9e-8f590102e5c1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 671ec7c9-f765-4da4-af71-7e63b81944e5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d4685a7e-3167-4338-a4dc-be5e7107253d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 966c0d87-6987-4115-aaae-04eb7a97729f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 96d47be8-704c-46c0-a876-3c7352dc5ef2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 38b519ca-4589-4b13-896a-d2928b64bff7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 49b6d2b2-e7a3-481f-8680-5dd0aa0d97f9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7fdcf2f9-6803-4cf3-8762-ec9241cb8d2e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 746fc437-8f95-4fd9-bf68-23b3833c80f4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: db134933-a752-450e-a01f-8805de4006b4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 90e693fb-6e8b-47a4-8384-a95e653db4ba
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f39278c4-a2f3-4051-9217-19f9cca15be4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8ee1fdd6-fc71-4229-92d6-9a5c03fd0be2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: adc647eb-e2be-490a-a68b-bcdaaca3a3c8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9dc00be4-ec9a-42c5-82fa-07ea6a1f7530
Source URL: https://supabase.com/docs/reference/python/auth-signinwithpassword
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 26bb0656-a6f2-4b8e-8bc3-5fbec80ff30f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 9a341941-4e0d-4a33-af3d-dbbd7a47a16e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 2a9559b3-b1f3-407a-9d08-0b71d8d7ad38
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 60a3fa4a-6527-406b-94fb-a60cf2e0d2f3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bb320d10-a2d5-4161-bbbf-34d777bdfa1e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 10a54b7f-2cda-41a5-9023-ab024eee5edd
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dfdd3d95-359b-4307-9048-4103d39e6c5c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 8814221e-31a2-41dd-965a-6a9f81528d86
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: aaf0e3a5-1a2d-4f69-b036-8400768255ac
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 20b17b87-1c66-4c3f-8edc-15002f2eff9c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 32c1b376-70b6-4cc4-bafc-ec3ba7c99f82
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: a31a79e0-3f8f-438a-9ebd-7008f2e8b48f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 492487a3-8cb3-4114-98cd-7b304a831775
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: f21ea7f4-31ec-47d7-aabd-c8cf8ce781a3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 39c6e43d-4d1a-4d97-8689-a19edafdf879
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: fe1fb452-c1b1-494e-86e3-73f5ef3c221b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 786e02da-f536-489b-b9c3-a06c6ec04d89
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 3db777ea-b7c9-4615-840e-55b31ae73233
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 53d7c530-7d83-4591-8d18-059b2b9cae38
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ebdc16ad-7b76-4055-a716-7cf28dc9a864
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 0970236b-307e-4503-a1f6-34afc91a0487
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 75c20a1b-4cb6-4c36-9157-09e6aebcb875
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: fa5ac4d4-d2ac-4795-ad22-a8b23175b056
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 69307060-bf3f-4d03-8e1c-5cf41a02ed3c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 264e88d9-1d1a-403e-bb0d-6262d0b00657
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 89b53e2c-037c-4d5b-b290-4106bb239858
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: b0641d3f-141a-4c70-9083-880c478e3bc5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a7e763af-4c72-448d-b79b-687a1365a1cd
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 54651121-8752-4a75-a425-4d6b5ce290a0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 49b6d87b-9c07-45cb-a162-63334e4b0bb9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 74b571fc-0809-44f4-8e33-3e748b3077d6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 85717c28-182c-434e-af4a-b66b9a501e1e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 078f2655-b683-4204-becf-da56739c8d1b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d27baa64-5ca3-4393-af00-dc9d42c598f4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: b07301af-fc1c-4af4-93ec-a51a9ac11196
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2cb6c07e-2838-4f6d-abde-b459635ea7ef
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: ae3d6218-3f0f-44c3-b8c4-bb310c4ef136
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: c14527f5-66d7-42d9-8d92-c3899e7aec8a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 2f6c33cb-c98d-44d6-b4e0-365120a3706a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 76f391e2-cf87-4ed1-8856-d71ed31f19fb
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: e15fc330-e25a-4133-ab2e-911298016cfc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 85c4270c-f1b7-40e9-a832-b4ea20887daa
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 47972988-b9f2-4723-83ff-39729da7c43d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5998a048-9a09-4d39-994c-a67d6edf3b67
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 1cc10544-3855-4fb6-84cd-c0ebc081f49c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b75b93f9-275d-490e-98db-209180281eb1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: d7edac27-fcda-41bb-91e4-864499e18fcc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 48091050-96eb-4cd0-b8f9-5780d915a19e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 7b4f2489-79b3-4393-8ee5-c6f9ff9a25dd
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 1ecfb243-8b0f-4187-9a38-dbeda64034ff
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 0a787946-a617-4f0d-8e4d-8929aef9a226
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 10f23b50-b6d7-4da9-aa01-378880700a42
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: f939cd96-daff-4299-8a2b-394996d6074a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 50fe9c02-b52e-4746-9107-065cbc78e80a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 30f6399b-d7f7-4178-8d0d-f96fe7722487
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 94086d59-c2fb-440d-9148-cbdd1693aa44
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 8178a9a9-d2da-475e-b4c3-c973c885f2dc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e967f2a0-c480-4395-8164-9eccc2cae6bf
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: db32fac4-eabc-4760-b112-76b4e441c506
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7a3646a3-6e7e-41f9-952e-bc557c5c025a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6c8dce24-ca4c-4639-b377-3a43a099f7fd
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 05b7f1f9-5c72-470d-b5a4-7112879e4113
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eb7cd85a-6766-4f62-9407-18384e801d51
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: bd2b178f-c16f-4617-9dc8-e87227101fba
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b3ad6f24-b9ac-42c7-850f-3ee57d9de7ac
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 883bda8f-385c-48f4-9c63-eb3882a56aa8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 20ffca0a-af95-450b-a55c-19a569229f56
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 25be9852-c514-486b-aa41-8fdb05750b69
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 269e376f-b23d-46cf-9189-46d490ab4eb3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c9bc2d92-d200-443c-91d7-f95336145d1d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: dd43dc07-4bb6-4b1b-afb7-17f5363c4ef5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 83a6bbb3-6198-44c8-837c-54acee3e5914
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ff719c2f-7d03-479b-9937-055c6beee336
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b0f08ab4-94ce-40b7-af17-e6f764968979
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 48849c44-c95b-4119-9416-5e1dc94f477f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 8f54f00f-6cd9-493f-b5dd-720033725f72
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 5e6e06de-8d3e-4841-aa88-c37f05c9509b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: bd5ae16c-adf4-43b1-a119-71c6a8bb9c4f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2435f3f2-06c2-49e8-8b81-bf6693c6974e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 611ada36-611f-43b9-bb11-771e635078db
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: debd170f-84e8-430e-8030-7519043fc83c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: d07b7fd8-cb5a-496b-8e33-3cfb0d108624
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c33d90d4-5b5f-40c4-8993-f3cc9da9c3b7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 03987346-5c7c-48cf-8b96-3b0f12348b9a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a38055e3-8503-451f-a916-538e983977f1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: d7d05f7c-0f2f-4e79-bb6f-dd1288d956a0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2273b953-85b7-4b1b-b202-205d63b53384
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 8d2838a6-2100-4153-8a2b-d51d2266ef13
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a7ee5714-5dcd-4dbe-b66c-43dbebf61b4c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 3f3fb27e-e38f-421f-a236-1b9fa83d2d06
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 4eb33218-7dce-49b7-8338-e39fd37e7e5f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: c0787b2c-d6cc-4b4d-9674-b6d6ba43b73f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b3cdf094-b2fe-4c87-bd40-fea8c16a51cc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 61506752-1e21-48d0-917a-45fbe0f3d9dc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8bbcde38-1878-4e9d-a538-e235d3054e8c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9fbb3f7a-5025-451c-9d55-e3a70b001802
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 168ae05c-414e-431a-b420-8c9883f5c838
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 79955fdf-da43-4c40-92c6-0f8f5453b132
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 339a97fb-bc62-40eb-a23d-8eedb1a06ffc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f36565fa-5081-482d-bc74-910331de7b93
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 0c11ed4a-f295-43a1-a198-4162cfc572df
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 4fa2815a-02f8-457e-b671-b769e17b67b4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 08e6c7cf-d441-4fae-bd53-dd22201ffa82
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9a0b6f38-87c1-4f4e-983d-d2b511c6d630
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3d46b19d-d613-4b3c-a389-ea4d1a87738f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e72ccad4-0eae-4821-9d3f-58de220ecc62
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e4edbe75-e06d-4607-9a91-a53429c9911d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c2f4be3c-6047-44d5-b74c-1c511fd728b1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dddab0c5-b9af-4156-98bf-0b491820e124
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6705122e-416d-46c2-8709-6665ccaf65a5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f8ff2868-d310-47fd-880f-800ed9ae5ed3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ac169fbb-8202-4d29-9883-3aa3ff265a88
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 35ec7bd2-4f6c-4cef-b140-3f43392703c0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d34091d9-b9d9-4b5a-a18c-e3063c5ced39
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e79a482f-8426-4322-b212-3e526e0a7ff6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1019aba8-777d-4f52-9b34-6a18d8e257c6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 22063006-7612-4dd9-a02a-a1969bd90ed9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 25c334d3-0e98-4596-836d-2a42774ded0d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 47067330-9da3-425d-874c-60e3fa570c7f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 65590634-f2e6-46ad-b662-1ad1dacdd67d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8573f7e4-382c-4859-99b7-15d9bed355b8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bce3c381-7928-43c9-b8cc-2ef79ee7b1b0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 15bca127-82bb-4cf7-a452-09ae62eb7286
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 83162741-71d9-4a9b-b9e3-908a3f15de27
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bee78532-7dd9-415c-8f48-a4704d6e49a1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4b3a77fd-46d3-441a-b2ab-767d84098312
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 37358cd1-2985-4f54-8322-aa4eb3cb4071
Source URL: https://supabase.com/docs/reference/python/auth-signinwithotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 7495dfaf-e59d-4c42-b8c0-681ddd109331
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: c09e7700-ffb0-44fa-9d44-8b0285f9031e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: d61cce99-903e-40f5-b3e5-2e7b41d94642
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 237025b2-f25b-4516-ad77-0d04db1b7826
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fc712af6-71c5-4441-ba57-29709bcf4795
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 1ffd1ea4-89cb-4f1e-bf03-d40175fffa71
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 30051d1b-bf0c-4e0e-9f8f-40891f276bed
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 392f8193-1260-4eb6-b3ca-433a0a07d63f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 88344e53-beab-4c6e-8440-6e0274e11d73
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 4359cf41-537c-4ee0-86bd-a694a92f93a4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5fffa16c-965c-4043-bfb3-7742c157cdc5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 4a8b9f17-c3d9-482c-87ea-d733ad071088
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fd45428b-141d-48fd-90aa-1e6bc05ed87b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 468e59af-5480-4da6-a29d-d6a087d2d3b0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 26c58359-72ad-4d70-9c5f-73b4031d31b2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 97a6afb3-4075-4094-8cb7-492514a3d532
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 80e479ab-9a6a-402d-8e8b-80832cda7cc4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 735868e7-ffe1-44e5-bf18-1bf27137eadb
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0e066b43-ab75-49f5-8214-bc3a65c511f8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 847c9a0f-362a-450b-ae96-f3885ae76042
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 53237475-33dc-40a8-92c8-f0550612de8e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c698d964-1361-47ed-9b35-f3c3ffe0f647
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: fb030a51-14d4-45c9-960a-988595a3d170
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4878525c-c7fa-4bc9-bcbd-7329e3608156
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: a71413c6-322d-4d9b-aa29-63015a86fe91
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 501b261a-afe8-4d32-b3f6-ec2a4efa73e3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 5d182cf7-e747-4d5c-ae41-5e421087d95c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e43419f7-b656-42bd-aead-e6b4a39a9b0f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: a62b171f-319d-4c7c-8cd4-a002c08c9125
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a856e684-5ac0-49d3-9182-4ad03e1325b0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 0fbf93fe-209f-4c82-aeea-b8432c47da58
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9d61537e-e9de-4af6-93f9-d14423b2a076
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 5363e7c0-c155-4905-84d6-1095bca2e6f9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e070ad38-fab1-46eb-9f4b-f6233eeac7bf
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: cddeeb3b-4984-4b9a-92c4-1cf395e0a2d7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cf7d4ebf-d5dd-498c-bbb5-9a0c6dc33d2d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 981b19e8-e104-4f16-b06f-9d9bad3c1f93
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6cb17f90-7907-47dc-8dab-725823385a2e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 31ad1aed-c264-4725-90a9-80c4ad66bd04
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d0ede7d6-0445-4b17-b224-f62e9cc87613
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: b12b9c9a-333c-4557-8874-d5a41c824805
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ff649644-a08d-4fcd-a4fe-6a546a8ba744
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 8cd82d35-621a-45ce-acf6-69e25bb7c9a6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 949fe33c-b741-4f10-b6bd-b1ee83767302
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 695a54d1-08d6-4427-9fdb-25c858333ff3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e68c5b8e-be19-4120-984f-6ae2d23dd186
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: a7ff5a05-edcf-493f-9842-2741fbe1e3ac
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 8c9e5678-f906-4104-8c8a-b11337693240
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 58d07fd2-a34e-470e-8292-b4e53f74080f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 1401e0fc-9039-4dad-99b3-a9082db5abc6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 11366e09-006a-450c-ab22-ea5f3bdf7893
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d8ed66de-73f8-4fc8-9348-990a720bb0ea
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 25ec47be-45f1-419b-b94d-52bbb1b08307
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 8836401c-09ed-4b72-9b61-04ebc897f538
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 9907725c-8aa3-4ab0-bec9-c8247a79816f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: bec79995-9724-4772-8d23-9f4dea33f5e4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 2670a144-ae3d-4222-956b-70f154e51191
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ea3f0f08-4a85-4a67-bfe8-e6b413afcd81
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 954966fe-22f0-477a-b8c9-f3a2e5eb9c1b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c045df56-123b-4660-9737-a3fc210f51a0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6036f2eb-e766-454f-b385-a31ed715d275
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 4e57c0da-46d8-43f7-b9f7-5524c28dc629
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d0684bcf-4fd3-4820-a190-69339527c2ac
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 9d4b6edf-ba3a-4c84-a452-c982f36bf488
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d4dd437a-05c5-4194-aa02-ea828a13d835
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: a24dd62c-93de-4a06-90fe-a7bcc9b7fcb7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 591c05da-cd5c-4e54-9d9e-9a4cbf851be1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 79933780-29ff-494f-aa92-5fe72d1afa2b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: b82c39bf-76f1-4ce7-b22f-d27414cd974e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fad82c19-72cb-49af-bc44-191e7a1940ea
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 26d0ec26-048c-4289-b9e0-3444c4555dbb
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 885ce18d-7552-44be-8ea3-0db83b2f50b2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f2a80eb0-6d52-4350-a018-fe8838dec376
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fa88a8d9-1ece-48f9-9ff7-5d6ba5ed1858
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 1071b358-b60e-4f69-a1ec-4c16f1c3408b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 72c79ae6-3236-482b-a02e-60814882b485
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e9d1b878-556c-48d6-813d-9527ce8ce4b2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 1fb85d18-ef47-4630-a9e6-3d2f91ffcecc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 503b8591-9e3b-4d59-8a4c-d87ffa3dba3e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 84b08ad8-df8e-4d39-978a-7ad4312e21f0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 65f7f051-1534-4f8e-bc62-2cccbed4451f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: b0cc9bb6-e036-4ea8-a2fd-d62b7e7f621e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 990caa70-882f-4662-b176-0cde3de8090f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 0cb429c2-6dbc-443b-8322-eac98b3809fa
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 28dc5f3d-49bb-4f69-95e5-afdd1c701659
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: d944b127-d9d4-4e6f-a651-47a11a805446
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6b8c2e7c-c7f5-46bb-9838-fb11b688911a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 0d41cf15-8a76-4ab5-89c2-41f33acd3e08
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ce1576ed-ceb4-4876-8308-a139e33cfbe6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 67a79803-d846-432f-9f13-236b5e5eb3c5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: af8161a7-c176-487f-bf22-91a7dd5ed3d5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 4300e8c5-0d4b-450a-94bc-6f999d91a995
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 662541a0-ffc5-4d1d-89dd-48a56791319d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 2305cf27-cbc6-4208-9961-f9f2371281fa
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 32348c04-3264-4c07-8b8e-3fb2bf8d4040
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5c1d1ebf-aaeb-4cad-8b77-4855945546f3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: e31409e9-2981-4087-955f-b6b74f8f3cca
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 64db3e87-e573-41a1-81a5-d32a68647d6d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: fb2e299c-9315-4b66-8fcc-eff0762beccf
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5c5f4c9e-0e07-48a4-853e-7744035110f3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: bb450670-d6de-4580-b03c-ea63c522fe71
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d966f6af-cbe0-49d7-927d-54d4cce7ff25
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: fc513d53-47fc-4224-9b81-4c992a528238
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 94e2b769-49ab-4f69-a4ff-5bf549799046
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c5243c01-d5c6-4699-88bb-b5f4096ef584
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7a459f33-89f5-4fe2-82f8-85e4a6542ded
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 83fb7eac-284b-49ce-b1b5-469fce3e0620
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 44d166df-8f94-40f7-be90-ea7b425d49f7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 75a0fc77-d20f-4af8-982c-0b40fc09138b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f559cf82-45bb-42b3-8cd4-71c81a4a5e6f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1e92919b-9f19-4bbf-a1c7-2a1291c6206c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fd91d84d-22f5-4179-8d06-9a060efd4ed0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 81f1895b-c47c-417a-9ed5-1fe6bc98c0f4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ea84aa91-783d-4322-9d61-e45335e09ade
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c5234459-3ca7-465a-9528-54bd381c2954
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ad867cb6-79d5-4e20-a3e0-3b77611f7670
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ebd4becc-c825-46f9-9f80-fe6b519c2675
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: be000a99-bded-4854-be7f-b23a871ead9f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 03a97cae-b0d2-49a2-bd9a-3d5569af4116
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c524fb94-8119-4ff2-91d1-f094ae2d18ce
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1119a505-4f2d-41d5-82c1-aa66b515f491
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6e8958d7-eca1-458c-a3d3-7ef9d4a3ecad
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: adb91a14-dac5-4883-9e96-c30ed84e16dd
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d188b6a1-8768-438f-a096-187d9aafbe7f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fd701841-c69b-48b7-923b-aa9a63f300b1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2b63686a-1dba-4394-bd02-d5f99133a5c2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dbb619c6-a168-4374-834a-eeb8057ec5b3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithoauth
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: a9a18d4f-cc98-481e-874d-ac22a1ab86b4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: b75ec64b-ff24-4c35-a9c2-dcdf7222b39f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 7b4b68dd-4eaa-4e97-aa28-af45e16917b5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 35d2b2b9-dae6-4821-bd3f-080cdc899bf5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0738f2fa-59e4-4e07-ad5e-95cdd2b328ba
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 13140673-d0af-4ebf-90e2-77922c623792
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2d97e321-e3cc-4de5-88cb-fc34c2077a03
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: f0eadd55-1951-40c0-a0d0-77c6b6dce502
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 38d5687b-809b-4131-9e60-61cee4d623cc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 491e1655-358a-4114-8d91-273797acbc73
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f4d1d1e4-3035-4e69-a9a2-9e443a1081b9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 9bfa5468-549d-44b6-8f23-cf7fc122b6e5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 09ea21f1-cdb3-4239-a3ae-6856f7d7974f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: ecef33fc-589e-4421-b644-e9758ee6d6d8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 73ca63c0-7e8d-4b1e-843d-cfa311b4e7d5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 69a1e3c2-31a8-45d5-90c7-89887b49d5d8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b62792e3-d15c-4915-ad53-300b1acef217
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: e79afe7c-be35-4119-9c6c-57a939e5a9d6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2d3d2b50-2281-4c1c-9b80-ea9302eab569
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d3a05438-7546-42ce-bb23-1997d19c6163
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: f88674f9-db55-45ba-abd3-064e9538ea91
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: af3ae555-d846-4b1a-b17f-0ae110cd0fe8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 1ae11089-0e4d-4aad-bb2f-63147c14ea5e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e62b4c81-bf6b-47b0-bac2-0bea6853d763
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 8770ca2c-c76b-4701-9def-068d507b2272
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 50754c89-76de-4ae8-abbe-1605e1e5f0bb
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: d4434eac-5611-4ba4-b70d-52e5ad57dd3d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b8d969ba-213b-47bd-9630-2a1002c0c3db
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 9f8d4990-31ce-44f4-b5ca-02d9ca092a2b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8e79f533-d9cf-466c-95e0-2db01ebf38a3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 96d96338-8868-49be-8d06-c0ea1d8581eb
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3f55f251-6fd2-43a7-b291-5339a240a5e1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 6788cfd1-1916-4c05-8032-1c1b2e050665
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3f758065-b846-4253-ba44-801778321bb6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 7b0b44d2-834a-4825-80ba-49c2726a9dab
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 675cf157-6038-4740-891a-8c62938c71ad
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 6402646a-adda-4b83-b84e-28c13ff1134e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: f8d1ae7d-1ae1-493a-9932-0166c4a88cfa
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 87741e95-bf43-41e8-bc8b-5e2cb859e411
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5c782114-1ea0-4b1c-b009-6a467d970538
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 18dfcd6e-c6d4-4532-907c-a77eb8e47ed2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 03606b7e-beb4-4a46-8977-92d030b2bd7f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: fdf9edaf-c15b-4c7e-9447-9c5f1b58019e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9c2fde8a-f6f8-4f5c-84ce-08c2bd8691b4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 2b96d426-3e27-4637-aec0-93a7ed25aaba
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 93c13f47-1553-4a30-b8e3-c91d7e8135d2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 9409b4ce-1aaf-4b79-918c-33f7b7a32eed
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: bd3b4f99-e4f8-4b86-8380-175f28861800
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 2b9487ba-bf67-4586-aea0-de819f421e68
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3d38faf8-7d96-4799-8fa0-48bc1a4c7a89
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 46fc3b25-ef25-4977-b111-86fb600f72f1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 35431d25-b9a0-4d46-8475-b643bd826748
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: e64097a2-44b5-4d8e-82e0-1e654b44d870
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 7050c661-7726-47ae-a8d1-a8df15d5347b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: ed9a6da0-f4e2-46e5-b9f8-e30b6ee7d5fb
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 96520505-3e5a-4539-af0d-15fadb40b87b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 8c07fde7-0936-47dc-9b7b-7d68c021d9f0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 821f987d-eb4e-4f14-9043-e8399c8559f3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: f303b146-3a39-4a3d-b17d-e7b2a700b184
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 413e0748-2320-48f2-b6c8-074789a744e2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 42998c98-5cd3-42be-9a81-b9a464817c97
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: e42e3799-a37e-42fb-bd0e-5ec6ebf9737a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b87aec5e-288a-4e74-aba5-2a8907a8d466
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: b69b4f6c-c21c-43d5-93c9-9b481d0d3bf3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 07c1ce32-528d-423c-85e2-374501675387
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: ce8e4ab9-2f37-4119-8cd9-27d5448ead98
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 350e8e69-691e-44a5-98c9-fcda22512a66
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 08aac7eb-6fd7-4bd3-b523-1eef1f560666
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 3b2cac02-edf9-400e-ba34-0da468f6a023
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: da7be45a-dc73-4569-9eb1-317446af987c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: b35153d8-98b1-4976-abe1-32f690073339
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6b20837b-e885-45d7-a9ad-5b63f22dfd75
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 96d34c8c-d6ce-4d87-b2cf-6338aa454b2f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7e4638bc-0b17-4c5c-87d6-59ae061c7773
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0054ec67-04be-422c-ba76-949149fbae00
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 97daceb6-ea49-4c92-9d99-10f531fde9c7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e411e40-4a0b-4288-af08-ecf797fcd1a8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 8f4be2f6-743c-4ac4-8045-908aa3658c69
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fcc2248c-0bd1-4355-95f8-249965e0399e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 30cc12fc-fdbb-4e41-b61c-d05ef2a1cd96
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 69d3c4bc-a0a6-45f3-adb2-483d9a525bbf
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: f3779503-fca1-45d1-b84b-71b19e0df886
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f0ba4e4e-e5bd-49dd-8cc3-fd8b5eb90a55
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: aff3784b-f269-4d25-8dca-c6cb67cd3d5d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6c2355b0-47cb-4fdc-a901-ceae6c7c8e10
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 3a586d5f-ba89-4ca8-860b-24a1371e71f8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 98211484-0c69-47e0-96f7-c2b8b84db987
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 6180a23d-c1f4-4f89-80f4-b05f6a744ec7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 59628431-e84f-41c0-9c19-e6fee5e227bf
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 27cabce5-07c4-4c68-9917-54594064e711
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 9d5e99c0-f48e-4303-99c2-d570846bd431
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 9e7f0b86-fbe5-49e4-b3d4-2e8d27077386
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: df6ef4fe-74d0-4c32-be88-9b1eabc6aac4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: ca824136-7230-45a5-81aa-547498a3f576
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 36c7ef7b-540b-49b4-bb1e-45a8a647673d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9231a1f5-d032-4aed-8fa3-437dd241d9d1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: eb37da25-cdb9-4733-a249-f579124241b5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 17110e48-44ef-42f2-a2ae-0754a4c84d6e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 836cd590-acb1-4591-88df-0c4f98ae4b0d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f402c262-24bd-4c76-94f3-7f7e52bb73ca
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 1f83efb2-64d4-4658-8158-b1e91169475c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 236e4c29-68eb-4f56-b12f-4635db1cdb01
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 35346097-4bfa-4292-84a2-48343d65b04d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 028d2f72-3c52-4ce7-ba37-a1ee06dfe1f4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1e40d241-f48b-4563-96d8-cb9fa7b0dae0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f99ca7de-6387-4e61-899a-72046d45a318
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fec6a324-c60a-4b42-8fae-0ba1e069aba4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d95223da-264d-4468-876a-d1856199c553
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: cf90a483-b95e-4033-b358-e28d8e942116
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 59d0edf6-5ebc-493f-a8ed-2d233c766154
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8a59c342-49d0-4edd-9ba7-cc84b9b627da
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 20f274c6-c3ed-4e9d-a943-de49070a1b4e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 09be1092-5a7e-4c45-9439-7654f7c7ed4b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 148efc8f-265a-46f1-bf82-ce215abd8ffc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8f4f31bf-c9a0-4875-a35c-91c4c9cca571
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e6cc505-251e-4302-ac5e-fae7ff02c1a8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ad417ff7-cef2-46dc-a918-9373fa6e71a3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 66a2be77-8929-4a35-99ed-2dfd0d8e5a30
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b1f1a4fc-f728-4d68-8e7c-360d0eadaf50
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ff1d38ab-ce2b-4dd1-904d-16e0e9622266
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a02a1d2c-c41e-4915-ac8c-c14f17a4a158
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e2e70733-9746-4a7a-82f6-4eab07468583
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3b2a43e7-35dd-4c2a-a258-319fb9ae8980
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ffe5f258-20f6-45a8-8255-8273a425ed23
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2b96c7ef-e3a4-4750-88fc-785ad043de04
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d1f878e5-d1d2-480d-870f-70ba8f0b6d30
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0a75b9d9-6b92-4a74-bbfb-63fbe50461b1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithidtoken
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: bea5bf32-0b5d-4437-9020-bb94aa7ed611
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 37d2e4de-e6a8-499e-8b3e-2e4c3280a7db
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: bb0ffdbd-0566-43e4-bb48-e261e87d8292
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 73d364cc-de90-4c51-a963-c9fde2be2051
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c3b0309d-cb41-43cb-9cdf-81406e1081f5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 742f233d-038d-47a3-b189-9b7133fb0f18
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ad32db89-b5a4-447f-940d-0642e84f78af
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 45db96fe-2367-4467-bfdb-f3a575a2398d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1d095e75-925e-42c3-a660-363754398037
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 82df4a85-fd5a-414a-a62f-8a5fefa05a9c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0155959b-8c8b-4469-97ab-d42d9c2f366f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 34b37105-ae74-40b6-9396-f16ea71f43ed
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 92a237d5-c2b5-48d3-94de-6d060e8b5e3e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 5bb4dcbe-1b4f-4b14-9bbc-41e65f23f9cc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 34568357-fe0b-444a-aa51-f2386572a381
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: e3f2f20c-79cf-45ce-ac50-9f95f9317f75
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 44d294a4-e109-44a9-b53c-67b276de95f2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 14761036-141c-4463-bbda-8f4069069a6c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a534a817-0103-4dd9-9018-f6a5c4031cf6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 94d9313c-ae99-4831-acf8-568d85dca62b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 39794b68-a1fd-469c-b779-2c4886d1f61a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: dc1c1af5-e277-4b88-beeb-68783627dca6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 3ef86cd2-2bbb-4f17-8bc6-f507a44a1e34
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1ee24428-da16-4033-9924-0d57781bfc6e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: fcd7252b-2cf3-4c28-8a08-31cc2f6b0c94
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d045f1b2-94bc-486f-9d39-653c612a89e9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: ed2d5be1-5b0a-45d3-88a1-52fc31a932c6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6de849e1-a69c-409a-8a05-fd4bfd885f8d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 4ca6a800-e5fc-442c-8bbd-c58aafacc146
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1466eddd-9256-4ee4-a388-544e5c379c0d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 8ddd4d11-8442-451e-a5c0-c302543b6d9f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 40933669-099a-4b0b-a867-fefd32838d67
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: be4b2f3f-93e8-4f0c-b683-544664613e57
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c14814b9-c35d-46f6-8999-065df04f2d83
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 7aece353-de79-4299-94c3-9bcfd34d843e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d779486d-9480-4310-980f-9ffc1a4358f8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 443456f4-90bc-4844-8060-cdb806128989
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 56c9f8fb-71e1-4b50-ba03-bd7f10c757b4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 81d63b7a-b02d-480b-b352-55ed88afd26d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 97392ce5-cde0-4be2-be28-5fbc51d905b0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 2d8ce95d-a43f-4040-99ec-59721a42fec2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3447136e-f3e6-44dc-89bd-6ee7c8189955
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 13f9120a-72e7-4675-ad6a-55092762f40c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a1447b38-1dcd-46f8-b6c5-216b0585f166
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: db014451-9a86-4b81-872d-ca5ea59d7394
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 4d6ddc5e-4007-4782-b9dc-0b62aabeefec
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 437da5c1-40cb-41fa-86c5-2519a8044ada
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e465107-c0e9-4230-980d-24f7fd3d1edf
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 9ebb05a8-b13d-4a53-bc02-12b05c5b7fde
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ddeaec4a-336c-4ae6-83c3-26f9a7a49ba3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 493e0195-7752-49cd-9590-f1af6d35022b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2f076d2a-5a67-4c7f-bdd4-deeb378a6fb4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 2ba13756-739f-4586-a430-c99489cea9fa
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 74d46107-7a80-49f0-b2b3-20fefaeb6ecf
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 2df2b51f-7c87-4056-ae52-91b71c93ba4e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 50cc2eac-4879-40f6-9127-48e149b30317
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 478a8f09-ed93-4e92-b505-993667c54fc2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 621e010c-b985-44eb-a558-af28933bd09a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 484270a4-ac5b-4ca8-9b67-cb050486cf85
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 38625334-1e04-4c1b-8a19-7d2e2421a83a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 61f55b52-01dd-4ef0-9120-ecd1aae2d0f7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: e802fdb5-accb-4d39-991f-e007b3b6d531
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a55855bf-83d3-4c61-a7f5-d9308f4259a8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: a4dd4f92-80af-4e58-885f-62a9c1c7f3c4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3bf2a676-2d5d-42f8-89df-16cd0ce38d1b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e997a21-ae03-4b03-8fb0-6449abc61623
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: a6edca9f-44ab-4d15-b63c-b4aec5b232c6
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 291e8a6e-b389-4441-a685-e107ca643c93
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: d20e4c71-4ef3-4099-ac69-98f8eb1e9a90
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d916fa9f-d434-4f5c-8fd5-0cfd8528b7c0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: f13c4a69-562e-4e16-b969-efc78dd31043
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 477dbe19-8eb6-451d-b809-0cd37f340d0a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 87aade18-c48b-484a-bc82-dfb89a786c9c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c6ed1dd2-9aad-4108-b452-6c5fe8ff3c0f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: c3c4e4fb-e824-4995-a0f1-a3bbba474355
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: dcccfe17-b852-467a-8f07-e6530a337423
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d15b4b49-3bdf-44d3-9c4e-575b8cd0a7a7
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 14ce9b6f-5ca1-4240-8934-20aa6ff39685
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b0e65252-d1a5-4189-a4db-46ff38f977a8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 7c0ed68b-d124-4e21-822e-7b1f326c8297
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 521ca6a0-7ce5-45c5-9248-f73036460a95
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 4917b8bb-0a1d-470f-854a-42c260d49edf
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f5a44ca-1885-4800-9bc1-bf079b526e82
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: c729abcd-01dc-4c9c-9bc4-fed69426a939
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: daf07fbd-b7fe-45c5-ab54-1d73e34a6a67
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 2fcdd515-2bad-4694-b227-403e6c7fb8ff
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ebbabaef-296f-4f95-afc9-d729862676cf
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 90d63f9f-7617-43b4-b392-c439a31a81ac
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0a125302-10f6-4bda-a5fe-c1d59eda8f78
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 75800239-fa01-49f8-9266-3749d5eed6dc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e6b82b2b-fc02-477d-b8a2-75a90c0afbc4
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: a3a26460-848b-4a8d-8620-1ac954fc178d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b9da127f-a595-4a8f-aa36-fc006178e146
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: f27c022d-59cf-40c6-8361-68f005cd7745
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 18e6db6c-64dc-4acc-a838-e40ed7348e03
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: edf23e34-9cc0-4a4c-813c-cffcc8355c9b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 602ce1ba-f370-4e4b-90c8-4e503b48dc0e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 48cead67-b824-4e34-a601-af1063e5ef54
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 9ffe7125-0544-4f5a-b491-c5fd188ce0c8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 61209444-d75b-447a-8199-abf6ca4c15f2
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: c2615fbc-8316-4efa-a098-37e66fbdf308
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ca0a3d4a-f9e5-461e-8331-dc1648d68783
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 64e4e4f0-206d-4d22-9036-920697ef8a1e
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a3010ffe-5463-454f-b114-792660e3fd47
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b4572a4f-4110-4ae9-a7bb-c54b66e5ca3d
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 04c71e60-30e3-4be1-bf23-5a0b060e8416
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 65380b84-be33-4b6c-992d-cad54f661017
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 76c323b9-3992-4ff0-8c64-5b683c44495a
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 044e3ed0-2202-41d8-8315-95abc7cc5d46
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 548efdfe-3224-44c2-a30e-26769e9bb168
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: cc973627-3dde-4bb4-8970-4c6205fa0a8f
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e2cbe004-07a7-42ce-9333-b1873c6dfe19
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 640db28e-583b-498f-ad62-704d1cfdf72c
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8399170a-38b1-4ffc-9343-73dc3d8bdbf3
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 99961a11-45be-4cb8-ba94-afe527ae44f1
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 822c82e7-a552-429b-b28e-379f9e17b9c0
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 86241907-eaed-4d12-9485-b2352987102b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d79b3193-96c6-49d7-853b-986baef353a9
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 714f685c-ec97-4b09-ad25-8ff6c299ce31
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6122a053-0d39-4934-bcf2-3c6c6455edcf
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 36783ec0-242a-47a2-be06-c68cd2b720a8
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 68913de7-1ce9-4160-a0d9-98a25be1754b
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 46d4c485-d46e-467e-b3eb-5e9b2eac03a5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 700c3f9a-7f04-41b5-b3b4-a8fa8b8c75b5
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bd205ece-5f92-466e-a832-54af54a25010
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: efa3cf7f-278b-4808-91f5-95c2e13ddbfb
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 83f9a6f3-fee3-43ee-b2a6-cd8e926f5ecc
Source URL: https://supabase.com/docs/reference/python/auth-signinwithsso
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 7a77b34e-54ab-4c30-a2d1-2bd6a71187fe
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 1500a644-4d65-47ce-804b-3a3220268936
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: f8eaa3b5-5610-459e-88b9-e6f72607ec0f
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 4d4fcdc1-196e-4573-8658-28d2e3329d85
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 76eacdc8-01da-4212-b0eb-3977d38da086
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 18b65427-0694-4d33-aba3-f7761ea4e3d8
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ba316b3b-150a-4e11-a57b-fb9788244fb5
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 88067809-7a71-4bf2-ac75-4d3ca9f6d03e
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 77dec137-3079-4a67-b523-9d1bbc503ba8
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: a4d27ca6-ee06-46b3-aa1a-83e820131c58
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a70a12cf-871c-4358-9519-95dba4f31b7a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: feafe636-0feb-41ec-b859-8eefd96d87a9
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 02863a58-6c61-4b75-9e92-245562d8b4f4
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: d8cdc1ac-955e-4df4-8eb4-b9fce917530b
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 10a5fde2-48c1-4765-823e-d57bed35c89a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: d39a8d89-c701-4d53-bff3-dc6de8c2874a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3ae7d2aa-3ec6-4451-ad00-56c8f48b6504
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: dd618bfe-ca30-4640-b992-449d18261ee5
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 12a149f6-9941-4dac-acb1-c2d1c93f551a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 1c177c6e-9306-46a7-a3ff-61966c3825e8
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 59ca6be3-c75e-4a70-86be-4e1e7f21055c
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8ee32307-3d3c-4b50-a58f-05029afba604
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: e58df6e2-f24a-4fdf-96f9-c32667d38a08
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f9dbaaa0-1964-4b77-a9de-d9302b641669
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 9c4b68c6-5d88-45e5-8410-f05a9848fea4
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b10395c0-5782-4578-9ebe-0eae789d5a98
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 6f5bdb6f-67d9-4161-96a2-e4f0d51acb3a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a70f4b13-0614-450a-bae0-0a452dafec06
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: c6869ada-bc63-4538-a90f-902a3d511fe4
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7947a13f-e829-40ff-ba2f-080e5736920b
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 028696b2-2a16-4730-878e-0fd4f21e90cc
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6023af91-6ee7-416f-9871-049ffa462b26
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 1adc2126-88b3-45f9-a269-3b03e534293e
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 368cef7c-1383-4fa7-ab2d-7fd8c0a7fc0d
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 7c69df46-cfcc-415c-95fb-0d3e1885b1a1
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 09b54ed7-dcf6-4134-b3a4-1f8ea254f3f8
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 9b5f3682-73a7-4506-a0d4-372516fe62cb
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 18aa4274-9f3a-4915-9200-b63919630177
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 07b48075-84d2-4eeb-8f00-8eabc22fff99
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 426388e5-351f-42bd-9a6d-0b117691547c
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 3fc124c6-6649-4749-9f71-76c5009206c7
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 36e444a3-6134-42d8-9916-bc3389b2a791
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 345e622b-fae4-4daa-90a8-92559bf1dec0
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7f4b2b3c-f4c2-4827-a723-2adbf6a98a87
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 1cf72c39-2b71-40f5-a957-dc209266d251
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d0e3afbe-1d4b-413c-a234-d38c4c908771
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 8d74f518-24c1-4c5a-81c0-4e3f3e7b98e8
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 7e4853ac-0ceb-45a0-b206-f3ab406ac187
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 8cea5804-5ddc-4883-a6d1-b293804fea8f
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d8169dea-dc46-4c12-bb6c-451fa7e58c4a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 0b0584de-3cb5-4d70-b55e-faa73e412ba7
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6d4f97bd-ad76-46b5-936e-645f223a9558
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 0441d3d7-3093-4d58-8535-fe811a679ce0
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 359e34a5-4219-43aa-95b1-f9650a2ea16f
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 9ad576f0-434f-4abc-8f13-152100cf640a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 47b4ad96-05eb-4bee-a6ac-fd545ba523b1
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: bdb6c3a2-94a4-4d7d-a31a-2fed8c6e9d3a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 11ced46f-38aa-4d92-8724-077a0ec06787
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 5b597885-d398-49eb-b3bf-b08444b483be
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9e6df2e2-dae2-4ae9-b857-0a56ca82310a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f8e5c01a-e67e-4bcb-9c36-35b59d50bd8d
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 184b7947-2436-43ce-8496-3c2c04f9945e
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cebe768e-dfcf-4dae-83ce-26d38c851d31
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 9f5a19d3-9ed3-42ea-b57c-f31c29d1f9a2
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5bd68c7f-eb63-467a-87ef-149d0ea33b33
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: a98b845d-11e2-402d-b3ce-e7605a526e61
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 9003bfdb-6acb-49aa-9923-872f70fdc23d
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b01be4cf-f25a-43c2-9da6-6ee16443b609
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 7417d334-7d1f-4634-98be-bfa6cf748428
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 42baeffe-6149-4f81-8595-5a8ae3891edd
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: cfc046bf-c752-45a4-bdb3-7aee5f94c339
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 05f7fe9f-1963-491d-9d1c-89936531aee1
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f3b8897-d4dc-43ab-9527-e21631f69792
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 32218884-61c7-4225-80b0-5b529f78ddff
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3f9fb5f3-4cd1-4448-8574-9bdfd51875f5
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: e92e718b-858a-4261-8d21-10333b6e8a12
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e4cccbb6-20c6-4e19-ab68-b3acb8b4242b
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 2a38a4f1-49d4-4f6f-bd81-ecc157d61b1a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a2cad51a-9426-4d0c-8789-916450f286f8
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 9ee491e3-3244-46a2-88b6-4ef419591cef
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 47fd5bea-5ab0-477a-9945-34189c6a840c
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 835217d1-c526-405e-842b-a371ff4cec3b
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2a5c7d7f-2ddc-4e27-b778-24d050d41d94
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 9b3a86ae-223f-48c0-affa-2eec26026960
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2c936cd9-7498-41e4-9b71-856486b932cb
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: f1da89b6-74eb-4b81-bb33-ca39d68f0137
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e5f92eb4-036c-4383-aa2d-a77f19658486
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 4c102f88-b424-40e4-ab42-4d81f43a86f6
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3150a2d1-45f2-4e2c-af9e-0513f263bc19
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 6afc26d7-4706-4210-8579-ba4464d959d5
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: f83f478c-b56c-48ba-9a71-c92ad6308f81
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: f34f79b7-4296-4bb4-ba4e-8fd886cb7bac
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a1b984b5-658b-489f-a93d-285d0f53dcf0
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 7874227d-bcb3-46c5-bfaa-b11606b1dbf1
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d63b2bd8-2be7-4889-8646-e877ec597b1a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 30e93980-55a7-4ed9-828b-a293c75d8e98
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 2dcff929-ebae-458a-b61d-5db8f185898a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 484a922d-f22e-4242-bdfa-14319b4fcdcc
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 8b0af24b-0944-4b92-bac8-576e062ee000
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fc57370d-5765-4ede-88ad-d9fd7c945484
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 59650f0e-9cbf-43b3-b1ab-c0d991839072
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: fb2b37f4-accc-4048-a953-731bda620417
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 28a14253-d416-4ab9-a13a-16f1ec9aaa67
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1d7db5e6-98b4-4018-a99c-c3fc57b04735
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: eeafb9e6-8b2a-487b-b603-a48e7bb7757b
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 395ef26c-3f21-4762-8554-42ffc67e2a59
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8f4bd55e-5041-4ee9-a375-8a3cbd2445af
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e2f6215a-e12d-4e27-8297-434eb6604b27
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d4764cbb-4951-4fa8-abf3-96b895cc6cae
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5fe6ee8e-7adf-44d1-ba12-050804acd384
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 86022038-0a3c-447b-aa90-d11fab0f37d1
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: cd6863a7-a43c-4877-acec-5095997dad42
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2bcd254e-3a36-441c-9d88-63afaf053590
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 93288f28-1cbc-45ed-a36c-6f94895007c4
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9668c50b-3e2e-4afe-bc18-b6b493d31bb2
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8a57f230-9504-4019-b3e2-1ba556ab46ae
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3d4e0d6d-00ad-45cc-84a1-fe12555324a9
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f494c254-b6cb-49b3-a056-7aff0324333a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ec2c04d2-478e-4ee3-bcca-452eb927c4c9
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7a26c419-f0fb-4d97-b5a4-2060bd7e4847
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 04791cab-6600-448c-8f23-5650fa48e4cd
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3bbf3267-140d-4b0c-b007-8216dd344a7b
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 73788eaa-b6d0-4ae7-b9d8-c8bac6b893db
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2bea346c-6aff-4d96-915a-2e21c246961a
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 230b95d0-d842-4ef1-bd28-0e634f8f4c9d
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 84123997-0732-45ea-9852-22987263204b
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: cc83d719-fb77-4e89-8698-8b39bb77fb16
Source URL: https://supabase.com/docs/reference/python/auth-signout
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: d03fdff5-8e76-429b-bfd7-a8cb9e1d7457
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 6da7a445-b0a0-4d63-ac87-438190b7df7e
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 6a3494f6-2266-4a75-a743-6a3a005bea48
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: db2dfbef-58c6-4efe-b9e5-15ca949c06b8
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6ca5f298-3ad7-4610-ad92-a8bffe979043
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 329a1b8b-b48b-4bb6-83d6-5d29e843ccb9
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e88b8766-3a55-414b-8af6-daa0e59c0fe6
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: f86d9258-34ad-4134-8568-8fd897e58a39
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d3676e9f-9b9d-4692-9927-0f6a136dc9a9
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 063c1352-9b7d-4123-be2d-bf94d2a1c768
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5fd8331b-6d22-4f05-a08f-adf8ea0546b2
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: e2dcd387-2607-4c4b-ad2a-970dd4c6611e
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 327568cb-a87e-4a71-bef4-febdce357726
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 66beff4f-5d7a-4de0-83fc-8093a8aee430
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9f04f36c-d34f-4cab-bfe8-f476504ce107
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: ebb36a2d-0033-4733-adfe-978e87129fd9
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f99e5307-43a3-4d8f-969c-0ef97481eacf
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: aa240899-a1a3-463e-b2fa-a735eade373c
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 09d973ba-6f67-465a-b01a-b2a8ad9696f7
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ce1c6f84-1610-4330-a76e-aca9f6b5031b
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: d77f61a9-35de-415a-bf7e-5d041c0e4aa7
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f0171399-a26a-4780-bab4-74b9f40349bf
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 125d74f9-0ae1-4b57-a878-2dab9e5220cd
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e47ccad-9305-4457-91d1-70ad2d4d1545
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 531423ce-1329-4bfb-9001-6b1508888c6a
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: be2f2aa2-a574-41c8-ba04-11fe3acf5761
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 00181d57-79b4-4868-9be1-fad8d0d92ef8
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 88627ada-5fbe-4f00-945d-7952adfcb6e5
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 82da6a52-9bd7-45be-aaae-39682fd859f8
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d8d8eaa9-850d-4555-a871-80b957ea8ec1
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 7333edfb-421a-4d20-8091-b4de4b3e437a
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: bbed8700-cb99-445f-bec9-4226ee786872
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 85b8e38c-9cbe-4cec-9540-70482465bb4c
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0310a0a4-223e-4125-a834-ebd1c1bfde03
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 8d17c129-1625-47ec-a478-103d330c414d
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1b12ebed-ed52-4a62-af87-4a8cd8340d21
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 3e32070b-feb6-4b64-89f3-91dda2bdb9fd
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e606b4ea-bd5e-4584-9cc4-d5bea3a53d9c
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 33f8f0b2-40c1-4baa-95c0-fb22ceaf94d8
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f48f01a1-98c4-4424-b7de-ebf935665df1
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 4d17aa8c-be85-46db-a043-aea6edfb56cb
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fef201d5-b596-4c21-95a1-78828828991a
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 7f7ec7c7-d35c-4879-b87c-345cbebc968f
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c85c2309-359e-440b-8f1d-19546766d664
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 28d7368d-5bbd-482f-85f3-699eca6b4937
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e7f02a9b-f0f2-4dcf-b018-5c686fd1dd0b
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: decf30a7-a0c0-4d6b-a2bc-021986d13ebf
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ddb4be0e-07c1-4541-baf5-0110aa12c11f
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 177cb847-9c42-4e03-9936-ea71d72ec1f7
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0ff27899-602e-4128-a4c5-bf180433d422
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 1564bedd-c12e-4f1a-ad47-2a321e535399
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 28f527e8-ceba-4aed-a014-c55631658417
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: eccb2a66-12cc-467e-80aa-ce283449ae52
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 1549a901-7934-4721-9ae6-75ceb318a233
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 35bdf3bf-843a-4952-9a99-4828fc26195d
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 75d112d8-75b9-48d8-b2df-08d2ae9f804a
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 36f1c18b-37d4-44a1-a1b1-088a20143fb0
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b47f233f-7413-4af1-bc1e-e5397755cc39
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: b7270e1a-a21a-4fc7-b7c4-baf61849322b
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 18775f43-3758-423f-8636-668ee7c97c5c
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2f7c282a-e7cd-49bb-8733-85dc90a44ff5
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 85abe5aa-2714-42d6-9338-e5cfdece4ad7
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 44bde108-a06c-4f38-81f6-9561298d3856
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 633feb74-9d97-4fa1-9b35-fcfcedb9f36d
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 59adc2f6-44de-455c-b094-8be2b025118c
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: b9bc35da-02dd-4972-acbc-cfa8b44b772e
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 24c81842-cbc4-403e-9997-8a0ee5b876a8
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 016a2617-fbaa-4f95-93ba-7e2d9fda9ff4
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: bf7bbc1b-f19a-4113-8951-78df97e05f41
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 93ff823d-7e2f-4cec-8d74-f104d4b444eb
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 74651e8a-8310-4e12-929d-35858e7712d4
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 511c7cf8-56cd-4bb5-807e-600dd27efa80
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d83e4bca-4797-405a-8ccd-889609a372f6
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 64d8b415-1994-42fa-a1b7-1786fa1bb9f9
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0a9b3253-2821-40ff-9823-987f16d921e0
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: cac176a2-09ec-4460-a504-bc0d3eb115c4
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 96c4589a-ba56-42cd-b110-39379cbdb2e5
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 7c5ecabd-8b74-42ab-b3fc-3e9c475cb3b7
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9d999188-6a61-442f-8432-efcc70800973
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 97264184-15dd-4cf1-ab43-cd5ac5854bc0
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 35ed85b4-a8c9-4b1f-9b9d-25976b0dca09
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 61712104-9799-4f13-9466-ed50e08a7361
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a725e0a7-d82d-42ba-bd3a-10df790fc3c3
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 946b62f5-6a01-4689-9365-757328c08600
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d5c86949-448a-4786-af42-dc000c245eca
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 4fe92a79-b18c-49ad-b328-2d910d3fcede
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 7c498f75-0a44-4459-be6a-1aacf8b4d05b
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 324ef5ad-1dc5-486b-9393-7cf6476bfc98
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8b3460c7-c3e8-4037-abec-096751100bf6
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: fa57cb4b-be96-4753-a15b-07dee6b89063
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3319ad97-dc7e-4b3f-939f-b39348d9efc8
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: bea8bf95-6d90-48be-aa88-48c2dc3d752e
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ef3deec1-d767-42a5-8a65-8cca66d01f2a
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 7c90a4f2-3d70-4743-8c76-6ec10e84e6bb
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f0f647d-773b-4277-931e-fde338dbe1ea
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 702f695d-3e88-4553-bc23-7d79f604f78c
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: deb30370-b949-4834-a1cf-ce475c11c840
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 26b7ab03-e685-41ba-87bd-4cd9161e0a75
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: aa6c130c-8a8b-4925-9901-ad7d32a0ee58
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d9744f21-5ce7-429c-92af-9b375df5fdbb
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: b2cc0273-316b-4b57-ad1b-6677f4f82f01
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0a8c1e04-d4b1-4426-bbd8-f67f07649d83
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 71701980-9dc2-4809-ac3d-b00c0387abf5
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6fccd273-fc5d-40a4-9eac-eb64294c31f4
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 58856ab9-edac-4e83-acd7-c6b151122b3a
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2dc4ae32-3aaf-4401-9dc6-5642f7fa035e
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c3c7db9e-1435-4c22-a60e-8438e9ab6b4a
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6d69f80b-1939-4d91-8279-ed5b17957414
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3dd1048c-c4bd-46f0-aeff-de7f2a84d4ad
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5738e6ee-be37-4247-9461-6be732f75a00
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c1e805db-d3a0-4dd0-9abb-c5df18563433
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e7a380fd-46d4-4819-a805-3f906eec90a2
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7d435ea1-603e-4818-94ba-ef2952ade821
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fe5a8531-199f-4b2e-bf33-ce33396f258d
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: df5fd80a-0bd2-485b-8ac2-2092f6da0ffa
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a8e61b31-c765-4619-86cb-a9743ed68542
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ed2b1cc1-65ab-4ed7-9673-9baa5e4d5467
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dd4563ad-68a1-4a32-9894-b7a28e221dde
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 398f4cf9-dbcd-4697-847b-acc5d553bb17
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e1889fac-9839-4e42-a7fc-575d121b6fa5
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 49296fe3-96f6-46b9-a97d-9d5dad34d8f9
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 28d66f19-3475-4e57-9a29-8ea580d1d2dd
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 30f10e5d-7b2e-495d-bbc8-dc9a179c6210
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 94412b01-95af-4c80-bc05-7860675dde2c
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 71009c67-9beb-4a4b-b1c1-88e099b9e522
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 279e8855-d675-4687-a28c-9df25d0a09c2
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1f3215e0-09b0-4a63-b6d5-b0c8c19955f7
Source URL: https://supabase.com/docs/reference/python/auth-verifyotp
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 277108c9-b5c7-4fa9-a45c-274443dc1349
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: bac43e52-efe4-4cc6-b300-573b43e748bf
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: b1879797-ee3f-4050-a637-edbafc458a67
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 59332680-40f2-4a96-a48b-b9d6e1072e28
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1bbc2440-a3e8-4141-bdae-31eb12b3c8f0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: d492fba3-1e3c-4f29-ba81-2b56b80a3210
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5add90fc-f0cc-4018-bde4-a0ae1c47d015
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 0d354622-686b-47ed-8cfa-fc06559e3a1c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2cc4c7ad-846b-4747-bb90-f14df49e4d74
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: e4e54111-6154-4ee3-a37c-f6935821922e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: bd8cec5d-3dfa-410d-a5fb-e63e08fb8ebe
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 85681bd9-66fd-4b36-90d6-83b1e77826b9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c48ef7d0-b3bd-4fb5-9ab9-e460923b8f86
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 1e048416-7004-4aaa-abda-ac85894f5165
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f77fc0d-2639-4267-a7a1-3d54691b15f3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 98c3ac33-09d9-47df-89ac-357869d32a88
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6d998b98-e11f-4fae-b0a6-61546eb04870
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: ba24c757-94f9-4a53-b7be-70bfda71e3fc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1d1d19a3-2b9f-4d67-8f80-8715646e1515
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 7b5413e7-2036-4cf0-9acf-1035e5358b5a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: fe89474b-ce28-4c20-8cf9-ee19a7d95987
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a54b3f7f-0548-4fd6-98c2-835ed05be6a7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: ab111a2b-cac6-43a6-b83b-0a0b61693277
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e22d0fc6-a4ab-4165-84db-6613af5a2b25
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 47c5c9c4-dfc3-4378-a3f1-fcef6dca059c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 20acfadc-031e-427a-a393-df700337a7a8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: b7ce2a0f-260f-4e12-bdf6-f1fd03f52bfb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0ae0e2d0-ab45-4609-9e74-7d6b7d164ac0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: ebee4027-0f97-4b0a-b0f1-635bd58f624a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a40850ed-3ad4-4a14-a0fa-789ce5d9a40c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 79d5d40d-3b2e-4fa4-93e1-48adb9fa0758
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 774df193-2a92-40df-98b6-5f93f4c7dc9a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 1f10771c-e3fa-4158-9d30-64558d0068b0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1baa79ca-c718-41ce-9e13-1e3ec8c749d5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 00ab3f64-e56c-4a52-a436-31831ade3211
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9b40a265-5301-4656-954f-d97a2c21922b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 8b3b9fc9-f7d7-4a26-9b5e-e312ff56d06a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e836a023-938f-42f2-93aa-98a9a0c6422b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 2fdf8bb6-2e96-43da-998d-67743568dc2c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4b336e09-e842-4632-8ba8-eb854c854b86
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 945de6a8-cda7-4aa0-8f48-d2082e9c1f4c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cade3641-3feb-4348-b77f-dad1a840c321
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 16376599-3a6b-43fb-882c-0926d98f557d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 53173754-07cf-405d-abc0-34aa479655be
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: dc4eacc1-d2ea-43ce-b352-26ff7942a678
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 88c652cd-2611-4203-a100-45154503fdf1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 2d81b1a7-d4fa-400d-b34e-b209ed542f84
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: acf2092f-a9d0-4449-b942-fa87e91e4d7b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 62e459db-db36-4c1f-b423-90f357ea905e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3a295e86-103b-4032-89de-640d00122093
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 2d14d0d1-69a5-46fd-8fb1-cbaee91bbc5a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0e879c7d-7f01-43ae-8e09-0df579afee43
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: e2b975f2-6881-4ac7-8962-5f1ab8127d1d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6bc6d087-56e5-4c8a-b07c-719d91b39a54
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: bb075722-5c29-4561-92e8-b637c3a39f53
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 05a5a26e-10fe-480d-8b2a-4026a2e6b982
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 73c0f24b-5fac-4710-b860-92d93a416a93
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9fe45b74-9b24-4089-b00b-b606cff64338
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: a939871f-a548-4ace-857f-b643d5bdbe5b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e30be7d0-89b1-4675-a8e4-14a3b6607f95
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c9a4cbd5-5767-4996-8ee5-24fe18cfcd47
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: bd9c9fe5-3c38-4d25-9f6d-f1c0c1fabb64
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 737f66bf-cbcc-4be2-b9b7-d56460002e8c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: c7351bf7-9c7f-40cd-a6bb-6079121e9eef
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 79c60875-2bbc-4804-b44d-67f4c4cbda52
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 853d25a1-7fc7-4ade-9c8b-30f08c6f036d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: ade986e9-d216-484c-98e8-6ee8889f5209
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 82ba27db-cf53-4c6f-b2a0-f19b4bc2a863
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 9f9c66a4-8317-460c-be6f-8bcfa9fc8d5c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 737efbac-d09f-4a65-96d4-03ee5a52e4d0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 6f0bbdd9-476d-4236-a5f2-628352f0aebd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 663e583a-09bc-453a-b482-eaf78c6530b0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2189cccc-dc43-43a8-9c93-fcb632e253fc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c4476cfe-0b2e-4a06-b173-75cb64606c32
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: f5d7ba0b-69ce-4eaa-bfae-ae05b11ccc12
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: a706292f-f5fa-4da1-bc28-437974f04207
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2262e31b-ddd8-4b6e-8fe4-a07b7044c6cc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 94390bf3-0324-4d43-9b43-fbc5fe29bd56
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 324ed5a3-24af-49f3-8892-fd854fdeadb9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 1a7b4969-e58a-4e62-9b76-3781f8195554
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d4aa5884-5e57-4eae-99fd-b6337b0b91cc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 4677db83-a541-4f37-8d37-ba5839ab8de3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 32e03dfa-415e-4bd6-bc5f-8972370b2738
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 6464832b-bd3c-4adc-8875-aace6fcbf91d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7e88e031-0a5a-497d-9e36-0fca79866407
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 2b19e94c-9f9b-4341-9154-856401f2f9a2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 4edcf2d4-75cd-40d4-aaf6-65e188cdcebe
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 9ad6d40a-57a6-4b1a-8e2b-a2ed9af6265b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b0e7ead6-2d00-4ff4-a414-a149c432923d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 4f74775a-729f-4402-8496-f4fd981fdb52
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2ce13f29-7c58-4ab9-aaa5-21d1b75ee9db
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: d369a153-6be7-44bf-b707-316e28ed2137
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9d0af395-6d11-44b6-8fbd-6321ad15583e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 78eda55e-0f84-4ad4-84ee-7870f4b9d747
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6e35c85f-2a5e-4b87-aaf9-4103b1614629
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 008069ef-a568-4034-8fb7-13783f4c3b35
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 6a14951c-bccc-45ec-9806-a5b9f0066f26
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a7ad2123-7200-4ac0-826b-25f13a40b3a1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 5aedd60e-288d-49aa-a8ce-220b20f08cf2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c98cb485-a51d-4b32-8f92-290798a9aad5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 710e3e31-b92d-439e-9334-aca7e2a2feb3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 99c8b236-246b-413f-b099-af5214685a8b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: acab13db-23c9-48d9-8198-dc429f976af6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b634ba0b-62c4-4ac8-ad01-c9049061b367
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a225e818-0a34-4201-8c94-c55ad416f844
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: faf1d89c-366f-4409-8595-53eb46bbc7e0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: db4bde09-a296-4033-a105-bfdae62d0dd6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 250cfa55-d756-4df9-84dc-444245b76f1f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1036e739-fa17-4809-aa49-94ae55e62a7f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 714512a0-7cb7-4d69-baf8-5c14a88b89f5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2f09b0c2-c6ce-4802-a474-ad5e4489c0f6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6d099069-70da-4421-8a9b-a5dc80d2e2a8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 12242bae-3195-41b9-b3c4-5ae87aa2800b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0bacd4a5-665c-4170-8baa-523f8a37d203
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 77b74696-4feb-4346-86d2-c38d15361082
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7a483fc3-402c-4fc6-9aae-c1cb36b8fcc7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 08ef97b7-29a0-4c3c-b8b5-ed275a3a4293
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e5772af6-f564-4e5a-8c79-2e9f8832a6ab
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 16d99dda-3eec-476a-853a-6ee51ee80ed5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a1be46a5-2289-4bee-8c68-df5bd09f2f8a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 21ce3d5f-b2ae-4bbd-a8a1-fb0ab746cbc2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: eaf9f652-f9a4-422c-8b4b-7fd676e65609
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c44f4854-f4c4-4b90-9843-73c5fc5c66b9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9441467f-63ed-4714-9af9-6ce60a3840ce
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4bcb0288-71a4-4170-9e7f-05e0c5832340
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 17c26000-4dde-4cc5-9354-1e47b89019ec
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 64ad836b-8e78-43ca-a416-0a03b5ec2127
Source URL: https://supabase.com/docs/reference/python/auth-mfa-api
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 7e383621-2444-4f03-867a-4538c3093859
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 18aa3eb9-bd31-4b7a-a986-82af0f828b7c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 3ad73985-1a27-4a3c-a59a-169e2c7259f1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 6c620623-b897-493b-95f5-5a44b2c5b415
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 346e9364-ae00-4c66-a7ea-7775f1f29815
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: e0e130bf-906f-424e-8478-21dce25e75c1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: aff807b6-3860-4d6c-9363-0d22bc59b6bb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 90715525-7f9d-4b0f-82fa-f4e76858608e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d95e4cff-7732-4096-b366-c24c579bc5aa
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 82681d45-4ca5-4fba-8e0a-1186b2732235
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f40281b9-b656-4c63-89b9-34a1989170db
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: f8aa35d9-2ed9-4129-88d1-8676d1b3384f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c4b6d62c-4d0b-4740-b666-2cb7b851c72d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: c0414c2f-0603-4312-9c95-6c803c62ae75
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 240dd02b-e8f1-403f-aaaa-485230db073c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 21dd285c-1a2b-4708-a92a-f8d9345acc19
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b04ebd9d-59a7-4a18-b339-94eb122707cd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 2b5d1e7d-aa7a-4b10-b60d-1144c74a640c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eca3dbe5-f4c2-4ae7-8752-da70059b30ee
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 457c42ae-6ed9-4f49-8a7e-10ba93d130b4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 4aa8929e-fe65-4672-82df-378e52798d29
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 11f07de6-c42b-4d3c-8ad6-f7d2514e115c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: b4f702ae-76fe-4cf8-9809-a14d754847d9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b69647c1-eaa1-4b3a-b26a-8257dbca5944
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 8e7105f4-a6b8-4a3d-b7b2-6302bf8a4c5c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 7ba7a840-ffbe-472e-be56-c2b1c47323d6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: b30dab51-9b5d-4ec6-b2ba-965ea5f2c3be
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9eabdb17-746e-4f47-89bb-2451da562c60
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: cb3d71f8-654c-45a7-b035-e335cad084a7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 33e9eab7-4164-4dcc-8269-6abf526d3895
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: ae723ae8-bf84-4bdf-b0e7-9c48967c4e1f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0feb380d-5047-4472-8ab8-2898404aef88
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 76762bbc-62f7-4d8f-a75c-c18451caaeae
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: de20d05a-0bf1-484c-8c10-0f9510f1f49c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 622a8c6f-efe7-4dea-86f3-bcb3277e6074
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 72d15005-3d84-4a74-b241-7e365ed4b80c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 47cd8207-cf4b-4cdc-9a2d-1e5f26ba567a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b9d8328a-c0ef-43e2-8178-bb4ea77113cb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: fb068273-f9b2-4aba-98bb-7217104d3e59
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c4f7d5c6-9374-472f-a4f8-94ad44a2f428
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 61c7bc48-187a-4d3f-9acf-39445009c38e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9b2cc63b-241b-49d0-9609-740f1129431d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: af6ea02d-27f0-4a06-bd91-4be9df7a0c99
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d7336f52-b29e-4f88-8883-2c57379c4ae5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: fc6962f8-0556-4404-ae90-104d8a628c92
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 952c7a05-c87c-4b4e-8236-b602d5b2fed8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 7979afbb-d20e-4384-8c6d-93b963957d98
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 466ddb5e-8b7f-4c22-b48a-e4e00b244a7d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: e79ceed7-ec56-4119-bd46-68d3c3dbb1b6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 9842a1c9-e3cb-4e79-96d6-7ac8b2747d74
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: fbe0b8f5-58a7-4257-aa27-1ae88123c335
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 605e6cb4-d06f-4d4f-9d77-37348a4554aa
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 36ac25d6-9d5f-4b59-86bf-01a19b83fc5c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e5d4be84-8678-4e3a-a672-5f69a152f9a6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 34c69efb-c51a-455a-ac98-d24457c55580
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 67d56af1-65fe-4f96-9380-bc9287f9aeb2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 6261f8ee-4f51-4e05-a42f-b8cf2e503534
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ed965bd3-fb34-4586-bac1-1a3bf6b09cff
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 7a3b275d-8385-446c-b7f3-b2cb56eac4f6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 67b2940e-9dee-4f60-8fc9-f21d6af629cd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 442a9283-e655-4f6a-a440-2d9c24a10be1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 20d389dd-533d-48a0-b868-562f05792967
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3b4e3d24-127b-4979-bf69-a68a7d85f473
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 66babd0b-5a6e-42bf-8474-1b13aff6bc3f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: de3799c6-c0e8-4c75-a4c8-74c4e2b46cbd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 21760e0a-0b20-4fab-8a16-fcb64928b3ae
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: a7167767-786b-42ef-948b-0940eaa92c55
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1b61ac48-fe98-4c5f-8e60-1135324572ae
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: e8e3c833-4446-485f-a1f6-979d40532f05
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 07bf3255-621b-491c-9fbd-55f8df39352b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 6f678d87-9387-4007-928a-ed4ed68870e9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8e80973a-0e00-42b0-9214-6314de727ff2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 601021de-8860-4bb6-9f17-2770f047d82f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 89482683-0ee3-467f-89a8-2ed1f6f39f83
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 63e283cd-43d8-4f0b-ad76-f034754e596b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: b9683b6f-0264-46bb-a057-bdd01bb0a53d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 795034dd-5403-4985-b2a0-cc2318a96894
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 033e5daa-fc9b-4410-9b75-0ab1c1fbc994
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b30dad8f-cd84-4a90-b50c-1ea4856b9121
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 788dba98-ed67-4d80-a25d-e6c9ededca95
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4c7d5bc2-852f-450f-be6f-78313174ce95
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 297f537e-cc41-444f-87ee-6532fc94c5b5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4fc3d958-7dce-4f1d-9604-9b6d33ca3359
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 1aa0d7ff-ea9c-459b-a2d8-7727cb8ebb50
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 77138e6e-fe2c-443a-9176-2e537b934391
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 5fb2e1e5-05b9-4726-8877-bfa232011f5a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d8d9cd6e-16c3-4467-acd0-537ba63c9fcd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 3b21be08-3db8-449b-9eb6-79ec86972841
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fd180b2b-c6c2-40a0-b128-ac3f958d2b18
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: ef5a8073-e9ba-4899-bbcc-1c90ef9c74f2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 8e3c9949-e932-49cb-9b6f-1bc318d3568e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: a6851eea-37c8-4195-8bae-d54229d5c701
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 10f2fe33-9085-4020-9934-5c46a12a4d73
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: afbaaf05-8af1-4624-b5c9-769302d6fb61
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 14316a32-2f85-4089-90ef-24d36231cf4e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8e748929-a3a4-4be7-ad47-0ac415197a71
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 77808a41-0437-4dd4-9cfe-248cb3456eb7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c43ab822-c1d2-4af9-80df-e5ad15a34cc7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: d723c91e-25fa-49cf-b561-09824f6b2b68
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4102ce7f-a0fa-42b8-9aab-b2d6f38f240f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 3c425080-5003-4160-b217-656ffb4ef5c9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: fdb9d423-eabe-4b52-9fab-c7de85730243
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 45e0360f-7ce4-43b6-b392-2456f2d40b33
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 867dd092-bf96-49a0-ac09-e219438ebd3c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a789a4c8-10fe-468a-86c0-72919eb3fbe8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 82e31e8a-e3be-4dbe-bc6d-2d96ba9b1490
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d939ad0f-5e96-4d4f-9f32-c16952f65852
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f644b3a4-99d7-498e-9496-092c8329f3e6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dfb045bd-e5dc-4a71-b96c-f5b78575c9a0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8410a39b-ffee-408f-a9a8-d7284e822289
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bc1aa0e7-fb7e-4d14-bdd2-a07415f0af68
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 44b70f80-d1ed-49cb-8138-090ce2975cef
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 275e65da-33a5-4a7d-8175-9f77087e1be7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 060c1bf4-2715-4fb4-9def-394d48a1d5ad
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 912ba813-7f9a-489e-9f87-4cab44d9c5ca
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c2d92dd0-7073-4a09-bede-99e5256cc0f4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fbf7e449-c916-40cf-b0b7-dccf908a4a82
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b9809192-55b1-4929-b00b-d2961b835ebc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5d492d59-d238-4545-be9b-e24cb38f5a60
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b72f9088-8175-40a5-9b54-629a94c31fa4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7031f98e-69a4-451b-9dc3-cbf0e96542a8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7f1abf94-1965-4d0e-9067-d26178addc59
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 46f813a5-39c6-4d12-8f6c-192ed7bdc517
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c759dfe8-bc89-48b6-8a6b-d9acf4b911ae
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 334558b9-d7c3-47a5-9656-aa2a7f2c0758
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 866f4b06-a8b1-4fd9-af92-daca371cd4b7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 00f7f478-3735-499b-875c-037b32870e89
Source URL: https://supabase.com/docs/reference/python/auth-mfa-enroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 060d7f4d-2275-4a16-9148-98b496779d36
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 54d5d911-e986-4db7-bbef-966d153868a6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 2a056044-1289-4e14-9267-25d120ff8967
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: e8cb6134-306c-4fa5-b869-997b02ee73f9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 109951db-454e-4ca0-833d-9cb21872d672
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: d22bdec7-f494-41e1-a1f2-939ceef42971
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8b024f88-446a-44e0-88ab-a02880efa6ca
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 260428c9-c293-4bd4-bccc-b74fccd1a742
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e43523a9-cd44-4460-9edb-776721c11ef5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 1e9073d1-679c-4a1e-8b43-b6b0384b5369
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 969d6909-f82a-4bf3-8ea4-0a8a17f4100e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: e904ed33-568f-4ff6-8fe8-d9b54e1fef87
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f0e5b4f1-2a00-4954-a80a-89e4a965dff7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: ab51ed6c-42ef-487d-82f2-e1a090b64a54
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ad38e040-8689-474f-bd31-2d4aa9ff21ef
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: f3b12be7-e848-41b1-8262-916b6b1d586f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 06e9a432-be24-4fb3-9ffe-d56026cc4fed
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 746b4372-e9c2-4f11-a2a2-279446ba7ea9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 82b40a51-4fac-4cea-85b9-c5491a74c1ac
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 97590498-0268-4152-84bf-2a8e5fbf03b2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: ec311cc4-4f51-4983-b0da-914af3f35c67
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c3aaf9fe-1393-4c68-8e31-0776d4a88ab3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: b1e1e70d-d3a7-454f-9e7f-e471b0be507a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 722af3a7-a61a-474f-98ce-de3e3fd67f62
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: fbe66884-775d-4bc0-b353-aad35fa68c90
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6fa5ad6f-1223-44b0-96fd-59ff034dff3d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 3ad60638-49b3-4fb8-a95e-3506ae787bc5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fb2c9342-259c-4b13-b3f6-ab598e0f84a2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 78f73e6c-dc57-4612-8583-3c3ab83d75a6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8f34baf6-c107-4c29-88a7-f2b2b885f92a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 6c44bdfa-1c64-4400-9639-e77ef841b1a8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ca9ae99a-49ed-48c9-95f1-462544458c83
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: f457305e-a203-4fff-900a-7db8e2f768eb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c6a46133-7563-40bd-9abf-dfd63ce15b52
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 88770388-c915-47f0-afd9-cf247ee96e79
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 911079c3-4516-44f0-97be-47581eacff41
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 6e03a44e-5f8a-4e03-90cd-0862063c7790
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: f624cbac-f472-4b60-a276-33c78b274cbf
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 21f22c56-84c2-4833-8bcd-bbea235133ca
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 505787a7-fe7e-4c97-ae16-2043b1a29ff8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: ee8b1fb4-dbdb-4ba2-ad29-79a7e06e735f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4f7d2ff0-d2f8-4eaf-8cc0-9239a6d879ed
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 332a68f0-1e6c-4160-a792-014b6e0f24f0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9d2b8e4e-ed3f-4142-916e-d4a0df169fa6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 6f23ac0c-bde3-412d-b226-c2561b80c952
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 4123a2ef-393c-4f77-ac97-eb182709098c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: e0c01bab-a93f-4a69-bf79-25b0304a46cc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: a6c0b498-29bf-4f70-ac7f-87431b82b29e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 3fde7139-2df8-48c0-b69d-39aac93b14d7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: eac87d9f-e9f8-4131-b377-ffc8d56905ac
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 34e5f5d1-cb61-4e4a-a7ad-246b2bc02929
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: fec4867b-bd0b-473e-b70c-ab4b208c19ba
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 46115874-965f-4038-8078-a918509d86a5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b67a1c75-9bce-43ec-a342-53017c0729b4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: d6b99520-a648-4404-9b4f-b1619535d8a7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5298e7f2-d90a-460a-9a6c-fa45fd2b401a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 82e744ac-5e41-4b80-aefa-f369fa3764ce
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2912dd21-6d8e-48a1-85b8-0f438dd9e0fc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: da20ae4d-f8b7-4ed2-8279-6f1d46c6eabe
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 14c8ebf0-9670-4dc9-9fe0-4f4c2eb8194d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 616d97ba-bca2-4072-94eb-7d585f67756c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 67aa7d80-90d2-43bd-a351-6e8f50f413fa
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9aed3ab7-108c-4856-b2c0-0edf02f67323
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: cf9ca728-16cc-4fc8-9aa2-ba11d0be6566
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: dbc00971-fed9-465e-a296-4bf529149b1d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: bf64871b-a7fe-4127-a3cd-9f372a47432b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 03d9fba4-0620-4509-b599-53301808f67d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5c253968-e9e8-4dc0-abd5-aec9e6ca79d1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 29260391-0106-42c9-98d2-8cbcfac733ae
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a03903fe-bc52-4876-8f27-805d48215212
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: d1fd44a8-35dd-4f98-afce-2e76b2a0df32
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 764fca00-40ea-44b9-9775-0bf9dc765bed
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 68aabb8d-0b66-4abe-86a2-b8102562f579
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f6d3479c-1ff0-409a-a99b-14bff5d15fb3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 87892a5c-32cd-47ec-a486-acc5b2548232
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 81916c14-9fab-4974-9423-fd50b4e0d9d5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3629e541-3df3-4e2b-b02f-a7606603eb28
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 0d9eed7c-ea46-4260-8e73-913a9b27e421
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5a4b08a3-fb8f-4733-bab1-9e5a16b09560
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 399bd6ff-bc04-45c7-884c-d7757943f43e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 80f28d7b-5faa-4107-94db-de1e59d407fe
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 4132dabb-fcfb-4802-8015-bd900243fa90
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 21bb1033-f395-4b1c-9974-e38d39b1abc7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: b78d9fdd-133a-4f4c-a0f4-a943f94ff61d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a26c1e89-6611-4a9d-bc30-1821017bea9d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 8b28bd14-eebc-4c8a-b20f-67a704394c7e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6fbd940b-66df-436d-a428-6b2b20a98a20
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 291c4a6a-4487-49c3-b27b-73ee4f5a4b0d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9aefb29b-c14b-455b-9639-297b996c1696
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 7b66f15d-0022-4c96-98ad-df88a8343e8a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e5aa76a-a406-489c-a338-20a231e3b157
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: c16b50fd-c8c3-463d-bb6c-c41a7a908b77
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6ba0c6e5-93b4-4f9e-9dc3-d858b5a70c64
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 88b20ed1-a185-45c6-8222-e3935131df3d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e38b9e86-d1dc-4dc5-bb42-9fa41fc2dfc1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 488e9cf8-2035-4a96-b692-f47c498d4986
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 298e19e4-6783-420f-922b-9e22864d1f1f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 29cd0f88-d3a9-403f-aef4-5fcfd07e2238
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 77ef378b-3fda-4503-995b-01c1f4a30abe
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e56f5580-ade5-48f0-98e7-c63fd7fef040
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 245e8404-aa37-412d-8f02-267da0cadf3f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e958e527-30be-453c-ab0b-dec23daf9123
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 2a85b2cf-cb9e-49e7-ae8f-3dc6c692b8de
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bf3e9c96-55f5-40d6-adfc-fb40c46a224a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f605d9f7-1495-49c0-9749-dba60f857b2d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7fd88921-dbbd-4d4c-9fa2-00651e82d44d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d81ff509-77d9-459f-8e4a-97d475d9e682
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0a14348e-8c34-4f06-8afa-b3483044f660
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 21403d13-73ed-4380-af05-910c207d1a93
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c843b643-f3cc-4014-bfd2-49f8a92b8d5e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d450d27b-825a-4c67-b177-112845487a92
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ec41b2fa-8a3b-45b3-a3a6-b66a161ebaba
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b112932d-ad2c-4ee1-b99a-86ca43b04710
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a97bdd19-55f9-4dd1-919a-1d1c8b9c23ec
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a64bec7c-f608-4b68-a4fa-c9a0f7f2335d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1fba3aad-f45e-43e5-8d2f-56f035ea4c3b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bf4caac1-a6d3-40a7-917f-bc511a954700
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1ff10afd-d399-4cd9-854c-96e9b4548607
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f8a8144c-5c58-4db9-a447-aa4edeafa971
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d48a2e2c-1c96-497c-9126-ab67a8ba9bff
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d663dc6c-678d-4afb-ab75-5c7eb384f16e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0f6c4f0c-3e81-45f4-ba5b-7042f76f6356
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9cf519b4-038b-4766-acad-8ce11f0a1788
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d6915d20-92e6-4fea-83ca-b320cb6f08fd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f18af469-bd12-4527-a75a-c197154bc4c0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 01796316-9c4b-44a9-bda2-711b1c28f925
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a7e2e9b6-d437-4fba-a102-7608be01d3ee
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challenge
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 92a6c938-e0ab-4ac0-b98a-76d3898be930
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 5b7b017e-e480-4dfc-8108-38616228ba66
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 97a9e537-a868-4aa1-9911-0344e7b8f28f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 547fd2c4-7482-4d28-a11a-37352aca65ed
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 53
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`   pip install supabase            `

* * *



--------------------------------------------------------------------------------

Chunk ID: e95dd851-d08c-4f4b-8465-4bb19e37c460
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 60e6338e-4bb2-47e5-868a-177affa85544
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 148
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`   import os    from supabase import create_client, Client        url: str = os.environ.get("SUPABASE_URL")    key: str = os.environ.get("SUPABASE_KEY")    supabase: Client = create_client(url, key)            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 701a3b11-e024-436e-b93d-716eecbf5f68
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 438f2be0-d09b-48cd-ba50-93e4eac4797a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 122
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`   response = supabase.table("countries").select("*").execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: edf6a20f-eb24-4463-b846-b0b60f3093e9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: c8753fa2-4aba-4e64-b660-5918564c19a2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 158
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`   response = (    supabase.table("countries")    .insert({"id": 1, "name": "Denmark"})    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 35f73ad8-45fd-485e-8652-790c3fecc85b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 48d967e0-e850-4de4-9416-da50a7a2fe18
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 107
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`   response = (    supabase.table("countries")    .update({"name": "Australia"})    .eq("id", 1)    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: bae6dca2-88a6-471c-9c5d-425855fee98f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 7fb3e871-6543-4bc7-af7e-94e471794050
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 206
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`   response = (    supabase.table("countries")    .upsert({"id": 1, "name": "Australia"})    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 453d6353-c686-4047-8e28-8540369c1096
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 66bb647a-6168-400a-8f26-0465849bfd81
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`   response = supabase.table('countries').delete().eq('id', 1).execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e2998468-2adc-4634-8693-d85cfa9ed588
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 74
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`   create or replace function hello_world() returns text as $$    select 'Hello world';    $$ language sql;            `



--------------------------------------------------------------------------------

Chunk ID: d8a7a072-24f4-4a2e-932c-37cf11fe03ac
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 247
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`   response = supabase.rpc("hello_world").execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c7e05b72-ef8d-484a-9113-db1a77944dd9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 166
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`   # Correct    response = (    supabase.table("cities")    .select("name, country_id")    .eq("name", "Bali")    .execute()    )        # Incorrect    response = (    supabase.table("cities")    .eq("name", "Bali")    .select("name, country_id")    .execute()    )            `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e52bc459-22b7-4cd1-a720-95a0254b832c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 8f52c4f3-60cf-488d-9896-e278cf66ed2f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 68
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`   response = supabase.table("countries").select("*").eq("name", "Albania").execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: be128799-7825-48ad-8557-3fa791f12c95
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 259bbb3c-44f8-4c10-a920-94bcbfdd3515
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`   response = supabase.table("countries").select("*").neq("name", "Albania").execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: afd293ad-88e3-4cd8-96ac-18674b335ea3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 7cda7fb1-9ef0-41db-8a03-63e206aa6b7a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 68
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`   response = supabase.table("countries").select("*").gt("id", 2).execute()            `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 39f926a6-4fc6-4ff5-93fa-2cd8d0c4e0fd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 9cc0c860-bc5d-43d5-9b7a-b45cf883179a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 66
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`   response = supabase.table("countries").select("*").gte("id", 2).execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eea16cba-1f10-4163-89fb-33c57179f2f1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 3e8568d9-8116-4bca-9a35-02d82c681aea
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 66
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`   response = supabase.table("countries").select("*").lt("id", 2).execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8642c66e-17b9-4fc5-9748-c640e4721392
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 9d92b79a-b0a3-4afe-9952-95c32913fd2e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 66
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`   response = supabase.table("countries").select("*").lte("id", 2).execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2927d458-9e87-4c81-8113-c88f4754de36
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 4ad96d5b-2224-42a2-b95e-03e7c3461d56
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 73
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`   response = supabase.table("countries").select("*").like("name", "%Alba%").execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eb89c543-aca9-4b4d-aa9a-d9b4e252f456
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 21718171-40c5-4e53-a4cc-5a85ed76d712
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 74
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`   response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: add7bb86-4d3a-4e4d-a327-6132d49e2361
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 8d03a85b-0455-4ed6-affe-9e71dc03edc7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 79
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`   response = supabase.table("countries").select("*").is_("name", "null").execute()            `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 1209bdfa-359e-43ab-a20a-9ce47d62eccb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 5b1441e3-7c46-4dfc-95fd-e050cd610bda
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 83
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`   response = (    supabase.table("countries")    .select("*")    .in_("name", ["Albania", "Algeria"])    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 00464d41-4294-4124-bc4f-b59c92bd7812
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: c46d4904-f168-44de-a69b-024dee04fecc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 99
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`   response = (    supabase.table("issues")    .select("*")    .contains("tags", ["is:open", "priority:low"])    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4ee9210b-89ad-4e4e-ad80-49c66cfbd5b6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 5e8f69ec-c8f2-4d88-8475-a4970258a205
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`   response = (    supabase.table("classes")    .select("name")    .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e28c60ea-bdef-4b88-92a0-c421d892685f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: b3ecb464-a88e-4a97-86f2-916b91ca9bff
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`   response = (    supabase.table("reservations")    .select("*")    .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])    .execute()    )            `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d795faf1-d8fb-417d-8a13-e1878746fdc3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: a0c00d83-cc83-42da-a420-3f3b6acb154e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 103
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`   response = (    supabase.table("reservations")    .select("*")    .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])    .execute()    )            `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 704d58a9-25b3-45a4-90a7-0d34189eaa6a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 24fbf477-8f7d-4b1f-bf41-3f4e34db9d7b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`   response = (    supabase.table("reservations")    .select("*")    .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])    .execute()    )            `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2c024326-6988-4aa3-91fe-574d855d7fe2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 956a782e-ff5f-490c-a398-b3061f11ae74
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 103
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`   response = (    supabase.table("reservations")    .select("*")    .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])    .execute()    )            `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b3855c16-7384-43d6-8460-0bf51f9bed52
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: cb559115-4db8-47b0-ad6f-5f721c09d125
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 103
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`   response = (    supabase.table("reservations")    .select("*")    .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])    .execute()    )            `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 83181068-4592-4534-aadb-8155a72b9065
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: f99de3ea-0271-42b2-88d1-a7763e311fac
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 96
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`   response = (    supabase.table("issues")    .select("title")    .overlaps("tags", ["is:closed", "severity:high"])    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6ad45e76-3739-40f4-a306-e61bf3e388c5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: b66da68e-63db-4f78-bdd3-a6c7f0d8664a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 110
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`   response = (    supabase.table("texts")    .select("content")    .text_search("content", "'eggs' & 'ham'", options={"config": "english"})    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 16359af5-31fa-4636-9db6-6c57b4546482
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 8e279dc8-a490-4011-8e39-4c08b7f3e7f7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`   response = (    supabase.table("countries")    .select("*")    .match({"id": 2, "name": "Albania"})    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 74e454de-d478-4a7c-a027-f868fe26c688
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 141
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``   .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter    .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values            ``

With \`select()\`

`   response = (    supabase.table("countries")    .select("*")    .not_.is_("name", "null")    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0e398e52-c054-4341-9079-0e3eacf4ef54
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 113
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``   .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.    .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`            ``



--------------------------------------------------------------------------------

Chunk ID: 402d88d9-a532-4dcd-8a27-dbfe10867752
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 115
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`   response = (    supabase.table("countries")    .select("name")    .or_("id.eq.2,name.eq.Algeria")    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: aa650134-f157-4d83-a549-dc4bdea22790
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 86
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``   .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter    .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values            ``



--------------------------------------------------------------------------------

Chunk ID: f25c3c50-3e4c-437a-8d93-6b088c6a3301
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`   response = (    supabase.table("countries")    .select("*")    .filter("name", "in", '("Algeria","Japan")')    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 078a1250-032b-48c4-a56b-fcbd849760b4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: ac7e2cf0-5a74-46a1-83c6-052787a5abcb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 08aaef1d-39ba-489b-9d2f-038998442ae4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`   response = (    supabase.table("countries")    .select("*")    .order("name", desc=True)    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f37aace7-c629-4e99-b6ba-0fcf023b087f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: ecdf0a7f-7824-445f-a9f2-833058a43a38
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 81
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`   response = supabase.table("countries").select("name").limit(1).execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5417d3ee-46b3-4085-8796-db69f550c674
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 51b89ab9-6b84-48da-af12-c265e2332e20
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`   response = supabase.table("countries").select("name").range(0, 1).execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c0dca5d2-9330-4c27-9f5f-bad5ea089e5c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 62
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`   response = supabase.table("countries").select("name").limit(1).single().execute()            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d2e183f3-9ec6-49b7-b975-86cb2e03e010
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 81
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`   response = (    supabase.table("countries")    .select("*")    .eq("name", "Albania")    .maybe_single()    .execute()    )            `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7493bcb6-ddac-41a8-916e-088f32aa7d61
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 54
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`   response = supabase.table("countries").select("*").csv().execute()            `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 661341bf-cfc8-42d6-b257-79717e25b96c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: ea0fdba5-ef73-4629-9509-5860e7faea3b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 207
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`   response = supabase.table("countries").select("*").explain().execute()            `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 02b631e9-0aa6-408e-8c76-7e9816fab677
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 940c6c0c-7c8c-40b9-a56e-f425e67aa7b5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 93
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`   response = supabase.auth.sign_up(    {"email": "email@example.com", "password": "password"}    )            `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 291bac64-36dc-49af-b326-e5475213095d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 00f34601-36b3-4ec9-92c9-43cdb7f79e71
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 62
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`   response = supabase.auth.sign_in_anonymously(    {"options": {"captcha_token": ""}}    )            `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6ced7ac1-31c0-4288-94e9-890b8fda43de
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 96ee2cb0-091d-4367-a14a-df48dc6795b7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 66
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`   response = supabase.auth.sign_in_with_password(    {"email": "email@example.com", "password": "example-password"}    )            `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0bd35978-e0ec-4690-b348-ceedb6eb6f6b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 32fc7631-6a33-4432-8783-4bb792f12bfa
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 60
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`   response = supabase.auth.sign_in_with_id_token(    {"provider": "google", "token": "your-id-token"}    )            `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 34640e48-5b5d-4ac9-9b4e-7827c8343940
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 7a32f209-ef7b-4f49-ba63-97284f04cb8b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`   response = supabase.auth.sign_in_with_otp(    {    "email": "email@example.com",    "options": {"email_redirect_to": "https://example.com/welcome"},    }    )            `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 04d22f8c-5ec6-4f86-bd00-155a4ac112ef
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: c512d0f5-a93d-43e7-961c-71f42ecc37aa
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 63
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`   response = supabase.auth.sign_in_with_oauth({    "provider": 'github'    })            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0dccc28a-fd0f-48e8-9f8d-bef827e4fd88
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 2dbccd91-87eb-4fae-91d9-941fa5edd9e7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 56
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`   response = supabase.auth.sign_in_with_sso({"domain": "company.com"})            `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 090b8a52-5756-48ab-b5c9-84a860f0e066
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 2710b296-78f2-4185-9f29-a9c2afe709df
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 33
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`   response = supabase.auth.sign_out()            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9608028c-e064-46ba-a980-5cf22befe02f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 88bb027f-66e0-46ce-9b7f-68bb1b861072
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 81
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`   response = supabase.auth.verify_otp(    {"email": "email@example.com", "token": "123456", "type": "email"}    )            `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e6458657-1436-41a5-bb72-901b95296641
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 150
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`   response = supabase.auth.get_session()            `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 63f04e87-e712-4bbf-814d-3fbbc780a973
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 1470e537-06b6-4949-b715-8cd050a194e2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 37
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`   response = supabase.auth.refresh_session()            `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 919d64b3-8bda-4689-9d9a-53a8c2db3198
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 1ef85276-3563-4c64-86ff-04c2324275ed
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 74
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`   response = supabase.auth.get_user()            `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b9ca8295-0267-481c-8315-3e286808518c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 7822d4ed-22ba-4480-91f5-ff0c009855d7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 49
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`   response = supabase.auth.set_session(access_token, refresh_token)            `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ee4e44e5-2e54-4d80-a703-5b4e867dd637
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 069dd58a-49c9-40cc-89be-cbbd9e9275be
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 179
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`   res = supabase.auth.mfa.enroll({    "factor_type": "totp",    "friendly_name": "your_friendly_name"    })            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2636e459-aeeb-4f11-96e4-5cab1036018e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 113
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`   res = supabase.auth.mfa.challenge({    "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'    })            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 84641fdf-0916-42e3-903f-d42511d44f84
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 127
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`   res = supabase.auth.mfa.verify({    "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',    "code": '123456'    })            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 464ccb15-b0b1-4ad9-b202-ac90058e57c9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 147
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`   res = supabase.auth.mfa.challenge_and_verify({    "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    "code": '123456'    })            `

* * *



--------------------------------------------------------------------------------

Chunk ID: dbec7adb-3adc-4cbe-b5f6-d2a1732b4cc5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 65
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`   res = supabase.auth.mfa.unenroll({    "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    })            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9b77bd42-485b-4b28-a70d-f599973c85a7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 155
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`   res = supabase.auth.mfa.get_authenticator_assurance_level()            `

* * *



--------------------------------------------------------------------------------

Chunk ID: f26db695-8e96-4e88-aa50-aaf7866721bd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 156
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`   response = supabase.functions.invoke(    "hello-world", invoke_options={"body": {"name": "Functions"}}    )            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6eef5426-0e77-4230-a6d5-fc7fa20bec71
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 290
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`   channel = supabase.channel("room1")        def on_subscribe(status, err):    if status == RealtimeSubscribeStates.SUBSCRIBED:    channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })        def handle_broadcast(payload):    print("Cursor position received!", payload)        channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 194b00c5-fb7d-4b38-a867-60f5e411f07f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`   supabase.remove_channel(myChannel)            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8fae8a15-5b1a-4cbf-9848-40eccbb075d3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 89
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`   supabase.remove_all_channels()            `

* * *



--------------------------------------------------------------------------------

Chunk ID: d8294209-708a-4a84-ad74-90d066cb5400
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 26
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`   channels = supabase.get_channels()            `

* * *



--------------------------------------------------------------------------------

Chunk ID: fc784b4b-e754-4494-beea-83050d716e28
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 92
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`   channel = supabase.channel('room1')        def on_subscribe(status, err):    if status == RealtimeSubscribeStates.SUBSCRIBED:    channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })        channel.subscribe(on_subscribe)            `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f8a948e3-6566-4e48-8a2e-707460d8214c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 81
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`   res = supabase.storage.create_bucket(name)            `

* * *



--------------------------------------------------------------------------------

Chunk ID: ff03b93b-5606-4f3a-af6d-57e6472e359d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 81
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`   res = supabase.storage.get_bucket(name)            `

* * *



--------------------------------------------------------------------------------

Chunk ID: a8fd1b63-048f-4ce2-ab1b-e8e2070f82bb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 80
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`   res = supabase.storage.list_buckets()            `

* * *



--------------------------------------------------------------------------------

Chunk ID: d19a5c6d-201c-4a01-a2c4-c569a989b472
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 85
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`   res = supabase.storage.delete_bucket(name)            `

* * *



--------------------------------------------------------------------------------

Chunk ID: a63e3c6d-db9a-4df8-8386-7dd9e7141034
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 86
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`   res = supabase.storage.empty_bucket(name)            `

* * *



--------------------------------------------------------------------------------

Chunk ID: bd104bc5-f258-4bd7-a360-0973d2d3a9a4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 171
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`   with open(filepath, 'rb') as f:    supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})            `

* * *



--------------------------------------------------------------------------------

Chunk ID: c72e0a86-c66d-4eec-96dc-5568974162dc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 101
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`   with open(destination, 'wb+') as f:    res = supabase.storage.from_('bucket_name').download(source)    f.write(res)            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1ea59aaf-36a7-44f6-bc6b-2b4eae7d8bbf
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 90
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`   res = supabase.storage.from_('bucket_name').list()            `

* * *



--------------------------------------------------------------------------------

Chunk ID: ebb65da7-48ed-42a1-a59f-30aa12b277c4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 124
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`   with open(filepath, 'rb') as f:    supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1b4f2022-b46b-430f-a6ed-6ed1e3c117f4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 100
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`   res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')            `

* * *



--------------------------------------------------------------------------------

Chunk ID: c25d584b-160c-4503-9969-4d08bf787876
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`   res = supabase.storage.from_('bucket_name').remove('test.jpg')            `

* * *



--------------------------------------------------------------------------------

Chunk ID: e9201654-1c00-42f2-8732-053ae3840eb5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 92
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`   res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)            `

* * *



--------------------------------------------------------------------------------

Chunk ID: 517ec669-de4c-4310-b279-46a584234d45
Source URL: https://supabase.com/docs/reference/python/auth-mfa-verify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 155
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`   res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')            `


--------------------------------------------------------------------------------

Chunk ID: 50d3b13f-c53d-4d94-aa2d-046f4d137372
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 50e81b6e-ab10-4f3a-bdfb-2b14a0b4236a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 22a0617f-e058-4248-a0be-cdd5a44227f8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 6e43aad6-7c26-405b-a362-01745b392128
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2faab9a6-31ea-4d2d-9b21-9dcf3c3efcd1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 59b6e388-73bb-48a9-a35c-e54969a52830
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3a31b64c-79f2-4758-bc89-e23b83be2df8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: f6485807-5903-4b96-bec6-f01ef889c2c5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 46b6c578-0ded-40ca-8c72-afb9433971c2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 1ddd2812-444f-4e86-890a-4187fe4df7a8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 62c0a9bd-9dfc-48e4-bee4-a9f72b74d064
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: b743607b-d1f1-4d95-93d4-632377f00cde
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 064bf3f7-efaf-4b5e-abb5-dfaa8ee1901b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: cf287076-e1ab-4670-8121-de88fa1b2595
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5d7143cc-3333-4598-a5db-19ee9dfaecfb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 4a722eac-f7e6-4a7f-a76b-af247d30da91
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b668f12f-a3d0-4843-9f94-23b7db682047
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 5a9bd399-5756-4923-8edd-3b1781b37192
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 47b3e4b7-d921-474c-9c19-c46e53a33742
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 275d6608-1c05-44c6-9c40-ebb343266057
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 21ed5832-7cad-4d35-b365-c9a86fe0ec4b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 17f3fc25-5890-467f-b972-935981265c3a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: d1f3f4f7-2986-4b58-b988-5ed3f87930de
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9667f89b-f3f1-458e-abcd-15d7daad274c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 2190b776-a4c5-4c6d-86af-bf764fe70b6c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: f8380361-ede9-4acb-b162-ca9a2e63688b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: a91fe333-0239-47ea-bed0-fc52f04963a9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: afd94a8f-aede-4a6a-9717-b80b5ebad56e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: c4bb7042-5a2c-4f70-81d3-d556a528318f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: da8df375-222a-4de6-88aa-24831230d378
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: bff77d37-640d-4c1b-bd63-ffcfbb1142ac
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 482eb152-9b2b-4685-8cfb-ed63baee1048
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 40b7b883-ae86-457c-8224-cf6243eda416
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 05e18a5e-95a1-48c1-bfdf-dd305341f666
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 3b802e74-a4a8-4bb1-a76c-9f888913ac9f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 160e28f6-7b36-404d-81c1-484ba8559973
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: b00ae428-33c4-44a5-932e-08c3a228891d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3cbf3955-e3ae-4bf8-a236-16e3b21cd307
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: c221a0ff-f6d6-4824-a946-13703857ebd7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c8e0441d-b393-4426-b1f4-5ed4e2c9277b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 50061fa1-dc62-4403-99d1-2ef0228ec3b7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 68cb555a-a7b3-461c-afe6-ae8c35bceb81
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 9684d655-3e94-488c-8f62-cb36bbc7d94b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6402d60c-d22d-42bf-a48b-b5ad22819897
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: fe8edc10-62c4-4a18-ac2b-954ebb4570ff
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d6f5ed2a-d9c0-4ef4-89be-9b5b20217bac
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: c2e94416-2f8a-4fc7-9788-ccfb1c6a19cc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d995d65b-d30b-4c57-ab92-ff5d265b57c0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 97f692eb-df9a-4675-be5f-fbe686311f59
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: fb69802b-7504-46fb-a0da-e8e5a8211ba5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: b26878fd-3da9-4cb7-82a2-9aa46e19e3f9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: dcecbd49-e8a0-408b-9f96-9968cdaaad8b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: f29e63f1-bce0-4af3-aac5-934212edf473
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 88beb2f1-86ea-4b89-81aa-910d8e1e1d83
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: a4e9fcb4-9cb3-4499-8a3a-491bcca2e15d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f2094852-d7ec-4658-b219-4a30a44317be
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: d4c242c1-debe-4dc5-961f-ae8b62df9a74
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 97954b4d-f150-49b7-b964-b02efe5e564b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 75c83211-e930-4813-a0fa-b3406e746831
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 494f5779-522c-4417-8d8e-af7e5068c46b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cf3f7e77-8727-4aef-b5d6-8109d9806032
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: c2fac983-9f9a-4814-ac39-499cdbf0f6ca
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8fc5650f-6e45-4fad-9b5e-ef761217ae0c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 707610e7-468f-470a-82d1-ec0ee37ef0a9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 26b7c59b-e838-42eb-bd8b-66b77a45c2ef
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 970a65a5-0d22-4a63-8c4c-3fe4463d4e05
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: b68585ea-c232-45bb-9ca7-ad2b9aa66660
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3279d0b9-5694-4f07-85e5-caf721a8d140
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 6edf23ec-c243-46ed-8299-0423a15c5bc9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e8a53b6f-ab8f-44c0-ac2d-4a6a511a5e39
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 9d6f7985-46ea-45ec-821b-f761e2d0ecea
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b2f8fbb7-32ac-4f02-bf01-48cf34c5110b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e501fcc8-3ed6-469f-ac0d-9f70e5f0af36
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0be696b9-cc10-417f-85f3-41d55e7d8af9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b01baf27-9867-40d6-8819-c8e31d3f4e43
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: a1e3ca2b-36b3-4d3f-a0da-f0f9e47fd52f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 05cedcbe-5088-41aa-9e38-bf6c1e477b0b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: f52c1953-2ec0-46e3-8a4a-7a3bd3e883f7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 579ea800-4d85-41fb-9e3e-be80e43f5e38
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 598b0ace-a3d6-4aee-b6a3-28288dbaf3e9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b172f603-4d4a-4899-883a-f71823c53eef
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 117cf603-e8c8-4597-b3a5-0c2d52b50d66
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1413d10c-a537-4fcc-95de-24bbbc733199
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 8dba85a2-1814-4777-a488-9bfe0e5aa9b4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 47e3aff1-29b4-4133-a705-8000bed82484
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 80c85e8a-8f23-47cd-8e46-01ac06dd2d63
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: cec76261-7eea-4e26-bd4e-6c1af1afac13
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 29d4b1f4-7327-4306-a2dd-0cbfc4ee4cfa
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3976c6b1-9464-4786-aec9-bc6e76d6bd93
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 2aeb3a20-fdd0-4b09-8d63-7e913b88bf68
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6e3ed9cf-5aaf-4ea6-be79-7fb7562d9036
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: ea6f9f31-6461-4f97-b472-150a1904a771
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9fae9371-963b-4cc8-a595-4f2c66ac308f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 4c1800a6-bd8a-4ece-b9cc-8ccea715b197
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d60ffd2d-7366-4067-8cf4-ab41e286829f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 571b7c6c-e6ce-4cd9-a6c6-87814e13d9f9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: f1d146ff-7f78-4897-810b-3cfe47a3de4d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5255f003-ceda-4866-b33d-7b275a5042ef
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 1d936082-624d-45ab-aae9-3996ac0d58be
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 23321705-4d32-43b7-9dac-e63b2c12bc83
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: d535a8ae-6a74-4d3c-a1af-64fd22491155
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 93f5cd95-39ce-433c-b742-3f6b5ac3487f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 4654b206-74c8-47e4-9b6f-84c55cd0b253
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f250ab7f-75f6-49da-8e0f-eb11cd0f8f83
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e44e0723-5fac-47c7-a1d4-ed5de5298f57
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 539ea807-ed69-440c-9da7-81a1876d7d9e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a1a25c25-79b4-4c3d-83ef-6acfacd6d9d5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8306945d-5ae1-4595-8af9-f6443cd11ab9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0b74f5b6-b2fe-483c-8bcf-e3672815cff1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dfe9112d-87a3-41b7-8783-6d27d405dc5d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 990589c4-cdf9-45e8-b8e4-63a7d82e4318
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 002b9ac6-9bc6-4dea-8988-307b8df8e08a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2f25ad02-4ee1-4381-85a5-36727580633f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 13b7b53f-5ebc-48bf-bf44-7b7e89d19535
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: dcc6fce6-ccae-45b1-b6ec-6bddcb0ac395
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0e8ea60f-d16a-438a-882a-c605e6a53dda
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 30d07044-2cf9-433d-bd9c-b3eaf24184f5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8c46c9cb-95fe-497e-8535-1149d34fa359
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 95c8f820-b2d1-49a5-acdf-5c3d2cdef52c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 18d906d2-16d2-443a-8f7a-f0ee40738b34
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d5c615fa-f167-486c-9b13-6a273a42dd1a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4956094e-06bf-4a57-ab8b-4e854f99ec77
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3fbfd9d6-5444-4bb6-9116-59b4c62f945d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 02d7b126-bf96-4a31-a8d9-b34d16312c54
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 723f77c3-6aa6-4a5d-934c-25e9a7c576cd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5f72869d-5396-4503-a1b6-bb6f30ac6c81
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a2e4b080-b8b0-4142-8f4b-2e6868241b1c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-challengeandverify
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: f9ab739c-ceaa-4823-a68f-c24e8a3c24d5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: b542a6d3-0685-4068-8522-32393f0cefe3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 8eecaf5b-0bdb-4de7-af38-4f597d70ca8f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: bfca3da8-2d1e-4c3e-a28e-c4380f6b3060
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 92335b91-1861-45aa-8dfd-bbf3f6e1f14a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: f4bdff71-a97d-4afb-a04b-7d074e9cf5ee
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d30bd69b-dc73-4afc-8af4-57815faba257
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: be99c72a-0ac1-4f63-9e70-230c4eb03db0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a610b1bd-9937-478d-a79d-476e4f189f7c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 00040d01-8ff4-4e6a-9eda-5b63b29dc5c4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 23ae2113-f5f6-4a71-8050-a144a742d327
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 847986de-843d-4e16-9d27-3009500da6b5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 24624c00-a240-420b-8a0d-0b9bf70de2d6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 4b712729-1201-45ee-ac1e-7c05e793e664
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 57bb95b5-28bc-46c5-b1f0-b4d3d1a99bfd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 88cded8a-76b6-462e-bf90-3ebeee387b93
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f7827c20-82df-483b-947e-a30efda1b889
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 0c075ba6-b57b-4603-84f7-5f2dca8d40a4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c451b67b-f9c2-42c2-917f-b1f50af65dcc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 98f5b2ee-6adf-44ae-86d4-7540b2e2538c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 773aeaa7-2f8e-49fc-96d3-06d5b3fc86f8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d4ce0f70-95b9-47e9-b4d1-8344828c622e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: cb49adf7-79b8-43ca-adfe-be36055274ac
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d21e565f-f3b6-448d-b65e-f02eec4cf4d5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: e169d263-5444-4be4-988b-7a9fd7d54d48
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 19652c70-cba2-474c-8840-497434d36523
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 5027c7f3-dc40-4172-b308-dd7dabd86928
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 648b47ab-1367-4129-9fe9-e8aefa02898b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 26da089d-b7c0-464b-bfbc-2922b3bd29ca
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ad47b35d-494c-43ab-9287-cdee7728730f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: fc3518c0-8bd5-43b2-a7d7-22c3e1c12a9e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e01d6951-6a6b-41f3-9f82-23f8dbc5107e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 8d8edf2d-3ec2-4e5a-910a-d91b23480015
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 23620f23-9e6d-447d-a8e5-1d81855cf513
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 292279b0-2603-4c4b-8921-bcfbf5d2f2b6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ca5ca07b-3626-48a8-9117-9ce27908e388
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 286c3efa-4ff1-454c-9d5e-16aea0e0e761
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: db7f8b4f-1d79-4e97-b562-d95234aa7125
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 7e5873aa-887e-4d6a-a20d-046efd0bdaae
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d5334961-f82f-42ed-92e5-792fbabdff30
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: e81ab0f3-1057-4f2b-91c7-f160792e9912
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f5476ae-4fa6-47ff-bc0c-e26b0757b688
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 7f4a5eb4-4df0-41e3-9200-e41c6fc07dfa
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2574c31c-d921-4f46-85f0-fa8df082914a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 86baa571-5002-4159-87af-268e93dc43a2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: f4eed78f-7786-4311-8ba7-6f847376e2b8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 110ad4a2-3bee-4fbd-9c5b-55d8b5044f8c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: c29a3efa-14ca-4d78-a65f-baf5189121d6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 1fd2bede-7131-40ac-85e8-18af67564c57
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ecbfa2dc-b54b-42db-8b9f-7faad2c11d2e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: dd007897-5edc-4bac-bfca-bfb70c3a347c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b4f16d14-f174-458e-bb09-b3a3e32d8bf6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 9c3da04d-017b-4a11-b325-19be596fc7dc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 7b1fbd8d-e81f-4896-90eb-369368e9b5a8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 58618492-e8f9-4441-b379-2e8dd3e69e6e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d81d4178-5146-4c7e-a0e2-41f6af1ac05c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: c8c554cf-9558-4507-8341-ce2beeecaebc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9586f4dd-1e2c-4b32-85b3-6c849b255a22
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: af369c78-d339-4837-a049-282bd4fb6b08
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f6454323-b5c5-4f4f-b2be-2b941347297f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e49c17d2-e887-44fb-9a88-c5d664eefaa7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 11b15b55-ac1f-4a54-988a-27497a563db8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 61a2206e-a6b1-4a91-84bb-0344b22a9312
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: d1df8bad-cf57-42be-89ad-f0dcdd8e2ec4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 226b7826-941a-42f6-a674-0f09ecb6c730
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 809839f4-7937-4ea9-bf0d-5b5447b1403e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 73c55cfd-82fe-42d5-8534-2fd2ea8c63ab
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cdf2a634-601d-4f22-8491-ddded7b57240
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 2640fc5c-426b-49b1-9814-0e94944e4ae2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 193e4401-1d01-4a59-b2da-54a473112c37
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 8533cfa8-ecf8-4a7d-92d3-418d3a66be1c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eabd5820-c691-4652-8204-26d5fedb04cd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ce1c8df1-2951-4e31-8a0a-5e532af3d422
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 38a83306-15e3-45e9-a674-5f854c3b5970
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 5b3ad373-195b-425c-a7a1-b77cb4ebebcf
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: d3edc382-33b7-4e28-aad7-57899577529f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 62643115-c882-404e-bb3f-a8913cd724b6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 0378f882-e1d0-4d87-8979-6d734a31dbd1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6c9147ea-6364-44e5-8384-004c0a38b8b5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: e01ce360-d77c-4a09-9368-af664a27f7f0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c702717b-a2f0-4349-b606-7525be1aebe8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: a5f67d28-924c-426b-90e0-9c64e343fd42
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f7d80ec9-1612-4be8-a1e2-aedde810b6fb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 1e7f9615-01f8-4f0a-9d70-6ead11e22405
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: da4ac335-df56-41be-89a3-28e10ad6d149
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: e72493bc-da68-41ec-99ba-d4ccc6efb9b9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: c577780d-03fc-4401-9b38-cd8decea3af7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: e794742c-2384-4fe5-aa23-7d519a726ffa
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bf2dcad9-39e7-4884-9bc6-2e4873b566fd
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 12d6bcae-6525-4082-aa92-729151d06f3b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 07f30d68-b16a-4abe-8225-e40f131e32fe
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 34fd0f11-3856-4186-977b-436461106790
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0cc50fba-5094-41a3-8a6d-1dd0efd9ba44
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 9d98e0a8-21df-401b-bd28-398204710661
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6a32a428-25d3-4ba8-bdd6-449a8617d45e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1d5e0788-a873-40eb-becd-673ff87f64b5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: eb4423ba-df5e-4bec-8373-3565bc99239f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cf4db271-1fbf-448d-9b94-c495dfc6bf1c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 128a331f-dc75-4fe3-9a23-51488a052398
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: dee3c799-9ace-4af2-af65-d8b3a6873b19
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 7a3681c5-1efe-4f32-bd42-55820c3a1f87
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 319b0a1b-80aa-4171-acdb-9a073e7128ba
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 7a2feb19-e6ea-4b41-8a21-a044ec741f88
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f92a436b-88b3-480b-9c7e-f75f21d49a54
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0219be94-8203-4940-9e84-fcd53f9cdf38
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a6f95ed2-918b-4441-aeae-d620f29a1ed5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e25d1a93-7666-4b93-a7ca-ddd36a7d1b1c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3ac26fde-1f89-404f-a727-c853c4eb592c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 30ed2f58-67a0-455c-80ec-0ae77cdc2cd0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 598ba593-ec32-4dce-a07d-944b1fea1ddb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a4586db0-3780-401f-83b5-b6178322a70a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7fdf23bb-7987-4a40-b7a8-b42f84b87093
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c5c9ec42-d179-4542-8753-6cb358e67ed1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0fe9b5db-d8a8-41ae-9147-94887820a861
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3211dac2-1f0e-4d62-947f-29b7543ddaaf
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 00e2040b-6d93-4f14-a31f-8206fc3d062a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2a063979-1cf6-4c49-a56f-fec7473f7858
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 634f9ee4-2ca2-4c61-a441-2636120a40b3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d39e8ab4-05c6-4166-9e98-b8f66dd5b938
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5d2939b1-1e41-4aea-9a4a-0837a5624c32
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ac61b7df-f673-44e8-b6ec-b6596250b970
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2c629749-3aa1-428f-9b33-0842f7dc87cc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 71d2bf69-cea1-4a1f-8062-8ef5f8e05638
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 611993a2-946c-43d7-8123-5bee967a14cc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7d3bdf16-dff2-4c92-a32b-10a231de48b7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e08cc236-cec5-4593-a4c0-433e6d892f59
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bd80020a-b09b-49d0-a42b-187992fd5cd4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-unenroll
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 8f251e03-4c56-42c4-bda6-3c036f9daed3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: cade41da-a4b8-4a55-8ba1-8b6074ad7d95
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: a84c9f0b-9969-4c15-831b-ac21599477bc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 123e0ff2-c572-4648-8056-ad00a61b7f82
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b35b82ee-0bd6-4eec-b546-7da13fe22807
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 2611eb3c-dfa2-43f6-a91c-14644f5c36ed
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0a209304-0979-497c-b483-217bdbf42b62
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: f9985be3-3470-4ca8-a16e-df9fd4be307a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 87f8ec8c-1609-432c-8d65-345a2c116cb3
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 7965446b-72c4-408f-bd06-d03237908697
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 081383dc-c519-468c-9eeb-5f098534f048
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 7b4638f6-7648-4885-9bfd-f5d01608306b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9395cfb5-684b-435f-93ee-19e0e50b4e5f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: f568d7f6-0d71-491f-b9df-bf9b64e78f7c
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1d2f58d9-f789-41d0-a0d7-0ad2a8f6781b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 8e881efe-a466-4cd2-afec-ffc0d2c91047
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 40bc7090-1930-41b7-83d6-874ffba66204
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 3692a953-e7e9-4706-a8b2-a3ea85fa1665
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 14e56fcc-0354-41d0-91b4-f76b1f4ea7a6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3a8e35bf-c0c5-4e38-a1f5-35878682fb59
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: fc90c6fe-4490-450d-8755-5d7e1d19054f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f1970753-207e-43e1-b4fd-745baa37c85a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 754b63ba-ecd4-41a0-a486-3023fe01f9df
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d3d454d1-8724-44fb-905c-b7cfd0e63bdf
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 1564a032-2850-4426-9e36-b87cbcc06e97
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ca3ef7d5-71eb-4913-85d8-163fd34810d7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: f2ec1151-ca69-4f60-8132-4b27759a9399
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8a82a7c7-1acc-477d-9f49-14106d9f7067
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: aa0846d6-d8a8-4cdf-88f4-79354d389678
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: dff4cfac-9ea3-4769-a591-66e59e4bea26
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: db1a4335-5793-4a26-b225-df08f108262e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e074d38b-3301-4e61-8dbb-e7da628cffdb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: f10fbd24-6a34-447f-8cb2-ec62d1dd0de9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 461a3b50-72b7-4519-81a5-dc20864b6077
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: f79f9fce-d432-4547-b9d9-55e38465c1ef
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3c3888f9-4ebb-40cf-a20f-f8eda88b37bb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: f84be4d0-f870-421f-a089-7054f7836b5b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3730a4a5-db51-47d6-9a84-56f8ca15173d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 8992d497-7b48-411a-858a-d256f2d69cb4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 91078fad-96eb-4189-9039-a3797d1f41d5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 76ac7609-49a7-45c0-9a51-fcf2f7a05d83
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 24e89c42-94e7-4b34-99f8-6b9c89f77c05
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: b5007d3c-119a-4759-8b3a-5af79edeee0b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 50a3d5fd-39af-4a9b-b205-ba3961844c33
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 4ca4b995-124f-435a-a5bf-abe9999d67a9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: eddb005d-89d1-41ad-8627-4dace2a00d88
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: c40592d2-6ea9-472e-b3ab-19fbc8844df5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 78462b0f-6dbd-47c3-9211-28ed6895197b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: ba9e73ed-6407-4dd5-802b-677f589fee23
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 27eb6a6d-f741-4552-b3e1-fd30c246f114
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 780d0f7c-fb2c-428e-9080-044c53795ff4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 63a0f698-fc88-4ed3-9f71-a77eb7233a65
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 6b2242a6-e1e5-46f8-b98c-c7b221783704
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 7fa953f3-3d8d-4434-a67a-5767b3b651f5
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 0654546c-7b74-446e-94a8-c700d6aba411
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ff7098b4-6fcd-4aa7-b479-567c28556edf
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 621db1c2-a987-4b38-b6f6-91bd61796dc2
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a139d8a6-b97f-43b3-88e6-9dce0c83fdf9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 8dfbfa35-baed-4c14-bb82-dfacfebe174b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2bd3382c-84c3-4924-b528-07d53e0aed78
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f8db3823-d504-44d8-a564-9869cf27704d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 6f0c2e45-22cd-4785-bfdc-692805c5bd5f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7e09ded5-112f-497c-9a69-7d9189a77446
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 14865be3-d5f5-466a-ae5a-0eb279ea0a1b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2304f03e-ea18-45df-88b2-432f6ba2d885
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 20893fa7-cc99-4cb3-8310-4b780f722b43
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 957b3cf6-5531-482a-86b7-ab17399adf5e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 548d0e8d-e4cd-4c3b-b7be-1809354aba86
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 56b39bce-54b3-45d0-92b3-dcbf08e286fc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: afc89905-9107-45c4-9f1f-7ca8a2c7d803
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: a672075d-ff12-4ab6-b3c1-2ccbe67d29e8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 273c681f-0a65-470b-a858-faae72f66457
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 78348d4e-2056-4329-a17c-360b69fff951
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6a8a95d4-1571-437b-86fb-a968f170d6d6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 5f51e53d-5953-44c1-b47b-82111c387ac7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: bcc3235b-fe1c-4067-8e32-a017e49199ca
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 31bc10cc-9609-4d38-8a90-000e33202edc
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 77e38f06-f50a-4d43-ba26-53af7bbb079b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e81ae4c4-2c93-4dff-bcd4-1a25ab82a834
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 56fd7c32-2ec0-4087-9ca3-a4fe5541c7b6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b4ea6a83-e660-4a97-8202-bd3e896bbe29
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: d8ecf5a6-1e87-49ab-bdd7-73cfd3091d6d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f62fb003-886b-44d8-827b-5f2b245c83c1
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: b40e44ad-4857-4463-ad46-93b822cd56c6
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5401556f-eba9-4b8f-9825-9f62635a88e9
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 258d8510-b9d1-49fb-a20a-8434c506f8a4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b83fa018-ebee-4c0e-a368-5b0b976c976f
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 651a09a7-3101-408a-9e78-29ea304ce3f4
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 64f8329a-e7ef-4ca7-9e68-a17c7a3633e8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 44a14836-0543-4b0a-ac7a-8a1f078832d0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b16c5e7d-bee0-42d0-8a55-9b358c4a6142
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: cfe91e87-2484-40f3-b8dc-9deffedb05da
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0b21bbfb-44c0-4169-9b91-6b3a32b87342
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 8c7835c9-d0ac-4fad-bf00-ab457e7fcdeb
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 71f5cad5-4abc-4882-992e-cf769f02eb96
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 48f3f1ab-e578-44f3-bd0d-2ea93608e69e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 89330455-a92e-47c2-8102-882e014adeda
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cba5a17c-12ea-47f0-9b98-5a75be92a588
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: f13561b5-3be5-417b-a94f-fd631354c756
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: dcefe6e6-e696-49d2-b39b-4df7e8506fd7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: cda1e502-3763-4ccb-a02b-92676c9c9fc8
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 348e8a31-1252-4077-af45-b65676fe3b2a
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 53024bc9-5065-4248-9250-ac5bfcee3968
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 96f9766c-cb1c-44a7-9d98-3c3db16f9a50
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d5e70e39-7952-40bb-bfb5-3d1062ea2733
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 78fe1cc1-1235-43b2-beea-ebca4a98380b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0584799a-4d1c-4c21-a52b-fb7976345e34
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b0eddf6e-89f7-4609-aaef-7c8a11df002b
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ca715c7b-a32b-48e8-bf3d-900cf5302129
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1b252044-a9c9-43c9-855f-1cc2e32f2721
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2271ecc5-ed1e-450b-9ff3-3d49d362f1c0
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b78fa219-1f35-4548-9e3a-714914f82544
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1aeac664-a5de-4a49-a16c-ce978d258a13
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d030bffe-1124-41e1-9293-62652c9b7025
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: be6639fd-31ea-42fb-aaa9-65b1563c9463
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: da6dc9a4-b313-4959-b5da-e92296355f8d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bfe2c404-fa13-4216-b6bc-8abf70e9aec7
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b1100d2b-23bf-4611-bfb5-3b87f75f0a4d
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6b118fbf-0033-4b55-bc8b-e3fcf4b7b248
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4721d4bf-4014-40c6-a88b-b51773943f00
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d97c4278-cc33-4e1c-979d-e9b941c46673
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 50cc5d97-93a1-46c8-8c49-556cebdb6b90
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8515dc92-7e64-418b-bae9-030676ab1cab
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8877b982-49c2-4936-9b68-0927302276ab
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 63ccc06a-244b-43a2-9f94-02865c578c15
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c3d53565-0ab0-4cf5-a638-92d32beccc6e
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b702643c-3969-45e4-96df-372d31742743
Source URL: https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 61824473-4d75-4ba1-b5d9-e3e92d8d55d2
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 1629a073-6622-4b3c-88b6-1f34fe9ad8ee
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 7881fbcd-f945-41f3-9618-85551223bfa6
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: e5ceb355-00f6-4295-97a6-30edf895e581
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d8443ea0-6ef5-4afa-bcde-866a675ebe7f
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: b35ffd77-f343-4c00-a40a-d7ecdaeab278
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 23dad23d-3463-4e5c-9a0c-7078a48dc62b
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: ed9e9e2e-a0b6-4ab5-8d80-d18fed123b7b
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8234413b-6a9a-45e1-aa5b-4daf724c8d95
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 9b0e1344-108b-42dd-92db-ac6da6563ce5
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 076c9832-525d-4b3d-bbe6-104de575094e
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: b2068fd8-f137-4b4b-ba62-68e9a4305467
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0e54277b-26ea-41d3-a093-f2a26192241c
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 429b6e82-c28d-4db0-8b82-634839066aab
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 47dd6f1d-81ca-47fb-8a50-37cbf886af5b
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 89378a6b-b540-4a98-8661-12376dcceb42
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c4e6073f-449e-4a73-a98b-b9ab72b40644
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 783bb564-65c9-4f7d-baed-16d9ea84b9d4
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ee04f11d-02ef-4434-9c71-e99064f48eb5
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d441738c-41c3-4f34-8924-11cd3e7d2d3c
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: e426f06d-5312-4886-af13-518410a939d9
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ec68674e-a158-424c-bdeb-9a72b6d5b36d
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 86dddae5-118e-451d-afd0-216b5b9aaa52
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: adebade3-acb3-474a-822f-638d7ac499f9
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 53a811e7-35ac-4aff-8008-ec9f6a8fdce5
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: a96b5b81-dd4f-4c86-80c8-25b66d8bdf9d
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 1674a210-fb37-490b-a879-d0f8f3ca4319
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fa85ad96-0867-4838-82ae-edd91f8d76d7
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 43c9287d-1ea3-4f5e-9c7c-cb9c188ee3d1
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4fd04451-02fc-477c-9890-ab4edb0e60ec
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 8d3d9421-4d8e-44c0-831d-b78b694d6d2a
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a09e6d58-e088-4bef-9604-33076465f8b9
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 68ad26eb-cdc8-4bd5-854d-39f003a759bc
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4739b382-bf5c-4dae-b98b-bb545f7eac90
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: a920bfd2-86a9-4d1b-b058-89834f30e314
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 546ba794-a45d-4a58-8585-fb38ecf38808
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: a8b694a1-d45e-49d4-bc28-f5774c184fa1
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: cf80f581-f63e-483e-b1a6-32bb57e8441f
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 39c547da-f55a-4a90-9a9f-0acd66a351c8
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cd150358-4869-44d4-a34b-a00253f8c539
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 366551b6-3040-4a2b-9558-fc66168afda2
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f2fb8ab0-858c-4bc9-b7f3-eb1954a9fda3
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 6d019f17-2965-4df6-b882-d5be498580e3
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 99bd81d4-a24b-41d1-93e6-726d2f847f9e
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 4fac9266-fe38-47bd-8a9a-1b1164401c7e
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: a74d54c6-a436-4d55-889c-10470749f8ec
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: b0656a0a-5bb8-490a-b723-9d4ebb10dcb4
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ee7fc6df-d8cd-4371-9a3a-a9907dad026e
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: c7e0de5f-8e20-416e-921f-cb8e086ec96d
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: bca33d67-d276-4377-8040-96721abb2ded
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 4dca1ade-b11b-41eb-bb9e-9a1a7fccd7d7
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 8c19a461-b515-4155-8d54-e3281ebd911e
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 9a3cbea1-9239-4bf2-8dd4-4207373731d7
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: bd962928-9ac5-4893-8fc2-137ea62c3b7b
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 1f7a5a31-d241-4641-8068-a97799e69ef9
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 15cdff47-adde-4e92-a44c-dc2ee5f2183b
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: cbfeeb99-7b34-4881-8fe8-f0d9d8b8a41d
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 811319c9-937a-48bf-9d5d-81bb1bd87838
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 4cc58a0d-3181-4974-badb-be6bccfdd426
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ec05bb23-97f6-45f5-bf0e-8b29c00823da
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 296b9cef-1c4c-4a4b-b878-573ffe2a9e20
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 950d0315-bdf4-4fd3-8e9a-b6dd9c98c472
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0cf163e3-b201-49bc-afa2-8976789253fa
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: c4fc7398-9eec-4a9c-8fdd-7b8268720118
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9ec7d917-003e-4a98-8efc-46020fbc886b
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 71ec4ddd-6cfa-4e4a-96fd-632cae498e7d
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 87a82462-6ea1-439b-9c24-a2592d682a7e
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e543ece2-ee79-4bb8-b371-9a75e3ab6fe0
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 922c9619-04c6-4ee6-81fa-886ada82612d
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7970b78d-f918-490f-91b1-6b14a5f639ab
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: edf7e1d2-ee76-4583-bff2-1aa56db84f65
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: df6f815e-519f-412a-a95a-fc71a879e086
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d751a6c2-4376-41a4-b888-668dd39b6392
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cf0225b2-3d48-4219-8ff0-3ce05e0974ac
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 59c7a4bf-4b4a-48ab-9b87-bb07ec59f617
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: a37631df-5025-49b8-9b59-a8edd50fa836
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 753dfdeb-1199-41a6-ba55-119a82af1bfb
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 0c387956-8f4c-4ab7-b998-725cffd63f28
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1ed1da39-9db1-4fdb-8a20-0919a6cd4eb3
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 79bd1978-4eed-4bc2-bf44-712bb532e563
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f6140b65-a392-4e55-ac6b-2d5292a6c888
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: f1e4878c-807b-4481-8836-042d8bdec13d
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a235cc80-a9c4-4a65-8555-834a9d16febc
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: c3ac7de3-0c85-4ed0-9e30-aa9331fe6334
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1de716f6-8909-457d-a2ed-443e03397107
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 58017856-50c0-45ab-8e43-1d9f3ec7ecb6
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 1fa5f552-35cd-4662-a374-f1ff1a157f73
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: bb63a276-8ab0-4976-b1a9-457b7c9044f8
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2d8b9eee-39a0-43f0-96ca-8a653edf658e
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 54cca212-bd57-44f9-8be9-6c1f1d60682c
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 79f30726-533c-494f-b5ae-b01dfe38cc43
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: b75049a9-c17c-4894-a54b-359781392b3c
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ef0a8409-f5ae-44a6-b462-a1da510146d8
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 4ca08563-63eb-4ef1-85d4-592d36e8ab0f
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8ad94b03-acbc-4647-9c8e-e73c4289ef26
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4ad16740-a5a8-4e3d-8209-f1ff14dffaf4
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 5bdd3296-b23c-4cea-8ce6-970ff8b8ab03
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 80afa887-34f3-4185-a585-3cbf60c81d22
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 083f94a5-7546-4343-b5fb-eaad0dbcd5a0
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 55996807-4f18-4523-9479-b0dd69b4fdba
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 81313ee0-9dc2-4e1a-9d57-fd5df5990bed
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: a2c1fb5b-037a-4407-aa21-5b03abd94bf6
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: d46ee15a-2d1e-458c-8cd5-f25255b08d5a
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ef17c346-2a6c-4994-9974-e19572eba7b0
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8572d5b1-9d19-4c60-9f89-1fd0071ee6ac
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 47ee615e-e481-4f1f-b8e8-550632da8d36
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 35669d53-9818-44c7-b9ad-bb645954b315
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9203af50-da44-4c13-ba13-f4b78e6b4974
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 45b773b4-5346-4a1d-aa73-e408fcefc6a2
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5d230f35-a71e-4470-ab48-2e8f32178234
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2c7d1d0c-5cf1-4560-97db-b61bfa0ce3c9
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f4150d74-93ab-4fae-9141-cabaf57cb43a
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8a879d67-97f3-45ec-b3b3-288993530bae
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d2f0de11-1e99-45bc-9e8b-7c40fe92cce0
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6e53f76b-cb86-4716-810d-f44c76476cb1
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8915cbaa-880e-449b-872a-f03acb42c64f
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dd0a0213-db79-4079-982d-ef38dd731604
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 635cd68f-84c4-49fc-a65e-67a684aa5a4b
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 68c5a754-4f3a-456e-bceb-bc8a87c1f25a
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0f52ddfe-a4f2-4cc1-bc99-967f2b4e17f1
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3b0341f5-a140-4e05-9790-f4019750aba1
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 52b2f484-48c5-4894-b0b7-f6abb6875fe8
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b46454ff-e1e9-4c0e-9e9b-a2540c178c41
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2d80e336-984b-41b9-9294-a66905200cc6
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e39742b3-25f6-460d-b81f-c3c24b0da5d3
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e972e195-6dfc-4282-ba2f-4c39ebd420d9
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5967f912-df3c-47c6-9aed-081bfe3124ff
Source URL: https://supabase.com/docs/reference/python/auth-getuser
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 01292298-7bc0-409c-ae5e-fc57050e413e
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 59d9f07e-f5ee-4715-8128-56826630a7b9
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: ae7c6fa6-54c1-40ac-8bc9-fd6eb166f375
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 459cb4f7-bb6b-4ce8-978d-10d6efb2a794
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e91a30c5-bc52-442a-b7aa-bb88361b9aac
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: ea11873e-a28c-4d67-be21-33952e8fbe20
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 82e388da-dddd-467e-9409-d48bce04c20f
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: bd80df7b-344b-4ba1-9afc-8a0ec30d19e0
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 22daadb0-c5a2-4535-a562-fb89423f730c
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 39585f41-3229-4053-9e73-d8ed5bbd41f3
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 34efeada-a3c5-467a-a02a-581d4dcfffd7
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 4783fce9-e9ef-4e44-9996-b8389a15097e
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 57ca9715-1de2-4057-9b3a-a0d023bf29e5
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 53661e65-2a34-4c1f-94af-0c64b2b1cea0
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b8fb312c-ad23-4aaa-a8fc-9182144d1ebc
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 45599f88-f435-4aa7-a2c3-b5cdc7051608
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 687be721-59ce-44bf-9a70-44c1d78c57b6
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 163e4def-29ea-4679-b796-54c95d5e822e
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ad74c193-7d96-42f2-b40b-30216ef757bb
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: f1ef5df1-7c68-4fc7-b7a7-c7951dd49507
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: a7d45ff4-bb60-4ae0-b237-ffc4bd265f0e
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 923b954c-d767-488c-91d7-b69af1c379d5
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 91749cbc-7fc1-41e2-a2c3-6065778e7805
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6abf6300-8af1-4555-880e-5930ce87dd2d
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: cecae907-16a6-42d9-ab92-d7fbfd17a518
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b2260fa1-8993-4165-8208-5fea9fa84472
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: cd8dd54e-c942-424b-bba5-951c8af05afa
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0652f610-6408-45d3-b242-8e2c901dea78
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: ad7eae89-454c-4266-9f56-2c8b80b3332f
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 88ed7f15-9716-4b96-8eb9-cb4019e34b39
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 45b27eba-72d7-42e5-a3cf-972b2ebe4e69
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 11ac2686-d3c1-44ca-b2c7-6967ee600327
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: ac9f3279-8185-42f2-a2ae-a3919837d886
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fc664175-24c4-4d81-ba67-c5fa4d0404ba
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: f83c625a-c038-4c49-8ad5-c411289ef280
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: bab7170f-1fae-44df-a96d-fe4fe327e62e
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 4d37f000-09ac-4ca6-b295-eb46aab4453e
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ecf0c298-b688-4342-9914-611707cfcdc6
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 82902d7f-618a-4d11-beab-6650b6f9dff2
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 49cad2d5-25fa-4a4a-9c2a-61b21eada5e8
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 3da9c7ff-edec-4e83-9475-1a15b0778aae
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 43c00b20-76a9-4ab6-96ee-67c680640f7c
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 0f3260e4-bebe-45ea-9e55-94c066f1a756
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 752177d1-81d5-442e-b678-a736a8e872ca
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: a9d7c299-36fb-4119-848a-d63166b15891
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 4b5dd795-29c2-4517-9949-8d2df1194d83
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: afd5175b-aed6-4914-af0a-a1c96ba5fa10
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 21f16098-a905-4149-b421-7cdf6d88545a
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: f74ceb6d-83f4-42e6-b224-e0d0f27326aa
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 8fc20776-7210-4640-ad10-37b5d2f1b5b4
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 45212b72-eb22-458a-964f-57d28524fe78
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e48e322a-0af1-46e8-a852-eac872416bee
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: cae84d80-c8ce-473f-84f7-3b6265abff39
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0fec74ad-c584-4552-8c2a-da209f9d2e47
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 4a10e4b7-c534-41d3-91fb-b27ba28f99b1
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1744f79b-d34c-4e90-b9f7-20f872cd209f
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 898e532c-765d-49d6-aeb8-45cbc7eb0378
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e956799b-3ec3-4c97-a5b1-be7bd91e5d58
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 22a79675-7014-4e2b-87b5-baf24bbfbd34
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 375d8ae6-9b22-4724-a90d-d72a7e7e0954
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b56f5abc-f76a-4f1a-930f-e2a47531c014
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: f5b2c8f4-c8a5-4eb7-b92e-dcbb82aeb7bc
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 571ae0c9-189c-4e28-a280-134af95361b0
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 8cfef660-6574-4c4f-83d0-4593d474dddd
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fc01e210-2267-4a5c-a627-ae4741cd70e2
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 22facee9-d36f-4c08-98d6-71e8d5ad6594
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 6870c03e-745b-4a74-9a16-e9f8aa5c103b
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: db5fb6d2-e71d-45b7-a1cf-91e71e1d2e26
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 82f63676-7df1-4d3f-8ac0-184a07c1aa3a
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: dfdcd121-3147-4940-8f84-98b05ac95645
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 6fc65b64-e659-4703-bea3-80e72a67e588
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c55ffb29-dfd7-4768-874d-dd9035732026
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3bdbd0d7-301c-4367-9882-6cbdd96461c2
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8549b8a1-7e78-4fc9-aaac-ba41074ec937
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 942e6697-43d3-44ca-89e7-4035b5008a3a
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 904e1514-9810-499a-8541-c18ea16411b6
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2481b487-ea6a-493d-bb8e-341b975a6d25
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 5a59fe27-fc44-4bf2-9e1f-5186aa80de15
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ddd98345-a13a-4949-b356-2a2d261e0243
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 16b4c8f2-a9bc-45b3-8588-bc9dfe0556c5
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 412b5809-d2f2-4c70-a9a7-bb6219e13e9d
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: adae2e91-b044-4a61-8d85-26a84d6cc4de
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b7229b50-5942-4e7e-967e-8b4c143f8bf2
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: a2db8179-85be-461f-891a-a603ea8577d6
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f7a36513-b1c5-45c4-be89-d04436e6b816
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: e310c0cb-50e8-49d0-ba59-1c7f9ed9c349
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 64c40044-35aa-4a47-86a3-8ac66e7d6f71
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 6a91302a-dd7e-4f49-ae85-31eb7a5ecf7f
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 920576bb-e43c-46d0-a9c9-73eab9ed348f
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 4086ea22-ed7c-4594-8432-a168ba68db4d
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 62a1be64-2be4-413e-b65c-100b4a3ba031
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 16294b8d-ef6d-4b41-9384-e23d26a93e93
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 04ce5dd6-e7b7-411e-80ea-95bfb4366a13
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 7708c27f-78e5-40d7-97b4-c837ff1fd8ba
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 38df4d98-a054-4111-8ce0-4fd44d999f9a
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 716b99b6-d552-4a7c-8c66-a18487e1025a
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: edbbf5b0-6997-40b7-873a-230ca3b7120c
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6a2b4b32-08ef-4187-b776-0bd26357bf22
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 54a73403-fcd8-4652-902c-5f7e7e5b48c3
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ee6ecdb1-1572-47e6-8b0e-8789f5262cd9
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: b57a9fc3-371d-4019-81db-140737d659fc
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 346986fc-0c61-4983-8ee7-e8132215b81c
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 376f75e5-931d-4939-9a5b-5c7cb58cbaa9
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d11ef68e-26a1-4ac0-8510-601af152977c
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c68cec52-7d50-47c4-9e9c-f774a60bd6e2
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5d2f27f2-d105-4413-8a05-97e8a5f34a8e
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 51ef33b5-11d2-493b-b670-62946bbaf678
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 798f7fb3-c859-4990-b737-aeb61f34c9d5
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a632abaa-b337-4740-acc7-2c61289853cd
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2aa1bfe6-cc7d-4517-b155-d9c1e3893585
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ced4310a-fbfb-4c22-95c2-2a3db3366cdc
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 748be27d-f675-44c3-9b07-7916a2e29902
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 89b4e120-adbb-4e38-901f-90c54d555626
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4758d951-f12e-403d-a6f6-54444c20aa60
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 38b27ad7-7c80-4875-b5c0-f873f85f7b17
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7655584d-e6cf-4a2e-ba56-74e0f20d6bf1
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 32f0322f-2fc1-478f-8b10-01a2b8b0c9f9
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 2f810cec-e47e-4f28-a1a8-03d066e9d4dc
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f784bf99-cedd-42ad-a1a8-d0cb446299ae
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 08822a89-2d89-45d8-bb15-7b28df0b5d4a
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 861e8e8b-a824-4998-83df-6f422723fb72
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ad9362af-8db2-429b-91cf-666458c1c46b
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 344b638d-04bd-49c6-8f45-59566abb0649
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b18ef2c1-bc68-4cc3-9cbb-cd8eed2bdff1
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8a82525d-2ddc-466e-8144-c09b634bc8d7
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 05794dc8-083f-4dd0-ab6c-b19b67d00e13
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6a89f5e8-73f7-4d3c-a708-a6b34974a7af
Source URL: https://supabase.com/docs/reference/python/auth-getsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 92c60ac4-5ca8-43f1-ba87-573b3a54a914
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: a97da576-7371-4720-9ee5-83dbd18307a6
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: e88e59c4-2956-46a7-98dc-b20121d58a70
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 991eccb4-2a51-4809-b498-4b0402b37e24
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: cb1150bd-746e-4a27-b047-ccd6d62376cd
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: f544261f-c703-42c3-a7da-8646329e0ace
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5f421a6b-4df3-464d-b778-f26773712ab6
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: da50a635-a26a-466d-b73e-6d329e454e66
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f97f736d-3eec-4ada-b1ea-a323d14b489f
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 7d4766f0-cff4-439b-ae91-31fd9ff74da5
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f71dcf56-878b-4cbf-99de-e0076f21d90a
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 50c0c5d2-c74b-467d-942b-8572c99096fe
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cfaab609-2e52-43ba-b98f-d97f1563cfcf
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 82fd49d6-4bcb-46a1-8e5f-3b96dd103a0c
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b802c256-253b-41f3-9de0-4ba4a3d761d5
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 40599db0-b6f0-42d3-af75-b3b6b0c55403
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f37e53b9-6154-428b-a96c-1243b3ea8d6d
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: b59ebfe9-e831-4d09-b022-ccc39ba006c2
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fc8b72eb-9ece-4e32-9de5-a2dc0bd81dff
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 9143aed0-8192-4aa7-a7c8-5780af9eb54b
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: a6503259-f972-4264-a6e5-5a7092e0d202
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c38a5dd7-0beb-4fd0-8558-4ca7e5bfa2f5
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 314d0f9f-6ea8-4eb6-8b4f-36194973216e
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7e408ee5-aa87-48cc-9f6a-c7b1015efc7d
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: a6b3f55d-5604-4218-80fc-ae9c49cc5590
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 7e9a93b3-019a-4008-a3ce-47029ae83e60
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 49cae1b4-b097-45ac-92bb-79fc235a467c
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c613207d-e9e5-4271-b72b-b41470a47ac0
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 9aaffb9d-f63a-4f03-875e-b32bf9656bd9
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1c4b10f9-ffaa-4fe2-a283-ad8b84c218fc
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: be239ad9-926f-48cd-a4de-4697275868f4
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5cdbddc2-bf11-4044-8279-6de690916f94
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: a406ab6e-cd2e-401f-8034-125717766237
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f8bb1787-9b89-4692-b993-579d5f41eb9d
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 345fa145-172d-4f29-bdd0-eb12acada1cc
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 29b0b055-c125-4fee-a53b-596a255cea47
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: c16462ef-d332-4b90-b1ef-8f2f97f60bf3
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 792aac92-fdbb-4cc6-b43e-5d5884a3033c
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 0f95db6e-6718-4b2c-b392-11ae539a8780
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4faffd4c-ef25-47a5-a2b2-6a345f7e4889
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 09652be2-ab88-4560-ae90-353938254345
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2eb1ddeb-66cc-40c7-8532-de3ba23d6393
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: efe17737-3804-44ff-949b-126167457c1e
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b26d022a-f961-442d-afd4-11491e27804d
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 594b1529-59f0-48f0-8a0e-bdfbe8c1b960
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 5846bf8c-2f5e-4cdc-9527-45d722927a2b
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 8b0e4980-edad-426a-ba90-43bdf7da3538
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 5d33ebc4-f2e5-44a4-b3f2-037a9906ecb0
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: a0770c25-1768-4790-9856-eca604a472b9
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e9e2ed20-ba4c-4839-a277-1b267067f9d2
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 45f884bb-7ec8-4de1-8b12-fb2f25d227a2
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 826c4fc6-06da-45a7-b969-129af34bc5db
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: a9d44c95-aa51-4aa4-b13e-9ed73b0a61e7
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ea0e11a1-3625-485a-835d-8ecd019934d6
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 55f19e3f-0e9d-4659-8536-7c2b8a4ddf8f
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e07b5043-6cf0-475e-b296-0e6567909428
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 8cd436a4-897f-4ba5-b5d9-140f40068184
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cabf9430-9e01-4647-92af-7e825a1e8919
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: ca254087-210f-48c5-b20f-cb877e1891ed
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5143a338-9f5a-4ccb-8230-3307752d87ab
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e9840371-93f7-43b1-a703-e02a0d2bad5b
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: a7870fa8-4a69-4c65-a85d-ba2a037dfd63
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: addc0a63-addc-421e-98dc-e58f5172bb2a
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 37e3842f-21a0-4130-a2de-b903113cd89f
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 71523588-4f83-4474-a5b3-b38018fd8bb9
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: f38c591a-f38d-4883-b906-16fb7f0f0e08
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 26558a74-a33e-4c38-b867-5fc907583db5
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e7cea509-7b3c-43be-af78-0537c3d4a9b6
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 61bbb973-2db9-47a8-af86-ba6a0ff0c8b4
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0e95f318-9f8f-46d3-b096-5d04fa4d02a5
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 077a71a2-9464-42a0-af2e-d2119c5f31c6
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1cb44849-7e97-4be7-8539-dffa68090cc2
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b0f2a1ec-274c-4618-af0b-a6a426a30a7a
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eac97371-bd28-46bb-8c68-0fa2366fee89
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e896e103-8e8d-44cf-be0d-f034b0e0b32a
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 7228b2e4-8bb0-462c-a43f-7d898909c05e
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d4fff7b4-8d73-44b8-9add-1ef69eb00a2a
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 0f100146-b956-467c-ab55-9b28be90c3cf
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f5e90157-5fef-4c04-92be-28153b3dd828
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: a1205851-a982-4d0b-8096-27f3e3d36ed9
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a0122b9a-f9e0-4dde-87c1-81063809fc5f
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 8b30edae-547b-4f32-9af7-4d26dce1ef90
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 80f959ba-4a46-4242-a769-7253d85d8a21
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: e70d4648-5402-4255-8cbd-56518b8d30f1
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f1eaf743-0cc3-4de2-8316-372eac244688
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 7baf1219-f9b0-4992-a38b-6d46e8a946b3
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 141f7632-0d3a-413e-a759-4e78d41ab836
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 0e711a4d-9aa2-4ec4-8421-6ddd7280ab96
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5507f1c5-80af-42ec-8954-b61b04b99bb0
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 25afffa1-616f-43c1-949e-e534068084ad
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 4972c79b-121c-4000-854f-21903fd0a2ca
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 6627e19b-ee6d-4f6f-bef4-1cb249aef240
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c474fc7e-e265-4c4d-af59-8e2039f6a12c
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 40c800cb-0c39-451f-a0c1-ed0e5323bf14
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c49757e0-a062-48e7-9e35-5971d65b9225
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 81579d83-9f18-4893-a9af-4929bf57e22a
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: b80a4939-f1fc-4e40-8475-532eea387b5a
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f7d8e7a6-ba8f-4331-a8ec-36b4db89747c
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 1a01c9a5-593e-4db4-9c63-239292da6430
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ed7eb9bf-458f-48f3-ba42-2c448d05e433
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 61d2889d-edd8-499f-8576-dc9b28c51220
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b01bbd55-81a9-4ebb-b189-ae437a877479
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: d6f2edd8-d0f9-4868-b1ef-724f5c4e7a7f
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f93eafcd-413c-4f4f-86e6-fdc9429c6748
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 574df071-fe6e-4ee6-8cf6-4d9771c3fef5
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4afbe653-9974-403b-bf14-770d322e8e6a
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: bf9d76bc-9cec-4545-befc-718d29e5587b
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a655dec1-d4b2-495f-b475-f79a92fb76b6
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0fad26a2-b924-4170-9220-867389238ac0
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8b47fc4a-b748-4c6b-b702-1b0c33d426c9
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 850dfad1-376d-4ed4-bc0a-aee3547cf901
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 271e3a74-ae16-46e7-bc0c-f66cb2250332
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 297b0b87-2135-45f6-b8c8-985627af432c
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d5306971-3115-44c5-8ece-7c54d6fb8921
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ebe722cb-9d24-425a-a648-ea87800bd26f
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4753474b-450e-4007-ab7f-1d6ed38994d6
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d9d63f7b-b7a7-47a6-b092-feed9b901a46
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dd2bc8b5-2947-4744-b856-e40e07245a12
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1ce45e94-b409-4eb5-ac3a-3324b59b081e
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 943c3f0b-cfc4-4699-b710-00d766c7d220
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0c92c183-b843-48ce-8cb2-f697acf73b79
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1e3076a2-4207-4cac-8a88-cdd98f336f2d
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5b63aa54-f2d5-4807-9dc8-34f146846253
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 34357970-921f-4059-ae9e-964456c3cc17
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3d803c33-9083-4aad-84c3-8b29fd81ca5b
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e5ef3734-7d78-417d-98e5-0546982b6c7b
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9a685b3b-75ce-450b-a251-b58100d0bef5
Source URL: https://supabase.com/docs/reference/python/auth-setsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: cd318626-ae71-4e0e-9748-5ced0d78e254
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 0530c174-e7af-49b5-9176-895b8efebfc8
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 328c3c55-aa1f-40a3-b808-9591b8d2cae1
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 13972415-2e65-43c6-8765-8da9d365c541
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4a803b82-1255-473f-b7c4-a110307f7ba1
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 66669b59-3f21-44c1-93f4-ec953b421198
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 932c05b2-4bc3-4b6d-a791-3794a528c694
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: f51d3d75-ec8c-44a2-9ff9-5849a9fb2837
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7f46a4e3-666c-4dfc-b2e4-0505ad407b72
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 93878336-c4e1-43c7-96b2-7ec485478caf
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0db5be19-197d-46d4-b602-c589166b1f3d
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 33cf4d93-5071-4122-bfd6-c9bfffb8f26e
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1f651f44-e8aa-4e17-a132-f880fa2093b4
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 7ab9fac0-b13a-4fb4-b93c-63f5698fadad
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1173aab2-8aad-4e60-a0b6-59ab933b318f
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: bdddf946-d53d-4d75-aaee-8c558ff0f155
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 590a5bf4-2e78-447f-91b0-eb49ee0725a7
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: ba4e2e64-7ad7-40fe-9520-725892f408a2
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 66de084d-df75-409f-88b3-ca43945016d8
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 48269b36-450a-4faa-b9a8-4d8d86a3e244
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: bbb9a448-45ae-4831-9922-9a4e99f3c32a
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 44dfe543-8c5d-46d2-8900-db14ce1d9e38
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: b61c904f-c48b-424c-85a1-debfe854b3dc
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: de43ff42-ae12-4a65-92f1-e5f8997825e8
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 00883713-eab0-44ff-90a7-71697d997355
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 879569ca-8faa-4389-ae34-af12e806a1da
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: f129f1d7-f174-4208-882d-94bf96aaf314
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b9e57d31-2823-478d-95a4-5c36f2ad3693
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: e9a4420b-4483-48da-8325-32e751edcdd0
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 90475b5e-9a66-4c23-aa2a-d377ffc713b5
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: d3677f10-4b41-4049-bd4c-2ce1914df113
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 70c03d15-756c-465c-b7cb-c5232954fad6
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 1c83d992-4a92-4249-bed2-570eaefe1582
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 87045c46-ef4a-4271-87fc-1e7ffa995d39
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: e25aee62-a016-47aa-a153-b4b04788a8e1
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c8feb82a-ec24-4915-b8d5-7c94c2a7c9dc
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 18b32acb-5be8-4b1c-a1fb-bfa5f5917715
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: aeb0c30e-aedf-487e-9ce5-755a521cf7cf
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: bfc59b94-393d-47e5-ab03-ee99a58ba8b4
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7ece7eff-4198-4ea5-98ef-f76b99ee2d63
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: a5545afb-bac8-4a48-a7c8-f6942537e707
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7c2b1160-dbe7-4167-aad1-cac4acec7907
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 06ac8154-ead2-4b33-907e-59f106a91466
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d94a6845-6758-4066-9154-8014241dab9e
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 2fbc07fa-222a-4d08-b686-1fc06f9636e6
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: a27883b6-702d-498a-88c4-5269208646b5
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 30d5ee57-aaa9-453b-b211-9b59ba44d9a2
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b7ff6900-647a-422f-b0ca-a07ea5fba576
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 1df94b44-638b-438a-adb6-ce1211016d82
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 64d9f4d4-0935-45ce-a0ae-6c9fde336c92
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: b465573f-be11-4686-be33-4fbf156f4ee8
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 29333c97-6b46-474b-b309-3b83dd42a1ac
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: aada07db-19d5-4f42-a4a1-bddb40f7a902
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 15e9cc98-c633-4a40-83d2-b73cfaa3d9d8
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 10bffbc3-6a3d-4d26-8df8-e6fbbff609f5
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 5332fa37-0ecd-42db-ae9f-95b067627001
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 6514ff47-1c80-465e-8ed5-aefbe5ac0bbb
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b722d5e6-e8c0-47b4-9ae5-a4e46123674a
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 3022b6d4-b554-4c61-951b-c1d1ee27afb3
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 147de134-caaf-4d56-8a1f-5c87c035c3cf
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c0d723db-1f14-486a-97d8-0a29a2ea8245
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: a24ac8b2-4e35-4a9c-8660-a9213ca474e3
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fe972692-1403-4d86-8af3-fa4bd6ca29f1
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: f0b2232a-aac8-4858-b5f1-0871f0271eae
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eac7fc98-ab4d-4e0a-ade8-0dedff6b29f6
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: a860e2d4-e4b3-45f2-946e-28ad68eacf64
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 625a3241-82f3-4b3c-b0d8-72aad211dd0c
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1c34d97d-4a10-466d-b8f0-fac5d12dbe85
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: a656da9f-afaa-4616-81e4-492d087460c8
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: de824355-bf7b-455a-a4e8-a756e3c7b92f
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 52574386-6ad2-4bf2-b00c-2450926de9e2
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eb7196fd-606f-45d0-9541-8a833d838f30
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 760c61a6-28f6-424b-81d4-178e0d1c1d7d
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e0ee70d-fa19-4085-a13a-1ce69641dc00
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 94637e33-8498-46d4-89b7-055e6f7e51c0
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 87b6a80a-7e74-4601-8917-f128f8ade27d
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 45d6eb9f-dae8-4fa0-820a-7f5fc8aa42a6
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 63aa5e5f-0d65-458f-925f-ba80a59e772a
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 78ddade0-e89f-427b-9bc9-19d6494cd2e2
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: e7de02bb-8b49-4ce1-b096-c6f67d04bf1d
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fb05ca81-8bb7-4bda-b1e3-8a54bfe30d42
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 47bb7934-1379-4438-961f-7448503f4754
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eeeca2e5-3dcc-4030-8422-3ce715df6415
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: eded2035-91c6-4e4f-910a-a5fb5fde3cfa
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 93b51fe8-78ce-41a4-b0f1-4ec510e4d610
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 572d3d1e-dc92-482b-baa4-246054fdf43f
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3b5407b0-f0aa-4703-bd44-0e53f1488ac9
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 6abd999b-470e-4837-9d2c-72a01ec7022c
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: af9c8a5f-3bf4-470a-8327-9630cbff497d
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 74bffd14-1f0f-4be4-930e-d05d83663240
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: cff88d8e-4a94-4184-8224-a09ddf6791ab
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 6f54c36b-9263-47dd-bcdd-aa930180a5ca
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 02777696-e258-4096-af70-f8c9ee648888
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: eac1b959-bb7f-429f-9508-1aeab5843d20
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a8f0b60a-3480-45b0-b745-538f207c477b
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 14197090-5272-442b-869f-956a41004408
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 19c2859a-99e8-464b-b9dc-cd0bf3083bc5
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3de8e0c3-d14e-4f46-b309-fa89958affa1
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 1853abe4-0359-4d99-9738-6499de8ce64d
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 355e0d5d-9fc5-4489-9f78-c0f823e7859a
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 08d14a2f-a33c-4b35-abd0-7792f2e0780f
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 398e8d5e-97e8-4de1-92d4-d6b918e02540
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 6e30bbaa-ca8a-4a12-a4d4-3c3e29353d95
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5c5a75c6-96c9-44ce-8410-19e334ff00b1
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 14ff8b32-18b1-4ab8-855d-480c6222841b
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0bd3b351-5709-4537-af34-3289a3cd35d1
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 868d109a-01d8-43be-afbe-d317f8872dbe
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5dc420c7-021a-4605-92e6-a8d57c5e628e
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 32bd2ecb-8142-4fea-b40c-a51d30c04827
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 27f3ed7d-38ab-489f-a4a7-bb8375c6e589
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c02e8120-5947-41c0-8899-0f08fe046f1a
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 80d9c61b-2e00-4657-801a-a68214261a75
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5190a629-29f2-4d67-bfa2-f19825142634
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 25d0e76d-0048-4e60-9724-d6e55f6cb40f
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e8ad5b8b-fd93-44ae-831f-151b4f7da00c
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0c19a3ec-8366-48fc-9288-8f01f114ad9d
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a33b9449-4681-4d1a-b77e-490d4afc6340
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3c649cc9-2b0f-412b-a56c-29af9e0da174
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f5b20321-7c28-464a-8075-376b33809e8d
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4df9f194-4629-4dac-8f9f-a5373e9e1765
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3fefdce6-0837-4e63-b1d4-68af219898c6
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 832a1ddb-44e3-40e0-8c9f-5d0f25b2aaa9
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f63c3cdf-a04c-49ca-95d1-3da0b44aaa2c
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4f5b51b2-4886-47dc-97fa-99d1b3dcd152
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dc8aeaa0-ce53-4248-8def-0737fff8de30
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 262d62c8-d2f8-4d46-bb69-73de7a6ed30d
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 03eda1cd-78eb-4e1e-af9d-97728489ece7
Source URL: https://supabase.com/docs/reference/python/auth-refreshsession
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: b75fbbca-e0b0-44d8-ad0e-9c7bd09e0a9b
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: f36f7cd7-9c33-4060-8f43-3335e62785c1
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 0aa338b0-90fc-4d9d-828d-d2398a733f44
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 7b01ace3-0c27-4364-80c8-c405ef9298c3
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dc2d2005-c721-44ac-9fa4-8dcf3acb4e19
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: a420acc3-0864-4ed8-8899-94bc32162ec6
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c1196505-966d-4396-9fb2-03a3017d880d
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: d2548201-fd81-45ce-a701-74c47c83a718
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8071a80f-a4ea-4d1a-a3d9-20b3517f8c2d
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 6e9e2050-cf42-48a5-bfd1-cf4807d9da21
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 226f73f8-b83b-4b79-9fbe-0328f12b4b7d
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 52c0bc1b-939c-43f5-9bd4-f86897ff358f
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f3142ecb-1082-4f20-90cb-ab42b16727ce
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 4b016c3d-2693-4903-bc90-671c7f675fb1
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 789e3562-d6dc-4482-bc92-f267a992a2bb
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 43fcdb52-1147-46bc-8358-61ac03f30165
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6c5ba04f-703f-4603-af6d-a06e54596b06
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: a139518b-2fa2-4618-9ac5-257eb0d2e8e2
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9765c3f9-b9e9-46f9-b04d-48c84202c89b
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3657ac46-8ce3-4cee-b313-385c3db14a70
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 63a54441-0195-4f62-adab-cbbe8f86fb9c
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8a4add5a-86a5-451e-9c75-d9931f6dc539
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 7cd6014d-cc1a-4b9e-ae0c-d0d6c8187183
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f752e704-362c-4503-a911-53769225ca15
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: ed05fe51-01e4-4e04-a37e-0fddff8e30a5
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: dc1db68b-5fca-4ebc-8425-d2ad5ce75237
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 667d395e-d7af-4c1a-9370-d40876472e56
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b1e42dd3-e686-4fa5-b686-48da9a6a5ef9
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 7573efa6-bd51-4249-bf68-9d752875bad2
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a15f91be-c56b-49d7-8951-dc8ef783ac6c
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: ac218f0c-d7d3-4806-bf05-d8f170a39bb1
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2c6bf671-c815-4c8f-8064-a90a0bb74509
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 3117d2c0-1d40-4e33-9556-428ae852e5bc
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a22b2d89-e7ad-4ae4-8482-8d9a34513987
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 7d16b38e-33f5-4df0-9562-cf8e23b5685b
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 325e1b9b-9a0f-428b-b1e9-fb3c4a53796c
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 9990c51c-77d7-44ad-86df-defbf3e437e8
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 24bce00d-c608-4e09-9742-9fa131a2b5cb
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 78472b2e-21cb-4353-b32f-50282c227624
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fc499dad-bf94-41bc-a0c1-58ddca0f9977
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 0dab29f5-6fda-488b-8620-dfed448c6221
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 23e01284-6f89-44d4-a743-65fe9cc4630b
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 08dc507b-78e7-4986-a19c-180397593e34
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 87a1e70a-2999-4639-88b0-bd901881a425
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 40b8ba6c-1694-45f8-b610-1f89c6141ea2
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: dc8e770d-be5e-4447-86ea-03a5b3d47722
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: dc67f0cc-7005-4a9f-9005-072b51cb14e3
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 5d14c631-40d4-46d2-92e4-a936884f0cb5
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 4c74fd77-0ced-483e-8090-95663295ff6a
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 237ce37d-a8c4-45c2-9589-a6d61da77900
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: b739adf9-6c16-4899-8520-07827e075a1e
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0e117175-2da7-45de-80e5-6dd1865ff77b
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 5d214556-bd70-43c7-8d23-0b070e21ecbf
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0d256882-e1e2-4d26-8495-668dd77e7fa5
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: c54a9fb1-3511-46f6-b066-92c8f08f4e2a
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ff0edac6-06a6-4435-8826-9a59c68a376a
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: ea2041c0-c7cb-4d6b-b004-20ea55d78c87
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eac88383-307e-45ee-9075-3f40d518863d
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 70b45c89-5d8b-4c5a-90d7-0269c9fb6236
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 53e10458-ec2b-4861-adfa-0315480fd5d9
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e3cfc978-c12b-436a-8c80-918e97700532
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: d4d7480a-8ed4-4380-80fd-8eb10cdcf223
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d36e9459-d04c-41a1-9e5f-fff749ebb8a9
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 73fc717b-6073-4b84-8d85-1f4d3e2e9315
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: bf08dac8-46b2-4be7-a5d1-dd8556252e8d
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: c9cfe457-a92d-4f79-bb3f-f2d393501f22
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 5132d3db-d747-46e5-b2f1-67d1bd67e299
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4228145d-d77c-4c7b-93b6-50d648652065
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 43cb0175-10c8-48f1-bd3d-82102942041b
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b81e7724-3fe4-4ec1-9bed-a8485d5f61a5
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 2a717893-41cd-420d-b97d-45abffbd8cda
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 29f1437c-90b1-45c3-aaf1-e84d946003e3
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4ca7d14b-3194-418d-be7d-6f71a72743ed
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d806a706-12fc-47a1-bb4a-247223203e0e
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ef774c97-9c77-4326-9c67-5039fd431289
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: eb14fb00-6148-48f5-a992-1aa72b04668f
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 734b7b90-3148-47d2-949c-dea721c51039
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: f6729bec-b6ae-40ac-8cb2-48f245b2eae3
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cc71ff1b-b2df-4aa9-b48e-cb6791f374f0
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 22e22ea8-21d4-4264-a9da-0d3774a7214e
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 29607a37-b0d7-4a62-91c4-e745ebe2ac62
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: f28341fd-1962-4efa-b88a-526f144b8182
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3e6c7c6a-4e0a-4690-b8bd-d5024ee7ccf9
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 8870315e-a7b6-449a-9630-58ec48d426cf
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 668f900c-f78b-47d9-8825-03acf4ae7f3d
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 3c13f463-e25f-4e19-9b24-1c13768bd1fc
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: a6105e1b-dbbc-48c1-a502-55a4c06f68c9
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: ae3f8f75-dfaa-4a76-80bc-d54a75b538aa
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1c563605-eafb-48de-8122-6e85245f35b5
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 37fdec8e-9e7b-437d-9ec9-46c3e1b0fcf4
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6c6fbd17-c8ce-4e17-9dd7-b70cb649b105
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 80f126d5-fbf8-4971-905f-1136668d9b31
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 409c2900-6b80-47b4-8e87-9915982912a8
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 3ec6acb9-37af-495e-b464-d89303e96dbf
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6034d1c1-9c3a-424a-84a8-e10fc2867568
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ab90fa40-1a48-4893-b717-3280c961b8fa
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 6d8be58b-4769-4228-abb5-7b570dad5dab
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3dfe812f-eac8-46a5-8efa-8be1ed605fb9
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 74015fc8-308e-470c-b6ae-c725c774c627
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: be06ef85-2b0f-4ebc-a0e1-b606f949aab4
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: ad8eea1a-98c4-4347-bf32-f6a1d76d15b7
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 9ce37808-e6c8-4dff-9377-4eebe303d8b2
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: fccd74c0-14a3-4858-851a-e314b0d3f964
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0aa0c90c-0606-4d57-9fbb-ef51e0874022
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b7530245-e8af-42d5-96d4-2b783e266290
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ab934e4f-74fc-4e8c-b33e-344325c2a13b
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 90ae8baf-c122-4c1e-8e4d-b32503b9ee24
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 662ad13c-406d-4fc8-8cf1-8f42369529fa
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a0024740-8f66-47d7-af3f-d11b73fbcbf9
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a304d302-96f0-480a-8abd-9e9c988e6dab
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dc97e6ac-6da6-46af-a341-8119b844f4a0
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3ac26387-3f4f-4a2b-9223-878ded77b110
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6b90fcb5-c79f-4dc9-8592-7bd5af01db9e
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 38bd814d-62b8-49ce-8621-e935d3cc1a30
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d934f9c7-59b2-41ad-949d-ed7ff34a0fa9
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3b94e34b-2194-4a17-8ef5-2b128d668062
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5a12dd41-5382-4165-bf95-8b7bf06868da
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 311333be-e51c-4719-b09a-3c36aa085128
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9dbb8f28-3cd2-401c-97a8-a44bd63eee17
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7ceb7bb3-8891-440d-8e3f-25bc851d0b5c
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e64a18c7-5bd6-4171-b0e7-05c37650c0fa
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3404ef40-53b4-4079-b90e-b730ef7fea6b
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f0da950d-3a39-409c-9c8e-fc9a46d96871
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8ff111aa-a3ff-46c6-a620-60561db55872
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 969e47c9-7016-472e-ac8c-5433eb92b04d
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0bbae324-de9e-420b-93e9-262764281289
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 8747deae-bfae-46f0-8d06-524c3c9cf1b2
Source URL: https://supabase.com/docs/reference/python/select
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 8e9ec881-64ac-48ed-82d1-06ddb9906f08
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 9e0cc8c1-9f43-47d8-93d0-d1b4f499a4ba
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 395acb4d-e2f4-45bc-9c24-cbd873907b4c
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 7d845c65-a500-4818-a5e3-18a02764ea87
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f6fb6ba-f3ec-4512-a8f4-48e7d64312f2
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 4af2ba71-8bdb-42f5-8c03-384e01c595b0
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6a172af7-7b54-4113-9531-79a4f8c01e25
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 2416f8de-24e2-4a31-b0ca-a22b1781199d
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: afe13f34-5126-4e53-9d27-fa2055ee8b8f
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: 46cd8c0e-cf30-4393-8a12-45c7091acddd
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 38dcafec-2010-4bdb-9f03-266ffb48a0a9
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 5f62f608-a961-47e2-ba98-ae07ea840dc1
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8a194e67-bf24-4200-bc0c-cf33ae9a8f08
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 57c7e27c-b660-4bc6-8a22-b4b527141b4d
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: dffb3874-76c5-4a7f-9a97-27db6ac605a9
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 894cbd9e-8497-4a11-abf2-baf1e3d8fcb6
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f99ff43d-c6ff-4538-90aa-904c3f503d9a
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 10f61fcf-b665-40e1-950a-26f0f8574a24
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b320bd4a-2532-488d-98d1-d1c9254d70ec
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: f687d672-5911-427b-9575-d1b064ee186a
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: f1725f19-5b1f-40d8-a2b8-0f82cecf8107
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 2f7ecf91-cf16-4045-ae79-960097370357
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 28822564-0b84-442e-928b-a806ae86bff0
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 80b8af8f-653d-45a8-9c41-d2cb6ae5381f
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: c8725c35-fb03-463f-9bc7-f72bc58585d2
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 78f04091-b1a5-4b95-9ecd-e40a32795013
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: ad01bedc-f368-4ab0-8c18-ce6c28848a73
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 99885aee-ab15-49d2-bca0-60ca776ae424
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 28c5510a-aca2-4c15-be8e-18b37280f6f6
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6d1aad90-f81f-41ce-86e8-b0a53428ef3f
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: de7f160b-20af-4682-9742-50dc1d5ca8a1
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8136ae8f-5e5f-45f6-93e0-db19650d524c
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: ba3aaa52-8e25-4eb9-bb19-aa6024af72d1
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: decdc932-625c-47e9-868b-d3b36c9b4530
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: ca252a0d-ede5-4597-a4be-1990d7bbb098
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0466576b-424e-4724-9cf9-a400776e6563
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 028db878-a2d0-434f-a59e-c15aa7451d71
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 191c19a6-3f3d-48a3-8fb2-f5be41a66ef2
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 0d1895ab-3c74-44cb-9019-c1924703c944
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6b64e70a-f062-4758-89b6-cf8df310961d
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 74c38e39-b05f-479b-b469-7770cb487537
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1d4fe8e9-8956-49f2-ab27-db1146474587
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: 8aee83e7-3670-49b1-8161-ab2fa125993b
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ad98a139-d1a6-479a-8677-f844f9d05720
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 2d7ecf07-008a-4c91-b7d0-e25c87f748cd
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: dff6227c-a6c5-443e-9ab6-85729674cf52
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: b2ab2533-b6a4-4ba2-88e4-923074446cc3
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 301f4188-9bb3-4dd5-90d8-0ff7fef865bc
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 8076331d-6b6e-40b7-a79b-7041fc8b22b5
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6ac95d71-e706-4405-9c60-01e0202d8050
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 61064045-bfed-4791-8a89-1ac27c0b9ac2
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: de6a7575-3817-4b14-814c-62cef59f24d6
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 63f49d4e-3e68-472f-9277-c50f53910eb7
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ab358d17-550a-48d3-95af-5bfd8fa70760
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 27d059fe-52b2-45c1-a1de-0233a8b47ed3
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 463d942a-a1a3-4097-857b-c913a2c6613b
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: dab553f0-c44b-4bcc-9438-9e4e3573729d
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a4574379-cc03-4929-bff3-cbcddf305a49
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: be1d4c15-0142-4bba-9f2c-4aafe6389a7c
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e171d1b2-bb12-40d6-950d-a6dbe8611b68
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 244b9c68-8106-4df8-b09d-dcef390ae4bf
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: e121baf7-8ad2-4869-9f8d-f264a5c22ff5
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d0cf3552-975a-45f5-aa21-53e06451d3d0
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 9a49b946-f350-4683-a510-dd0b2aa89ad9
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: bcd10ff5-eb96-4dfc-aaf5-be22e018f56a
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 6a4ee36a-d976-4744-a6a8-16962c865795
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: ca801836-7624-4b3b-9ddc-0de0fa9c8f07
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4f9f073d-2c1b-4769-914d-975d4da69f6a
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 0c9cd6ce-c7ac-4e1f-af23-fc2409baf57c
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 576863ba-8985-4bd0-a86a-ef32553711cd
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: df2510ad-044d-42ef-9367-d6465efdc11a
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: caec389d-b062-410b-a240-1a0c77c25981
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6a9b3dbc-3ca8-429b-a177-33584f316a55
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 83622290-fedb-442c-b4d9-83dd0e74713e
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0d5bdcaa-20f0-4db6-b49f-820d096c75a4
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 46cebd2a-4d69-492b-bf94-81c98de60130
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0a4f2646-c027-42da-9928-f91d07c4324d
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 650b0b1f-b254-43f0-9a4a-284113bc6efb
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a8b71662-b0c5-4087-8fcd-188e2c8e549d
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: b50349b7-cedb-4765-b6b4-5616f5a833e6
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8ffff47b-a318-428c-ac55-c87de54be719
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: b0dac671-7cd4-4855-9552-46b37af5eded
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 1a3439a0-6c02-4ced-9c91-78ce45bd25f8
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 02ee6dd8-cef2-47ec-82c3-4e9c27bd6bc4
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b16fd097-ba05-44ac-aad8-015b22e460b6
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: 22ec2346-ffd2-4d13-9da3-7fe800add644
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 4aa821d2-0318-4b69-83f0-2068bc0f24ec
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 676cfa2c-44a6-43fb-82fb-4c08a0867f29
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0ecb3ce1-7323-4f90-8b3b-7c11c4b9e32c
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: ae6cae38-0d3a-4be5-9d24-aacc54d13b69
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 6cbafa38-54a8-4af0-b9f6-c7e607fbcc57
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: d5bc77c9-3395-4223-af19-ee30f9f75b5d
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f42c934d-7492-4dc8-b811-83ceb6817ba8
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 952b626c-fd5e-4873-a573-0e96f3568d9a
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f167f819-67e7-44d6-b2be-d1c4b84a4768
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3811e825-c8b3-4347-a0cd-93842f4cfef0
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 8cc72cde-90e6-4b65-952d-da993d36cc00
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: af94e088-2c8b-41e5-9946-f7e727344be6
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 6469ebd8-c0b4-4efe-9b47-449611b68e34
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: eef4a2d4-d4bb-4066-bd40-9899226d6c9c
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 22015a22-f0d5-487d-bb56-bc44a4b6c28c
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: c7f6af02-c181-41bb-b287-f63f7950f836
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: f62ef6dd-c1dc-462c-af76-a9e514df2779
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1dda74b4-21b9-4f87-b221-0173e7f40681
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e928ff6c-7057-406f-b846-50e4b5185782
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 234edf7a-7c84-4664-94c8-80120712ddde
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 104b697b-5010-447b-9a40-70c215f7f70f
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 6ceff8e5-715f-41ed-aedd-b3871386e342
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b1eb975d-f11d-4e1d-aaad-6a5faacbb701
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: b55ee40b-adad-4f76-a421-285546b20739
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1ca8a5e8-7ceb-48c7-bcd2-b76b53e3d675
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ce6b9d3f-fab9-4e32-a3a4-9ccfedc8378a
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9e433a0b-b589-4a93-845a-aa2334148eae
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d3ef3d16-d759-4e1d-91e6-85a861c16c65
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 47e644db-dbcd-4387-8255-f5133072bc36
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 24ea1b52-5e8d-4dc4-9fe1-63df39564877
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e8b99a26-c5dc-4285-96b1-7be8ebc6d7f5
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 763fa365-1cd4-4895-90b5-058c7b2d8702
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 48aab1e2-2346-421a-aa4b-b03a14101cfb
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: cfb82b6b-849a-40ed-a115-5a9df3765bd3
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 660d86c1-9207-4266-842b-b8173ae57307
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 30c8de3f-49c8-4fba-a235-d196d0c08cb8
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 1e8234d3-c325-4b48-896c-68692dabc79f
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5aa861d4-158d-488b-b948-6833796285ad
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ba30918c-ef20-468c-b2f3-7c6e0c814779
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 577211ef-2513-4377-8e6c-b3946c5648c8
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fe345999-1cdf-46df-9c3d-7d0bb159de42
Source URL: https://supabase.com/docs/reference/python/insert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: ff0ff5ff-cc4b-4c8d-9f6c-b93b936d8134
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 6dd786f0-26a1-4b7c-96f6-cae1fa870e42
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 2f4542d7-344b-4411-98ac-48c23553036b
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: b60e7f1d-2231-4f46-8f73-053f9ca85ee3
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ae7d69cd-ece0-4e4d-8feb-ac74deb65d36
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 83e14455-9756-4229-bccd-18056cc38b6d
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 93389c04-3b6b-4dce-ac58-6a8c319cb8d4
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: 57a9fbb3-8cd9-461f-a38c-0e8c842338cb
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b3b03315-eeea-41b2-9300-a4b5d9bde3b9
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: b700589c-05bc-4bf8-8450-0d0d6cab96ea
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6774d76f-1c9c-4092-b816-c08b06a28a5e
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 4cb16e1e-9faa-4a81-844c-77e25b7909c6
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a4d65fe5-6c34-4483-b082-357a5bec5d69
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 8ad16220-6e64-4657-8b32-d8481e58dd0a
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fb9210e9-bca2-4b4f-b09f-6146f2cff02b
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 56fc2050-0395-4c14-95f3-0bb961a016a1
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 464489ff-b2c5-4716-99d5-42a1dd4e570d
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: ecfcdeda-d4a0-40ac-81aa-e3a54ead98b1
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: e470f0ee-25af-4c42-8fd2-625bc39c340d
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 70fea7bd-f0d8-4915-b5a8-a344334e45ba
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: d106d661-7857-4768-99e5-d1ce7d04deda
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f338e51-8de0-4642-a3ef-ce0d28cb3517
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: ea53496c-641f-4a6d-9398-4c9fcf8a37f0
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d442c0c8-2a8f-4f49-96f7-ff9434ce038e
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: 6538f21c-df38-4f95-8c56-3829f72faa8d
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 44fc693c-18ed-4566-8108-ab2457327b78
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 600ffb6b-16bc-4902-9564-563448e781cf
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 47880641-3a0c-444c-a6ef-64ea864abdb6
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 9258deef-18a4-43a1-a75c-46b17b91c7ce
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6f2c3626-027e-4289-8425-76040c52f130
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: da20e4e1-a82a-4be3-9142-43f9c78203cc
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 08851017-b317-43b1-903e-d9bc9d706200
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 060e61f6-cdbd-4a1c-b5c2-649eccc8da80
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: dc118800-4912-4aa6-ad57-0bcde7155592
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 7361c6f7-974e-4237-852e-39fd5905bdac
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 4b8a6571-a581-488f-ba09-1ea15b278d6b
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 36047d85-eac6-43b0-80a4-479fcda99a0d
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: a989bc59-6c3e-49fa-bc12-215e3011a567
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: dc6e6526-d5bc-48b4-a420-164e08a54eec
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 98483ab1-c738-4a3a-b0fe-c70fcfce6602
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 9948c371-1ea7-4603-b836-41482e3546ad
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 39e22ea7-ca1c-45f3-a007-63894a37d16d
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: e32bb2e5-1a19-4760-88c3-09adbd0bac82
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cad2ef07-7703-4f26-9d71-3a672691b605
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: d879dce9-ea2e-42fb-bbc3-9d59f019bd62
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 7e95b5c5-473c-4a3f-afd5-de5e8b99393f
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 9b5f813c-fae8-4929-b2e8-6a825511c619
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 8f0012cf-9a44-47ed-8713-440b03f145f4
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: ff8085ec-8615-42a6-a66e-e2b6706d882a
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e5db03c-7bd7-4db4-942f-0e2eecae006b
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 9cb2542a-4157-4315-aef5-52678c091480
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 879fa342-c012-4e6c-94d2-0ec20284c828
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 34bdaefb-f76b-48f0-8b60-f64f2637fbca
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 37d7c05e-77fe-4f0d-9e70-4fc2489d4061
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 60cded90-47b7-49d9-8794-248d7ce61b69
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ea92304b-eace-42e5-a7cd-4c89fddead6a
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: d6184e7c-4885-4b1e-b6d0-4196cc547401
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c3c0e1ac-d2d6-4b4b-8641-9dd5deff3461
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: 717814d4-ced8-4e1e-80a9-b41910a3b47f
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: aabb73c4-d92c-4f18-aaf4-334db1cf5af7
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c7600e7a-fd7d-4ebe-b9f5-945c9e94e653
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 22b4ee13-84fe-4c04-a8f7-f7cd10513f3c
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3feb1b9b-0f41-44c3-9e18-6472d8b66f1a
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: abbd85e1-8476-4d14-b0a4-55499f873147
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3801b05c-0730-4adc-a1d0-f6bad20665b1
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: db04ca91-100f-4597-a4af-ce32262232da
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: c5c66902-f7f3-4212-acd4-498e4c90d831
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 77804b66-0afb-4b62-8ab4-eda357760745
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: 1f26e5b3-bddd-4f56-8505-98cfebc73fe8
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b18019a2-2a21-4f41-975d-713981833b29
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: b38380d3-f5ba-44f4-b753-f24f95822d94
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ca2c28f3-bfce-4b99-9e5d-21da8642dc40
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 815d8cb1-295c-4b9f-bf9b-e65501b2baea
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 80efee27-adaa-4c87-b57c-3445401ea631
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 8982b21e-e85c-41f6-8e59-60c9f18437a8
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 706819dd-722d-4b53-a236-c37722ead950
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 0a9b8f66-5de8-40a2-a00a-f40cfa6f7616
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: d085a353-481d-4428-a140-09f1a2391866
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 07f19bbc-7d35-48b2-b7a7-2a0caff93ce7
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 074b4175-be9e-4334-96f5-9e15e3468086
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3a32e45e-d84f-4d6a-9be7-12324dceae4e
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 0e54a382-433b-4f7c-8e7b-4b8291d9cc9b
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 31e09efa-7714-4b13-9c36-9c00a655f013
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: a137406c-955c-45da-b67f-06e6ccbde3d9
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 13c2eb37-65ad-4b16-9b0d-313347e7031f
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: a5a085da-18f0-4b6e-95ad-545b7b9be4bb
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 201edd52-98ac-430c-bcf7-ff94074d7bc3
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: 6be7f260-2877-44d1-b032-02eca5b98d21
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 358cd4db-9594-46f0-be2f-5028f74642fd
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 3ac243ca-fa1d-4c3b-ba5f-1bd00db81cc1
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: f8799e36-6493-4c42-a3cb-d9e7c99d66b8
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: a7910ee2-ed77-4e2c-90d3-2131770e8cb1
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e83f159f-4c11-425b-b4ea-8231626b9c72
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: b4366ae6-7a61-439f-8917-42197e82aaa2
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8cb1e169-cf2f-4de0-a222-a4c2f42e6a3d
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 57296173-008d-44c1-8d24-cf62618b9157
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: 21e24f4a-8d17-4379-9fd6-bfb2e7beaed1
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 50f20a2d-2f6e-4333-a007-52b84096d4e9
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 8a9145eb-13eb-407c-a434-7637fee64ceb
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: af59c4e8-4cf0-4747-a88d-4ad1d7bb8709
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: 22d72069-4fbe-448d-a6f2-690e0a5e2c5d
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 89bb660d-de36-4afe-a808-63cadaed3335
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: 07c8b797-4c0c-45e6-bb83-538326344b06
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0c8680b9-649f-49f0-8fc0-7b382a321a1e
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a27c7c89-d95e-4dc7-bfae-ff8994c79c72
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ad26cd26-a5e0-4857-a9ff-c2e22667866e
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9eb2ca37-9b99-4bef-8a4e-2d647d174249
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 015d8393-3af1-4453-9b6b-f10e21875eea
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: d031607a-bb11-4f26-9988-cf074daa3c99
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a0b0b187-4a44-423e-94e3-e2bcb6972e94
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 82ca4618-a54a-410c-8913-306226a903f0
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9dceda10-da62-4001-8793-d231b26d16e6
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 0f9c8348-1350-416a-bdff-6f148adfdc26
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 303f24be-1c8d-4449-bfc8-4ae413d6759f
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: f5a91b13-7f36-410b-97ff-2a91092de0f5
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: e80e2037-615e-4ada-afe4-4d400db6e622
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: f571f134-bb41-4611-8a3a-d85631e6bed1
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 68457455-4c24-43ff-9763-383b76f804b7
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a51d9e02-e7bb-4354-ae23-b993bad8f9be
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4ffd0c62-64ac-46df-89ce-dcb615a2b156
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 324c22a2-5397-46b2-8b7d-cdb798419aba
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dad0a4e4-aaae-4525-81ac-df84a61a93a9
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9a2d6c5b-fe9f-4ce6-9894-b36edc31cc36
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5d67f582-861a-4515-885e-1d14d7b8d873
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9c272ed9-4e79-4e81-98ab-8acbc8b06b61
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 3fdb6e18-f785-40b7-bf75-9a48e70b4c95
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 09945ef9-7db3-45c6-8e6e-a0d37a5f2bbd
Source URL: https://supabase.com/docs/reference/python/update
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

Chunk ID: 0d8e598c-8ac8-49da-9f4f-26d93a450273
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "",
  "H2": ""
}
Token Count: 7
Has Code Block: False
Content:
Javascript Reference v2.0



--------------------------------------------------------------------------------

Chunk ID: 4b958cd0-49d7-41b2-939a-33237f27f5fb
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": ""
}
Token Count: 113
Has Code Block: False
Content:
Python Client Library
=====================

supabase-py[View on GitHub](https://github.com/supabase/supabase-py)

This reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)
. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.

* * *



--------------------------------------------------------------------------------

Chunk ID: 2e17959d-6876-4bf9-b46f-77f4c75104d2
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 3
Has Code Block: False
Content:
Installing
----------



--------------------------------------------------------------------------------

Chunk ID: 8a06ac98-d920-4e99-bcbe-b280310bf4c7
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Installing"
}
Token Count: 56
Has Code Block: False
Content:
### Install with PyPi[#](#install-with-pypi)

You can install supabase-py via the terminal. (for > Python 3.7)

PIPConda

Terminal

`     _10  pip install supabase      `

* * *



--------------------------------------------------------------------------------

Chunk ID: dc8d88a7-466c-4bd3-890d-4e7d6e8204bc
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 57
Has Code Block: False
Content:
Initializing
------------

You can initialize a new Supabase client using the `create_client()` method.

The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.



--------------------------------------------------------------------------------

Chunk ID: 73218ddd-84b2-4cb2-a9ec-55d60db952d5
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Initializing"
}
Token Count: 166
Has Code Block: False
Content:
### Parameters

*   supabase\_urlRequiredstring

The unique Supabase URL which is supplied when you create a new project in your project dashboard.

*   supabase\_keyRequiredstring

The unique Supabase Key which is supplied when you create a new project in your project dashboard.

*   optionsOptionalClientOptions

Options to change the Auth behaviors.

Details


create\_client()With timeout option

`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get("SUPABASE_URL")  _10  key: str = os.environ.get("SUPABASE_KEY")  _10  supabase: Client = create_client(url, key)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fb5eb723-c043-4bfa-a509-2675a5d1a856
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 174
Has Code Block: False
Content:
Fetch data
----------

*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)
. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)

*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)

*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)
and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)
.



--------------------------------------------------------------------------------

Chunk ID: ca10e1e3-31d5-4d9e-9892-88c8125ad02d
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Fetch data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   columnsOptionalstring

The columns to retrieve, defaults to `*`.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query

`     _10  response = supabase.table("countries").select("*").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ec993003-b757-4439-92da-a37873d0047f
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 4
Has Code Block: False
Content:
Insert data
-----------



--------------------------------------------------------------------------------

Chunk ID: a991e021-ca47-47cb-9197-5f6c6ae6db9e
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Insert data"
}
Token Count: 173
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Create a recordBulk create

`     _10  response = (  _10  supabase.table("countries")  _10  .insert({"id": 1, "name": "Denmark"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 53756764-e5ce-4236-9f46-bed5f25e25a8
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 37
Has Code Block: False
Content:
Update data
-----------

*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)
to target the item(s) you wish to update.



--------------------------------------------------------------------------------

Chunk ID: 73bd085c-5438-4555-9da4-4fcb1a3dac82
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Update data"
}
Token Count: 125
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.


Updating your dataUpdating JSON data

`     _10  response = (  _10  supabase.table("countries")  _10  .update({"name": "Australia"})  _10  .eq("id", 1)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: bd6f1b69-fbee-4a4e-b4c6-ae0112138be6
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 23
Has Code Block: False
Content:
Upsert data
-----------

*   Primary keys must be included in the `values` dict to use upsert.



--------------------------------------------------------------------------------

Chunk ID: 01949ca9-a212-4d29-875e-3654db3765ea
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Upsert data"
}
Token Count: 221
Has Code Block: False
Content:
### Parameters

*   jsonRequireddict, list

The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.

*   ignore\_duplicatesOptionalbool

Whether duplicate rows should be ignored.

*   on\_conflictOptionalstring

Specified columns to be made to work with UNIQUE constraint.

*   default\_to\_nullOptionalbool

Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.


Upsert your dataBulk Upsert your dataUpserting into tables with constraints

`     _10  response = (  _10  supabase.table("countries")  _10  .upsert({"id": 1, "name": "Australia"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9bdce165-fa99-4ebf-8745-0dca00e6a9a8
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 176
Has Code Block: False
Content:
Delete data
-----------

*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)
to target the item(s) you wish to delete.
*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)
enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.
*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.



--------------------------------------------------------------------------------

Chunk ID: 3270dc89-f7c3-47be-8ee0-2c15de13ce36
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete data"
}
Token Count: 85
Has Code Block: False
Content:
### Parameters

*   countOptionalCountMethod

The property to use to get the count of rows returned.

*   returningOptionalReturnMethod

Either 'minimal' or 'representation'. Defaults to 'representation'.


Delete recordsDelete multiple records

`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9ab2c95f-7e72-42a2-8751-41f6a9f2c411
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 83
Has Code Block: False
Content:
Call a Postgres function
------------------------

You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.

`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `



--------------------------------------------------------------------------------

Chunk ID: 3726b8bc-ff1b-4dc2-af8e-2c8d296fcc46
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Call a Postgres function"
}
Token Count: 250
Has Code Block: False
Content:
### Parameters

*   fnRequiredcallable

The stored procedure call to be executed.

*   paramsOptionaldict of any

Parameters passed into the stored procedure call.

*   getOptionaldict of any

When set to `true`, `data` will not be returned. Useful if you only need the count.

*   headOptionaldict of any

When set to `true`, the function will be called with read-only access mode.

*   countOptionalCountMethod

Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)
. `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `"planned"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `"estimated"`: Uses exact count for low numbers and planned count for high numbers.


Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function

`     _10  response = supabase.rpc("hello_world").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ca37012b-bef7-40c8-988d-b6089a75cbc7
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Using filters"
}
Token Count: 211
Has Code Block: False
Content:
Using filters
-------------

Filters allow you to only return rows that match certain conditions.

Filters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.

If a Postgres function returns a table response, you can also apply filters.

Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables

`     _15  # Correct  _15  response = (  _15  supabase.table("cities")  _15  .select("name, country_id")  _15  .eq("name", "Bali")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table("cities")  _15  .eq("name", "Bali")  _15  .select("name, country_id")  _15  .execute()  _15  )      `

Data source

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 44fbc80f-fff4-4a52-afa5-77ea0be77a0d
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is equal to a value
--------------------------

Match only rows where `column` is equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: a9852b6f-b560-4838-8f96-e99bf60055ab
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is equal to a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").eq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: fc0d14cd-de6e-4b91-9c26-c7f38989a275
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 24
Has Code Block: False
Content:
Column is not equal to a value
------------------------------

Match only rows where `column` is not equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 859ab3e0-0920-4eae-b6cf-4475462e3407
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is not equal to a value"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").neq("name", "Albania").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: db842ae8-204e-4afe-b2f3-374d560b43fd
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 23
Has Code Block: False
Content:
Column is greater than a value
------------------------------

Match only rows where `column` is greather than `value`.



--------------------------------------------------------------------------------

Chunk ID: ddb0bf85-edc4-401a-bdd3-6733d93fc826
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than a value"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gt("id", 2).execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 355377a4-3438-45d8-b2f7-61367829ae1b
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is greater than or equal to a value
------------------------------------------

Match only rows where `column` is greater than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: 532699ab-f494-4611-875b-a66f7b04240b
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is greater than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").gte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: d22b5a95-9049-4294-a77c-577944521ae1
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 22
Has Code Block: False
Content:
Column is less than a value
---------------------------

Match only rows where `column` is less than `value`.



--------------------------------------------------------------------------------

Chunk ID: 5aecb2aa-f3ec-4aeb-9a59-cb4f2bf1af3f
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lt("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a5963f5a-477e-4177-89b3-d2a9ec6edc5f
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 28
Has Code Block: False
Content:
Column is less than or equal to a value
---------------------------------------

Match only rows where `column` is less than or equal to `value`.



--------------------------------------------------------------------------------

Chunk ID: f38f7f0d-92e6-4751-92b1-c8f08d36717b
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is less than or equal to a value"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valueRequiredany

The value to filter by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").lte("id", 2).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a4536bdc-eda4-4bf0-a16b-892aa397c450
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 24
Has Code Block: False
Content:
Column matches a pattern
------------------------

Match only rows where `column` matches `pattern` case-sensitively.



--------------------------------------------------------------------------------

Chunk ID: 9174a16d-80c7-4c7e-86fa-a94857e138b1
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a pattern"
}
Token Count: 76
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").like("name", "%Alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 8ebd89d5-6475-427a-93ab-7a53cce77b02
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 27
Has Code Block: False
Content:
Column matches a case-insensitive pattern
-----------------------------------------

Match only rows where `column` matches `pattern` case-insensitively.



--------------------------------------------------------------------------------

Chunk ID: 47b29285-f3ce-48e2-852e-b84e31b46ee6
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column matches a case-insensitive pattern"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   patternRequiredstring

The pattern to match by


With \`select()\`

`     _10  response = supabase.table("countries").select("*").ilike("name", "%alba%").execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6139cb6a-7dc9-4758-9515-ed9e224c10c6
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 18
Has Code Block: False
Content:
Column is a value
-----------------

Match only rows where `column` IS `value`.



--------------------------------------------------------------------------------

Chunk ID: 3f93f51c-116c-411e-8782-14c441f5dc4a
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is a value"
}
Token Count: 82
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The name of the column to apply a filter on

*   valueRequirednull | boolean

The value to match by


Checking for nullness, True or False

`     _10  response = supabase.table("countries").select("*").is_("name", "null").execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 3e42fd31-49da-441e-940a-ef773d5ae22a
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 24
Has Code Block: False
Content:
Column is in an array
---------------------

Match only rows where `column` is included in the `values` array.



--------------------------------------------------------------------------------

Chunk ID: 75e0c1ea-517c-4e21-a681-665a7664b38d
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column is in an array"
}
Token Count: 101
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredarray

The values to filter by


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .in_("name", ["Albania", "Algeria"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a221675d-cf82-4da5-a955-90f0e7a15d5f
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 37
Has Code Block: False
Content:
Column contains every element in a value
----------------------------------------

Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.



--------------------------------------------------------------------------------

Chunk ID: 75747000-f88c-4cea-9bd8-859e3a6c79d8
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Column contains every element in a value"
}
Token Count: 117
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   valuesRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("*")  _10  .contains("tags", ["is:open", "priority:low"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 3404fc35-8f40-4a77-b4c0-aa63f30592fc
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 35
Has Code Block: False
Content:
Contained by value
------------------

Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.



--------------------------------------------------------------------------------

Chunk ID: e7025b46-1400-4390-99c9-6a25ac8ed892
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Contained by value"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The jsonb, array, or range column to filter on

*   valueRequiredobject

The jsonb, array, or range value to filter with


On array columnsOn range columnsOn \`jsonb\` columns

`     _10  response = (  _10  supabase.table("classes")  _10  .select("name")  _10  .contained_by("days", ["monday", "tuesday", "wednesday", "friday"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 7298c417-0c82-4309-9b95-532ad2679c33
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 32
Has Code Block: False
Content:
Greater than a range
--------------------

Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 9596f44f-49d1-4437-bfe4-db0e94ab0a02
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gt("during", ["2000-01-02 08:00", "2000-01-02 09:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: def9d85d-cef3-4cb9-91bc-4d80982760ff
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 42
Has Code Block: False
Content:
Greater than or equal to a range
--------------------------------

Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: a60633b8-1141-4b5e-8225-59f0470b03b7
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Greater than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredstring

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_gte("during", ["2000-01-02 08:30", "2000-01-02 09:30"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 27393877-f912-48f5-bfa0-808e33466407
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 32
Has Code Block: False
Content:
Less than a range
-----------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 9573776b-6758-47e7-8b6b-3be0f9823ccd
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than a range"
}
Token Count: 120
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lt("during", ["2000-01-01 15:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: d5199d61-0d10-45ac-a5c3-31c434b42f0b
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 35
Has Code Block: False
Content:
Less than or equal to a range
-----------------------------

Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.



--------------------------------------------------------------------------------

Chunk ID: 497ec5f3-49a6-4f82-8c1e-4ff89ffed9d4
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Less than or equal to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_lte("during", ["2000-01-01 14:00", "2000-01-01 16:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 816c9270-22cf-400d-8987-8b1cc0a94687
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 40
Has Code Block: False
Content:
Mutually exclusive to a range
-----------------------------

Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.



--------------------------------------------------------------------------------

Chunk ID: 47084749-da7c-40b4-a8ba-b6dd6c82bf5e
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Mutually exclusive to a range"
}
Token Count: 121
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The range column to filter on

*   rangeRequiredarray

The range to filter with


With \`select()\`

`     _10  response = (  _10  supabase.table("reservations")  _10  .select("*")  _10  .range_adjacent("during", ["2000-01-01 12:00", "2000-01-01 13:00"])  _10  .execute()  _10  )      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: fabc9975-c242-475d-8cc0-ad59a8f8b2a0
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 32
Has Code Block: False
Content:
With a common element
---------------------

Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.



--------------------------------------------------------------------------------

Chunk ID: 9c5e344d-85a6-4800-86bb-de207a7a9b95
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "With a common element"
}
Token Count: 114
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The array or range column to filter on

*   valueRequiredIterable\[Any\]

The array or range value to filter with


On array columnsOn range columns

`     _10  response = (  _10  supabase.table("issues")  _10  .select("title")  _10  .overlaps("tags", ["is:closed", "severity:high"])  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c9870e20-46df-4e89-8ff8-2478303317f4
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 55
Has Code Block: False
Content:
Match a string
--------------

Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.

*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)
.



--------------------------------------------------------------------------------

Chunk ID: 0f236ba2-99f8-4aad-b985-6338b4cb0d3e
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match a string"
}
Token Count: 128
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The text or tsvector column to filter on

*   queryRequiredstring

The query text to match with

*   optionsOptionalobject

Named parameters

Details


Text searchBasic normalizationFull normalizationWebsearch

`     _10  response = (  _10  supabase.table("texts")  _10  .select("content")  _10  .text_search("content", "'eggs' & 'ham'", options={"config": "english"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 69a40760-7494-452b-8413-d68b8b5dfdcf
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 34
Has Code Block: False
Content:
Match an associated value
-------------------------

Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.



--------------------------------------------------------------------------------

Chunk ID: c0c7d134-b125-48c1-8024-ae43d68ea112
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match an associated value"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   queryRequireddict

The object to filter with, with column names as keys mapped to their filter values


With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .match({"id": 2, "name": "Albania"})  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: acb1a77f-2da9-404c-bace-69db27bfeb90
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Don't match the filter"
}
Token Count: 165
Has Code Block: False
Content:
Don't match the filter
----------------------

Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.

``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\{"a","b"\}') # Use `\{\}` for array values      ``

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .not_.is_("name", "null")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b8394b77-c3ce-4d6d-b3d7-8e33a591dfbe
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 119
Has Code Block: False
Content:
Match at least one filter
-------------------------

or\_() expects you to use the raw PostgREST syntax for the filter names and values.

``     _10  .or_('id.in.(5,6,7), arraycol.cs.\{"a","b"\}') # Use `()` for `in` filter, `\{\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\{"a","b"\}') # Use `cd` for `containedBy()`      ``



--------------------------------------------------------------------------------

Chunk ID: 504bdbe7-bbe2-4426-bd29-9d558eadf2fb
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match at least one filter"
}
Token Count: 133
Has Code Block: False
Content:
### Parameters

*   filtersRequiredstring

The filters to use, following PostgREST syntax

*   reference\_tableOptionalstring

Set this to filter on referenced tables instead of the parent table


With \`select()\`Use \`or\` with \`and\`Use \`or\` on referenced tables

`     _10  response = (  _10  supabase.table("countries")  _10  .select("name")  _10  .or_("id.eq.2,name.eq.Algeria")  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 879091a7-fbc7-45aa-b157-14298fd83e69
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 92
Has Code Block: False
Content:
Match the filter
----------------

filter() expects you to use the raw PostgREST syntax for the filter values.

``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\{"a","b"\}') # Use `cs` for `contains()`, `\{\}` for array values      ``



--------------------------------------------------------------------------------

Chunk ID: 6059d21a-3622-4f42-9e7f-943b8960cd80
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Match the filter"
}
Token Count: 132
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to filter on

*   operatorOptionalstring

The operator to filter with, following PostgREST syntax

*   valueOptionalany

The value to filter with, following PostgREST syntax


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .filter("name", "in", '("Algeria","Japan")')  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 0fbfb777-7c6f-499f-bb11-368ba88abd66
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Using modifiers"
}
Token Count: 99
Has Code Block: False
Content:
Using modifiers
---------------

Filters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).

Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).

* * *



--------------------------------------------------------------------------------

Chunk ID: 0f7fd10c-eb74-418b-aefb-cd3ae535c710
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 14
Has Code Block: False
Content:
Order the results
-----------------

Order the query result by `column`.



--------------------------------------------------------------------------------

Chunk ID: 846ee377-0273-4053-bd45-0d33171c310f
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Order the results"
}
Token Count: 138
Has Code Block: False
Content:
### Parameters

*   columnRequiredstring

The column to order by

*   descOptionalbool

Whether the rows should be ordered in descending order or not.

*   foreign\_tableOptionalstring

Foreign table name whose results are to be ordered.

*   nullsfirstOptionalbool

Order by showing nulls first


With \`select()\`On a foreign table

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .order("name", desc=True)  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a014554d-eed6-4a6b-95e7-deb7dbccff74
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 9
Has Code Block: False
Content:
Limit the number of rows returned
---------------------------------



--------------------------------------------------------------------------------

Chunk ID: ec0d9dda-556e-48cf-b959-2446fe030dfd
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the number of rows returned"
}
Token Count: 84
Has Code Block: False
Content:
### Parameters

*   sizeRequirednumber

The maximum number of rows to return

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").limit(1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 701577a9-2898-43db-931a-e702ba2f223f
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 94
Has Code Block: False
Content:
Limit the query to a range
--------------------------

Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.

The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.



--------------------------------------------------------------------------------

Chunk ID: 9ad0c03e-c21a-41c6-a7ff-3755ed4cedb0
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Limit the query to a range"
}
Token Count: 105
Has Code Block: False
Content:
### Parameters

*   startRequirednumber

The starting index from which to limit the result.

*   endRequirednumber

The last index to which to limit the result.

*   foreign\_tableOptionalstring

Set this to limit rows of foreign tables instead of the parent table.


With \`select()\`On a foreign table

`     _10  response = supabase.table("countries").select("name").range(0, 1).execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: b05e9dc3-330c-4b66-9d3b-510a874d4ce0
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve one row of data"
}
Token Count: 65
Has Code Block: False
Content:
Retrieve one row of data
------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = supabase.table("countries").select("name").limit(1).single().execute()      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: a4e669ff-e7bd-478a-83b1-3e730f18ee1a
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve zero or one row of data"
}
Token Count: 102
Has Code Block: False
Content:
Retrieve zero or one row of data
--------------------------------

Return `data` as a single object instead of an array of objects.

With \`select()\`

`     _10  response = (  _10  supabase.table("countries")  _10  .select("*")  _10  .eq("name", "Albania")  _10  .maybe_single()  _10  .execute()  _10  )      `

Data source

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 69840358-4c74-48da-93d4-a40fd395c932
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve as a CSV"
}
Token Count: 57
Has Code Block: False
Content:
Retrieve as a CSV
-----------------

Return `data` as a string in CSV format.

Return data as CSV

`     _10  response = supabase.table("countries").select("*").csv().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: e1577227-2838-4714-8176-9e7699a7a004
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 137
Has Code Block: False
Content:
Using explain
-------------

For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)
of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.

Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.

Follow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)
to enable the functionality on your project.



--------------------------------------------------------------------------------

Chunk ID: 9c3cc4f3-3a4b-4d79-9df2-aeb578f09d1c
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Using explain"
}
Token Count: 210
Has Code Block: False
Content:
### Parameters

*   walOptionalboolean

If `true`, include information on WAL record generation.

*   verboseOptionalboolean

If `true`, the query identifier will be returned and `data` will include the output columns of the query.

*   settingsOptionalboolean

If `true`, include information on configuration parameters that affect query planning.

*   formatOptionalboolean

The format of the output, can be `"text"` (default) or `"json"`.

*   formatOptional"text" | "json"

The format of the output, can be `"text"` (default) or `"json"`.

*   buffersOptionalboolean

If `true`, include information on buffer usage.

*   analyzeOptionalboolean

If `true`, the query will be executed and the actual run time will be returned.


Get the execution planGet the execution plan with analyze and verbose

`     _10  response = supabase.table("countries").select("*").explain().execute()      `

Data source

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: b2e62747-176d-41d2-8f4f-5a5c1e5d0f08
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 315
Has Code Block: False
Content:
Create a new user
-----------------

*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)
.
*   **Confirm email** determines if users need to confirm their email address after signing up.
*   If **Confirm email** is enabled, a `user` is returned but `session` is null.
*   If **Confirm email** is disabled, both a `user` and a `session` are returned.
*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)
. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)
.
*   If sign\_up() is called for an existing confirmed user:
*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)
, an obfuscated/fake user object is returned.
*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.
*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)
.



--------------------------------------------------------------------------------

Chunk ID: 2ba07a8e-9421-432d-9f67-96268bca36b2
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a new user"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignUpWithPasswordCredentials

Details


Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL

`     _10  response = supabase.auth.sign_up(  _10  {"email": "email@example.com", "password": "password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ab3d7b81-984f-4d6a-b8b7-773e923bce04
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 45
Has Code Block: False
Content:
Create an anonymous user
------------------------

*   Returns an anonymous user
*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.



--------------------------------------------------------------------------------

Chunk ID: 03461ffe-a1df-42cf-a6cb-cda718af7d2c
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create an anonymous user"
}
Token Count: 71
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInAnonymouslyCredentials

Details


Create an anonymous userCreate an anonymous user with custom user metadata

`     _10  response = supabase.auth.sign_in_anonymously(  _10  {"options": {"captcha_token": ""}}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 9023a4d0-befd-4c8a-a4a8-d031b6d46a86
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 37
Has Code Block: False
Content:
Sign in a user
--------------

Log in an existing user with an email and password or phone and password.

*   Requires either an email and password or a phone number and password.



--------------------------------------------------------------------------------

Chunk ID: 930b758a-d817-480a-a6d7-41279519250c
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user"
}
Token Count: 75
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with email and passwordSign in with phone and password

`     _10  response = supabase.auth.sign_in_with_password(  _10  {"email": "email@example.com", "password": "example-password"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: ae6ba895-a0e0-4df3-8ded-709838ddbf4c
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 28
Has Code Block: False
Content:
Sign in with ID Token
---------------------

Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.



--------------------------------------------------------------------------------

Chunk ID: 2f67927e-9fc9-42ae-99ee-04c3136a7b5f
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in with ID Token"
}
Token Count: 69
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithIdTokenCredentials

Details


Sign In using ID Token

`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {"provider": "google", "token": "your-id-token"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 89651411-3059-4a20-99d2-a77850bc19ee
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 271
Has Code Block: False
Content:
Sign in a user through OTP
--------------------------

*   Requires either an email or phone number.
*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.
*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.
*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.
*   If you're using phone, you can configure whether you want the user to receive a OTP.
*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)
.
*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)
to add additional redirect URLs to your project.
*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)
to include `\{\{ .Token \}\}` instead of `\{\{ .ConfirmationURL \}\}`.



--------------------------------------------------------------------------------

Chunk ID: df72fbe7-6624-4244-9c14-acdb35c1ed4d
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OTP"
}
Token Count: 102
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithPasswordCredentials

Details


Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP

`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  "email": "email@example.com",  _10  "options": {"email_redirect_to": "https://example.com/welcome"},  _10  }  _10  )      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ca1709eb-b599-4359-abc6-54589ff736ec
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 51
Has Code Block: False
Content:
Sign in a user through OAuth
----------------------------

*   This method is used for signing in using a third-party provider.
*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)
.



--------------------------------------------------------------------------------

Chunk ID: bcf015ff-aa04-47ab-bf64-5eaaaae890c6
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through OAuth"
}
Token Count: 72
Has Code Block: False
Content:
### Parameters

*   credentialsRequiredSignInWithOAuthCredentials

Details


Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes

`     _10  response = supabase.auth.sign_in_with_oauth({  _10  "provider": 'github'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 49b85fde-e23f-4ba4-ad11-af612910ba3f
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 180
Has Code Block: False
Content:
Sign in a user through SSO
--------------------------

*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)
to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)
to do this.
*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.
*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:
*   Mapping specific user email addresses with an identity provider.
*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.



--------------------------------------------------------------------------------

Chunk ID: 53fb410f-11b2-4f50-8156-51cade667760
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign in a user through SSO"
}
Token Count: 59
Has Code Block: False
Content:
### Parameters

*   paramsRequiredSignInWithSSOCredentials

Details


Sign in with email domainSign in with provider UUID

`     _10  response = supabase.auth.sign_in_with_sso({"domain": "company.com"})      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: ca03f69f-5964-4c4e-8bb6-2840f5773193
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 122
Has Code Block: False
Content:
Sign out a user
---------------

*   In order to use the `sign_out()` method, the user needs to be signed in first.
*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.
*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.



--------------------------------------------------------------------------------

Chunk ID: 2c4fb14b-3c4c-4d1b-9cc4-6c41ec006a03
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Sign out a user"
}
Token Count: 36
Has Code Block: False
Content:
### Parameters

*   optionsOptionalSignOutOptions

Details


Sign out

`     _10  response = supabase.auth.sign_out()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fbe462fa-adf9-4412-9bf5-8a4a46c4e77a
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 202
Has Code Block: False
Content:
Verify and log in through OTP
-----------------------------

*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).
*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.
*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)
and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)
for more details.



--------------------------------------------------------------------------------

Chunk ID: 1189fa0e-b4a6-48eb-8c0f-2e83ab600d01
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify and log in through OTP"
}
Token Count: 90
Has Code Block: False
Content:
### Parameters

*   paramsRequiredVerifyOtpParams

Details


Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)

`     _10  response = supabase.auth.verify_otp(  _10  {"email": "email@example.com", "token": "123456", "type": "email"}  _10  )      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: cbe87192-1083-45f5-b0d7-25f2fd4eeada
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a session"
}
Token Count: 153
Has Code Block: False
Content:
Retrieve a session
------------------

*   This method retrieves the current local session (i.e in memory).
*   The session contains a signed JWT and unencoded session data.
*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)
instead.
*   If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

`     _10  response = supabase.auth.get_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 794a3f21-7274-4eb0-9be1-77d737a56bab
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 77
Has Code Block: False
Content:
Retrieve a new session
----------------------

Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\_session() will attempt to retrieve it from get\_session(). If the current session's refresh token is invalid, an error will be thrown.

*   This method will refresh the session whether the current one is expired or not.



--------------------------------------------------------------------------------

Chunk ID: a5ba3a02-c2ef-4fcf-a3a7-74652954ec1a
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a new session"
}
Token Count: 40
Has Code Block: False
Content:
### Parameters

*   refresh\_tokenOptionalstring


Refresh session using the current session

`     _10  response = supabase.auth.refresh_session()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: c3a62334-4ea1-4c16-a163-00fe0326df29
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 49
Has Code Block: False
Content:
Retrieve a user
---------------

*   This method fetches the user object from the database instead of local session.
*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.



--------------------------------------------------------------------------------

Chunk ID: 83ab384a-ebf0-4733-8a2c-89292eaed3fe
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a user"
}
Token Count: 77
Has Code Block: False
Content:
### Parameters

*   jwtOptionalstring

Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.


Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt

`     _10  response = supabase.auth.get_user()      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 6dbb3fdd-36b5-498c-9f85-50c86dcf6db6
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 90
Has Code Block: False
Content:
Set the session data
--------------------

Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.

*   This method sets the session using an `access_token` and `refresh_token`.
*   If successful, a `SIGNED_IN` event is emitted.



--------------------------------------------------------------------------------

Chunk ID: e82ba75d-35c8-44d1-93ed-e903fd57d78b
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Set the session data"
}
Token Count: 52
Has Code Block: False
Content:
### Parameters

*   access\_tokenRequiredstring

*   refresh\_tokenRequiredstring


Refresh the session

`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `

Response

Notes

* * *



--------------------------------------------------------------------------------

Chunk ID: 12f9a8c8-f23e-477e-98da-44c0456d04b0
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Auth MFA"
}
Token Count: 136
Has Code Block: False
Content:
Auth MFA
--------

This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.

Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.

Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.

* * *



--------------------------------------------------------------------------------

Chunk ID: c88fe0e9-34f6-46f9-a9eb-87730c16f914
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Enroll a factor"
}
Token Count: 191
Has Code Block: False
Content:
Enroll a factor
---------------

*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.
*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.
*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)
.

Enroll a time-based, one-time password (TOTP) factor

`     _10  res = supabase.auth.mfa.enroll({  _10  "factor_type": "totp",  _10  "friendly_name": "your_friendly_name"  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: a27db510-99ad-425d-bb91-a6d0708eda3d
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a challenge"
}
Token Count: 122
Has Code Block: False
Content:
Create a challenge
------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before creating a challenge.
*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
.

Create a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 111b6d41-156d-453a-b535-afec853663bb
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Verify a challenge"
}
Token Count: 142
Has Code Block: False
Content:
Verify a challenge
------------------

*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)
first.

Verify a challenge for a factor

`     _10  res = supabase.auth.mfa.verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "challenge_id": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7dd04dce-b002-466d-9040-743fa9788fec
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create and verify a challenge"
}
Token Count: 159
Has Code Block: False
Content:
Create and verify a challenge
-----------------------------

*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)
is required before invoking `challengeAndVerify()`.
*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)
and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)
in a single step.

Create and verify a challenge for a factor

`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  "code": '123456'  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 88feb18d-6918-4ab8-853c-e1c24fad5079
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Unenroll a factor"
}
Token Count: 74
Has Code Block: False
Content:
Unenroll a factor
-----------------

Unenroll a factor

`     _10  res = supabase.auth.mfa.unenroll({  _10  "factor_id": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 11ecc7fe-5eb1-4174-8190-884acf1d98e9
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Get Authenticator Assurance Level"
}
Token Count: 158
Has Code Block: False
Content:
Get Authenticator Assurance Level
---------------------------------

*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.
*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).
*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.

Get the AAL details of a session

`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 11cc39c5-9a92-40bb-a25a-c58c0be52851
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Invokes a Supabase Edge Function."
}
Token Count: 165
Has Code Block: False
Content:
Invokes a Supabase Edge Function.
---------------------------------

Invoke a Supabase Function.

*   Requires an Authorization header.
*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.

Basic invocationError handlingPassing custom headers

`     _10  response = supabase.functions.invoke(  _10  "hello-world", invoke_options={"body": {"name": "Functions"}}  _10  )      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 491a1218-b5a6-466a-86d9-8a21d5769fa0
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Subscribe to channel"
}
Token Count: 320
Has Code Block: False
Content:
Subscribe to channel
--------------------

*   By default, Broadcast and Presence are enabled for all projects.
*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)
.
*   You can receive the "previous" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).
*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.

Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes

`     _10  channel = supabase.channel("room1")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print("Cursor position received!", payload)  _10  _10  channel.on_broadcast(event="cursor-pos", callback=handle_broadcast).subscribe(on_subscribe)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 11285d5e-2b81-4bb6-af4b-47679839ea36
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from a channel"
}
Token Count: 95
Has Code Block: False
Content:
Unsubscribe from a channel
--------------------------

*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Removes a channel

`     _10  supabase.remove_channel(myChannel)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: c55c089f-16b4-4314-81dc-17b438e1ac14
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Unsubscribe from all channels"
}
Token Count: 92
Has Code Block: False
Content:
Unsubscribe from all channels
-----------------------------

*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.

Remove all channels

`     _10  supabase.remove_all_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: ce539300-519b-4723-b264-be6c72f6db0a
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve all channels"
}
Token Count: 29
Has Code Block: False
Content:
Retrieve all channels
---------------------

Get all channels

`     _10  channels = supabase.get_channels()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 01cea678-14a9-4e77-9524-19ea874c66fa
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Broadcast a message"
}
Token Count: 113
Has Code Block: False
Content:
Broadcast a message
-------------------

Broadcast a message to all connected clients to a channel.

Send a message via websocket

`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { "x": random.random(), "y": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `

Response

* * *



--------------------------------------------------------------------------------

Chunk ID: 81c36772-ebf2-4837-b5c8-349ad1ca86cf
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Create a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `insert`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create bucket

`     _10  res = supabase.storage.create_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: abe266f1-d2f9-43cf-a8b3-1e465523f9b0
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve a bucket"
}
Token Count: 84
Has Code Block: False
Content:
Retrieve a bucket
-----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Get bucket

`     _10  res = supabase.storage.get_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 944a0bf0-3422-46e1-864a-719c50d12c2f
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "List all buckets"
}
Token Count: 83
Has Code Block: False
Content:
List all buckets
----------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List buckets

`     _10  res = supabase.storage.list_buckets()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 5b255dcd-d2f5-47e7-972c-a748a3c3dcb1
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete a bucket"
}
Token Count: 88
Has Code Block: False
Content:
Delete a bucket
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select` and `delete`
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete bucket

`     _10  res = supabase.storage.delete_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 9f1b46d5-b9f7-4a61-874f-1b137a0ecc6e
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Empty a bucket"
}
Token Count: 89
Has Code Block: False
Content:
Empty a bucket
--------------

*   RLS policy permissions required:
*   `buckets` table permissions: `select`
*   `objects` table permissions: `select` and `delete`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Empty bucket

`     _10  res = supabase.storage.empty_bucket(name)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 7c3a9819-ee91-41fe-b48b-143581f01812
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Upload a file"
}
Token Count: 177
Has Code Block: False
Content:
Upload a file
-------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `insert`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works
*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.

Upload file using filepath

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("testbucket").upload(file=f,path=path_on_supastorage, file_options={"content-type": "audio/mpeg"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 49cc221e-9957-4f68-b0de-bf9daa51027a
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Download a file"
}
Token Count: 110
Has Code Block: False
Content:
Download a file
---------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Download file

`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 4346399d-8089-4f96-9eb2-4eef714f06b0
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "List all files in a bucket"
}
Token Count: 93
Has Code Block: False
Content:
List all files in a bucket
--------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

List files in a bucket

`     _10  res = supabase.storage.from_('bucket_name').list()      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 777db063-1bfd-46e5-827c-49ba2067eb7c
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Replace an existing file"
}
Token Count: 130
Has Code Block: False
Content:
Replace an existing file
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Update file

`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_("bucket_name").update(file=f, path=path_on_supastorage, file_options={"cache-control": "3600", "upsert": "true"})      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 68d9065d-fe89-41c2-a4c6-7309d2dcce64
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Move an existing file"
}
Token Count: 103
Has Code Block: False
Content:
Move an existing file
---------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `update` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Move file

`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: fef05128-9468-4a84-9d4e-e761ee754a14
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Delete files in a bucket"
}
Token Count: 96
Has Code Block: False
Content:
Delete files in a bucket
------------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `delete` and `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Delete file

`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 79cff965-b337-4c71-be12-9143b97b702c
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Create a signed URL"
}
Token Count: 95
Has Code Block: False
Content:
Create a signed URL
-------------------

*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: `select`
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Create Signed URL

`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `

* * *



--------------------------------------------------------------------------------

Chunk ID: 43c150fb-11f1-4d0e-9ab8-e34a6e2977ad
Source URL: https://supabase.com/docs/reference/python/upsert
Headers: {
  "H1": "Python Client Library",
  "H2": "Retrieve public URL"
}
Token Count: 158
Has Code Block: False
Content:
Retrieve public URL
-------------------

*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)
or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)
, clicking the overflow menu on a bucket and choosing "Make public"
*   RLS policy permissions required:
*   `buckets` table permissions: none
*   `objects` table permissions: none
*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)
on how access control works

Returns the URL for an asset in a public bucket

`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `


--------------------------------------------------------------------------------

