{
  "metadata": {
    "input_file": "supabase.com_docs__20240826_212435.json",
    "timestamp": "2024-09-01T18:17:41.512393",
    "total_documents": 25,
    "total_chunks": 3175
  },
  "chunks": [
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "0e57d031-7e89-441c-be66-0999b1828e50",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "08b35a57-490d-4a0d-b67b-62aa0377ff29",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "4351bb3c-676d-431f-a439-cbb2623e0a4f",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "05477183-7193-42ef-bdef-91ddb49bede7",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "1d41614a-3215-48cd-94a1-df8c353f58f5",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "346e40e2-ba2f-4392-99d3-a45d97b94405",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "b4d59af4-28f0-41d5-816d-7ba840689aa3",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "6e21495c-6bc6-4304-9bcf-cc3e78c52e45",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "3317813f-b941-4ee5-ab07-af3dda0dfda8",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "57790d3d-a443-49ec-b226-b53970e7658a",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "af1c0d5b-f5d3-4fa6-a5d0-9bbdf07922b2",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "3f586972-1d48-4502-bea1-6c7199bce95e",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "2c1e02a5-34c0-4ff9-bf4f-f5377acce759",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "87abd620-9c37-46a5-8c17-ebe259946f15",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "2c634470-745a-4330-8855-ae4144f111d0",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "6e428eae-c77c-4e67-86b2-cd1d7d3a96a1",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "a269f9dc-aabc-4ead-a560-0e3d7f44b447",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "780b59ca-a064-4ebb-868d-b4c4f5519ea5",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "96b23547-dfaa-4dea-8b6d-5abe9eb85ff8",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "cd63bfdb-ca3f-409a-a7fe-9f8d2b651917",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "ae5f4738-a20e-40ca-8ac8-bc79a50f34b4",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "afc8bcfc-fa83-432e-94a5-2d84bb567208",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "1d53b681-e8db-4ac7-a6a8-1a03bf0edac0",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "800ec8bc-5597-4dc2-98ac-2889a220763f",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "cac42833-42d5-4f53-aa97-6eb24e540856",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "426a401b-4b27-4ce6-9281-7ba33e20fa31",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "24a763ce-e45c-4ea0-bd5e-3980fc559d41",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "a600982b-7de8-40f2-a626-238544be1268",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "c16885de-9ebf-4409-b847-073ca595d5e4",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "065427be-a398-4132-8b5c-f3f268592851",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "e861d227-238a-4878-a22f-0268e677fcab",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "84d78683-4857-498a-8684-4624c7f9a890",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "f651ff81-eddf-47ca-aded-117bf61d4d7b",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "086acf6d-ccc9-49c0-a0a1-821293a7d797",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "79118162-de97-4119-8556-71d424b4aaeb",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "bf577f8f-a0e3-4bc4-a676-fd13aa63ecee",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "c0f79068-f4c7-4a18-8d72-77c8fd7a40f4",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "a8eabce1-ba8f-4d3d-b74b-6fbe6e150cf2",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "54541db9-5bdf-4827-a857-05a5c7250914",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "83577b45-f8b8-481b-a5b3-75ed9c94d9c8",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "39c36716-7697-44d9-81c1-c95704668350",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "24ac5046-a0e0-479c-a451-9e51e10ddb68",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "b660b7e5-b6de-4f77-a001-66c9f7cce034",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "34f6a8eb-887e-4ead-886a-a48d285c94ce",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "3c376b22-cd05-4e61-a151-426ea662285d",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "bdf95119-eab5-430b-9688-08d96aa9b632",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "11693f7f-0c9f-4795-bbf7-3df8ddf81b59",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "227bfafb-f350-4bf5-8ee0-3ec91a1858a2",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "19023a85-a148-4d82-b72c-edc246e0701e",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "f20f4a3c-fb61-401c-b47e-60d64629ef7b",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "3134890f-5570-4a2f-9bd4-ce304f00df3f",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "a393d806-25dc-4a5b-8689-40fd159862c3",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "3ce442a0-91b7-4d7b-9845-1a4169a35a9c",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "0e1a654e-06b6-4f24-8682-aaae3416ce92",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "57541025-b445-4459-951f-91caf5cb15d7",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "c7fe8098-6753-4478-a76c-9630d580f293",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "00fde9b1-9fce-423c-83a5-3ac9e3e39e19",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "6161512b-9c6e-41e3-99a0-26790a9e41cf",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "c006a35b-8c82-4376-a10c-e806fbd136ab",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "3ab5769b-dcac-4279-9665-ca5f388afa1d",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "9fb3ffb1-8850-4056-bd68-bfe1aad8117f",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "12bb05d8-a9c6-479e-8243-800637644f2b",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "5f9aa018-1f03-4f7f-9ba7-d9d75d375499",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "e6e8c05e-19eb-47cf-9166-2edf5c4848f6",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "c83161ed-1d5d-465c-916f-7deffa9d7da1",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "03c6a114-7066-44bf-ab30-13f3cac96637",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "d2c7cadb-0bdb-4780-a5fa-eb79e7207bda",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "d52df1a1-f28b-41c1-982e-639d33a16b96",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "386f7ef1-28da-40c1-8c33-d93d968afdb7",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "daa527ae-cec5-4660-9989-42ab24fad2d3",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "b6368a96-3fb6-4559-9249-4383b89bedb1",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "46d2baa6-027b-43f7-9b9c-e40fe59cdd45",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "ff3fcb9a-a533-4a28-9797-1e44e712ee67",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "cecdc4ea-9456-439b-b74f-0ee3a9289dee",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "aea7427d-6526-4bc9-b7fb-4b30bb7cabf3",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "c6612b1c-5b00-4c8d-888e-ad08eec69b95",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "bb6fc57c-9eaf-43b7-bc75-05e0a8987f58",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "7efe41e9-04cf-454e-8e8b-01842ffcec35",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "5e11b63c-a177-4f61-82ce-80ca22013274",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "b2dd49ab-b1a7-4b1a-b809-809d6ef8783e",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "b1184f2e-9a93-4ff9-b2d0-9ab8fcbbc059",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "b54aa8de-11dc-4101-8940-86372a4fb765",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "8a6c8107-f003-41ff-9321-ff9d35a74f67",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "5720f8d1-d965-43c4-9752-d8ec6ebc726e",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "fa06441a-a83c-416d-b360-fc392dc2c31f",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "2a466645-5c25-4ddf-b5f9-8cd1f75531cc",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "4fe85bc7-5551-4835-aa13-5c02d92927f4",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "6f34646f-6eda-4c74-9edc-0569fff98eba",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "b10b2f5e-1c37-4de3-9c7a-e7a7c0c2bf9f",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "2899be15-2031-4dbe-a337-4700733aa5ce",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "266aeec1-99ed-421b-b5db-e67276d7d0b8",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "5b51d03c-b2e8-4360-81c7-3d22e5c72545",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "ef755207-fce1-449c-98fc-aed6f4171423",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "976379a3-1887-44ff-9e90-2d362535bb9f",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "f5a5afd3-5b38-45d5-81fc-3c66e1eaa25e",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "f2f84aaa-26ac-4ba0-9463-c4ff5e7c0b93",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "06270c12-0a0b-4d26-a290-0fc5eae7b0bd",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "c1b694f2-2778-425a-b20e-8394ed89fe64",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "1b6595b2-a69e-4dfc-82b4-33e7962b8370",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "1c2110b8-64eb-4a01-93b1-61e55a75090e",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "ea4a06fc-cba6-46a0-b7b7-197ba44ca67b",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "f488e392-d68e-406d-b63b-dee4344c46be",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "65218019-6959-4c3b-86d7-90ba420d130b",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "1263bd40-9f1f-4662-93fe-92beaf0f60af",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "90623a82-62f3-4e69-8a0c-7ffc95d4b795",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "5d245452-16b8-488e-8cab-5fa52fe57297",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "220c11fc-250a-46b5-b0ec-660f1ee1f87b",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "eeab0cf8-c142-49d5-b83d-f53793d39f93",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "b5986cfa-e92b-415b-9c25-1f20d7a00212",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "61184956-0d81-412b-8d60-e3ab60ebd7aa",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "8d740286-ad61-486b-b046-8e2b95564744",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "ea6b7056-7aa6-4282-b254-e31102f4d39c",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "c9c5c6c9-4326-4a8e-a4b9-217d04f05a89",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "9dc0f518-c433-4fc6-ad9c-3f3d1f21e4e9",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "167f92ed-9e4b-48de-a6d5-5e5873a78c6f",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "2fded307-d26d-43da-88d6-9c5ba0096eac",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "5fffbe12-df14-47ef-95de-82431b4590c9",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "a7bc8a25-5db7-45a0-b07d-f043bc189ba3",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "29aed294-12a8-46f1-8e66-131c9d69efa5",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "465a22a8-98d2-45de-98d3-5779cec79747",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "cf73a608-a239-48f3-b27d-a4ef8a5ebc0e",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "a44c6928-b930-429f-a430-3bb6bd230bd1",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "e8d421c3-8b95-4ddf-8da1-05bc3cd46324",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "e2abb9f4-2ff9-4f4e-9dfe-1cb45079c081",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "8f9e306f-3f1e-4dc3-99e4-d733495d7751",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "7d4346dc-54bf-451b-94ac-9aac7a0ede46",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/initializing",
      "chunk_id": "324461c3-977a-4637-b415-e674404fd09b",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "fa0a39c4-57b0-4f48-9b57-92f9026c043e",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "1f1ba486-a300-40fe-ba2e-239c028eba92",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "80f2e735-78a7-4c2f-b70f-920cd295ff56",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "8dd8d0ea-f8f9-4f58-b231-d9d0d17c4754",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "a36e93c2-c2b2-4800-b000-d7bdb56955cf",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "35d7efdf-3fe4-4c08-b909-c5fc1017c3ec",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "29b95f6b-1d19-4f2d-9d09-c717d56f2282",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "4472e50b-081c-4736-a814-3eb237a83121",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "6c71870a-f536-4b1d-b4bc-f635e34e3886",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "4889cd88-a71b-4485-b310-f0cb2592f22b",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "70a217a5-4959-4ff9-b223-e8d646b03c90",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "a835c3bd-ade4-4131-8271-4e27cd5fb1d1",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "63849dce-2448-444b-9526-cd7a6ecbff84",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "f45dda2a-c5ee-4f2c-b9f9-2f5bbf36cdbe",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "27a06d2e-a839-4336-9963-c9e5efb9b896",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "27215625-aa12-481a-82ef-b97dc1c6678a",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "1fa8c19e-d7aa-4753-a3f7-6e91b262bf48",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "4f8303a4-ae53-451f-a5cd-8808395cdafc",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "407fb13d-218c-4c73-aaa0-6dd4167018c9",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "fccb700d-59ba-415a-84be-29421bedf2b7",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "b2026bc5-ce1c-4f58-81b2-e4aa6f355170",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "4cf05284-18cb-453c-9220-6eb37aa05c1f",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "fd125133-8bf6-4127-858f-56da092cce54",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "493b082b-449e-4115-a32c-092d9aa7b005",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "12841921-dec3-4198-ac1e-d08adceffe48",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "30f5890c-1f2c-47f2-b27d-acc71e606e89",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "6f048c20-e0d2-479b-b365-3dabbec849df",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "b647884e-336d-4163-be22-f7da02eefc7b",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "156ccc31-04fa-4c50-8e97-6bf13ae660bb",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "5638a917-0e76-4475-b49c-f1993cbf86f8",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "8aef2ab2-a515-44ca-b0e3-551be75f9f0e",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "4e66a2e4-dffb-40c5-a433-7b832c075ac2",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "ce255b24-2d83-4441-96fd-bf385d1c90f8",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "295fa2dd-4580-454e-a5ef-2e490fc8b458",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "5b0f9ec1-ef4f-4f2a-a458-7699dbe7e089",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "6c86b397-cb8e-4a99-9cc0-8238c4b4f400",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "e85b2334-d8dd-4d73-92c7-11d1afdb55de",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "51f19052-d948-4667-8b05-66ef4b2f2a34",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "e40280e0-d841-40d3-bf23-665d9e4d55b2",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "66956581-df04-4138-b6e3-f569da3030a3",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "518c6c98-1b16-42be-a073-b683c2680c64",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "7eff4fd1-da23-4806-8ba3-e6b5388107c6",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "f155c807-f6a1-41fa-a4f2-824900dce1ea",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "5f241065-1ae6-4a96-abc9-e8526d187792",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "7dd16e21-9f06-4533-98ad-8c7d509c59c9",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "72692d23-8846-47b2-8fe3-6dad41d2aaf7",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "995a6c54-10f6-4c77-8e6f-4a797a1efaa7",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "64319379-445f-41ed-b434-0555ac6d76ef",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "8b27f1da-d525-4a67-81f2-1cc60836be34",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "3097912c-ad72-410b-a9c3-459474cbd62d",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "5f9c1ce1-6acb-4ad4-a468-a83912903133",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "bb50bba4-4a59-4b3a-bb28-a04eefab86a3",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "6c3e9f5c-02a2-485b-a0f9-1de4428ae2c1",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "54657eca-68a3-4916-9a68-8c3906ae6e87",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "df4f199c-e543-40dd-afe3-d9009b8c2274",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "968620e9-f810-4a9b-bb15-9ac5aac75fd1",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "0bfadf7a-6bf8-41bb-bf82-cb77a21fbb0d",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "e97bda95-f0ef-4399-85ec-133456049284",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "fa5678cb-08f8-4a2f-b3c9-681b747e012e",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "97e03330-a51b-4165-afd8-d2b263fe0cbd",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "0aa7e785-37d4-4482-a1ba-eb06eff644d6",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "0bb6b524-72ea-4108-8d3f-9654dbc337ce",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "e9243727-635e-49e3-8bf9-614e91921f41",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "daf65f82-7f88-450a-912b-344bbd8a49c5",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "f1097ec2-06fa-4c35-96e7-46240f6868b2",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "ff9e65c2-4c47-4d43-8317-d90441705cfc",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "0169e9d3-71ea-402f-9c9a-78a94c84699c",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "ce079e99-5d2b-4467-aef1-88a982ae5c53",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "0d9fba4e-8245-4883-85af-6da238ad7973",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "2c6ef842-a7ee-4434-9242-54815d173f97",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "8c49d28c-b8e4-4bea-af08-d0a18bce84df",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "12cec8a5-0f81-46c2-b299-c11b5646bcb9",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "faef5192-2abe-479d-8ce9-cc4516458a75",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "37b63160-b345-441b-af19-930c83ac108f",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "91bfe2a9-2064-42c4-91f8-70128bc6bb17",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "b762b9ee-ea34-4793-beee-99a763fd9f1b",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "91052116-d19c-466a-84a9-bdb1102da921",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "f9869fd3-74b1-45ab-bee8-0e96c804b93f",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "1813789b-c891-4c7a-91f5-fac6f363d5c7",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "867baae9-fa87-4690-97e7-77ef5769d486",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "88ddac8a-f6ff-4b20-9c32-fdc09f97c183",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "533b6c1a-bd8c-4be0-9553-4a4b539306c3",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "d7477cb4-4e2c-4067-aab9-9ee9f74fc95c",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "d9bd82c0-3837-401e-a2b5-4be2ec54e955",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "0e5ea2e5-0cb1-4d81-b569-8654cb2dcb78",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "889b9259-5910-483f-ae84-d6c5b46b7040",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "77bc132d-2e09-4b28-b8ed-6670c7182634",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "e305e5d8-8fd9-410b-b780-aa8b98028102",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "939ddd1f-c9ce-46db-b576-00ae52ee6d5d",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "99f7c69c-37de-45ec-b919-0f7d51e5ee2d",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "b61c2fbd-2d9a-4d3a-9cbe-c83baba27f30",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "e5856483-9043-4102-8e1d-8801b4244152",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "f4135e38-8d5f-4ac6-8898-f0922a2292b5",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "560f0b47-9c28-4f68-b3b9-61e58cd262d0",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "bffe13fc-f9b6-40e6-be9c-3c9045e46fed",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "a94e4b21-97ce-4366-a085-160d6b7f8a84",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "a69497d2-2fc1-4a6a-98f6-0ca3efe40722",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "3dc50c2b-b2c4-4b6f-ab6c-910ac11912d7",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "6c6b31fd-dec0-4e56-9ef3-7fc70845c7bb",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "e2b8b558-a441-4398-aea7-89f4d56f0783",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "ce9973e2-b7b2-44f7-aa41-e8e74a021d47",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "c7bc1b6f-971c-4062-91a9-cd934fe715d1",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "33563897-ccd2-4e31-a8b8-991393071c8e",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "945f09f5-6952-4ac4-abde-1006afcbd237",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "ac5f3dc1-86ec-4fca-976a-6f2dccea146d",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "e69d533c-ad7d-4b3a-8eba-d66c889732d7",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "ac207c4d-a62a-400d-aa14-a047780caf99",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "44190102-5a16-4e9a-803b-ba5ce5a986ae",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "d257d81e-0fcc-41f2-9da9-88b1946bb658",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "5b078d67-edab-4ee0-97a3-bf079bd14b5c",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "3d7a0f72-e8d0-4859-b9f1-4573f1b5a920",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "55d04188-3bb6-4b72-b1e9-2f8397df4bea",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "2943d1db-c055-417f-ae34-a51135d507be",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "09dd795c-174f-467f-b2bd-4b95873b2137",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "660a3d57-af50-4367-bfc3-0f03b60c015e",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "f9fce616-aba4-43bb-8e1d-dc50acb03c9d",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "475f16eb-ebb1-47f5-adab-c9d96e15118e",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "dd85cc75-ba0b-4f0e-91ca-0469bfac80ff",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "5c148044-dd79-4402-b978-e67f41ddd55a",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "37bbc192-02ff-447d-b9bb-6b46e1014650",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "810cd447-2cd5-4a06-952e-ca13f1452a47",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "f1b59eb5-c126-471a-97f4-443dfcd91fa8",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "7c7db566-9961-4c58-bef5-a79e61ca8cb5",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "55dc7b23-2616-415c-9685-360fbbe7d08b",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "40ff15f1-f526-4b31-8232-78d6abd82163",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "b674d9f0-9544-4484-bbff-210e2e7d2c71",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signup",
      "chunk_id": "e361e23f-47c4-4a7b-9d9c-5ce95f9bb177",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "60c50a0d-7cfb-452a-9b86-61f960a1f20d",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "0df6937e-6f36-4ebf-96d9-f4fbde57a957",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "b5f848f9-794a-4d1b-b0f1-1124b3ba7f75",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "36807d6b-5e2b-487c-9173-96a753c57b3f",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "5f38ef28-a8a6-4ea1-891a-03e5012dc9ba",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "3504c801-3ba3-430a-a799-d7b2cc97c539",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "25134691-691d-44ee-872a-df822fbc6270",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "7d355ac8-fabb-45a6-9aa9-f0bf927e73ed",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "a9c28e55-62a0-4c80-86ea-41e442237955",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "d2cca891-7a70-4f43-9e21-6bcb011e7951",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "9a3fe0af-c460-452d-8d95-e6271b22491b",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "10775bcd-68a4-4a1f-addb-33d16895fb6d",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "533bf1fc-9458-465a-b008-d354f15ae4fa",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "d76fc458-f450-41b8-91a1-9785c02a7e0d",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "cb90b759-25e5-4c80-a3c2-cfb0f8d7d1cc",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "94750e62-21eb-4451-8e17-2acb33dd2aca",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "ad93966c-2408-4944-ad8f-77fe0e6ed9fb",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "816d84f2-d842-474d-ac87-e0959e1f0c3a",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "0c410f6b-0e7b-43e4-8bfe-375845ea4c83",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "91c3c764-31d4-47d4-9e12-d5c13ecb8caf",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "e022d596-e728-46f0-9cd2-97b1900aaca1",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "a1fa2054-5757-4901-b726-6451e1fa3645",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "fc38d98f-02e5-4527-95b0-6aa0530e9ed6",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "035e59d2-2fc8-482d-a169-4cbd077f4c7f",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "12456241-6e3f-48ed-b1ac-20918c813887",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "e92ca67e-1c6e-44bf-861e-4cf61e7f893e",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "07a456cc-8350-4e29-9f97-c3de8d988d95",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "57b57f6c-e6b4-4d4e-9fbf-e634ccb3f9ce",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "e70db58e-7db3-4aea-9457-00f25c807904",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "4aa33380-12b0-4cd9-b5a9-9e38e44e74c1",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "6c771f83-1164-4de8-ad46-83a50ced0d4e",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "f3bc7743-5cd4-49f2-aef1-63bcc9c61171",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "1d35289a-f326-4972-b647-788ef237f3e8",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "b5848c41-bd53-45dd-a475-4745e775b7b3",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "61d93fd7-038c-4094-b55a-645f981cdef7",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "03f8bb58-2877-4bce-ac1e-c55cb188378a",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "929acac2-906b-4da0-9a9d-b23f6c7ee592",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "0ad39d9b-877f-422c-b7ba-b57959c5793b",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "a1f86d6b-7234-4aa2-9b49-bab487bec917",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "b764e2ce-7cda-4ccd-a417-e71fcc2b45ec",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "bf2cc6e9-b01a-40a3-bb8a-51f2ed71f3d7",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "c26ea180-14cb-4ed7-8d61-6a6260b2871b",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "ef3d12d9-00f5-401e-8374-41102435fb00",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "37a0590b-7748-48f0-940c-36800f55b03b",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "91c0b1b8-2708-4873-ad8f-11417667a256",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "8145a706-1806-4b8a-86f2-b36d0f0227da",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "2a65686d-8f01-4fb3-90f9-104fc22a21c4",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "d6ed7630-aa19-4443-96a9-310278206633",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "0c079e1a-459d-4aca-98bb-2b0aeee41806",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "0e045a13-e052-4490-92c4-dca87d20c92a",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "90b82609-2ee2-48df-be08-a23cf01f68d3",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "055ef821-9edf-4c6f-8bae-3530e4291824",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "9e58739d-7c0a-47b9-9d74-be7d6a402a54",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "32727007-f731-4bc5-86d2-e634f10705e0",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "e630725a-4a6b-496f-8e22-369315408cab",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "8f1b90db-4e1f-4410-be42-5e51575be361",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "cd8efca6-e09e-42bd-bc1b-51a514999d56",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "b018fb03-bd14-4f08-afa2-0f207e702156",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "e574b386-47b8-4584-a48d-fa186e6927dd",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "57ff8315-29bf-4974-bad5-9a05b18539c3",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "4d78f2a5-04b3-4d41-9cd6-1d01f9e6df16",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "4769688b-a796-42d6-b5b1-572c62addedf",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "b3eccb29-3125-4ff7-85d3-223937e685de",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "a8963ca0-2e9e-4cdf-8eda-c079456b4b63",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "5252d131-b708-4ae5-a1a4-5a43b519b0bb",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "4eb60a06-1610-48b5-8d9d-d2d0ba3878b4",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "a43c30c2-7d1b-4f35-bfce-fff8eb63e2c7",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "db6d9e04-6755-4a39-ab60-848824aa06db",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "5df0ce73-3d99-4c6a-9822-a5efe177b4ff",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "e18731ac-e4a0-4582-84bf-5fc7d4abb378",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "0eccb54c-0471-421f-8909-d22f3b55587b",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "8f5af82a-9998-4fff-ac84-a1f7615b6bc0",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "638ac5dd-4bd9-4c01-806d-df2c0df13f46",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "7eb8d641-a2e5-4a19-8a22-1213a7374666",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "141da675-2222-45c2-be86-7d5bc83b9018",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "dad27e06-f005-47a2-aedd-45ceacafefb8",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "b4da87ec-8c5a-4ad3-b48d-132b7c7f2b5a",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "fcbf4773-41d5-45da-8e50-95b8b3218439",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "90ca6cef-1568-437d-8c95-073968e7c5f4",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "8f7dbee1-02d4-488c-b7c9-424e22e49ea9",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "5e2b0903-309d-4603-95fc-5ad8f8868572",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "e998e445-6b62-4487-a443-e58d181b95c5",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "4730c310-0652-4e20-9190-0c9212b83e01",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "5f439b30-e71a-4652-a18d-61f1373e896f",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "017c1181-17dc-4cd2-8103-b29016a2159d",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "4165cb31-f4bf-4f54-9f38-50a8c9b37129",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "427388f4-5a10-4200-8135-e3562f49f7ce",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "e417e053-604a-4dcd-a794-ea7c7a5be285",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "34d0b254-cf5c-4ed9-b061-a9aab5ee35a3",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "3c15c90e-9014-49ad-8e56-4e935d55c016",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "806a676e-3e15-40ca-ac65-9370ecd5cad6",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "592fe6a1-2e2a-4aa7-8db1-72e5ca51af8b",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "80dcf2d6-23b8-494d-b347-831dfe4ee864",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "66acf259-5901-44b0-8d70-81e35a54ac6a",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "7cd2d4d9-8657-4287-945b-6fb8749f237a",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "82cd09b6-cbdf-4f5d-8c73-0d5502b3443b",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "f155b8c0-1752-498a-b80c-538637f13c03",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "4f2d744e-3d8a-4ac7-b124-bc4f21bf5222",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "c322cab9-b121-42de-9b4a-13776e08c1a0",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "f700c8dc-9368-4853-8403-c328dc692c35",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "7b40c545-bce2-4feb-8dac-37f2ffd68f00",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "719a745b-5d2e-4cc4-9dd1-fcd0b7142dc4",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "33bc316d-283d-49aa-875a-3b1b6721dc64",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "4654b261-5fea-488d-a8e3-35a92e421c11",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "5ec148f1-eb40-4c73-93b3-4d6f5ee050c5",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "465ebf93-1256-46d4-a20c-655a9f88d87a",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "36b6e8df-cae8-4b7e-be9f-507cef82c3ad",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "e595408c-55e6-4e3e-a924-82252595bd70",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "8890c46e-242a-474f-bf11-69074331f73a",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "d929ea10-716b-4fae-805e-66ca1659eeb1",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "f3341e5d-d55d-419f-8d54-9c72891cef8e",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "e63c4223-8ca8-4602-89cb-11a2a542d3c6",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "eb148a15-cd88-49ce-afc9-7e8428d80132",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "21f6b877-a593-467b-9794-1f27cbdcb18f",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "8e08825a-641c-4045-afff-ecf54e64ec28",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "c0a288ec-558e-4d32-bbb5-683b97f078a6",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "607d2f97-f7bb-4aac-9a34-e75353036c32",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "dcde62c8-58f0-4b5a-acff-1c6dd9adfd49",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "a80dfc79-1193-49ff-aa70-2cf920cd46c4",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "1b064410-663f-4971-ab5b-5dedd85e5a3d",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "049d8305-992a-4155-b12d-dacb97033017",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "703bea10-7829-4119-81d7-4ad3e177ddef",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "6ad543d5-29ab-4692-b167-9351657cc814",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "4705b566-8a48-42db-9800-4090c0b4d458",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "b9e73497-0d9b-4557-87d7-877b6827f631",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "ded561d8-9968-41e1-8326-d6db32aa1ffa",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
      "chunk_id": "903911c1-6ecf-4f5c-bafe-a537a8738196",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "59d3eb9c-6a20-4d30-8040-07a78c7b7ec1",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "9f8f3894-fd11-44ae-b3a2-f08609904b38",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "cb0a634c-ae12-48ee-b9ff-3a35ab9ebf3c",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "c843b8ca-c198-4992-9345-b4662613a346",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "36a73f40-7271-4832-b50b-b53d14db0a50",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "1c824de3-c15a-49af-9800-faf69f11fb98",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "f2ccb3f0-d2d9-4add-bf49-043ebb952226",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "d5b55f9a-9c74-46be-a2f0-e4e1b722b2d8",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "c894b1ee-6074-4c44-b075-84814ebd542e",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "71e26d75-d5df-43e7-93c3-76901c109b10",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "78e16c5e-591b-4347-b599-faafda02ad2c",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "39796790-c74f-45b0-9175-fc5086ec429f",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "6b79c9af-7f9b-49de-9432-a01f7f92d20f",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "84e3d54c-8492-4a37-955f-36aa67516aa2",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "f6557fea-4d84-4d2a-aea0-c447274ed1e5",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "38c309ed-a9ed-4a1e-8624-3626620f6169",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "2e34e718-10ae-4ca3-aef0-570148ba2d37",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "75ee5418-d70a-4fb4-be07-1e59bf379a25",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "00ecc471-06cf-4dd7-88d3-b8cbd29f343d",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "37bf760f-6e39-404d-b2f2-69caddf370d0",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "f5ea972e-1624-419d-bf24-16efa6a50282",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "9a119130-1b87-4ea4-873b-b9faa721eb7c",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "31016b11-e276-408e-9f2f-5946b9a9e803",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ac0a3bcd-697d-4eed-b95d-874d2040a770",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ae169612-7044-4c63-9336-6f7c5880d010",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "bdac4480-7674-4f7f-8768-ad8b4c59a672",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "763d5666-d5e8-4bed-be37-c8d0c3721124",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "7b63d1bd-358e-41f1-9130-ea0ef6acf15b",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "974802aa-32e5-4041-ad1e-e1903c5b8dff",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "9d70ffc1-b4bd-4c6c-8994-07e1d4f2ffcd",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "5c80f169-abbf-4d31-a5c1-14638aaef58d",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "a25bc984-f94a-4ae4-ad95-f45c7d6db63a",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "17e69069-3e39-4ee2-9369-bccda052be89",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "c504198f-5998-4ccd-91a2-075105ff5a6e",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "5c595a4e-17b3-4273-84ad-f3dd44b878d8",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "aadb3925-0d5e-4d8e-a6a0-5d1e865b43c3",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ddccfab3-0fa0-42ce-b1da-4a56c2f9b8c9",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ec04df8f-052c-4df9-b38b-9a5b16ce30b7",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "3f337b4f-72d8-4270-bacd-acb3258552f8",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "3c9fd9ee-6684-467e-8eda-f859849fb712",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "5b438386-99e5-45a5-8edf-8f80d53b338f",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "d6723ca1-6a03-4d00-92a2-786157f74cb4",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "6ddb9167-2f2c-4d84-aebb-d64953c3b0ea",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "c33e3443-5d94-4407-9d47-34a6870d8c0d",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "bcf8b6c6-3eb8-4806-99e5-30c63ae82725",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "f717bd89-7adf-4e70-b448-509d82e5fe0b",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "5f90fab8-5a73-4b37-84f5-7bd76a4fdee4",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "039d8497-2a2a-46bc-bd6c-c50bdf31b5fd",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "097b7ae5-c2b3-424a-a915-cea3dd85d341",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "819a3c23-c8e9-4e8d-9408-4463e48517b8",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "453a942f-7b7d-4fc2-ae61-9254e1bd5633",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "a9775b7f-39c1-40ac-9064-fc8f0551fe91",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "83d549b1-c1d5-49c7-b070-301c745668e1",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "6788e790-f76b-4c93-acbf-ebef39df4a7c",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "511fccfb-bd3f-446e-995a-fe7e9e93082d",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "3456dfdc-8576-4317-a651-48350a8351b0",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ab336cdc-4bd7-4bc9-843f-a27e794bc4c3",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "901f7e1e-4a9d-4db9-8279-ede4e1956410",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "5eef6c90-0164-439a-a0e3-276b1700e980",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "5cbcefdc-61de-4dfd-b40e-d37ac2e8e5ad",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "da62334e-d8da-469e-abe8-c0af852d01d9",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "21ea4350-7310-46b7-9921-eb3d0b286a5b",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "2664912b-2931-488f-a257-6057a6c91562",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "330b23d5-30d4-4734-9d60-2f1dfda9271d",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "7c6e8fc8-59ee-402f-9695-c41a3e629942",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "8cf0690b-0988-4e25-9788-e4fec6513ada",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "9b33c32f-8dcc-4723-9ecf-4d76a79f52dd",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "7bd62355-db39-405a-a67a-02595f9232c0",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "b2e4c7fb-fb1f-4484-8efb-1ecd4d5f1b90",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "5dba2ebc-96f7-4866-8471-1528a0d4dc71",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "b7bca23a-d451-4ce5-bd2d-38da737b63c1",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "9dda12e8-46a3-454c-adf2-14fc43150b0c",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "2ed657a9-3164-4a43-8e02-fce4c7eb592b",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "5612d124-7f1c-493a-8456-b55d6960813b",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "d32b7799-e951-4703-90a1-50654946acd1",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "edc17c73-b135-4d1c-809c-5cbe12acaa06",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "9c36612a-1cd5-41e5-8ac3-4ef119cde1f6",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "dbdb69d6-17fb-4e95-8755-165d95c2c472",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "70ec4449-6fc6-440d-951a-a48039686a87",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "bc82acf5-89fe-465c-ad57-fee0b5b66282",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "2cad7eb4-9c7b-4bf4-9490-4f6405117a43",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "0eae1bb6-9366-4405-a3ea-7e8a4193086e",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ed9ab942-01d9-4bd9-aeae-d829d9d5062a",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ad09043f-c1ac-4e5c-b4c2-2f99f03cafb1",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "6d706a43-b1a3-4a2b-a323-d87e685b102c",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "0f739192-4007-4f6b-a639-184d4922349e",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "37cf595b-8ac3-403b-ba5f-4b612ada7e7a",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "df6d429c-7e16-49b0-921b-1ef9d93b2e9b",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "d39a2513-7c82-42b8-b1d1-dd8cc0efc290",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "1d3a584f-f4fc-4c3a-bf9a-9e0b5d557e75",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ab8af50a-5bfe-49c3-a2e8-125588f92bdf",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "8f818c5d-183c-4a8a-86b4-fd61c8f59aac",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "889da04a-00f7-4cad-ad48-2c589ce70551",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "d7c43c87-fd8c-4b13-b342-85ece7c1c7f1",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "c0e3e175-2ac1-40f7-8978-4a1f4c2ec237",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "0b72cd77-0216-42d9-9d33-a5248a050dea",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "19bbf68f-9055-464c-b6ff-3e7d3b4600c5",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "6a6ec5b1-3f3f-4af8-a360-e818883a809b",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "c7d2c560-d8f3-4f7e-8d68-d357a2c31181",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "53f5d438-fd30-4989-97e2-5db14dfe4ae0",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "60b97cec-39dd-4e85-bd88-4643e24a4e9c",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ec2c4375-5a1c-4f9f-bb69-76a80235dfe4",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "2c6e282a-c8ba-4987-ab85-acae9b6b04af",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ddd3445b-c7a9-47cc-ac89-d831dadc4215",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "8b7e693d-3fe1-4b23-a562-5be4304c4356",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "932874e9-8a9d-453b-ab62-345377c384f3",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "42483fa3-d47b-4c71-8777-d3591b28f873",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "fd18a2f1-a28c-4291-8895-b335243c0234",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "feaa69ea-6097-4ad7-8d1f-a76ded574252",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "300cc9f3-742a-4a24-9a26-b96afb292890",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "dd8edafc-3b46-4e1f-9dac-2298745fdef8",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "cb4f4578-eda5-4279-96ec-8ca38f3e9db5",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "758979c4-94a3-470a-a4a5-34bd30e1f600",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "2494893e-8345-45e7-b36f-66598b77a3b9",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "b67405f0-1d86-4b35-a0ad-2aa5ceeea39e",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "b735f87b-359d-4bf4-b5a5-594a71e289bb",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "a5762f78-1c60-42f1-9fe8-f6ada395fe6e",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "75a9012f-e29b-4877-ad42-d5c563a1b1f7",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "ccf15807-33af-4f54-a6b7-0b6697c292b6",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "c1d0f803-066b-458f-b5aa-a83ff1c97ab1",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "f515df3b-e266-4406-9430-38524ba6ebdd",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "094dc545-9e84-4dbc-83ac-3121ea95f757",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "383edf35-746f-4425-ae1f-f32c2e889284",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "8c4d70eb-bec3-4d27-adc8-0d0fc7b4fe0e",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "8ed996de-17ed-4176-82aa-55dfa42d1f00",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "a8416db1-3497-444d-93d0-45bc667a095c",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
      "chunk_id": "58dbe44b-49a2-42f6-9970-801660763725",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "6000e061-e7db-421c-b8bb-3c15dce7b086",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "c3da3537-dbc6-4283-8bf2-480c5ca3cca2",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "33774a29-f633-49ed-bada-3ec397b6a47c",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "4722aaf6-d608-415d-a4db-441328cc6510",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "12cd9583-8b66-4624-9bc2-baf863be4b18",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "3de9ade3-272b-4783-b098-da4396bee846",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "b0b8d08a-af40-4ee8-a451-febee8432902",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "2e1ceb17-8661-4d75-bf53-a65421acf0b6",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "87bd898b-3ce6-4a59-b5b0-f5d8e5124fa0",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "4e93c083-17c9-4f91-9911-7f667d276d4d",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "e8087cfb-213c-4504-b1dd-0da97d883aec",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "d4e9ffd6-a007-47e3-a9cc-e81755f7c6f7",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "a9fc0c45-3f0a-49ee-a642-078eba192911",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "f434c2ba-0ddf-429f-bb23-3d1bea448dc7",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "e14ae10a-5757-4c70-952d-ab59f3026431",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "93a33c8f-fd34-4e13-be02-fde3f6f3635a",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "56d843de-3ed3-413a-a11c-bedcfc09e75d",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "3d33a0d0-5b0c-411b-9863-7cdd9800c046",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "6530afc5-ae83-4943-8400-0b12fd01e51a",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "8bd829bf-ef98-4bf2-a27f-0a3e34aef756",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "514b67ee-b696-4672-b30d-3e3c8f3acf82",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "a534b581-19b3-47f5-83f7-45ad9b951631",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "731ce6fc-11df-452b-aedc-31e41ab4a6df",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "39b71715-1735-4c63-be53-f7663fca1e88",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "7147e79f-72c6-4661-b840-07110412811a",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "e2dd2f33-13aa-4326-9ef6-9bf11ab4a0b9",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "500d3ea0-27c9-467b-a692-b92df4f24af1",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "75443c37-3718-4c00-b188-78fd00571bd2",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "56609946-75a6-49f4-8ece-84b28e606539",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "67ff5a71-0ea3-4207-ad48-c644cb4d4f33",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "6837fe5d-c859-47c5-9780-e7bffcefd22f",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "122ff078-8873-4602-adb9-aff47e3c110c",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "7d88e6b9-6797-42db-b4d5-0820c2d7c2b6",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "5bad69d2-b12d-4a9d-9ef2-6dfdec99cb8f",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "3fc329d3-d796-471c-85eb-56ee7294afb1",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "324f1c8c-eea0-451e-9168-6ddbc5708584",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "efd7c3bc-461d-40e9-b9e0-8fa52df1421a",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "3e2982f6-778d-4e6d-a16f-de71457accd2",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "f4ee5a76-899b-4f25-981e-c75e5b26f4ed",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "019981c8-1c54-43fd-8f07-5588eda06d4e",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "43cf6517-e11d-49ee-936d-2db5eb66adaf",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "8936f174-ffab-4c88-816f-ad7175834517",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "590af590-0875-41d8-9f40-60a1603deaa0",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "43b2bc92-bdd3-4170-b87c-1e221d2aaab9",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "9d62fc57-217f-4608-a9f2-e7f96582a0a4",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "2f4360c8-1027-4ab4-a7b8-d1b5bf3459e3",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "6cd6eb17-89ac-4293-a1bd-20ffaf83d80c",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "b6b96968-e815-43fa-b3aa-671b2af1ee01",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "4f590f13-89d9-4d50-a36f-a2a60c098cce",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "0e6392dc-29bf-48fa-bab9-f1741dc97a1f",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "1467c63a-d1b2-4f2d-8c0b-be3e72797f75",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "da102fa2-b69c-47c9-8b6b-3dd5900e8fc3",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "df26c718-7793-485a-85e9-58ed62e193c0",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "ae680569-fd34-4f10-8588-dc509e013b5e",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "933eeaa9-8ce6-4055-8a87-dfe523ed0166",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "b2cc5cd4-cad8-4747-bafc-53276045e497",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "93c85e38-6d51-4257-b3b7-4dad6ca24089",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "7c4c2317-9894-4ee3-afe3-77bcb5f874cd",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "deb050d9-9b51-4996-ac47-655ad4292d6b",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "e0130c3f-2147-46e9-9828-61a2a3181929",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "cf1a5e29-4e5a-4a04-b40d-7531062c68b6",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "803b22ca-4afa-4410-8a9b-928a47efec9d",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "67942af7-d325-4cfd-8362-026d3de6922a",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "0dc5e41e-2aa4-4416-896f-172fc573f618",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "881ccda8-5d34-4711-a44b-8485ac82dd2d",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "9c0c6104-b23e-4e7c-bc33-315b3ba5eeb7",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "9746ce63-0906-41f4-a733-07566c4e99af",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "dc7c4e07-88b1-4a24-9e25-a236e816901e",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "2f77dd2d-e9c2-4eef-aa53-b7eff2f2affd",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "46c920fb-5932-428f-9441-a17dfc561b70",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "75652f4f-1d81-49ed-91ae-2968aba538b5",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "7ffae32b-46e2-41ec-b7c2-99792e6264e7",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "46b01c83-c026-4d8d-9ac0-bc81257ad4d0",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "e3d848c0-c8bb-48ff-9fd0-8e90a1c027bd",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "53bed3b7-4e94-4f44-9f8a-f00576ebdfdd",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "b7287175-e3d7-4c81-a580-0a678e3773e3",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "faa6856c-2b86-424f-8dc2-523c81ad87fd",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "c35fe82e-3f1f-4760-a107-1f55339c926d",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "b37c44fa-0395-483a-a37c-ce5a0b271019",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "bda0c0b0-6df9-42dc-baaf-014999e7f072",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "a2a58208-d2df-4636-87b4-43a0779ffd0d",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "0ce1e755-1f7d-4092-bdee-e20ac9ddfabf",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "65736b28-092d-44e7-938a-c45f023e6897",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "b921270f-0d3a-4ce2-9194-2ead2fe40edf",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "1dfef8d1-85cf-472a-befd-b8ac9e29ae48",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "0e3b0931-056e-43c8-a384-75c41c23f559",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "f001a367-4fe2-4e2f-b226-7555fceb07c5",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "0c46d2df-39a8-4f51-9bd2-2f7a9ef3ecbf",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "6beda261-cde8-49ca-8180-bf410acfcb2a",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "32694942-78dd-4c94-957a-4aad358850d4",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "31502d81-3418-413f-85a1-656861d5d8d9",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "7c7dd8cb-d9ea-44c5-957c-0a980c106e15",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "acbc61df-4dff-4292-92b4-e637e9c4de2d",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "3da2cf20-3597-403c-afd8-1a8b73a0ad4d",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "8b4c5b8c-a4c9-4fb9-92bb-1840253008d9",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "3288bbd1-7ff4-460f-86bf-59f18515f35a",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "0f418a5d-b982-4c76-bd23-a23e6e0d3ba7",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "93314139-6af6-45a4-b45f-1a2578521059",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "cafeb96d-733d-4017-84b6-726bb49f9e97",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "c19dd1cd-e11f-44ae-aa64-06e0f4d7544e",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "aadfabad-39d7-4f0b-be45-17bf931fd782",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "f083b3e9-df62-4fb1-83c2-066c3f534fd4",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "1b19c095-6aee-4730-8d72-1c3f1a55a2d4",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "a6a28545-5d92-4bef-8ed6-23b1a5dd7332",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "1f4fe5d2-f419-49fb-bbd9-947ee0b1e5d1",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "4d42569a-6e12-4f57-8a22-510275ca5d39",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "fef7e775-357e-4fca-b150-30e8bbea73f5",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "3aefadc6-faaa-4335-9ec1-1ba7413ee707",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "15b729ae-9336-4f83-b481-259912fb2da4",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "80f0296b-b61c-4afa-8ed5-2b7e186e089a",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "2c390ace-acf0-4e33-95b7-677e8cfc4581",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "e1ef9cd7-0bb0-434e-a9d4-8518b250063a",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "649e55b0-2280-450d-bb02-e5b5ed96b666",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "9b89dd81-4ddf-4b53-a428-09a8807d8ef9",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "b90a2f31-2dc9-41ac-9ed1-b61734fea7bc",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "865ee453-de76-4fa8-a7f4-00c2fe7690a2",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "550cf668-1f00-4fc5-890b-688313c1999c",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "529296a6-221b-4813-a49c-919128f72e1c",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "e9ac4170-7610-40c2-8da8-ad1568957e1c",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "679c347b-e161-47a9-840a-45636838efd7",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "ed36f770-7cfd-481d-b519-7ce85849aee0",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "d8d66386-a1db-49e3-a546-cdb8a854b424",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "580a00f2-2964-4d41-9e37-8b956f070b9d",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "457459ce-4eb9-4936-82f0-83a6dcecab22",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "007697b9-faf7-4c85-a144-0ccc43fab73d",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "a571a565-f658-4006-bc24-3802bdb4a5a8",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
      "chunk_id": "90847f71-f0f5-4019-b244-f2ccf7c57586",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "9389f4fa-6e53-41cc-995c-7e14e183398c",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "dc6ce156-1bfb-4128-9de1-221d41819766",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "19690599-1e1b-4659-b305-f3720305dcb6",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "0ed0a30e-ef01-4b51-966d-6c71bb131413",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "1e36089b-5c29-4920-b23a-52328edd8f9d",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "2049b42e-df9b-4ebb-9d4d-5849ac9da5eb",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "19e5ab4f-7f94-4a4f-ba4a-9803f70d384c",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "ff72338f-7fb2-4ea7-84a3-73a655a3b714",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "b7f8139f-1835-489c-ab64-b6007f258158",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "fbb223ef-f242-42e1-bf63-513f5aa4e6dd",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "74271520-cbd5-4976-b5c1-c9ba76bd4dd7",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "11c87d23-a39b-45bb-93d8-80bf9b8fc6b8",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "c408c753-0e4b-4562-bf65-92f570c40644",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "7fad894b-c858-43c2-8633-6807b673aa3a",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "d470f7b0-2e70-4551-9775-0b4f150557c5",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "b845ff48-677e-484e-ba05-6317101e15e9",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "2865cdf4-09f3-46a5-b8c3-3f87e81f200a",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "d7ddcddd-66c4-408b-9b0e-f739d23d8b6e",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "016d71f2-6f09-47ef-afd8-7e990cbf61f9",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "63aa8bc6-7cdc-4d1a-b503-82b0b94f8216",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "19bb9646-bb1f-4ef8-a38b-93266108540a",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "f7e2d935-c8b4-4769-9576-b838b787af74",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "d1b5d013-706d-4e76-afb0-d4c3cceff7f3",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "f4ee83a4-b75a-4306-b178-a590575781f6",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "f2d35b3c-2179-43f6-9375-2c2a9ade7df1",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "c751eb2e-e60d-413d-9cd4-0d98e3a3c250",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "325c0c31-f310-45da-b343-4e49b9f6c5c6",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "ab71fb1a-e511-4e9b-8500-c3a329ba387d",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "5e1673f9-ac4b-4456-a4c2-64c3bb864cd2",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "f65a0e23-3a10-46f9-815b-d2bba6ee4b48",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "080036d1-a639-40f7-8e3d-cf1e3ef98a1e",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "08a2d019-a205-4965-bcfb-a6a66cabc57c",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "912e7584-ffcf-4689-86e1-253ce514d500",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "19c62450-5826-4b2e-acc1-82eb7017414a",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "eff1b6e0-fdae-4aec-a1a9-2e1ce8c6f1e4",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "59069b5b-5782-4e9a-abe3-b78f2b6930f7",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "7da69eb4-872f-4b1d-95d3-63ca0806ba00",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "d4584790-b170-4be6-a621-02381936c399",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "93eafae3-757c-462e-b360-5bbb3a017d74",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "a9b3c75b-4117-4fd6-bb4d-7b24a846164d",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "8a6af517-2cb4-46b7-ad66-1f1c91028cc9",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "7ddc19af-85c9-46ff-a4c7-6572af9ffcdf",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "076d07bb-e33b-4960-9b3b-2051ebfe0f43",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "2af57bba-2354-4b92-b457-49115a2b0070",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "1e660908-6079-4e5e-ba43-d83d57c338ae",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "e1ee002e-a19e-45f6-9eea-0a2126856b54",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "e7b8f4b5-9ac3-416f-9bae-812e71b7d3de",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "79d5e0c9-93aa-4706-8bc3-70484dcd49a6",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "fd1c401c-c072-4c44-91d3-b44613733695",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "618963a5-e781-4f9e-8bd4-30b0214f41a7",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "284714c7-e43a-40f5-9bdc-af43b98cdad8",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "1367f0e4-b84b-4d29-b882-5f3265ad8df2",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "e75510f8-587e-40e7-a65f-2ac07a55de63",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "7e645201-1130-45f6-a48a-1241820a7ac3",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "4fefb546-fac7-4266-a048-1235d67a1d8e",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "c039a309-39fd-4802-a244-49c52d65f235",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "9b3c22c6-7acb-4116-a6b3-6e4bdbcbdc06",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "9c5f0988-95c4-4b88-a5fe-e6fb021928be",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "a9801d50-ddf4-416a-9f05-7a1723cc9b19",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "68de3b1d-e8bf-40ab-ab41-a3f38f77ddf3",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "a2299b5e-d941-49aa-aa8b-95b5d0eba1b7",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "dd7c81b9-178f-4269-9869-9754423cc962",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "af58af5a-b2a6-4185-ba7f-fd44b7998744",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "d2a09cea-f0ee-4b65-acd1-d89316a359f0",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "7234a721-1021-401a-9f1e-be3cda58a69a",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "9c7395c1-ae0b-4a76-8767-1bc0ba56748e",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "b5cd1f9d-ecc3-43e1-9ad8-e9074bf4279a",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "cfdb159a-56cd-4b0e-a2ff-fe9bf27ac5fd",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "9527daa9-deaa-46f7-9520-7e5bc4ab88d8",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "5ee56f76-72bb-475c-997c-acd34d6aff20",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "012daa2a-17c0-426f-913d-4d889f27fcc3",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "483cc0fc-f4a9-4632-9ed0-7dfec1328acb",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "606ee90a-4701-4826-81fc-b35147373f2d",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "f72d1c2d-a9ef-4c21-949f-0f8ac9abdabb",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "478da28e-0d4c-4415-93b6-b72d8f1d954c",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "bb2b8d39-5018-409a-8569-c01dba4a3b47",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "52b05268-c20c-4e26-9ef4-e89687539689",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "8166e711-1367-438c-a5a1-2c8bb9701872",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "88ea804c-1c86-49d7-b35b-f5599b09d27d",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "847d0b1e-173b-4732-81d3-d76ab560d418",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "9fb5bf90-9179-4f2e-84be-74b3bcff4359",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "8ba365e0-ef6f-4d7b-bd00-5ebd2a662eea",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "1652026e-1b0f-46dd-83fc-e45d356eec72",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "e34e54c2-fdb6-4b75-9d25-4f5ce2d0c3a8",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "8a7606cb-b873-4694-a5b6-eeda2fecfa80",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "ca550cd1-c8c0-4f1e-95a1-ef1544bba135",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "d2ea5aa9-7d00-4b0c-b9bb-55169ce3f06e",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "6dbeaaf0-5612-47fb-8ae6-040716db56f3",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "70677939-d450-4ce7-be95-bc0c9ef153ad",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "51fe09fa-7c90-4473-84b1-69499df41fbb",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "034bf72f-40ba-43b4-ab84-de9314352320",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "6a6c5aad-a963-4987-bace-786e2cd4aecb",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "247600be-7829-4955-a146-1481a092dc19",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "9dca3c9f-456e-44fe-9320-6eb6a1465b84",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "6a3269a0-ac01-49d5-9c1d-d9c743f1db81",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "14e9ea82-19bc-4ae1-9a1b-0d0aa37e9df4",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "f94f6cab-0f0d-4958-ac4c-9f750ebfb599",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "aa97b5aa-0100-4552-9f54-f25b39685d45",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "3cc10d99-5e89-4f8e-9d67-c8fc96aabb35",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "db5f4022-f674-47ca-bb14-8212c799d7e1",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "593ca6d7-4b4d-440e-9ea7-23de827d496c",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "f2884347-6e0f-42b2-a501-ffde8bc7c369",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "3b93b6d1-4431-486e-a5c8-58d77f17b1a0",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "f6df3b73-a902-49c4-bc55-cb67b683b460",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "f8e303e5-896c-496c-835d-434634501d31",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "731c62fc-da1e-43bb-8ef0-9e919b6edf9b",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "6d979c13-82f1-424d-a17c-f6a45a628256",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "76592308-2b01-4095-80d1-d2bbeec59933",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "2ca05d6c-469f-4638-853a-b3e0788448d6",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "d2ef1c8f-494c-4549-aed4-821e10114504",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "3614a525-384e-498e-b503-b942a5470f0e",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "a0533147-1c99-4ae4-80d2-f00906400a06",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "537f9da0-cffd-4959-bc7c-dd713673c078",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "a6035317-8b23-4ad0-9f78-1b0df72d0503",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "dfd4029c-ce00-4b4a-973f-1cd76d5f6b30",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "090fa565-c175-4afd-a532-481232d7485c",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "12ee89ec-d0c1-453d-ae8e-28cb39827d87",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "a66828c4-6b98-4167-8a12-71bb49d2b523",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "2d8b2c02-64c7-4924-b96d-69c6a60fc46c",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "cf6ac8b6-3eed-44ae-afe5-5d0e3b95cbc9",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "5f87de75-b35a-47c2-9bce-e2555c3cd720",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "ff8fda94-17f4-4748-8601-5f692b0de622",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "8e747391-9e8c-4668-9be8-e5058bf4b6b7",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "5352cea7-51e2-4835-8205-1150f492b0a7",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "89fbe22e-391d-44ab-b4d4-5c266c034c79",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "9d63a58d-f43e-4d9e-b2c0-4c66a3e2cc43",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
      "chunk_id": "4d5731a6-f8fe-49e3-adc9-0b1c7299696b",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "9f8f47c9-4da2-4124-9bc7-628a9025fdd0",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "7e190b02-47f9-40c7-8d33-bc9e65eb4438",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "9b6de68a-0624-4606-86ca-15d529fcd752",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "65d6f73a-ed70-4d69-89e3-41a192e3970d",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "0024577f-4302-4a2a-ae75-ae8d4db4d631",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "70079632-80de-4d5a-96f3-45412d02c95c",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "09342fae-a26f-4992-968c-77baf2f3a966",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "d7a229c1-31d9-4244-bfa2-0b37f0b03bf7",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "33476479-990c-41fa-8cee-93ba11ec3b82",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "b81c5942-66a4-4c89-8d6b-11caa68271bd",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "3163b520-6a52-4d90-9787-45e741bfaed0",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "473b2e72-64db-41f2-a013-a6d221854728",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "d9001a23-2299-4420-9f1a-55b6f4d5df2b",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "c66f575b-2655-452e-b6c6-a4812c84505f",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "e42c2957-0a22-4807-a914-effb5bb824be",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "2e787a98-2f91-48d3-a009-c94257adda68",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "369659bc-0d6d-4555-90cc-7a73a2205e7f",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "82d543ac-8187-4bdd-8760-93511519db58",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "9a84851b-2f2a-47db-baca-f7ac6c5a1bcd",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "18f8590e-0e61-422c-a911-9c0164ac123d",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "cb2ef00e-3f2d-432a-9924-17e67a106463",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "3b9d1967-e3f1-4819-886d-0f338bb10c3f",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "7dd38f2a-9b32-4546-bd03-d47917754b13",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "ff43f9c2-9b64-4a21-8489-700694bed1f7",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "05b7d084-421e-4213-b51d-f202ea4bca62",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "f05c6be9-6ef4-4d05-8126-0cfe67eb518b",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "bd448440-0bdf-4c1c-a995-64e1ea3225f9",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "145b3d2d-2125-4738-96ca-b81aa90df71e",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "eb2bee90-36fa-4ec5-a098-c4c82208cb27",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "46d5f273-75db-4a20-9a5a-1b548c792001",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "4d2f9cc8-9e0a-40f1-881d-5586ffdefd9e",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "a4c16693-9a12-4bd5-8ab2-492e4d7d39e1",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "a6bd79f5-64b9-4f5f-a961-2cd024f01213",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "9d1ae0e6-9ffe-4956-9f2a-c101d721922b",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "b570b993-a7cd-48fc-99d7-53cc49788cc2",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "1b159c9e-ae39-4388-a59a-64be98931fe0",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "24a9f7b2-5a35-43e9-b931-1a94524ff623",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "d4117877-b48d-4bc3-8e9a-1f7420c6213e",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "ea5db67a-91af-4067-890c-6b4e3944802e",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "94dbc40e-305f-4714-825e-2258c045630e",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "b9521bc2-0a32-4c3d-8fdc-36f4a12a6dbf",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "02ce6847-17bb-4a4a-8942-1f0cf2ff64a7",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "02d3fd26-cac4-4991-8ee4-b09456e9ec2a",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "ac41e12a-6fae-418f-9899-a7002e194744",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "08b947a7-38b6-4dd4-b767-d6560585fe48",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "4c290ce8-94ce-480d-81bb-061f86255c55",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "799b3d1e-a37a-446a-802b-ca3c254e5cbf",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "7e00d9e6-a4fc-49d9-b2e6-df45d117a16c",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "69fe81d4-05c1-4669-b8ba-b825ef1861af",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "9733dd79-1cf8-42c6-abca-cef52d50de00",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "dc9481f6-306b-49f1-a4c7-8c97bca6c74a",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "78d5867f-82b8-4a57-b48f-89fe778684b7",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "0a370b08-cf85-4e87-bcd4-a59452627721",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "183b2b71-31e7-4a0a-9f2d-336ef5f568d2",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "0682f36c-189a-4db1-b7f8-d56dbe08f1be",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "450ec7a7-7e22-4b8b-abc2-a15872147052",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "bc7624aa-eb89-4616-85f7-31d96723e829",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "d41ecbb3-06af-4fa7-b849-3c97486edaea",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "b30c7dae-a0cd-4a43-b488-c054b95a619d",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "8f8463b9-18b9-4d18-8a69-f4a189425b41",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "41040bc9-4c9d-4718-9065-7e42a769e4a3",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "b34219fd-e15a-44c0-8eb4-25a62dfb3798",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "5b439bdf-f27c-49f3-8d9f-93bf16f2636c",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "cc5f1ceb-b4a9-4e2f-b857-73cf59ab9fe9",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "25c59fc4-0ac6-49d8-aed3-4ce3f5a9882d",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "019418ef-b2a9-42bc-a969-55f5f818142b",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "9da8a9f4-effa-413c-a1a6-bd8bc7e2a678",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "3c61701e-d5db-4e90-bec2-be2faf2f4468",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "15fdd74c-53a8-4f9b-9118-52440c637753",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "3595ce22-ef3a-45c8-b503-ed1a5a6e3991",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "5a3e34b3-51aa-4df3-9809-ae89ba3b74ac",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "c099a0c9-65d2-4e17-baea-dfdde9e60f5e",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "b10bbfcb-5050-402c-9521-fd0f2798ca2b",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "f19db8b0-7de1-4f9d-9a68-67d7cadc8a3a",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "e5226b87-3914-46e4-a7a4-2d50c9cffe18",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "3bd91698-a0de-4dcb-9bc2-3dd1e3d6a934",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "b3b7d8e0-1a28-4b0a-85a7-14a81a9e778a",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "94e97616-8f4c-48b9-a870-ca196f97ea49",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "3bd140c1-88e6-450e-9c01-3c8d1e44d554",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "e3e690a8-742f-47ae-85c2-27f479cd9d3e",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "ba4c366a-e8b4-4e7c-83a1-f9f8d4bd4c4d",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "436ffb9e-f42e-4616-b051-d0cc2f983555",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "0adaf381-c535-4f5f-ab66-84a164cd83f9",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "003399d5-0f67-45a2-bd4e-2b2da5f3b1cb",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "5f2b887d-fb96-4ea2-8ebe-23db0a7a93c4",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "8209fe83-ce44-4940-a3e0-c583472c1f4f",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "658db31a-b928-40ef-9e9b-0cf07862a5bd",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "130b3ee2-2f17-4367-99c7-ff5e38a251e8",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "0f95f61e-fb27-4f63-9c9c-78fafafbb3a4",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "5d48a8c3-ae96-485c-934d-14056700791f",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "be625d06-c173-43da-a596-e5b3d0cbb4e3",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "8498db18-6e31-42fe-9736-b06ba1cafb66",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "f9ae157b-ec8e-4f5f-b28b-9deeb680c917",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "53efe508-cf1c-451a-93de-10ef11cd90f6",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "295cb78c-59f2-45a1-9c12-92ef0349dad7",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "273c1540-543b-4d16-985e-b55cedff58da",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "2374cb7d-d763-416f-bad1-6a499b213983",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "b3445335-82c5-49ec-923e-8c9943a9ac52",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "27b2fb36-6e02-48ad-8417-beb04aeb72ac",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "674b1230-5e29-46a6-810a-227d9a03167e",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "e4faf9b3-27da-4c11-81db-636e6ae47820",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "0820bb92-207f-4858-8d38-a3093416b4a6",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "278b4b7a-a48d-4a79-928a-b34d5a899ce7",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "85bb2be0-b072-4be7-b40a-2700252f7527",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "e243cea4-e09d-41e1-99f0-a03ad2152443",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "358d3f75-935b-4754-8949-e7b64f4e8bf0",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "0f88a494-9965-4f47-9a2f-4f81a27ea11b",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "9342d561-a436-4849-83e8-9ac15f4a501d",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "2a35b952-fc72-4fad-a932-995beb51f31a",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "c9fc53d4-64c9-47bb-ab4e-9290d684569d",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "dd0e0172-8ddc-4b87-94f3-0cd8d804c086",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "1982a43a-ed3f-4b0a-9012-982c1badc14f",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "e9f8295f-8f2e-40dd-95ab-93900d121650",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "8a208fe2-d892-45b1-89b7-e125fd9c75fa",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "08998324-453a-4e94-a665-440ee710aeea",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "8af81f2c-8ca9-4ae5-82b8-ad40227c3f94",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "b1abc6bc-7180-4881-92f4-e6e229a4602a",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "bff9e262-f672-46b5-bd2e-ab9cbf8bdadc",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "a9f26505-b42c-47d5-8269-6f353abe046b",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "e296e083-49ed-40ab-996d-1265aa54919e",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "7d1a3767-3e43-4397-b66e-36e0f0a8d7eb",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "8f52723c-5bd3-4e75-bbfe-6390cb7d0ead",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "51df5266-6a8d-47b4-b64e-ccb32b613853",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "12312d59-fed0-40c6-8956-ff5511d459b5",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "6959450a-a274-4871-b428-49b5cfe6d440",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "d6eec650-1e98-41a3-9c51-344461eaa619",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
      "chunk_id": "fe85dc48-2dc0-4bda-a7fc-1ab8887c0abd",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "b8fe3827-63e6-42cb-9137-9bc3e6ec9bf9",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "c0b20232-8991-42b5-9685-04fd6faefe0a",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "4f3b4c5d-5136-45df-89f5-89b3bc263761",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "2baabcf3-cd05-4056-b1ed-b44f2ad75292",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "eac9a25e-7dc3-4ea7-b401-a5eaa26aec13",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "fdabf0b5-95dd-4be5-b922-75b6d7698824",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "ac8ee817-692d-43d9-bf40-2362bcc4c9d8",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "22777c0f-9879-417d-bc3c-4e98aebcf368",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "02043303-dd1a-4133-9ca1-67854497d344",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "b8ab95e3-f55d-41a2-9c4b-13a697e451f7",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "9428e671-b233-4098-a8e1-9a72fbfd1088",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "e0d7a0e7-63c9-4f63-b397-f01963a1af0d",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "45dcad43-b432-4c82-ab08-af6fdfb7ceba",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "16c72eab-db0e-4374-a8a0-2402003c5166",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "aa7adeac-4130-4637-b37e-90e51093b717",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "6c6b72b0-f91c-4f5b-971b-5b9132a01fee",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "29c395d4-5c45-4d0f-80b8-9c9df28539cf",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "5fdd6769-94c1-4d26-a73c-b9d75215ddae",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "b9fd55c4-a298-4b34-9d25-ba938f226698",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "82d9c5f2-94b6-40f7-b38d-391d9978e83b",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "7cad9c38-ce2e-4567-b9dd-0063b15b6039",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "baf9d2f5-acff-4e1d-aeac-8bc2d62f2e53",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "0135a33a-9d4e-498f-9252-80d35d383f1d",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "c5a68b05-06c7-4d63-8286-c866a7fd75be",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "ced41eab-d300-4996-a072-63e6afc867af",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "7f9d36ef-1e8f-4bf2-9f97-6f065f1af1d7",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "c3e89787-94e1-44c2-a961-ae1353bdc0b7",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "a75463d8-0fd4-44f5-b391-58ac206f74bf",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "84ab52c5-f757-4043-adee-97eaaa75ce19",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "2033a0b3-9fc4-476b-bb25-fb9e67a8d1e9",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "b3c517fc-ca00-468a-9328-d4113e0f233d",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "10ce6e0f-3330-4ea2-a150-0ae0894ebc67",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "3ef81bb7-23b8-43f6-8ac7-f507fe6c1540",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "960ce521-531e-4256-a872-4a92b3f1e445",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "19d88783-d9a5-48f7-b39e-d0f35aace04a",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "8dc0e0e9-6005-4ce1-8820-541360f1e19d",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "9ee5f23b-3664-4f4e-ae13-7b8b5e93ee93",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "369f9f2d-9b71-48f6-a0a3-36f57ec30444",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "b574ffef-1a41-4a87-a17b-6d296671a70f",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "54cf2b8f-e346-4646-9f86-5633f09f5a14",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "04383aae-6858-42a6-b2ea-f6b1efa1451a",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "84bbd876-a428-4fa5-b96d-eb8a8372136e",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "78104dae-5dac-474b-9312-f3d19a6c74f1",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "6f696ffa-5107-449f-a2a4-05553764336b",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "eecd265f-82c1-4406-8110-f64c7db0cd87",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "c15656ad-c9b2-40c3-94f1-57628003d180",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "607fb81d-5223-4816-9d3a-1b6af16e83e0",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "6af3e6a2-4bd1-4229-bbfe-d1f9287f8829",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "070519e6-f6e1-45cf-81fe-edd29e252ad6",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "e771495a-fcb9-4719-a22a-d645c5a008a3",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "ef1e1d8f-2158-403d-ba6a-653ccce93fe5",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "d32f9713-397d-47d4-9179-8d62472c2158",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "4e996b7c-193c-4b01-8290-4d5cef0eaea0",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "137c51b9-7209-41f1-afc1-4cf833efc11e",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "00239e06-cb30-469b-b5d4-eab62ce03f48",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "5113eb6f-a076-4e3e-abc6-a7d413a8233e",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "c217e975-dda9-4522-8be9-e01925931407",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "b2ad3d57-43b5-438c-8533-5c23cadb9b47",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "4f3e9228-1e72-4bc8-9ef6-30be9825623c",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "cf2e8257-11db-4fb4-8ac2-46f56f1095e7",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "9ce51165-09a8-435c-bedf-b141b0e93748",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "2f243022-c5fd-4831-9704-0db987b6dc4f",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "e696cd0c-7111-4284-a80c-c41d21cd1995",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "948defee-60b1-4a2e-9fcb-77673d6da5af",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "835e1f60-3575-485a-b6f3-f75cb7310e6e",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "2bb6d93d-c088-4c4d-982d-a096d4ee9a89",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "525ccafd-9bfb-498a-bf47-1fdf2c2874e0",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "e5bec79a-418a-4924-8a50-c555cea4a7c9",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "ab30e667-b11d-4353-996e-1bf4bbfd846b",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "8f5b4cf1-f99b-4b92-8529-15b4c639b23d",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "b98a9923-8c28-4329-b6ed-088854c40e1d",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "6b15c894-3e06-4f99-a1a8-748ef346d5e0",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "d059685a-5525-4504-a6fc-7093892fe35a",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "622a1f0f-7462-4894-a297-b961485ff46b",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "de317dbe-83b9-47d4-91a1-4dff6c8f6181",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "6ddb10f7-6ad5-4914-ae1d-e663d7c342f7",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "3d283e03-54e7-4bba-af05-7a8d47c4bb5c",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "0e78a3d4-3faf-4319-b124-64537c05407a",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "14db3bae-acdc-44ab-bd1e-8c6d6de9b986",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "db87b911-934e-4d04-bcfe-6d795817ebf9",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "ec519375-c758-4559-a007-4f9cbe971bf4",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "22e3419e-ec42-4410-8094-c314f3a9a40e",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "eace4240-8038-41a4-b8cd-fd739e770249",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "ec091794-a94a-4367-aa71-14b3a1bebb92",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "6afe3864-489f-4dbd-b9f8-a42add9a0373",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "6ddfe04f-5389-4f82-83f3-f737b99089d7",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "509d0669-629e-46a8-b1e4-d8c78f2ccf2d",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "240e5021-8ddf-482b-a006-7eec74fe1672",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "9fc45478-abc6-4dc8-8e21-5c15dcba84c1",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "a66fceed-5c57-49dd-8b00-71f946e54c97",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "e9d8b43a-5c33-4527-a816-7763a72888d9",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "cf08e152-07f4-4812-a88f-ae5dd5584961",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "3ffb46f9-82a8-4390-a4b0-bb70229aae03",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "5e366533-27cf-4c81-adfd-1eae8909455b",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "706d6046-e57a-4078-9cb3-4238c58a0b0b",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "867accfc-d65a-40a5-af1b-58fb6ee93e64",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "939a444f-6819-4eff-8fa8-903e3c122d6b",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "11658470-8685-47f0-ab25-2539c741a4cc",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "cd8ab806-566d-4ac6-a4b0-e475534b8f26",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "97c8f343-201d-49fd-9c47-cc448e72e828",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "16d24270-9b76-4cc3-a8f6-1920ff6aafe5",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "b1a79c55-2178-480f-83b9-a400f40594f5",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "a6a71304-e5a9-4a88-b70d-c2a43883ce69",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "aff23fc3-ddef-4de0-be01-c56020790633",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "bd6ea0d4-340a-4959-8d4b-b851cf492c14",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "9902f68b-99f9-4907-9b11-55e3df67d9f0",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "121456d4-54e5-4f45-ac35-6bafbcd7734c",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "99171267-2868-4407-aecd-180fc605707e",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "9221f5f9-75ae-4404-a3b8-410c1b2cef38",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "460db331-792f-4a81-a25c-d2e2ad7dc2fc",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "171556f7-905b-4380-9768-88d26b31962d",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "4cfef853-a696-4389-b000-183dc6955160",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "18523616-14be-4872-ae93-ada191f337e5",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "17a1f212-f5cd-4c62-8c1e-ef65a64f8bd3",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "72ea9fda-eb80-40aa-a7bb-3093fd7e2b08",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "4fe84cfd-59ca-401f-99e6-7f61c2e4db1b",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "97d1abe9-dd1c-4d42-b1c2-f86c92a40479",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "21cde3cb-c349-472a-aba9-a240819991c9",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "9312680d-98f7-424d-b9ec-3e5e050b8781",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "20ed8b63-5f97-46ae-83ea-8b3dc1879df8",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "529977dc-5c38-4707-bead-90b3fec40a77",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "132dbfea-de66-42fe-84f7-0ecc660d197c",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "bb0747de-9f82-4fab-814f-ca7d0754f52c",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "d899e939-d53d-48bd-8692-b9a161953538",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "384955f6-406c-49d8-8b53-55f39598e8bb",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "106518a7-fbef-4c88-beab-e7b7693ee357",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
      "chunk_id": "48173932-6027-420a-b4ec-a5b9e22abb88",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "ec805d04-0963-4b98-9b64-a2351db3b5a3",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "faa60cd8-9155-4d98-84e1-fcabfe9af46f",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "40b68fe2-7f7f-4106-afcd-84ad0f9a59ec",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "bbdbec06-4ec6-4f74-80f6-d15f54c9c93d",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "f151a415-f02c-4bbb-aa34-8d7e9e4c808a",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "5e90916c-fb16-4f8f-bcfe-6543f23b19c4",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "f2a091c7-3949-44ed-8e3b-274552c4e6b0",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "9e475785-fd49-44f6-9345-44ead42cb549",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "2234cb91-4f9d-4348-a991-69239d673d69",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "dc4b23c1-375f-4a8e-92c2-bc7e39ca159b",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "ad459ef5-9789-4cc0-a1ca-1ea1e2e84785",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "0427d8d3-a3d5-4c63-96e1-bddec40a7dfa",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "dae9d4fa-eb77-4a41-a813-643d4c398ed4",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "6c587136-43fa-4300-92bd-5a53b6457643",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "d3a2de83-b473-445f-b2e2-da3f75dcaaf0",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "2c8f5cd2-ac13-48a0-930c-6f0870805996",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "bb4e19f0-b064-43a1-90fb-54c09c2aad6b",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "e3b64556-76bc-43e6-89c4-78031abffa62",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "0bffeca7-8385-46f5-98c0-712c1200ed8a",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "ff981cba-9e74-4600-ba28-ed41740d4624",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "559c46bc-42c5-4b4b-b967-2742ac61ed53",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "92c19081-18f5-4ed4-8cdb-ce38cb798e78",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "2b34d3ef-8048-45e2-a129-a8188ec1b11b",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "c4234d60-1a19-46a3-9078-6b5ca29d832e",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "73ec323d-ef20-41ce-9aa3-5b66a3c316f1",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "1c803823-7945-4cb6-b144-fefadab158b4",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "2bbc18ca-e13d-4c3e-a6f7-06cc2eedee99",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "93219bbb-abcb-4dea-b418-cda3ba9c4036",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "5589ff13-2e31-4bff-a07a-c23f6c32739c",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "af103c3a-50b3-4684-a75b-d77deb18c3f9",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "bd4f0169-affd-4959-be7a-3ad85619b4f2",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "e540ba25-efb4-4bc8-82cd-3aad74ecee58",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "6507a31f-237d-4207-a83a-d039f8473eb7",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "ffc6c645-5af8-4308-9e04-18537143c27d",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "afc89b89-9815-49d5-942a-61ddd9191c81",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "8b6e7278-e6dc-4409-9a9a-5144e80b02e1",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "bcc34909-0270-4cf8-a162-23bc72771e9f",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "1f3254f9-c701-4ced-a0b7-aeb530853066",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "c35b669b-ab6e-492f-9cb2-bb6e180096b3",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "fb7aa85b-1029-4842-ba53-fbde3b4a7e78",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "57619d5a-fb79-42d6-9081-f65682de5733",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "4e105373-8dfe-4e3f-b918-29607076be0a",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "c698486c-56f3-4fc2-8bef-f26d29770cbf",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "2f83c399-053e-49a9-97e8-e0bdba5eb858",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "0812fe57-bf45-4c6a-afb4-580b47088430",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "d87a77a5-9341-44d4-9dd7-b528b4c9aad0",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "dcb5dc70-b28f-4880-8556-8e6c8b950b49",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "fc0212e6-a346-4314-a501-b5a6b9e65919",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "75fa9702-b3c8-417b-8c32-73254da113d2",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "9137c988-b962-4925-8e78-7f636f2c0749",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "655a76ab-0201-460c-b54d-de6f893a0c0b",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "2dedd449-1767-43e4-bdb6-2284804c2a40",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "ff450c98-08e7-454f-8a7c-3b9c820f5eb2",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "875767ae-862f-457d-86ef-34a930bdf695",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "2f8e514c-e9b2-44c8-8b89-5fbdf2713fc4",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "185225fa-6fb3-4ad7-a9cf-a49901492ed2",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "58aabaf7-9a1a-4052-9341-5c435d691743",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "19ac342d-ca53-4fe8-81f7-2b2e1fa9c3c8",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "1746316d-a96c-4079-80a9-e6b5429dd2ac",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "ab1120a3-7858-4edc-86f8-20dfb1e126f3",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "110bfd9c-4866-43d3-91ef-6fd3767b4202",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "23ffae64-0d25-4ae5-b4ae-89ee74aba52d",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "d650f6e7-4b6b-43da-a563-a70316b9a5c5",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "9f251d91-ebcd-41f4-aaa6-550e736b78bf",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "361ea965-c2a3-4f38-b5e0-ded501695850",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "ad4838c3-ae59-4d6d-8a52-aca97202573e",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "90f97c56-4c86-4f7b-b432-6260cc04934e",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "39225c78-4060-455e-97a0-3726027b8c9e",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "cdd542b3-edef-46b6-ae01-2ea174d02330",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "ffcbad93-5d1f-4d67-997d-d5ccc5172a79",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "ebe05a02-babf-418a-a4b9-27ac9b14c06d",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "0a02c837-5896-455d-bc37-7ac35f12cbe9",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "1463e20f-d443-4e68-923a-e6eeaa47e6db",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "83121429-e7b3-4a73-9769-ec00f4180a36",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "0dcb2695-a963-425c-9ad0-2dfc811b2dec",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "bbaa0d4c-019c-4e30-a4c3-8ef49c2a7024",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "b4aceb66-8702-4350-9d87-ae2b7d5bcc9b",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "d3428961-e4d6-417c-949d-061352de9144",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "25d2fd3b-51a6-46c7-b083-fbd7ab3584d9",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "e7166955-d0ad-49a1-a3a1-2c9a637e4993",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "80d81e4f-077c-4a4c-8a25-411a1284c12d",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "a226abc3-a53d-4994-af7f-850536d6af82",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "24c9ad95-cb94-422d-811d-4b8d18bb9ea4",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "2c83f9c3-1170-4577-a906-4b14dd57397d",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "00e427be-a0f7-41ac-80af-147552307d1f",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "60ea2c66-d41c-4985-8c8f-9e5ac4515ac3",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "5e58bd5a-7fb6-4921-9ce6-f1abf40f13fa",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "8de5311b-cc9c-458a-908f-4145a4e24169",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "67f23bed-f3cd-4270-a674-ec07cd18230d",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "f13edbbd-ea9c-4baa-9ae8-3b0860b55ef6",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "769be32a-1ec8-42d4-b285-e193e9a1be8f",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "58d5bdd4-67f2-4054-a1e3-ce65db51e58f",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "0777f62f-0c6a-44cd-9cce-5aaf673eb201",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "3ef6ef52-e361-40e0-91e4-115745378abb",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "bb168dae-d0ca-40ab-9acd-79ba7a2869d4",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "02179ce4-791c-4ac1-a0c7-e4df5c2b1245",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "f499b24f-de69-45bf-8a78-57458c1392a8",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "6d9982ca-4df3-4e89-bf04-0c0fe911f24c",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "283aa9f6-5d49-4fec-a5b2-7e50dc6a6bb1",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "72a61259-6bfa-4959-96ed-1000bf65ba59",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "1994f8e4-0c21-48f4-a394-e6650de7beaf",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "bfbcac80-e7e1-4daf-9e67-2b3ba0f5d7a0",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "fd2eb769-1b51-4775-ace0-f727a14d9111",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "d6b87261-8a56-449e-b0a1-84f292880b7b",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "134d7c01-f72f-4e28-9472-3d0da1c7c479",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "d6a30170-9846-410e-96e3-1f57feefd018",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "c75a2bd3-80a0-4918-8291-34c7be6cef0d",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "47fb5d96-8e8d-4a41-abe1-f08cc9123d71",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "1cbf8735-93b7-47d2-bf85-6269b72a89d1",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "dfbace11-000a-4f4f-91dd-10b84b7cbdb6",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "85b44079-6a07-48d0-a9af-05b14abafbf3",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "10917bb9-24b1-4a3c-8efb-db1301507bf3",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "6ee39145-ecde-4ce5-8e02-b77e3721b88d",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "7c1c2c33-706d-4a67-8fe7-f9da9c87c3bf",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "0852b741-b200-4540-a8a7-b07b5ff60395",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "18e88b2c-99a0-43e9-83d8-d63c832fbe77",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "6ab531ba-0431-459c-9cb0-515fc0eb2e91",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "9aea38e8-d5be-4e3f-8012-5c87067d0c79",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "2701c409-2430-4564-bc8c-accdaddd41ff",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "1efb2e53-e6a1-411d-b7ba-32be38663226",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "b3d99229-e92e-477c-b498-32d9855bd7a1",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "5369eda1-bbef-46aa-bb48-80e02bf3926e",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "e0f70e24-d5ed-4f94-a322-387c47d155ac",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "b905a677-8c12-4faa-8582-47870f4e4734",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "04a7dee6-2dac-4ea0-9809-0cc3ba41a68a",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "fd1da77e-1075-4bce-b04b-e8b31632dc32",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-signout",
      "chunk_id": "564d192b-0850-4ec7-9bdf-02e02ab519dd",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "ac888eb7-56dc-4f0b-98ce-96e6c5571421",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "eab46881-e4be-4ee8-96ea-eced90c4eede",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "8004dfca-450c-4f72-a924-37c376b23a1f",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "0e7e45cd-1c2b-4742-b5b7-37c12f1b82ff",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "e98df741-5052-45a1-9add-120d2c12c2b5",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "10e64a73-a108-4d0e-82ac-6e72b7265852",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "63aca181-3053-405c-a276-73007083c5ab",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "6e703e74-14e4-4089-b388-6652b7f1b24b",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "e6f52152-263c-466f-9693-d202a20d9ff1",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "86a27e50-a426-45ba-935f-519bcd13bcbf",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "89aa8f8f-ccec-4129-b039-6bd91e2bf7e7",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "77cb8292-5fcd-4b79-80d8-656dfc5d7d6d",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "90feae54-0868-4ec0-b4a2-cb5a5e327684",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "d6569225-2419-42ec-8f34-0602231a6692",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "e4162962-c312-4913-ab42-1c7ce745877e",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "93909a3a-1144-4c1e-a7d0-558540060e76",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "80228637-624e-4cc8-a417-025a3bba04fd",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "3d37ea61-c64d-484a-9c7f-d928ec8c17e1",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "07c3f9fa-63e3-44ab-afda-72e138dd264c",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "3c6c65ea-f8e0-412d-ae6f-10734daf3e46",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "127029d6-e17f-4ca7-a2be-4f62175127c8",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "6d81927b-b96e-49fb-bd5d-f6fcf044e270",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "9f68c393-847d-44c1-a695-7ac2a4bc4f6e",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "620d0db5-2c28-4210-87be-62d84df7cd4c",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "39910518-de0e-4fd3-aa76-3cf550f2f2ad",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "83a9d762-1338-4003-b3c3-d574723c3f72",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "c213b88a-dbb4-4389-9c5a-2ab26239427f",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "bfc7bb3f-f52c-4ff5-ba8d-70aff14d073a",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "3feb1695-fbbe-4678-b8bf-26458c939d85",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "114bdc16-c793-41d4-a81f-55a409a0b2c9",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "0214128b-40a4-4829-8222-5b0381d499e7",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "b2e567ab-55f7-480a-92b6-861e54312b3c",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "a667c4b5-fb4e-49c1-ae7f-fc03cc67095e",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "b43274b7-3a9d-499d-9b8d-cec52dcd3608",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "405bb54d-c8de-40de-85eb-eadc328c4b56",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "df5a5a89-cfa8-47a1-8d2c-a9c17601a571",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "368ae0e0-6058-4394-bf1d-054417538fd9",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "3f60998a-d923-4457-8bc8-3f2601bfd784",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "934f648c-6338-4e45-bea2-1cd5ff484646",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "6a89d43e-f5c3-42ad-9594-0e2e0abbd63e",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "92e4a394-4ea7-4b7d-b844-fa9e891609af",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "915115e2-04c0-4e7f-9b00-8442223b9fc3",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "c1b96112-e653-4ab2-ae88-11340df474bb",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "1f7ec53d-23a6-4d87-bb3f-11311d7e7da3",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "8579e786-c712-4848-b537-c9107390905c",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "4ca641ac-b89c-41b0-8348-c27f3f237bb0",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "9118b1cd-bd1b-4e70-8d47-168eae2d448e",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "00baef26-8eab-434b-ae5f-0fc495704f5d",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "5b5672d7-f345-4008-b738-f14ab30e18f8",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "d4ed49c1-02fa-434a-8cf3-8d066a419c4e",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "7190d120-4578-49e9-88c5-f0fa9e9f97d7",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "63b2cb46-5833-4625-8fbe-bd38c5d487b2",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "826f7999-1832-4eff-9b4b-0f7aa063392f",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "c4b0af70-234b-4090-ac41-9fe5952c4b1f",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "44fa55a9-3120-4095-8437-749979af7d05",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "ca86f2a3-b726-448e-a48c-f13ad3a54ce8",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "0c32418e-09ac-4eea-af29-13b8514114bb",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "c7ce1581-920b-416a-948b-f30c55a04da7",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "dbca73be-7fbd-4ba2-a10e-d91e341ff08c",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "38db8962-1d5a-4442-8f24-821b9ebe365e",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "913803ab-a245-40c6-a7e4-d4c7cd300bc2",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "4eec840e-a4c3-4bdd-8e1f-64c9da780e2b",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "f49ecb4e-4f1c-4541-8975-396d19a4cce6",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "b79ff2e7-fd2a-4429-bbb4-167716621d7d",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "c475ee59-3c0e-4295-ac72-88cfeca81d26",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "e7a06593-4538-4528-951e-3da28844faad",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "3a94f17b-b74e-45ba-a4cc-a6ed3972379f",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "f252e071-4b78-445f-bebb-7644968e579f",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "5a05162b-a716-48e1-a6c7-41102487622c",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "0d489b81-742e-4d2b-92e0-b81a927a2e62",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "640bae04-bb5d-4f63-a311-5b00e732a729",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "02a13279-b52b-4647-bbfc-2b0db38696dd",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "03b9be7b-1a96-4644-856f-b71d841f75e4",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "f38c39e8-5910-41ce-8e3e-3c2db7b6f749",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "4f34c67c-077d-47f1-81f2-c4c3d3bf9aa1",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "556da5e8-c58c-4f03-8754-c819153dfe21",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "859df0c1-32d7-4d42-ba75-001dc75b578f",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "19dab408-9aac-4c3d-9957-c3cdb93ea0d5",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "8b3d405d-bc3b-42e0-86b4-aa6b1f7bf81f",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "2bf583e9-6951-4d16-a2fb-742284faf3ee",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "b8910510-29c7-43c0-bb26-1f101bdaf643",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "254f5ab3-1f33-4f7e-895e-ef1f58fbc2b2",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "1af432eb-c9ce-4bc8-8269-4703c470206e",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "fdffd3fc-e91d-470d-a2bf-6b15de483302",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "3fe4f364-fb8f-4863-8645-c5c7834a5d50",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "6d5c1677-2f92-4943-8bdf-4571c4e0a559",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "fb1c6367-274f-4209-a11b-f7ba32baf2cf",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "f6abbc8e-10b3-4ef9-b0e5-508dcdd1632b",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "8b3b17ee-5dc6-4dad-8865-6deb1fefedc6",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "c5ac449e-7546-4175-835b-0e6726ea98f1",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "fc2eeb8f-37c3-4bc1-817e-755fffd27c16",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "a9d8e528-37cb-443f-9cab-ae08edfe704b",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "8cf396a1-a98e-4fe2-b42e-8d22448bfa16",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "09a637f7-bfeb-4352-9452-2b6436b9e735",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "b3682d52-12cd-41c8-ac0e-645488c17c9c",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "f8fd0c69-cb2e-452c-a9ac-d4a70d92d44b",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "b9a3810a-20c9-407f-b406-6406374cec16",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "0764b90f-71ae-45e5-8227-2a465e75f14c",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "2d61c4ba-96fd-4582-bff2-c13a7d0c0310",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "63e2a747-5564-4697-8749-1cb276cfe867",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "3a29c0cc-19b9-424d-ab6a-54ca781bee1c",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "7809504d-1c83-4441-9741-0841dce5598a",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "f0217ddf-16df-48f7-bfa1-51f1c323cb17",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "3247fc87-2e9a-42ac-a3f1-a30a5f92b3b7",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "9c0c5033-ce85-45c7-81a4-c9de3c5690fe",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "d450f99a-8b37-4258-9521-d72ff40acb76",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "d6801f54-162e-4247-a800-02d0a9fccc0c",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "503c7465-c396-4481-a6c9-fcf38002f638",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "45ccb203-cc2c-496e-9a1b-2db5f660cf4e",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "28745730-0772-462d-96d0-836d96f3cf2f",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "7e9fb7d5-3fe5-4a26-a577-7e8ad052394c",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "c6c55e61-43a4-4490-a30a-df996103b547",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "979eca65-1227-4fef-add9-fbf0cae40b49",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "7c3febad-0140-4b2e-9ddf-4bdc351f114c",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "a5cb96b0-6920-41c4-8cef-aa33fab3b9e7",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "97fd56cc-9e3b-47dd-95f8-357e7e61896d",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "7b46135f-630b-4077-a4db-b7f345df3282",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "849201eb-3579-494c-9c9e-6ba841170ef8",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "46a675b3-00a2-4bfc-9f57-d0f22456086c",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "9c8659ea-5943-4cbc-89e5-dd47b5090ea2",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "b8eb4cf5-036f-4102-817c-d8d5a42004b5",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "a276e6b6-ee05-454f-933d-a1d859cf76b9",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "1e0669a8-0121-47f7-b3e6-ddd4c49a4b80",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "ace01fb1-5e63-4d46-98a8-ab7d5de2362b",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "caa44e00-986a-46c2-9db2-e0e693f6f8b2",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "c06a8bf5-97a8-49d5-ad40-7954669227cb",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
      "chunk_id": "c2baf0e7-51e2-418b-ba33-122fba5ab962",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "2828c571-87a5-4850-838d-c40e33d44dc8",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "89036d87-2956-4939-85b1-e909055f0f9d",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a50fd5ce-be9b-4af1-ab57-189916a12f5e",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "bac910ab-8289-47aa-8024-bafbe320fe6b",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "8a6ff721-fbb7-46e0-bd32-a8819091b82d",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "c362c7f9-9991-48c3-b788-c8b41a2d996c",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "916feeb1-bf26-4dc1-a93a-2f19e6d12ae3",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "b0f5231b-c331-4d4d-9094-c9e79893d140",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "6b5770dc-e769-4265-a813-f0b38137f07a",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "6e79f1cc-e21e-41f3-87a7-067984f01a89",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "f929d47f-b1e2-49c3-a2b3-51f1a88ff2aa",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "2b670b56-5fe9-4143-85cb-6a27c6e628fc",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "ee8be268-1bbc-4c79-8d25-f4ab2c22c0f3",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "fd759b4e-8256-4f4d-a536-a92335d9b42c",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "0c23cac3-7c96-4558-80aa-68a5a1e05093",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a863a1b1-5ded-4876-bd2c-455f8fed9caa",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "13806ec7-1977-49d4-83bd-7530d7909d34",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "9febc8bf-3515-4cf9-b179-f07aacb27613",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a23848e2-2149-44be-8f13-ad346eff1230",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "623f1410-47bd-407c-b15b-be47d937d623",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "d7063d6d-857f-43a6-a0d3-67b8ec8e9915",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "6286840d-30f9-43c8-a05b-608f6b1cc93e",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "371ebc10-6a58-4586-97eb-c850ab2c6b2d",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "e94822be-be13-4114-822f-bf84b4f38db5",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "4e5f4d59-2155-4c49-b207-174aabcfadc3",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "805d44ab-e739-4706-a9ff-9f3bb71dc865",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "718cc8d7-c59c-4f7d-967e-7382fe77ce09",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "3ac928b4-1dcd-4f48-8d19-0b58c8258632",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "e2ec622e-9ce5-4f25-a052-3270a9846feb",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "330c0985-8727-4c1c-8adb-6f42fbcd71f7",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a5a8367a-c343-4d89-adfa-7779933e723c",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "e944171e-af8e-4786-9492-575244b82044",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "b34d4e2f-3617-4939-81d9-4f9d77b57c8b",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a9a46df3-12db-4a3b-aeb8-b45805261f20",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "79b0acff-1aa1-4712-be2a-f1a30517b29b",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a8dd54f9-c15b-45a0-9493-2665fddd0b72",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "796452fe-2dbb-4e00-aef8-ba3943b81929",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "70115727-cf01-4308-9ba7-2d79bd9f9c50",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "06cdbe78-0caf-4373-9e55-79d9b5654e05",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "9cdb2dda-234a-42e2-a403-ef30e1acb0a1",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "eba4b94e-486e-479d-99bc-661e5cbc4d4f",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "3e54c141-4a37-4a46-a924-6af29c581a21",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "e2b1c6ef-7385-4d46-a5c2-90998af8d407",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "04262069-d348-4ed5-8a55-d9a4b80464d9",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "85924189-c328-4141-b88e-446486d0c406",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "b47076ed-0a2d-4bcb-9144-54072eea2b34",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "7b3a8d03-cecd-4149-a509-152d33dd26ce",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a413d51e-e42f-46b5-9900-be1184d1ee84",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "8c66e7e1-a0c9-40b0-be90-166b7886a7c3",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "86a10fde-2ccd-4f10-9605-63b7984e5f26",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "8241befa-6ea2-45b8-9d2a-5ed5c9d47b87",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "952c93e4-3ec5-4024-8b51-5a30afc58df7",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "b4eb866e-69d6-4429-8dcc-535fae6827a4",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "99d2df41-1117-4f0c-977e-510bc9096468",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "7c345d60-ee1e-4361-8ecf-67f13a6761df",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "8d49e52f-b45e-4b11-80eb-b24140b48952",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "f5e4f62f-6a6d-4c23-93d8-f0de0415f465",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a1375bc8-ebe6-41de-87f1-e35baa6bd638",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "5888490d-9bfe-4ce7-92c4-7ce2487f446a",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "f5c99d87-3302-40c3-814d-1b84889745a6",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "af392f66-2236-478b-9b20-771fcd323ced",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a53bc42d-73c3-418c-aefb-e95d126ab5ee",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "d54cfcd7-819f-48da-be6b-b25110f6809e",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "6b0ce11e-a982-43b9-ace3-3e14337a80b8",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "bedaf196-eb56-4854-a4cf-d6a2d854d5f8",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "56d13f4e-f69d-4c0f-9595-8a15c0d30e84",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "6d190032-a2b4-4dee-9df4-4bf233a1d099",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "ea7e1910-d7a3-4fdb-bd87-b1184719d253",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "dcfced8f-7830-411d-adcf-c727d5231c12",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "ec621750-96ed-4cfa-84b6-c8cf67c43455",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "4bc698d5-6e06-458a-a50e-7c4c83bd3c72",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "137ff654-d6b9-446a-a4de-193c65510425",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "bd693413-8b71-434b-9e5a-5e6f2261ab52",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "591222fd-5045-433c-9a27-2932365971f8",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "87754bc6-53c6-465c-832a-343b4baadbd8",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "e0e72159-2a43-486c-ac55-d1a73c68c887",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "411e9439-c917-4af7-94dd-1fb9d117ef1c",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "4a283c11-5db3-4ce9-af0a-26c2de5a675e",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "bfb94719-3298-4e76-8a36-f472e42edf1f",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "bd6ba269-cc4b-4e94-9019-191a270d1070",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a13d9160-0f64-482b-8962-746bdd55cf15",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "89882469-234b-474e-bcaf-b8d56334fdc2",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "4fa08846-3b1c-49fb-8b5b-0e46737f3753",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "c70ecb4b-3ae4-43db-9ca7-bfee79592be0",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "036df816-ecd7-4bff-948f-2b16d4a54c79",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "bcf16931-66c6-4325-a341-812211ca84b2",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "2d91b192-ea04-4a5b-bb52-8310421f4d53",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "8d4b0cc8-a468-4f9d-8c73-d51920474d91",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "939e542c-f40f-43e2-ad25-dc2b52a653b6",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "09e78236-d719-46db-8afc-14e628527266",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "f7e65f7f-96df-4019-8b5c-a114009a60b2",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "a4997396-530b-45af-8e32-9dd05686de43",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "f334ffd2-bd16-4a80-b177-5992fbe69486",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "e09bb0de-6742-447d-8a56-5278d8d5a918",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "b044be49-0d2f-44c6-8f60-ab0ae1d46d12",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "67cbe985-9a6b-468f-a140-3a48a188098e",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "43b6fbe4-0d89-4a3b-abf4-569600703ac0",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "faec592e-2114-4933-b089-f575f2d232bc",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "6d9fb925-4efc-4efc-b3dd-7707d3af610b",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "4aea8a88-0323-4408-a587-233b7749788c",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "dbf067d7-3e11-4ddc-be71-924b861947e1",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "7a6ddfec-e1f7-4505-bcd8-0f37d27892fd",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "30980a69-c158-4cb9-b7c5-eac373f81d18",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "fc56370a-da28-4210-a86f-a3091d3018d9",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "1e562401-2e8d-4f66-be05-4273f830104b",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "c9d475a6-0906-4f03-b9c8-6909aec74741",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "781da908-3f7f-4fec-8aab-11d37388fee9",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "e8b18449-9717-41bd-b034-461b8d83e772",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "4ae12494-1cf0-4e98-9279-28790af415b5",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "992c0ae2-03f9-4606-acdb-73b049ae28b6",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "ea9cdc81-a893-46ff-a949-70aaedbb048f",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "14478581-3a6a-435c-9465-bd8beae453fe",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "1133dd60-772a-4a0a-9204-6cd0726e5c82",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "84d62a32-84ff-4b23-bf20-442286a1506d",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "ecf0d549-2f87-4efa-a12e-d13d9fa55d50",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "90ac1052-32ed-49f8-8211-6711ab5939e5",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "cf5ce95d-49df-4c59-ab76-3f77637777d3",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "0474e2e4-e43f-4384-b842-539f64a0b101",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "4a072950-ee32-4643-87e4-f565c24ac153",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "c2ebad11-ddfb-405c-865f-95dea5750529",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "6cc32816-b3d2-4fd0-a7ac-1bdcb75e9b8e",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "82a687ea-32e8-4f75-a105-4e068d34c7c9",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "03b28d7d-c3e5-4862-9555-a1bd8e6bc6b2",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "48cff158-d35a-4e11-8114-0682aa379995",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "de6a907f-ea91-45e2-b1b5-e168ba3dd81f",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "bf885ae2-fd6d-4ac5-91eb-422e46cee856",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
      "chunk_id": "89b91bb9-a1a2-4f0c-931d-d5ca64947d19",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "12b9920f-6c91-444b-90d5-e6444eb21e48",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "21a08537-26d3-4539-831e-207b74a4728d",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "5474e695-78db-43ca-b09b-dca48f054c70",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "37709ff8-05c0-4e44-962c-9432f21b9a76",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "936b289d-cad3-4f64-bed8-1ea170037479",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "3919c61d-1d72-4ed3-a2ad-dc0051b541b7",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "a52b19a6-060c-4edd-ae16-0cb3dbc635a8",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "70824867-d228-4c37-878e-84991fbb3a0b",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "6adac4e6-2c58-4d14-a220-7a961ffedb7b",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "ec55fcd1-f1f8-4fb8-a122-21ad3c4d7e5c",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "0a87994c-42a2-4772-9c2d-9f3de7a8cf7e",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "4ec64634-b03f-4b4f-91a7-b41a28ce01f5",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "01a80b2d-e0c2-4564-b85d-4350e65588de",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "7df33e9c-80ff-4fe5-8a3b-eead1767f5e9",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "d2683ed2-d515-42d8-aa3e-a567c3e8aeb7",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "f3c12dd8-79d0-47d7-84ba-c1ef256db06d",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "1b1a5c3f-370c-498d-83d3-bd4f4a44eebe",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "6934ac99-4af0-4ef8-b522-47caa9bc8e25",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "21ce8423-de2d-41b7-82c0-223c49328e9c",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "656c3710-d2b9-4a0e-8a8c-e7645711f76a",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "b1ffefda-1f0b-489d-bac6-750d54076a3a",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "09968f9d-4100-4a0f-b539-7957e2bd48fa",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "0913d2a0-78fc-410b-b2bd-fa54590bf8a2",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "5113ae2f-97c3-45c5-885e-16eeeb0c1b59",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "8f6e3c10-11b8-4454-832d-2e05fc64962f",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "88c70387-fbf2-487b-bfae-f44c431e5885",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "f4bdfd71-6de0-450c-ae5c-155f69c667b5",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "4fd3e1c4-0fe7-4cfd-b71e-359cfff70b68",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "243773bd-f850-48ef-bd6b-65a9674b68aa",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "fae2d721-615a-4a56-9dce-ed5bd3bf596d",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "c937e5fd-5246-48b3-b92a-81ace8eb93ee",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "f31de640-c681-4ca9-bb5f-a8aa05e02692",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "2e2c6bcd-f7fd-4097-839e-83eab02bb2dc",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "631c184f-6a83-41a9-849a-e8b37955fe99",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "ea9a56ac-e367-4d48-b236-67020c8cce64",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "4904ec72-26de-4bbd-b200-dc2640e5323d",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "73637efd-6df5-4313-b088-ca7cb7ace0c8",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "b16a90c3-e5a4-4b9f-9aee-2138aaf950d9",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "a48913d5-0b53-4d2a-8e49-d09405751eb9",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "5b696dff-656a-4206-a1fa-23918b7d9dad",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "b25a66a2-0df4-4cf9-968a-4b2fedf35927",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "ca3fc398-7948-4ec4-8ff3-41ce399fd8a2",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "ac62bb49-fe3d-4a9e-96ed-f4cdacbe82a2",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "a9398030-021a-40e8-afda-ea73ce7ec1ab",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "9ef0de2d-2fea-4a78-8082-983905279faa",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "1b680b3e-a0c7-4811-9850-faba7b8e7ab6",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "8ebb78de-2b58-4f64-ba28-6ea8d313199e",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "1f66d3ca-c4d6-44fb-a35a-d00091044a86",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "44e29138-b406-4c52-928c-f66cc37a0b88",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "463144e6-9bd4-4cd9-a928-4e8322e93be1",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "c552d5b0-d91f-438f-b67d-1588477b2cf5",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "7cdb7ef4-d435-4132-9f49-424ef2bb3005",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "977c73bb-12e1-4d75-ac27-36817cdaa7f2",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "ac5981ca-187c-4bce-bba0-bf1320c096d8",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "be6b8e00-920f-4dec-b802-31e904b55ee7",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "f5d9bff3-4e30-493e-86e7-a74789f3e951",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "afed5cf3-cfcd-4235-92fb-6463143f7da5",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "4d0ef6ac-ffb0-44b3-b2ac-c650496040d3",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "38890714-ecfc-41cf-a937-702f8852a4ce",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "7eab4e3e-64c7-42b6-a995-f1d1379667f3",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "41463ea7-a008-400f-8df8-5b247d9c293c",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "becfa774-d5fe-4b22-94d0-1ff995a4b7c5",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "1d378c73-70f0-4f81-a459-888584e0aac5",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "db85ce71-2d9c-458c-a91a-5fc59d8b966a",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "3fb30fb1-c6c0-4995-9018-87147167f56c",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "f2915bbc-d8ed-4340-a93b-4c51612225d5",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "1f512bc5-9e79-49f3-9b16-ac01785f923e",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "9e2b1179-faf6-4829-92f6-f42ef13616a5",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "5bce8084-fa17-4050-88ca-679ffb07846e",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "3ae4cab3-0c9c-444b-95bb-9baa52f9fb4a",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "6c6a7636-9dab-4fcd-bcab-4922b6deefb7",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "e7e04bef-0a22-454b-ba23-a28d1ee66533",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "109274fa-8770-40d7-98de-110de5f76588",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "d56829ae-98a2-421b-827f-f245357675b6",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "b8ca1b7b-59f2-4e71-ac12-61521cf7d848",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "6bb37f94-0115-4cdd-86c7-20e492f6831b",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "9fa91d22-a4c8-42c5-85c6-675adca4c368",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "41257bf6-f95e-453a-af23-dd1c3c7f8710",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "769f98b2-6475-459e-b93d-786986a32ac2",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "642c6253-1d98-418e-99fc-f6433c021eaf",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "06011f2a-8d3f-4d3c-af56-efb61abe7e3c",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "beacdc82-7acc-46d3-9e14-8e6aebad44bf",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "cc6f8de5-16b1-4c64-b00f-46af389ada94",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "25608518-7316-4359-bce5-99a884311d39",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "62a70fe5-9b60-4e1e-a869-2df0a6ff6ecc",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "5cc00cd7-074b-4805-99b6-37a52a54d921",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "745d4581-e743-41ea-825e-d5c8797a9d7f",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "210184f5-c324-4fe1-bbbe-1912dc742092",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "b44c90c7-92df-4d0a-8d61-2f5138fc53f5",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "ad92c867-947c-46db-885c-4823fb5901b0",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "86fcbd96-6ac3-4bf8-b9fb-de713ce41eec",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "c3c1f9f4-e181-4f9c-a389-48f1330f3a92",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "01bc93d6-7c90-479b-87d9-fa23bcff9c93",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "5caf1659-1cd3-4910-995a-efcacff2cd30",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "ba6db054-a11d-4a6c-bd68-6af7934e079f",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "a8dc0b6e-964c-4347-92b4-19874c1c1e4d",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "2aa2e9ab-f071-47c3-b7d5-fb7a5272b074",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "98f2a9cd-536d-4ce2-a615-3c19a51ece75",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "bd61bbd8-25e3-4311-8778-903e2a1423ff",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "b4e9a477-10f8-489f-9360-d56b6e9018bb",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "76cfb2c6-5f50-4591-b467-88e0d0b9e32c",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "e770279a-a744-401f-963b-6757a964e4d4",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "e988854e-1439-4f2e-a3b8-ed6b2140304b",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "f65d48d2-95ec-4129-9881-e50e9096765d",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "1264ce69-c256-4239-8cdc-65d7becafc22",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "1fdcc66d-f06e-4e0d-acaf-ee5bed99380d",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "0de6f0c2-f87f-4244-b935-5530ff69ed9a",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "67b5a7ed-0483-4068-b90f-8a7f85ed938a",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "3d129443-162e-4ceb-a8e5-0b21c962f1b5",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "0b8d1fbd-3b63-49a2-83da-829b7e0523a3",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "12720a63-cb08-4863-8ff2-23a2c643a659",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "0ae81c4e-4bb0-43a1-9a08-d0e4ba56d40e",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "7da8de19-1538-4ab4-af07-42ba677edc4e",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "66f59cc0-a538-44ef-906c-816c1ad1eef3",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "5d67f039-fe4d-47f5-b239-175bec5153cc",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "7932fbf9-0bdd-4df5-b0c6-a8934194e8a3",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "33b5f8ce-2421-40a0-b22c-6c17a2a1054a",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "c53fc86e-0948-469b-a0ad-45d1b82f4298",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "9f9b10be-d987-4cc3-aa16-f345e057c92d",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "332a0db9-7a7a-45ac-91d3-1dbeb009b4eb",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "5972a8c0-62b9-4e68-9391-a114d99e6c35",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "60389dc4-5275-44b5-8a99-76fbf1d50059",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "3d3ed343-baf9-43e9-89ae-a4a1027a429d",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "a811692f-1615-4b3d-b1ef-a69f2feadb4b",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "03c86e5d-707e-4660-905e-736e94e4e14b",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "7c715fed-f410-4a32-bc47-4648f3cdc3d4",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
      "chunk_id": "e0120d02-366b-4d63-9f7a-81692edfb2e2",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "6cb8b44d-0f53-4f98-b53d-8c8c95aa17e7",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "5e6b4e2a-6bd6-463c-b798-19546fa4ac30",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "eb265e5d-cc5f-4d45-be43-9ec503cb7c19",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "41f9861c-3210-47ea-9a33-7ea30c8d2847",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0b2b74f3-897c-4246-9af0-0f39b7e7231d",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "c7e5fb4e-de32-4eff-8177-a05bf2bd7b81",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "89c150f5-cbf2-4a68-976b-d26fb2a7609a",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "5df2c1c3-cc42-489f-b143-665208d18c68",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "d043e528-b46d-4f30-b0b2-f3bbfb67b287",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "63632731-c714-460c-be66-e2b7ac2ab12a",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "5b07c5e4-e234-447c-812e-4ac8458663fa",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "a2933bd6-c3f3-4710-a6b0-371d106e1937",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "2434bb06-7990-4cbe-ae35-1c2587a111b3",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "a744fcb9-07c9-4930-86c3-0b4dc00b7bf5",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "a1b5b945-804a-4fae-8059-6459cc961f0a",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "b4baefe3-0e85-4477-9bba-1696cc0df30a",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "30161546-fe88-4e37-894e-2b2d70c79284",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "b4cf974b-0512-4261-a333-d2cdcbe02d59",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "5de37196-3485-4eaf-adfe-ee958d586180",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "40a24674-5bf0-4343-a0ae-30f33006b9c9",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "fad3723a-47cf-4f01-ba01-ba0b9babc8f9",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "011af3b7-319d-4f7f-a1f8-2329db6051ab",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0c93b351-3ed8-4a9b-97e6-01fb2be772c5",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "fe89a2c2-f0d9-4b93-8a1d-b9cc8807ea84",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "ee487f5c-9e35-492d-92e5-c472d417fcef",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "4b8e2548-bf16-4ad2-bf75-06b9130d79fe",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "49649e93-486b-4499-bb83-e16695597b61",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "1d6feab1-2943-49ee-9e56-1b6c6eb4800d",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0e262e02-fb54-49ec-8109-41f0e326f27c",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "9446a530-6774-4866-892b-c7a02c669325",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "22c354d0-fe38-4378-8589-d55ab0d8e29e",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "a3f1e860-be04-458d-90d9-234b91d3e7a3",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "99109593-14e5-42dd-9680-d46e3813fd49",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "7555bfdc-633b-4af4-96d4-c1738578d7ca",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "ac2006f0-2130-4d0a-b618-a99f213f631f",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "57e9125a-faf7-45cd-acb9-3d0bbabe4248",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "eaac597b-842f-473d-b732-fa1af09fe1f7",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0a9fcba9-c9c0-4ede-ace9-dffa780fc4d0",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "16153735-9277-459a-9be7-59433fd4041a",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "e4befea5-9f80-4a6a-8820-4cf60206d416",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "4306243d-90db-46c6-a073-5a00496d3509",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "86775c81-ce33-45a3-8f8c-c536c691918c",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "478a76e5-2c36-4d9b-8df3-2be2bdfc4684",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "4b394c18-3750-4140-af38-7a6dc7f7d429",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "5eee6f91-1397-467a-b705-2ce0f988a30b",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "53667b95-c2d2-4715-9172-49577e0f5907",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "52ae0baf-c37a-4894-862f-f1b3dc48530e",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0292099f-10ed-4fe1-b684-a1bc93908279",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0c5bbea7-bb23-49d6-89e8-28958729dac3",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "d22f890f-31fe-4a06-802e-9166868881c4",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "5a0a189e-5c4e-469a-9f85-3d8d3defb4c3",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "a60e96f8-a66b-47e4-90d2-222fa6cf698b",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "4e7dc523-a921-457d-b798-1d7c483508fe",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "db0a0438-9dd2-42e9-a7e4-da812021b51a",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "ad1cc2d3-9fe2-4124-a663-5ba0e2f82012",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "453f2054-e48d-4e82-8808-331a10208a2e",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "6f804195-3327-4c15-bf9f-fc4adb4fc654",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "4fc22942-7c19-4371-920a-b24d7fc03897",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0a271099-a8c3-43c7-9d79-34b6a3c05cff",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "7fac31c2-6c62-4051-b89c-3a10333ba8ed",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "569f04a0-0d39-49a5-8e5f-4de131898f80",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0ce8e61f-7abb-4d92-be8d-738c564b9a82",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "5a6e324b-f968-4d1b-9084-85789f760873",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "36d8cee6-8e03-45ca-8703-7f89aef88e86",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0d4ec238-4dc9-496f-a2f3-d5824eba4bc2",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "b4968659-4319-4096-9792-596b0b6a87a7",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "17531a3a-1ea1-4ee8-a34e-29f252a0f7d8",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "d4f2bb14-5c53-4212-9e10-d033ddd01610",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "cd8d579a-bfca-4bf7-892f-b28ed9960082",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "c9677715-8586-4554-b244-386bce3bc101",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0f257c58-2575-4173-a250-bc3a1692200d",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "139e9f91-85c4-41d4-b9aa-221e739b2607",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "4e124cf7-9ec1-4508-a298-8d669a94e9be",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "069d5087-68f2-4979-8e2d-7326a446824d",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "f92845a1-e83b-4f92-bc1d-ea8639922339",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "f45cf902-ac14-43e5-bd5d-2190d4e01c66",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "ef0243ee-6e99-43c9-bd34-ab1cba188570",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "f416a598-f118-4a39-954c-fee78917b464",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "7581d51e-eaca-47d8-8e7e-7b09218fc30d",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "adc93c59-57fb-4402-a81d-24fc595b2ca2",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "0cdf6771-37d4-4013-bd49-3789ae073747",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "dd8fd6df-aaeb-405f-99fb-1375ee8eaaa7",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "4933e9bc-9824-4879-ba38-5972978d2962",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "7c5b349a-73ad-4d14-a7b3-2fcf5001ab5c",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "8f998aab-ce04-49a5-87e7-f27ee5a56d15",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "f6cb1b4a-a7d9-4b0e-adf3-1eec2cb323b4",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "723846bb-a663-4cac-9b7c-058dcf3d1aec",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "ebf13755-8e88-4b84-8fe0-635247a01e0e",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "80bc600b-835b-4adb-8347-78b2cc1485db",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "f02d1bce-8394-44c4-81f6-b0500356fb0f",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "392d38fb-6235-48ee-afe4-05b6e76f41f2",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "703145cb-0fc3-44e9-9463-0f19a543774e",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "836935cf-0d8b-40a3-bfb2-a0180de73048",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "82a5846c-7979-40a2-87b3-31cbbb3d7996",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "9bb7cd49-dc19-43a9-94fe-b55920b7844c",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "61a68f10-e048-4fd5-bc06-d1b997b22d07",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "18cddb88-1a9c-4dfc-9d58-098457a8cc9b",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "feff6254-2562-45cf-9aee-fee84813c4a9",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "e8b36d9d-13ce-443a-a5b9-72ad38b8f0d2",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "d7966c05-c149-4a93-8dd4-730a2487f4ce",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "16fdaca9-b6e1-497e-a66f-325fabc08ff3",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "4b374103-8cc5-4539-b039-37b35a067478",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "e319b9fa-6ddf-45c7-a9a9-3a7d02de732b",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "b6a200e3-69fe-4afe-92fd-1e134239189b",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "a1188880-9927-4e00-8f35-b4f8e885d33e",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "79e8db5e-3fa7-4cb0-88c1-f51c4bc5c8ec",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "480e7c17-94bb-458d-97cf-eaec3b65c111",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "381b0c39-dca4-4517-93e4-121d4d2fd0ca",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "7897f48c-5dd7-4382-9470-5a2b9f6354f1",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "75c5d341-cbb9-4370-9365-842adea2dcd4",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "3c7d3f0d-d4e0-4685-9405-57cc8c31429a",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "f4e9e279-8093-4d40-aac4-668ee156cb86",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "53b43ead-2c4c-498e-a7dd-4c8d7e65bf88",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "b9abfbf6-5987-4f64-a210-07498e4deffe",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "fa2c1902-4382-4872-ba0b-0e6c232b319d",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "8741d8e2-232f-4f09-aa04-aca6658f3edc",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "2b839cfd-9036-4210-ae31-03c82ea5d7ec",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "602c891a-12b1-4d45-bb1a-7dfb193a4faf",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "8f27cdaa-8e01-44aa-b776-06a843d941bd",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "3d7e563d-77e5-4afc-8912-fa7f1d1b52de",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "75dec03f-3733-40de-a521-c60a700f4aaf",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "5aeaf043-69ab-488e-b582-51e0aa07450b",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "696a150c-206f-4480-9955-034d2273fbe6",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "57aa3acf-0af3-4722-810f-7d11c2fbb0c8",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "1cc6989c-af31-4ddb-b7ff-c050899ebf1d",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "eb8ec130-c5ae-411d-b4e9-fcd2c660955b",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
      "chunk_id": "cbe9aa6b-27a0-4f1d-a045-91252b982303",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "3add802e-f7b2-445f-8369-58124b826f11",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "3a31a1c0-7fb1-4e6d-b6c6-62dcf512eddd",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "4f39bdfe-81db-47ba-a21b-93b35f5afb73",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`   pip install supabase            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "0d0929ac-c507-4df5-bfb1-6b77364730cc",
      "token_count": 53,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "08cbf0be-f638-4288-8a28-6b5c676a7bfb",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`   import os    from supabase import create_client, Client        url: str = os.environ.get(\"SUPABASE_URL\")    key: str = os.environ.get(\"SUPABASE_KEY\")    supabase: Client = create_client(url, key)            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "ee77b65f-8768-4b86-9c25-fce801886846",
      "token_count": 148,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "17cb61c3-1c3b-42c7-8644-dff0a56af038",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`   response = supabase.table(\"countries\").select(\"*\").execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "4e78d9f7-5e93-43e0-80ae-496563fb629d",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "41284653-b8fa-43a4-a4a5-804a3ca97421",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`   response = (    supabase.table(\"countries\")    .insert({\"id\": 1, \"name\": \"Denmark\"})    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "16c79af3-edd3-47d4-a1c3-6052176f7fb5",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "01058fe4-baaf-42eb-a226-ab873935e390",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`   response = (    supabase.table(\"countries\")    .update({\"name\": \"Australia\"})    .eq(\"id\", 1)    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "0ef7064e-178c-476e-9c07-36f8f8805696",
      "token_count": 107,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "47b30c2a-382a-4201-98b2-240e246dbc67",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`   response = (    supabase.table(\"countries\")    .upsert({\"id\": 1, \"name\": \"Australia\"})    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "4f2e4b06-7810-4e4e-a5a1-f99abd5bbfcf",
      "token_count": 206,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "1ababfe4-fd02-466f-92d9-05e3b7690ea4",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`   response = supabase.table('countries').delete().eq('id', 1).execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "032a821b-e37b-4079-a791-5a91442af1bd",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`   create or replace function hello_world() returns text as $$    select 'Hello world';    $$ language sql;            `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "2ba0d0cc-8d02-48ce-badb-b207a3af5bae",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`   response = supabase.rpc(\"hello_world\").execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "20777286-131f-4bea-9c2d-3276dd842c0a",
      "token_count": 247,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`   # Correct    response = (    supabase.table(\"cities\")    .select(\"name, country_id\")    .eq(\"name\", \"Bali\")    .execute()    )        # Incorrect    response = (    supabase.table(\"cities\")    .eq(\"name\", \"Bali\")    .select(\"name, country_id\")    .execute()    )            `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "4627fbe3-fa3f-4868-8065-f2b52ab9f11b",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "3a388253-08d7-49c0-8c5b-5433023efa85",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`   response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "63776d41-8eaf-4487-911c-4b18574e9369",
      "token_count": 68,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "9af967a8-eebc-4c3d-b76d-48e73d7a4ff4",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`   response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "a07b0103-979a-4fd9-a675-9cf9df0b96d7",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "7fbdfeae-93e6-4fa7-92de-c3c8e66a55db",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`   response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()            `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "2ca0540f-9172-4ea8-adba-70cb972de46b",
      "token_count": 68,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "1a4c47f2-3434-4b03-a04c-9e5201a33e10",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`   response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "2fc7ba15-c439-479c-a760-d6dd6ada098d",
      "token_count": 66,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "f46708db-004f-4531-b320-77e783becbd2",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`   response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "0cfc4751-9f69-4425-a55c-f36c2cc09f95",
      "token_count": 66,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "d9c125dd-4d27-47fa-9d81-cc29c1d95329",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`   response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "f8d0ad4d-dc72-456a-b6f3-782631e6eea0",
      "token_count": 66,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "62656036-0c2f-4851-85d6-58ec8695e498",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`   response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "4b2ae5df-9718-4601-b90d-b81ed8bc06ee",
      "token_count": 73,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "a5eb8329-e46b-4297-b170-a146bbf6f219",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`   response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "4d97dc5c-c5a9-4680-bd3d-9574caec91ea",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "bb3daa25-eb10-4ca2-8d1c-f470e97ef1ed",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`   response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()            `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "f11c25c3-7d5c-4d02-9a6d-d92461849aac",
      "token_count": 79,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "aecbab1e-26a4-4006-8957-8a45bb7361fa",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`   response = (    supabase.table(\"countries\")    .select(\"*\")    .in_(\"name\", [\"Albania\", \"Algeria\"])    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "9a2a3d4e-df02-4824-97d0-e320b0d39fa1",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "abc73af9-509a-45e8-a6dd-c7f33902cf1d",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`   response = (    supabase.table(\"issues\")    .select(\"*\")    .contains(\"tags\", [\"is:open\", \"priority:low\"])    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "b523cecf-3eba-459b-9d24-290a9dff12e9",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "e30c3628-3efd-44bd-8c49-ba48ab3be7b3",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`   response = (    supabase.table(\"classes\")    .select(\"name\")    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "6b88680e-0011-4748-8eba-60320f13db81",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "5611cf13-983a-47aa-b090-bc2eb30fa67d",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`   response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])    .execute()    )            `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "63f3abc1-01e5-41bc-bf08-1ab616a759af",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "992d61dc-8278-4ba6-951c-a5a8bf7f6cb7",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`   response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])    .execute()    )            `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "e4fd2903-b879-4bc0-b808-cd76b09625f5",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "68e619ef-35a8-484c-a257-18cdb8e9cbd0",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`   response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])    .execute()    )            `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "853df166-b293-41bf-9670-41d60b6c884b",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "77c1ce8b-f6ba-43da-8a3f-bfff04e281d7",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`   response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])    .execute()    )            `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "f47413de-d08a-4a57-9e0c-bcd4f83dfb93",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "b980a35a-309e-4992-8420-55dd23bac574",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`   response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])    .execute()    )            `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "0404b09c-6f49-4284-93b6-14e5b54fbf9c",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "ddce38cb-07b0-4263-971a-dc12fcb59546",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`   response = (    supabase.table(\"issues\")    .select(\"title\")    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "154cbcdc-3c65-48b1-8cc2-6020618fe3aa",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "db452453-4375-443a-8834-3a1667112f32",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`   response = (    supabase.table(\"texts\")    .select(\"content\")    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "b49d8ecb-a4b4-4c78-acb4-63831c2fddf9",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "85236139-bebb-46b0-a8ac-daeaed01dcbc",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`   response = (    supabase.table(\"countries\")    .select(\"*\")    .match({\"id\": 2, \"name\": \"Albania\"})    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "42b7f6ea-14db-4af4-a7c3-2cb3ed2dbe2b",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``   .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter    .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values            ``\n\nWith \\`select()\\`\n\n`   response = (    supabase.table(\"countries\")    .select(\"*\")    .not_.is_(\"name\", \"null\")    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "05405430-2de8-4060-a292-cfe7f729ab7a",
      "token_count": 141,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``   .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.    .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`            ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "78c7c1b2-f62e-4aef-ac36-4a0b08814577",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`   response = (    supabase.table(\"countries\")    .select(\"name\")    .or_(\"id.eq.2,name.eq.Algeria\")    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "4f2139fc-c19f-45e9-998b-e66b10e85552",
      "token_count": 115,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``   .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter    .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values            ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "a3ec2be0-69dd-44a5-9773-3f97514365f0",
      "token_count": 86,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`   response = (    supabase.table(\"countries\")    .select(\"*\")    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "e42a47b2-b9e0-46ea-a0de-89cdeb2551f1",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "5f541662-58f9-4bbd-a54b-3ac877ad95cf",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "6ab778d3-f8c7-4bfb-adc1-d2567db8ad0d",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`   response = (    supabase.table(\"countries\")    .select(\"*\")    .order(\"name\", desc=True)    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "1b8d8235-2d4a-4bfb-9d5d-3d9542870f11",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "80196df0-b8d1-4699-bea6-6780ef7f7499",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`   response = supabase.table(\"countries\").select(\"name\").limit(1).execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "32080810-1a4d-4f15-8103-29670a0bba35",
      "token_count": 81,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "3901b116-61d6-44bc-9732-58a5062c8c48",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`   response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "abba3242-3942-4893-8229-609df69a4bd5",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`   response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "852971f6-940e-4380-971e-a0bd257b29d0",
      "token_count": 62,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`   response = (    supabase.table(\"countries\")    .select(\"*\")    .eq(\"name\", \"Albania\")    .maybe_single()    .execute()    )            `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "196337cb-f6c7-42de-8241-d801ea152785",
      "token_count": 81,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`   response = supabase.table(\"countries\").select(\"*\").csv().execute()            `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "55858993-e447-4aad-b936-b5422888077a",
      "token_count": 54,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "6987e1fb-769d-42aa-a150-e95f8f2cbfe0",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`   response = supabase.table(\"countries\").select(\"*\").explain().execute()            `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "9f794fe5-91df-4510-b56c-932af4edd6a2",
      "token_count": 207,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "d3d391aa-1f9b-4382-b85a-d43b9d839830",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`   response = supabase.auth.sign_up(    {\"email\": \"email@example.com\", \"password\": \"password\"}    )            `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "f53d137c-bad7-4290-b1d8-546f942fa3cb",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "8bc39d8b-48b7-4faa-be9e-3a74444afaab",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`   response = supabase.auth.sign_in_anonymously(    {\"options\": {\"captcha_token\": \"\"}}    )            `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "5184986e-0208-4d93-a2d7-8bd3d1319953",
      "token_count": 62,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "fc6f2689-dc06-4ab5-932e-a905db2a3812",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`   response = supabase.auth.sign_in_with_password(    {\"email\": \"email@example.com\", \"password\": \"example-password\"}    )            `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "3c130631-c050-4afe-a6c0-ec846e98dfe4",
      "token_count": 66,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "ec770af1-75cb-4049-a5de-76aa93d9e6b2",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`   response = supabase.auth.sign_in_with_id_token(    {\"provider\": \"google\", \"token\": \"your-id-token\"}    )            `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "2158680f-e6e8-486c-bf6d-4677f4394b21",
      "token_count": 60,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "9be5391d-db5e-4861-a150-600cd8976b5a",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`   response = supabase.auth.sign_in_with_otp(    {    \"email\": \"email@example.com\",    \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},    }    )            `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "91e340b4-6b66-4a4e-a441-eff418c4ec3a",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "91c5129a-8a8f-40a5-b315-be7972b747e6",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`   response = supabase.auth.sign_in_with_oauth({    \"provider\": 'github'    })            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "eb71a464-f510-424c-84ea-8c6834404d1f",
      "token_count": 63,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "abd6f8cf-4e56-4a5b-9af3-db6d5066e095",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`   response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})            `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "1e2c2780-ca74-4c55-bcf3-20ddb1c6dc9d",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "cc98896c-c122-4519-b5b6-901a752e8dac",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`   response = supabase.auth.sign_out()            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "9d237fa8-b0ae-4631-8c94-2e29d747cc0a",
      "token_count": 33,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "f4e3491a-24c7-423d-b251-3173b0485945",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`   response = supabase.auth.verify_otp(    {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}    )            `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "9cef0659-b228-4021-8cef-b09d94d152ff",
      "token_count": 81,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`   response = supabase.auth.get_session()            `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "4130dbaf-65af-4563-a4d0-2f14dd525d5e",
      "token_count": 150,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "b5c21d1f-471b-458e-a813-b21e8fc5b53c",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`   response = supabase.auth.refresh_session()            `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "12f2b780-fce2-4ae5-afe9-476c44d4160f",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "e3c6e334-f29e-4f19-9d62-db9d6258494d",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`   response = supabase.auth.get_user()            `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "bc8b732c-6e63-4e10-8b10-4a1201f9124f",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "1368e6ca-7e79-469f-8d2c-fbd5d65971cd",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`   response = supabase.auth.set_session(access_token, refresh_token)            `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "73b1cfa1-171f-4fd6-9a82-f6f2b46051a7",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "3dab51b6-80dd-491f-93e0-92912824eca6",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`   res = supabase.auth.mfa.enroll({    \"factor_type\": \"totp\",    \"friendly_name\": \"your_friendly_name\"    })            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "205cb68c-9aaa-4093-9b55-31e8f64ec5ca",
      "token_count": 179,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`   res = supabase.auth.mfa.challenge({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'    })            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "bab08260-f965-404e-b7d1-4dfaf198cdd1",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`   res = supabase.auth.mfa.verify({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',    \"code\": '123456'    })            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "ec7552fb-f9bb-40f2-8811-ca19e1363541",
      "token_count": 127,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`   res = supabase.auth.mfa.challenge_and_verify({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    \"code\": '123456'    })            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "321b32e8-b30f-485b-aef3-97c10d218986",
      "token_count": 147,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`   res = supabase.auth.mfa.unenroll({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    })            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "60c068e1-b0f1-4a12-bcdc-99b3878ea2e2",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`   res = supabase.auth.mfa.get_authenticator_assurance_level()            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "b266c564-29ad-43b2-8b39-6169f2b65959",
      "token_count": 155,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`   response = supabase.functions.invoke(    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}    )            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "0c8bb4b7-2913-4152-9eb6-04849d415b19",
      "token_count": 156,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`   channel = supabase.channel(\"room1\")        def on_subscribe(status, err):    if status == RealtimeSubscribeStates.SUBSCRIBED:    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })        def handle_broadcast(payload):    print(\"Cursor position received!\", payload)        channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "baf0df64-f9ac-4c9c-a3a3-016e43ea1b36",
      "token_count": 290,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`   supabase.remove_channel(myChannel)            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "ca431446-13e6-46a6-8acd-d0dfb4e9d459",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`   supabase.remove_all_channels()            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "8443c669-55ee-421e-9b58-b5359bcbca0e",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`   channels = supabase.get_channels()            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "09382c06-692d-46af-a19b-a37f3db056bc",
      "token_count": 26,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`   channel = supabase.channel('room1')        def on_subscribe(status, err):    if status == RealtimeSubscribeStates.SUBSCRIBED:    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })        channel.subscribe(on_subscribe)            `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "b3a9cc8a-2c2e-4d19-8e1e-37947170d809",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`   res = supabase.storage.create_bucket(name)            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "59e569ac-dd1f-49e1-9ccb-d295ce34519c",
      "token_count": 81,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`   res = supabase.storage.get_bucket(name)            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "eb9b8cf9-31cc-4e1e-9c09-8ec38180c246",
      "token_count": 81,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`   res = supabase.storage.list_buckets()            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "778f721c-5a4d-4f6a-a602-ea765697e8b9",
      "token_count": 80,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`   res = supabase.storage.delete_bucket(name)            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "be15caaa-f02c-44bc-8dd4-e66d37660dc3",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`   res = supabase.storage.empty_bucket(name)            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "603e9486-b4a6-4348-a4a6-0a8ba52653b8",
      "token_count": 86,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`   with open(filepath, 'rb') as f:    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "8beca6fa-7815-430c-b255-77cbc465253c",
      "token_count": 171,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`   with open(destination, 'wb+') as f:    res = supabase.storage.from_('bucket_name').download(source)    f.write(res)            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "b65274ac-a8a8-4f5c-822b-d6abbbde6654",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`   res = supabase.storage.from_('bucket_name').list()            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "59b20c52-27a1-4f6d-a898-cce753447344",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`   with open(filepath, 'rb') as f:    supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "64c37643-280c-4790-9f24-5243e4a9eaad",
      "token_count": 124,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`   res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "b434917f-c855-47d6-9c89-c85f4e09ee80",
      "token_count": 100,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`   res = supabase.storage.from_('bucket_name').remove('test.jpg')            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "d87696e5-5541-4f58-8a77-763222632bb0",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`   res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)            `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "32b8d3ab-c456-43aa-a4c7-dc325c7c7d62",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`   res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')            `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
      "chunk_id": "dcdb7b65-d358-423d-82a0-e8c306a05416",
      "token_count": 155,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "185d1752-5b24-4bb1-9c79-9a8929096361",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "8dc490ef-bac4-4e42-a8e6-2e7ff1957dbd",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "8edfc9d5-2bdc-4c53-ae23-1e3f85b2ed63",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "f4d20036-c209-4453-9ae5-0566cb2a6a45",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "9a6a3ad1-ed33-4319-ab4a-d6ea4f252c2d",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "4f975c6e-be9c-4290-8683-4a04e5f5ed3e",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "3e81008b-344f-413e-986a-e3b0c53c8524",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "86c46179-1c7c-42de-b92a-7a31dffe69ff",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "f6e1fb8c-fc09-4628-8768-2e8981ff2d5f",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "b556579f-f318-4fd2-918e-504d61a94b73",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "2409f0f4-c081-402c-8c49-e9ad4a9cc81d",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "3d289693-bd5d-48d2-af85-514f7cfbecd0",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "ce22ea76-64e6-4012-81d8-4b1e1194346c",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "10398acd-609a-4f10-8e51-9c37e45f5464",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "97aa326f-eed8-4585-a9bf-8ab78779081e",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "fb82ed0f-5342-4114-bb16-05dbefc0e8a8",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "e555528d-2513-42ad-afc7-cf736683b7c7",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "990b6064-7b9b-4faa-897a-0d4f458df97a",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "837c6081-1219-45e1-8cca-a8052f9fd008",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "cf311f85-2b4f-48a5-b4f5-2545d4d05fcb",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "20a23fc0-4b52-46b0-ae51-6804fe0a70ad",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "795e4d0d-0f9a-4cad-8001-6c54face8196",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "f40fdec7-918f-43c0-a725-68b7a39d7170",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "53e23af2-6fdb-4366-92bd-a2b592a05f49",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "ed8b77c7-7735-4335-ba9d-789a6e1fb2b1",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "92a123e8-495a-4292-a4d0-070b23d2fced",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "fbfa750c-7118-4b5d-9653-15feb2c54404",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "7b1da0d4-482f-470f-9539-f3723f8978a9",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "c182b633-97ef-4a09-9a0c-6d07681f95ad",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "47ee6aeb-475f-4394-893d-461e41939ea3",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "63f8ae11-426f-41fa-931b-d84751b6482b",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "a012174c-1064-4040-ade8-c55b1ac2652c",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "a9f16b2e-014d-470f-92a4-9a98c0b330bd",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "36c3e3ea-206d-4081-aae2-242b19f579b6",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "7f18fe70-2a33-415e-8e0d-7d27dcf6d0e1",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "550af3a0-4e34-4d61-940a-4200f0018174",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "9cdbff01-d653-4c92-8771-16c2b413aa0e",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "542fe4a8-8bef-4303-859d-13821c1fa8cb",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "19028f11-0da1-44b2-b855-8a967e724da1",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "9e484091-79cb-45f5-8d5b-e5cec62d86d9",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "a02a08a0-42b1-4290-83e9-ec5907dc9c90",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "22261d28-7c5f-4a76-a1f4-7f5f879e85ee",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "7e3e37f6-cd7b-4aa8-a5fc-19eb56ef0699",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "8b411c00-c503-4f50-99c3-c4fb573ad04e",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "d6f2f5b0-571b-49ea-acfa-48be4d108a72",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "e093fb30-5a85-473b-8e40-4fce7213a0be",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "51c993ca-5292-4cfd-a51f-f2c49e485324",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "d2e73b42-1e41-434e-bf4f-adfdd7f2f92a",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "4ead5cb2-6fe7-4698-8ae7-e8a7c329f5c5",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "5e5ec9db-7514-413f-a58e-76a57a7b1de6",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "19538e69-2b5e-447a-86c0-28373fae38c6",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "95c3b2a8-d841-4074-b62b-5a9ac6a96270",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "03d5dc51-1221-41d9-85cf-934cc74e6300",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "76d6fa95-acd9-42aa-a6b4-aed9bf2d0f8f",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "441614bf-a553-4b1e-baa7-1e38f6d15696",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "5820477f-dd08-473b-85ff-acbf872e4c43",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "aca09d0d-2aa8-4511-97cf-56d850a6bb8e",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "e884a0fa-4983-4099-8ef7-0fbf0fb01928",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "e4ba33d4-c44e-4b43-a7d2-1df39ea66a9c",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "6a5cef88-c7c1-4d38-88fa-ca9901851fea",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "6e7be35b-62e4-4fe3-93f8-5296ddc4a5e9",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "aa01ff2c-d735-4aba-9e52-91cad61bfedc",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "275eb4ad-cf3d-43f4-990a-bd7c94b50369",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "d7910a33-3251-4880-95c8-c0fffbe98edd",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "deb70824-07f9-445a-8dcf-230cd58b4ac6",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "316ad257-f250-4037-b58b-f61455abd820",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "2dd76fe9-0f36-4c80-89c8-2dcf4009185a",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "eee1d796-4c70-442c-81ae-72886f1dd8b2",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "4b0384ee-0484-4b98-b3ea-88cdd8a9716e",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "03a3d650-7122-4063-9c82-b55281be62e1",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "7f010fc5-dc17-490f-b076-6c641adde61f",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "405e65f0-493a-4ea5-9fd7-ca426c99d259",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "e988917a-7340-4394-8016-814c06394be0",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "21f8ddc5-4c30-424d-b44b-9c176b9c2818",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "af09bb28-fa43-4e2d-8739-1311e386f1a7",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "7843a376-2c3b-43fe-80bf-e6c8bd65e667",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "babe149d-cd8b-455d-8b7c-1b1c94847100",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "a9ce738e-b4cd-4701-a2fe-2fc06b3274a5",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "333acbfb-359a-40ea-a3e2-a7a23be52a50",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "cfbf2fc4-565c-4cc0-97b0-0c79ed446cde",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "69ff2b58-52a7-43e2-b1be-02fc602253ed",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "055d5a8f-5bee-460c-9831-03ac18f41887",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "304955aa-4d72-4739-8d6a-83fafea132e5",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "ba1e65ac-5518-4586-bef8-488a04a4e9ac",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "5131f055-37bc-4566-a1c9-4ef07193ac29",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "1924718a-af77-4bd0-9e5f-04f573f68f39",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "7abe4732-d372-4e44-bf7e-045a13be9530",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "a8b9221b-de49-4f27-ad70-09d28bbc06a8",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "c4c64639-b2f9-45dc-8b76-c48dd9fdb729",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "8a0941d4-4b11-42e8-975c-5e0dee7fb060",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "755ba86f-7ff6-4108-ada8-18015fde6f92",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "89e3d80b-881c-493b-b6de-4af860aee0b7",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "5cf789f6-4d2a-42e6-b209-ce52c4669adf",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "364245d3-ec94-4b9e-a062-4270a01e71e8",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "64ba8f82-a179-439c-a77b-e256b0c1eb2b",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "58d45dd8-7744-41fa-b027-67b476a870db",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "f50ea288-6243-466b-9c63-c39c517c7ae5",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "a01553ed-fff0-4234-9b26-f4a35a5d179e",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "131cec39-59db-4842-b82e-0743f75529a8",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "67d23a37-f494-4a8f-bf8a-6fa0790f0ce9",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "03bc32cd-eda7-4448-975e-7bca1d62d3db",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "a094ce99-5ad1-4b53-9173-f187ce54c965",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "48d3f1bd-3d73-4eab-84ba-ee4b89eb1559",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "f01e8f1f-cdba-4d2f-8163-60f5864be49d",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "effa8d6a-03a4-41d7-b462-3e7357bf0a73",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "eb97127b-425c-44f2-9656-0bc5a75eccf7",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "b07f8171-2358-4cc1-8c28-59b1cfb498a5",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "fa3efe26-492c-4031-bc33-321402824c5c",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "7742b611-419e-42a3-8856-765b0eb6e3c2",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "6ac00115-2492-4fc4-86a3-2c4ccf658662",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "67d88444-9483-4791-8994-7932981bf071",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "2114fac1-425a-4812-ade6-dea8ac97fe1f",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "33e1e8ce-9dd2-4992-a2ec-372542e6f7b2",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "3ac635c1-b9fb-48af-8bea-1310dcd6505b",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "49b78ba5-5833-4c2c-9ade-37ed44a69027",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "5f20f2d2-9ab6-40fd-a4f3-c9e857a85798",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "99607057-754c-41b1-ba82-1e28c1cf8d2c",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "583bf2c7-48c3-4372-824b-3c50ba64985d",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "2ba92d88-0b8f-46f2-a2f2-daf404e91d68",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "093f7231-1a96-4e13-a8c0-7b550fd5101f",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "27987bb1-2ff3-4d55-b69d-c92b49c859aa",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "4f4eac4f-50d4-4bd4-acb0-e63735025c4f",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "ca884565-e23f-4c12-8467-07ddeb99cdc9",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "ad382d16-c3d7-4012-83a4-43dc41010ec5",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "dcc77728-de19-4654-a33f-69cbc1ba600e",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "3de07959-1bb2-4b0f-9c01-6defdbae4e9a",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
      "chunk_id": "9d84e418-ea42-443e-82f0-2fc74983a98c",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "5a3ec692-5b5c-41af-89e0-7f1243aff59b",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "c507c154-066d-416c-a163-f914b970a9f8",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "c95a4dbe-e615-4c79-9649-c2a7da45b714",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "5fbc7a64-51b8-4008-939b-60d5a1456f3a",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "d9eef0f0-94cc-47f9-ab77-e6895086763f",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "6bc26dd9-6bfe-4677-afa2-33bbc9b61a57",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "176dcf4f-4c75-4a18-a11c-7fd72293a3e5",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "b8e75548-3037-4943-a0f2-6503d74c03b4",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "16974d7f-5b02-4a87-a4d9-f6a83b22093c",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "c596be59-be01-4fe0-8252-b827944133dd",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "6ebf421a-a6fd-40df-86c1-a9f168105ad0",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "467ee418-11b3-4d4d-ac06-6c1a6af28e06",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "32be83e2-9c2e-4bce-a727-2c70923b29c5",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "d10288e2-a12f-49e7-b747-555d73652e89",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "07e55e3b-8952-42d5-a5a9-1dce926c9a3e",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "f023e761-bc99-4008-a02d-eceae7e9c8e4",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "01a9e9b9-a746-4315-b379-f86267289a74",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "ffe8e457-324f-49b1-972e-07b4a0fc826a",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "d59bb178-386b-4b17-93d5-c3b6bbb31277",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "895378ce-5158-41e0-821b-d9803e25db83",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "68cb0fd1-067d-4836-a223-51a27951b398",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "df7e583c-9b57-4c80-950b-279ba8a7e50d",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "c1a2bea7-8274-4e83-adec-fb33629bc762",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "82157786-0c8c-4f81-a650-d88df90cae7e",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "4b523def-f23f-4270-a37b-686f7bc2ea4a",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "889df379-21c9-419b-9f3d-6a59e7274173",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "83131e14-2fc8-419f-acd8-9d47af294fe0",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "5ffe2709-65d4-4945-9ab6-0a079cc4243b",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "d37788d7-21dc-4132-b8a4-0ce6ebc2771a",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "cb4f1539-cdfb-40d1-9095-ed83c3128249",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "467a5684-ea89-491d-9ba8-6a0505331d25",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "09618c8a-32e5-47f6-9f9c-f892b07a7453",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "01639419-e024-43b3-bff7-665fbdb98ad5",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "d7c9e3c3-aba7-49c9-897e-706c0432237f",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "d95de3c1-5196-47e2-9465-8be5d0835f3f",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "4b9f3eb0-9f69-472c-bf55-d9e4ff8f3b94",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "60720908-3ccc-4920-9fd2-17422ab3809a",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "61cf81e3-167a-4cca-ace9-973dfa580f9a",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "76c56fe9-5467-499f-a685-67fa73daebf0",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "23543247-d18c-4b23-89a2-77a0cdef9d9b",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "beb1773e-38ed-4920-bb8b-9afcaa67fbab",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "7625eaa2-eedf-48b9-960c-451481d2c5ec",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "1140baf5-32d2-4d81-b583-c1db1673690c",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "af4466dc-bf02-4964-927d-0166b216da6b",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "84176785-0f20-4d52-aed9-53718f28bc1b",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "5afa57ac-f14e-44a2-be4c-3f51a84f0a8f",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "3e572fa3-5ffb-4045-8c2d-66301ef699ce",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "37ac6d9c-bf52-458e-a512-358615b69f7c",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "421f2171-a438-4b05-831c-479eb0f0f01d",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "b5adee96-115c-4ec0-98cb-3d6b764f1edd",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "66145807-0f39-4e89-8411-880785679ebe",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "145970e5-53eb-4b2e-becb-63d7ee46479c",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "7df408ef-6baf-4114-80c9-41e4bfafcfdd",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "718e8082-6635-4106-9f99-1b7c2a64a753",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "0f944747-2d09-4a4c-907e-634b91f688a3",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "836f58f9-b2ea-413f-b376-adcf9a98575b",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "959b6e99-0335-48d7-b939-08607673003c",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "00de78ea-fb32-489b-a614-07b64393d921",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "019366b6-79a4-4a78-8b69-96b05f33f539",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "5cf61653-ec10-4f7a-b43d-827811636350",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "b2c46028-63ca-461c-a507-2f095c754a99",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "2ee6810b-1e80-46ff-8d08-3af84592ad00",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "92896bcf-0419-45b1-8951-4bd2835dbb2d",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "a1703a35-cba2-409c-9c74-45d2e0aa7755",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "8fb47bc0-36d0-4854-b011-107969b41188",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "2a2cfaec-6639-43cc-9af6-e6309dacf640",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "ae886057-0b24-43ac-9fc9-4914d6198b59",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "e8c3bf63-ff56-4303-b3e2-a1b0a26e0694",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "93a7abc1-497b-42cc-af20-ae790c002e62",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "28c7e6ad-a017-4557-9c3d-2acfb6ac143a",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "d4df97bc-ce46-44b6-b446-9625749463f5",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "5868ed2d-e5ef-4be5-a112-6de4c1491c2f",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "da6cb6f0-6b5d-4b61-b789-e00b94d53232",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "71b3fdbb-9af4-4eea-a6b0-48eeb4c572f8",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "0b4fdadb-704c-477e-bb9b-7e925bd5f8ce",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "1d75cf57-264d-40a1-a461-2e474fe8c3cc",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "6058f805-4ab5-4130-b19d-8860d6bc4155",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "fefd484d-b39c-4134-b688-ecae04744325",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "621254e6-72c7-456c-858a-5635b00c36eb",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "18673606-65a7-4cf8-b311-a97bb8b60808",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "86c4afc8-fa33-45ed-a61f-bf1f931b7682",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "582b7e14-1a53-4966-9a4b-4e164702bed0",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "46a71e9c-36d9-4bb3-bd13-a5c8844fa969",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "181215b8-a46e-4f01-b893-117caa38b3d2",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "9a38dcd5-8860-49c3-9252-620b5eab5f12",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "91278cca-5901-4bbb-8478-4dd59c2e7a59",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "859e8501-58e0-412f-85ab-dadbcb93877a",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "9c13a1ae-ca80-4018-bc07-88159c64d23e",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "340330d0-93b1-4c9a-8d39-e2404ea32c5f",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "4462eddb-2dc6-48b3-9e52-7740955bcd57",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "600de2e7-a86c-4043-8c04-384590c73b84",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "b09eb904-8831-4dbb-9a00-89b22857cb31",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "e7e876d2-3d13-43c0-a112-6ba0ca6d9f35",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "8d5e00c9-e5ee-4110-9487-b369e9c1d1cc",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "561b55dc-497c-475c-99bb-1d4b59726bb3",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "12b256f3-18d5-423f-9e72-6a74d7244869",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "4291f2cc-a337-4c30-a76a-9d95f383670e",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "20dbb0c4-69ad-4905-bfe6-df22e13a12dc",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "3290a9a0-6e2a-4c7a-92f9-3b11726bfe4b",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "1c2f94a1-156f-4b05-a308-d0b3e174def6",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "ea008fee-7c81-4468-9268-43ec122ecf9f",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "ec279cba-196f-41f1-8ade-91e3e67d2f97",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "85ec6455-7106-4eeb-85be-2397c66bcc99",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "22bb147c-b719-421d-8c6c-a1ba1ccea3ee",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "49c0e646-893f-4cf0-8e6e-2b68d4421980",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "22226307-e7c5-42ad-99ea-64501bb0f86c",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "fb05a906-e123-4629-b8de-93b06ead9770",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "968936f7-66c2-4e18-b035-e509df51827b",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "3de0d837-436d-4766-ab17-0533b2fa477a",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "5d46b5d0-2dd6-45a0-96c9-665f33356bc5",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "1258ac74-7439-46f2-b3e7-37b6f6f5bd1b",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "03b95613-c9ce-4015-8f93-7a32b6d76402",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "901a2189-d541-4a47-a63a-887b6f0f9f0f",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "5519752a-62a3-40ea-abf7-c89d240d7275",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "0f8d6c5f-382c-4d01-91ed-549a6fbef767",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "317179be-67db-4bba-b3df-ff7e25df90d6",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "a2e5bc9d-3e96-428f-a4d7-50602bb6d33e",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "9c9eb574-8881-4a84-a327-40157e9d6ce8",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "bda02f69-aa75-4f40-be67-2b342c67dfeb",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "9ac29182-8ae2-433a-b7c0-c8957904da20",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "9842f8aa-405e-4782-a642-4be01b6ea52c",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "544179c8-eecd-4cca-acb4-c480e34922be",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "7448cc8d-481d-40b3-8ed1-609192d0337b",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "66043359-b85d-47ca-9af5-be17840bd646",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "03886c8b-050f-43fb-a839-9daffdbaad2e",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "da6d97f4-f488-4aa2-ad1d-809f4a9ac449",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
      "chunk_id": "89c3fbf3-77c5-473c-b97d-3e4d7b90b957",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "625e1efe-f5a6-4e43-a5f6-77398e945de9",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "7e930059-5371-4570-9a02-1ebb6f2aead1",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "1bd58177-815a-4f4b-b33d-ca35217ed9ba",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "87ff92d6-a851-43c2-b907-7600a7aba0bc",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "62345616-bb20-4ec6-ad46-0243e00ef1df",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "5095751f-be3e-4eab-9a85-3ec47ba6832c",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "726bb49f-5b25-4da9-a6d9-e89af077158a",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "c916111c-bef7-4e29-8f53-48d045f813d0",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "6c9abd99-0c0b-47f0-a770-47ef5c937fb2",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "5b33bbe4-686f-4198-8062-08f2fbe34d50",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "d6025803-11b6-40b4-8843-36c38f7ffd3d",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "d37c1026-89ee-455f-9a54-cd82ba8b615d",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "5bf787b1-6494-4dab-8185-8fad81691c7f",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "455d4191-a3f6-4fc7-b421-e1584e7f4c27",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "0f25fd59-fe61-44f2-a073-3adec715d9dd",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "1276d36c-9718-4a7e-b40d-144532c3986f",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "ad7c26cd-d791-4c07-9dff-214e1f6697c8",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "ea53674b-791e-4543-82e4-99f49ffc853e",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "1d1e0c7f-3179-4110-802d-ef1ea141e562",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "f2d557ce-80d2-4c3d-89be-5940326a99b6",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "94928ae5-d364-4330-bc8b-54510003b0d0",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "9e2cd0e7-e045-4a54-9f8a-b0eb8aa6fe99",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "2418ed6b-a47e-4080-aedb-0e627a7c75f3",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "4edcbdce-7c92-4903-94ce-ddf5e21278f4",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "1d34b3af-3b17-4a8f-9dda-d6847ab3dd6e",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "7a86f1b0-aaf9-43d1-9d36-6bed3d2b4c9f",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "1e63e679-2e74-42b5-8137-a0c6ef0f6719",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "e89a2fa1-67a3-403d-a827-bb8fa865d6f9",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "23ca0f7e-f649-4f44-a367-92106fd2ee0e",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "6510890f-f1ff-4d0c-ad2f-b79fd1e7acff",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "cc287a21-3c07-4bec-a14a-b3a0f8a8edf1",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "bd86e4c8-e0b1-4d55-95e5-dd1abbbe1d48",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "ec6e8e48-b7bb-4d58-88e4-1fc01ff42f9f",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "87d887eb-50ad-49d4-a3c9-9ba6b41d4e66",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "c512a87a-4777-4931-8c4e-87cc4c3fc25c",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "abf1d847-88e8-4ef3-8b5f-1651e07dd887",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "496784cd-2c7c-44dd-a010-4736962380dc",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "589efad2-0038-463b-8f0c-66f3e858fb01",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "0365aac1-193d-41f8-8256-47430200d9a5",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "28dc2305-d3ad-4d6b-ab6e-ea48284c5a81",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "aedff152-3951-40fd-a95e-27eaebbe5b8f",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "60b6ef51-1be1-497f-9cb4-cfc4be2fd270",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "789e48a3-0a4a-4762-9914-3e7b33df7081",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "6acd33f4-9110-49c2-ae8c-7ba3b66fabf7",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "e6e65998-e8b9-4956-945e-2cef904fc102",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "9c003ce3-5413-4d4f-810e-d201d6edd1a4",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "f51e2543-6465-417f-86f4-ce8cabe2b924",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "71e42a42-725f-41d3-af93-a94a9fca1e3a",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "0ef0206a-1346-43e6-958a-60b28e0f1239",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "6b744b2a-93b0-4096-9e93-0542a1b81b57",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "dcfae0cf-9059-4d4b-a3ec-1fe49e42f76f",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "4c8f5576-7a6d-48be-8d65-c3f6fbcbceda",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "16729413-47b8-44a7-b9d2-ed91fcf6d82e",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "13dd9afb-2c36-4bcc-ad77-f95e58531cad",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "19f49741-0338-4afc-8ec0-230a0c902ac4",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "c22dd822-ce4d-4269-a595-593d08f6959c",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "e5911562-76a3-4d7c-9ed0-be508ec4f3d4",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "2690e4bf-5083-4063-b5c8-0f6ec625cf70",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "3dd05d37-2141-4e03-8910-a48ebf5395eb",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "3f9befdf-28a6-48fc-95c3-d4722b5b44ba",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "6f242d8c-592a-4812-9655-bd6eb30f1036",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "bc057bbc-f392-4b30-a620-e3e4c910cd33",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "eb5e46a4-e9f6-4eca-9da3-d912ba816039",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "ae08aa31-d21a-4432-ac51-431b3c06809e",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "7a9e0052-ab13-43e4-871a-05efad28c7e2",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "06d7221b-1637-4ee4-9245-90cdd3a38d4d",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "34374851-57a5-40e9-ac37-0b286a420580",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "1c7e51ef-5c2c-4236-a7ca-28c65baa9479",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "0671263c-3fca-4335-994b-544c9cfc05b4",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "2dadf957-7889-48cb-8e90-5284e15d4214",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "c9ea47d4-a049-4e80-90b2-a2775f2ad1f8",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "940906f0-3846-425d-a3d3-e86c0308b0bf",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "a04290b0-cbae-469c-ba51-2d3f2a9e48b3",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "56781f27-6f90-4790-8bc2-c2804de9fb7b",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "489829e6-cc5c-49ea-aa2e-c3fc96713e70",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "eefed05d-39fc-4654-9266-0fbd5642a002",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "ded8fd6d-f3ce-4695-9574-52830591d33a",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "e1b095ba-cb56-4072-87ea-3c755754442e",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "d4197767-b868-4d21-bda6-b22781cbaa65",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "f757cc06-e2e5-4adf-a7d4-eaa87f03a41d",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "e1c3fd20-a5eb-418d-a8cc-5812ad795c0d",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "d082c98d-ffcd-477b-9649-72e074e720ab",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "86c51488-a82a-49f0-b030-167fe4f86d9c",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "b6b74e34-54e8-46e4-b8c5-5ce1f334cf0c",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "49e29117-67fd-456b-9459-c97ea1f06203",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "6029e3b4-4bd6-4f6d-8797-45d2dc370e46",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "763931ad-b225-4d8a-82cf-ce3944b0ee2e",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "a72bd411-756a-4806-a299-313759f01ecb",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "80171e7b-2bd3-4f1a-a5c9-46313b00a014",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "54deea02-064f-4384-a9ec-1ef1db0f6725",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "6ddf34e0-5676-4f4a-90ea-730aaa32da88",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "ef2bf375-f389-4a5d-a724-1f6aac47ebe4",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "e1bbb262-c917-4b78-bed0-93d8174742f3",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "1ba42d35-fc3c-4f14-b45b-8b2fcf473966",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "f064baa7-cd68-48f3-ade2-06751cf843ea",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "4ead5e9c-89a5-41aa-81ec-d777ae391ec1",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "5bcf1c6b-31a1-4a19-beea-f00303a1dcaf",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "d6a97e19-b54f-4179-abee-356faec4b46a",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "b989ee79-b14c-4305-8537-ea52c26a1b1d",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "92a9be42-aa42-4fd5-aa25-c17b2fbdca7c",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "b06892c5-9db8-4f7d-ad5d-0fb7ce852d86",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "5a655e62-c430-4165-9b4c-b24f275f501b",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "e284fb25-eda0-476c-b3fd-658dcff8ee0d",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "ce201ae0-10ae-4a8b-894b-7d38946acc0b",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "a3a3ae6b-7cfd-480a-8e2d-eff3a3253a87",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "ad7ef1a9-1bcf-4774-aa3a-ed77442b6a30",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "849ef44a-442e-4e3a-a314-15e811e0cf78",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "f2876b7b-f0bc-4c36-a9da-5a39dd53157d",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "429e6d9e-3e0c-4712-a172-8001ec3ee241",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "23f2e938-d32d-4fc6-8c1a-0b93232b88c3",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "34eb78db-ec38-443c-a5bb-19b20cd5a631",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "e0d27060-d8d8-4722-b617-3fa738594cb9",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "88d42459-918b-4067-bb71-1985fe0c3c98",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "d0fd94cf-36b7-4915-9492-bd13e0ae88c9",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "c04d4f00-ac1b-439e-88cf-6c889a28edb1",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "1f6f0f0d-a458-424c-8f64-60c9600b0ddd",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "2fdbbbcc-92ba-4e94-8410-8ea1e51f1ab6",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "368a8c55-f9e2-4deb-af3d-5bb62795d8d6",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "155454f2-081e-4d34-96e5-bc7244365c50",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "979309ce-dba0-4e18-b738-25c6e8663901",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "5535b418-3090-4b2d-b638-a261c966ba7a",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "22e914fb-4478-4bb7-b56a-62180e71de26",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "fd67553e-311f-4eae-806b-d2351a354a5d",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "fff0563b-9824-4b64-958b-ef54f7591482",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "8916395a-a47b-44c5-b641-6cd37e04c604",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "bf6d6706-23c3-46a0-93fa-7cd8bf650eca",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
      "chunk_id": "66b8c247-618e-4506-945c-f4f802f2b4e9",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "e069a502-837f-4384-8aa2-1924aa49946c",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "61e1b309-4ac6-4fbf-97cd-cbcd5e745b03",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "1ca5f076-0c43-4dd6-bef7-c3585d8d208c",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "1814c192-a3fd-48b9-9e6a-cbf083a4ed00",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "a7fed7f5-8737-43e4-b1e8-8d0de0650c36",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "2670bc46-3c8d-4833-9c45-cfe0cd6bbd55",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "491d97ab-a3ff-460c-9a43-e153357793bb",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "e4cb1953-613f-4840-a3c4-9be131b19250",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "957e0d30-43ba-466e-beee-545c59f19f31",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "b3899b65-b812-4e59-b363-e8e2f91d2ab4",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "0ab21ead-0a93-477d-a603-7d3f82102f22",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "5dbb9c75-1c80-4b50-9751-0e36185d96a4",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "c86b4866-55a8-4080-ac4a-35c2e7f286dc",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "5fd38c5e-3c2c-4c8f-a50d-da7bee6d073e",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "6e9d1c7c-e1fc-4324-bd81-41395756e499",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "3dfd290c-12c0-4d43-9a32-3efda480f818",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "aa6f6ea2-bd9b-4a96-94c6-a231b930c62d",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "4c0a28b6-5d5d-4ee5-a107-14db1a0be934",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "6553e17d-aff5-4555-b84b-c9b1a6a4911e",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "0291bf23-5c1e-45c6-a64d-29cbfb45e2d9",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "1c508515-3ab7-4c24-abc6-990745a3fce6",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "e1097856-b35c-4ef3-b2d7-027628f1cf59",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "e5a38459-f613-47d5-b5b0-d8d1d7764dea",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "87402731-1d59-4742-8dbb-a31a4625b0eb",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "a80626bc-466f-4f37-8950-fed4f04cddb2",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "642c4f12-3bb0-4522-9df3-f8c335551c56",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "21034f4c-a121-499b-a3b5-0a70ef3078a4",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "b66b9c7a-4d3e-46c2-b88f-4949437330e3",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "9f38f7ff-1a2e-45bf-b479-b96d2fd0298f",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "29b4fe3f-7ddd-4e1a-9bd8-012ab06c437d",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "346b21d4-8f8b-4ef4-b6bc-3635dd7a2c09",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "2ac3ce18-a8f6-41b1-b02e-610e061e4b0c",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "f3495c80-5abb-4659-9055-3023706cc99f",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "3b375fd5-8004-4e8c-845c-60d0a428bdd4",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "cfa74700-2b72-457c-b125-aaddb87ff350",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "df40fc8c-34ad-41e9-81a8-635699a783d5",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "7dddd06a-0311-4099-9a7f-0c58b8bf36aa",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "07bb6214-2e82-4b89-990d-e16a1843223c",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "89ebec7d-9868-46fb-bcfe-c1473941705d",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "6dce1e8d-7ab5-44d8-8b7e-09f09f38d807",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "b04e05d8-77a7-4e88-9cf9-0a6fda8ef54b",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "871e5efd-15af-412f-baf0-dca3b13fb471",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "feecf0b6-e20a-435a-a587-e7b58840d1d9",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "8ca24151-deaa-49f7-b003-fb5f717ac4f1",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "fd535bb2-2121-44ad-a531-3a6b24a1e9c0",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "659001b3-87fc-4e86-a1ef-dff483d6a914",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "64f095b4-81a9-48d5-9e61-6d3ed365deee",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "a5ba13d1-11b8-4528-9507-aeda7f39acd4",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "bb034f2a-653e-47a1-85e3-09de5fc4d48f",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "6df2e4ac-d30f-47ea-921b-3f9d546b6698",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "7f7ff88b-5ec6-407a-938e-2edaf71b7b03",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "d7af279b-81ce-4459-a077-87465c6b6564",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "01cfeef3-8fc6-4e5a-bc83-71012ff35e00",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "d181e174-aa29-4caa-a413-913ec9639260",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "54a77f4d-dded-4ad3-88c5-a0f5cbfec921",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "f6cd3e29-be8d-4a5f-9afa-e41a08b632ff",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "789db3e6-87fc-466c-b9be-5c4cc8507514",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "45674fcb-000e-4a83-8804-24047ca045d7",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "243350ba-2d2e-4dfd-bc5e-9e60df095607",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "9d759478-59c7-4b06-b593-e59073999ebf",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "8c9a60ad-776a-4d11-8ac5-3c6bcd310c0b",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "ace64ba8-4314-45a5-bbd4-d68ce32bd139",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "08135f54-3ca0-4418-a72f-1b9b9375a8cc",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "6db9cefb-2d8b-4346-af0c-0781e7ece422",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "afa45a7b-1830-4e2b-b7ac-46aec771818c",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "0f7ef173-b7c2-436d-897c-32550c8a2410",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "81b2a61e-1a77-4997-8425-d3e00e797c1c",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "3cf0c966-3c7a-4f62-acd6-21d1a58c009c",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "e8f286d8-11df-4609-b98c-d37f807b1397",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "0bc8f3ba-e722-4dc0-a3f7-330366efbefc",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "b483f2b1-d786-409c-b186-2c2f6a4525c2",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "2c4e6b29-01eb-454a-b8ee-8f14840e5a62",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "14d02e03-1a7b-45f6-a40f-ba904cde0b8b",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "19d23984-e89f-44b6-9e16-da4893c506f7",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "04dae392-df72-4297-ae4b-20c2d2b4373b",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "c67aba03-d5a3-4610-bab5-da2c86f9ea5a",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "65e33b2e-e2ef-4c14-89ec-ee374ebb79d0",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "6f229253-eccc-4385-a13f-1a92a75f0291",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "24be5ae1-8359-48db-9e01-2b0472716411",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "2d3d72e2-6b7a-4ec4-bf33-dfd64c0573bd",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "ec020560-dcd1-4289-9221-5e5fa384d0dc",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "3627d84f-84f8-45af-bd51-5bea938d9db2",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "f711d7fb-9b64-4c50-9cb3-d8b815ae6ace",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "9446f330-3a17-43ea-9431-9462d74c6171",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "521eef6f-16df-413d-9b07-618cbbe2a407",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "87307ca2-3340-4689-8fd2-cae1cae62b13",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "4a23dd74-4d00-4ac5-b6a6-f73eafdfd214",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "852a1f42-9192-4c16-9d62-6c328aa6622c",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "2d6d524d-8a26-46bd-84a7-62ead43eebee",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "fc45960f-231a-49e6-ba29-46dd44a53e0c",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "158dc977-c8dc-46d1-aee6-6bb2a6f4a066",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "76581d94-c5af-4201-b688-1e56300c00e4",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "2baebbb6-dbce-42bd-ba53-e42697e8c856",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "842b879c-b0b5-47a1-ada6-15621628d6ab",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "0fe0dd20-ea2d-476d-8a16-b4d20c6c0a60",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "8dcf11eb-7cea-4d8a-8500-d0b8d004ff11",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "2b27e2b6-c6cb-4e99-ae48-3c62daa27e9e",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "886dbb78-4ed1-4897-b161-a60c337d1a82",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "bb23330d-12ae-4f24-8ce5-7f8e10ea972b",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "5d0250bd-7d87-467f-a747-e1cefafedac7",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "3969d653-f7ea-4858-9423-4188eec9da47",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "e55275d6-f216-4fd2-94b2-33cd699b41d8",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "b59b556b-6f80-43ac-b1ce-e02c9d6ac548",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "94e8d5a4-a980-4a1e-b6be-c32c34a145a3",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "54dd5f97-f919-456c-9e4b-916ccd6f02b0",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "6b228367-b97d-4f95-9666-ed1b9084b58b",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "50a68763-e5f5-4641-9a4c-a24cbed7c809",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "821b16eb-9e44-4e74-bae7-da1f0e519d2d",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "02ab355d-23e8-4af8-9b98-0ef1013f8002",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "9af3f71e-f221-4cec-aac1-dc18d42919c8",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "e07725ad-2966-4139-93d6-a9553cf24ce9",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "f8a2f860-a5c1-4e86-8b6d-8d50112dc0d0",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "63894c56-ab79-4df3-80d1-2dd5021d90bf",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "a9641767-9ea1-4177-994f-315b2cb36e76",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "7c74ce4c-c768-407b-a1b1-d30d28825c54",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "046b6b4f-a2eb-42e7-9fcd-dc16dfd5d4d1",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "0201f210-dc36-4602-9ec7-6755495ea2c0",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "d5db41d4-7d6a-40ec-8d5e-c635c1fcded9",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "2bbdea91-fe2e-4521-aea0-5c5b37f0874f",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "8ccb9f0e-e753-442d-a365-b75954b03c1b",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "11189e5f-baed-4269-9e9e-dba242ebfcc1",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "c94bea30-a220-44b8-9512-ed40327183d8",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "75909372-f6e1-41e7-8801-316eef25928e",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "7c9e8664-98de-44b1-a5a8-3154200f80ba",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "445dd69f-6d08-4c8c-87ba-370dc26f6fd3",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "4ba45d95-d42d-4131-8678-11a7a2c49504",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
      "chunk_id": "13184c2d-06b3-46c6-bd34-522fbee3d272",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "9ace93c9-36ef-4717-b529-85d5f0f6613d",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "b1d33584-a9d6-4371-97fc-76d5785e5203",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "09f65bec-0891-44c2-b6d4-8f869bb22b70",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "1732929c-3344-4d24-a8a9-24f39296eae0",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "0e6c20a6-f149-423a-8173-83dd062ed21c",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "bd4daf99-1d4a-43c2-a9b0-ba6489139918",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "837d9054-d1a5-4569-afed-3bb9c0da5606",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "a98542db-fb26-450d-8261-55f7f99948c9",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "3d2a28ea-0948-47a9-b90d-bc7a67a33a7c",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "87086585-566c-462e-a99a-8783f14f98d6",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "344b96e8-594c-4006-855b-d6974760fe06",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "8b8a2732-900b-46d7-9ad1-59ff1fc9dcb4",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "0be74157-ab53-466e-a54b-92ad5372bcb8",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "6dad73b7-516b-49c4-bb7f-4c2bd20f8a88",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "32f37624-e405-475d-8560-06a1b2ad841a",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "a0415fcd-7b02-4a6c-b204-cb1c6d48eb04",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "01e486f3-8e0d-4e17-a719-af9c6494c6a6",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "766b09e7-6a16-44ac-9799-90b2017b9820",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "8adbaa6b-8423-416e-bac4-3c04ea883726",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "71195880-e1ec-4b38-a042-1610b79b7381",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "3135f188-c67a-4349-88e9-b511bb9e7fe2",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "a87049df-e899-4489-9c37-85dd370b9698",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "68671d15-208c-4ba1-ba6f-8f5e83d12a34",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "9d23567f-286a-430f-88e5-e18bd0f33a93",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "0381b9c2-7ed8-48a0-9a32-9e9477d8f4fd",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "7b0ab8a1-4f32-4a15-9603-ca010e5ee21b",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "a693f1a5-ad21-41ce-9b70-ba4cc6c21216",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "8c591bbe-56a6-4bb9-bdd5-28b8ab450f83",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "6c79a830-27ec-43d0-b2d0-307e3384d00c",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "c51cb6d7-ed1f-41fe-9ce4-2ef8a5ffc4e5",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "25cf7ff4-4c6d-4063-88d4-36b8c7ac9fa8",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "fb0c5603-d443-42d5-b93b-90f21b4da8a2",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "c2ae0b42-b16e-4c3d-936a-41f668d722ba",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "c968579c-7e6c-4c5e-ad08-df4dd0c0d11c",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "aff831ac-e1e5-4d02-afc7-11dd1b19ce2e",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "118f9639-573b-4293-b559-821f45fb0bba",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "6b085b99-0d14-47f9-a863-764fc4d8eb88",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "385eee5b-6802-463c-91be-9231e286d842",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "fc8bb13d-fcc5-4b4f-8d0b-adcce804a086",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "82ce617b-36b6-4d0f-8222-8eaf08604c6f",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "89b3cdbb-12bb-4be3-9b5e-15086e38d3c6",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "fb6e4d91-aa78-4b61-9b39-cb07e766f885",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "9b4413d3-ca44-4cf8-a151-8f687eaee97e",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "26f64b28-e075-4919-85ad-eae95018bfdf",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "6e69a030-3c0e-43c5-b510-803abcfa6082",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "d3369ec3-a804-419b-a122-6965a1228293",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "65a60731-ff79-44de-88a5-a0a9488e5ac4",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "925f0fab-44f8-4221-b591-3d7a3292300c",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "c0021a5b-45f4-4063-be86-1783935dab24",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "fb79f880-415f-4f7f-9005-1f201eb5dc49",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "4f7397cc-d9d6-4034-ae42-457e3a2b6406",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "03c041e1-c707-4a94-b9d8-4a612001feef",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "80ef3e55-fedf-4d95-83a3-7030518152ac",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "932a1439-f94e-4e8d-b4a4-3c3d7c040e98",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "b1d22e1f-9921-406a-bc90-201321136baa",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "180c638c-530c-4390-9a36-741a516b395d",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "a36e3224-6726-4388-b087-f10b390a6cbb",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "9fa89312-b411-4a03-ad21-9b04ce8b160f",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "1e47a52d-82f9-4d53-80e8-1bc169cc36f0",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "f780e177-9533-4ce9-a7bf-c4216052a44c",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "4a24d8df-e273-4907-910a-9ca2ee812b1e",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "20e17317-6a69-420b-96b3-67d6d3061648",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "cafb26a6-7d99-42b3-8743-2e13b5ddfb6a",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "d73c725f-4aa5-4e95-8274-35dc815d469f",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "ce5da5a6-37b0-40fb-92b7-4fe632080d13",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "1cb1f95e-abce-4192-9271-0100baf414d3",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "bb0cabd4-dfc5-4407-a79a-a70b48b21869",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "84bd4464-d317-41a9-8758-80ed7df76062",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "6de9704e-9842-427f-a8d1-8e8c347ea149",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "a3106956-9d75-407d-bbaf-7417158bbe36",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "1b6423ce-06dd-4b94-8fb7-6086c5278aeb",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "bcf5b632-7321-449d-8eb5-314b522d0866",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "05eb711b-ca99-4c6a-8430-9d1d262d9c83",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "203329ff-e86c-477c-82a5-56eb126492a4",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "59f9be85-7a1c-444e-95d8-bb69f03d1d7b",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "4db477ad-a284-4976-8718-5fbd7e0cdd02",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "14a59ac2-e9cf-48af-92d5-9a17227ee8a1",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "e0f1e1fc-3847-474c-8e56-e3f7fac6b75d",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "052b2493-4129-4106-ab31-d0bc5d38526e",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "5f90556e-8418-458e-b860-5ebddfd17bf4",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "815ab048-d792-4fb9-815f-155c2c57bcc0",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "4ba256c4-133e-491a-9729-ef393046a49c",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "c865cf48-926a-4bf4-8c62-1e49efd29dde",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "580e03b7-2ae0-4f75-9df8-455a0c883917",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "ba17f99a-3309-435b-9ebd-14a4c22fa588",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "0bc0886f-3044-4c6e-9f1f-05b206ac2532",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "c2987927-8a9f-4bd9-895d-83d6abf7fe64",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "f02a34e3-3441-4dc3-abbf-a81a9f9520a4",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "12769a41-6a45-4b33-8afe-9662316fa860",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "55a20322-f72c-495a-800a-a0a95f2dc66e",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "4513bc7b-af9e-48c1-8ad6-96d1458d6107",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "0d3ed87c-111b-4bbd-9cb7-828077dffb2b",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "f33c8e3d-5037-4dfa-b83a-b62bde1f9c5c",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "56c26631-14bc-4424-94cb-7cec38af950d",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "b82be4e2-50d5-49c3-ac9f-bd84cdebb417",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "142dd430-d225-4770-9fa2-23aacd0a6d90",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "571a4cce-f418-44d4-9338-2aae24c314d6",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "35e48a4e-7ea5-48e5-9024-b025bcfe0162",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "95652bc4-7eec-4995-8b7f-db3a8f009052",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "6be773ce-a10d-445e-ac8e-022689aafc31",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "339abab7-d639-4dd7-a85d-4a9e24d37a1f",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "8169be3e-be71-490c-bdf8-560c6831d96d",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "89b77316-1852-4392-9506-59f4e893c01b",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "2771e83e-f06a-477e-bc1d-dff7766347a2",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "9bfd9f2f-0d11-4f29-b33c-0ded05f0a941",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "2179899a-d1d4-4e60-9a07-acad2cb9b629",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "40983551-5296-488d-bf6a-1f95aec4e01a",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "632aa44c-c222-4189-b779-063b98b4396a",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "afbae23a-cebb-490d-802d-db68f88954b9",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "8be16c60-98d6-4c8e-b9ea-579552b2ee33",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "a6c8ec77-a41a-4f51-a8c1-efdb05e04728",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "04b867f8-ee05-4903-a40f-bb0ce3fa50d6",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "b9207bce-e560-4578-b02b-f09804ad4e90",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "6f575b62-90b8-436b-b223-73f7100877f5",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "4aa956d0-2a0a-4aa4-b206-ae32f0cca63a",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "a927bfd9-9936-46f8-8adf-083964a9aefd",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "2e9ad02f-6a48-4455-b153-c084202c8396",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "e0e27a4e-2c5a-47fa-841a-a065294786ef",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "ae46dcdd-8cbf-4e43-8a2a-c37539587f2e",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "86cfd478-eb39-4ec0-9cc2-1e86df7df860",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "01578618-adbf-4b57-95ca-4b190b63aef1",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "c2598665-79dd-47d3-8806-084c9ce64f0a",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "4d7f75b6-5c57-4847-b7af-74bb200c86fe",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "bc3ea5fc-2e44-4783-aecc-e600f4f47270",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "ef931a4a-7d49-4af7-b762-28e390dbb51c",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "7f442a4e-d0f1-496c-a6f8-21bf76fda17c",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
      "chunk_id": "0f01acb2-1939-4c4d-a8e2-a5cddf22e40b",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "c1938c37-e756-4a62-bc3f-2a2ee28c39ca",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "558bbac2-2398-42c8-b670-046d9c2ffe93",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "2b0e9947-8aca-4d90-b326-e4b5ff9ec0ac",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "d2912c71-5e55-44d4-8b88-907235a80b09",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "0177e380-3d7b-435b-84d5-a57081c7e644",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "0dbe116a-3010-430a-b495-628ed4145ce0",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "0bd59e63-ed28-4eeb-974b-e07ce68ab1d1",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "50245246-443a-4a7f-bfce-9b26ef57c2aa",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "32fa52cf-5f94-412f-8628-4119eb36a273",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "0792aa5d-c3cf-407d-bb3f-916ff3f9e33b",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "364765ee-c3ba-4752-94d0-98f767d5d754",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "d6b1726d-eff6-4b75-9cda-de4f016c3e36",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "bacc353f-6807-43fc-a50e-c0354e96938a",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "098ee2e0-44e8-4954-8e7f-17e74d227017",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "98301bc3-e6b1-40f4-b50b-d2d7c446c907",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "d31a1ad4-e49f-4b67-ad26-6348d10f8080",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "b18880a3-e983-4159-890e-d1ca6d5658d0",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "29f0beff-381c-46f9-80c1-c1222d497980",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "3106c689-6448-4cf1-9685-8ecf2efe7e47",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "8084724c-0f3c-4c39-9618-e253e2e2ed65",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "92141e8e-4a65-44f1-a990-55083f77c2fa",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "b16d252f-d879-4bcb-94e3-06bd29bbbf7d",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "e8d6bece-04fb-4283-9158-e114d3183a12",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "10593238-0c49-46a4-b690-f99810d812fa",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "aa6a1cea-bb44-4130-94b3-3960fa66371d",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "13361d76-2f27-4980-93ff-1acfcbc8aa5f",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "982c04bb-9b11-41df-bd4f-e4fb70172d9e",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "00a99bba-2c76-40e4-a9ea-71c9f78a4f42",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "c899ec9f-25db-4577-90a4-c1ca7bbbca48",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "dcd59272-391d-4e8a-9676-1953b1abf484",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "d21edd95-41e8-4dc9-a4c9-b0a14404e0e0",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "92e63e3a-eef4-432a-b066-a7f8027c4352",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "a9a81c34-381b-4c62-ba27-c7d4980a64a3",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "ce356d61-7fcd-4d93-a12d-33b5e4ebff7d",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "f4af33d8-fc36-47e3-986b-f6a976e21849",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "e09d76e8-de4b-49d3-8306-a429351e7099",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "f68cfacd-6955-48f8-8830-c0bb371a2864",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "01b8024a-ace9-4648-83cb-24bc4361f1e5",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "5943bfaa-4318-4fdb-a285-273f2cf1b343",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "c60c03e2-2ce8-4010-b84a-f674d2f173ca",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "20ed18e7-d4aa-4873-a367-85c30604d02c",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "9f376cf4-dbc5-4d00-afc5-e30456ef7933",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "5c3352e0-72fa-45cb-a177-8a171e83134e",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "97900ba5-644a-4e23-ae8a-aedd53625315",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "c9254cf1-6232-424e-93df-a92384280f2b",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "548ad343-d424-46bb-98ad-4a44af0f708a",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "b65da744-3dc4-4e93-b2f7-11674fdcae14",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "4f3eb0a9-62dd-430f-8e4b-1764a034e3ac",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "1c37d790-812a-4974-8e61-eb8bdae7f007",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "6cfb7e67-a5ff-4925-8ec0-376d4c64d72f",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "421b3069-6bb0-4ef9-8f6f-f6a872cdb9cc",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "bd533dca-9d20-4507-8c98-d91718c8bec1",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "6dabcd1f-7c33-4434-a3b5-cae6f074531d",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "2b7e4840-9402-41fd-874a-479141942b62",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "1f294118-df6d-4f92-a573-aeaeebedc2c2",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "53bc2760-f4b4-440a-acc8-57d250ee13b4",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "35242d29-8e5c-4e44-874e-00d735031e05",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "c8d807f2-75f7-439c-b96c-3c954151458e",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "2acc78eb-493b-4cd4-a92d-5199bd813388",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "fd5a7f80-f670-4094-b8a2-55562f3643d4",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "2e227768-b62c-4f82-a558-906172e524bc",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "f3329cee-418a-4487-bd5c-1531aac72647",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "bc16aef9-0c05-4293-be3c-b32e4c53c2cd",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "f4140ab7-e0aa-4be3-84d8-cd1d82ea57df",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "5114a7f0-08bb-4aa4-8211-8c80e62e5b50",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "349ef8ae-a105-4914-b68d-0d298888755b",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "4f70dd12-2463-46f6-bda5-d9a2be3d4737",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "216827e1-59a1-444f-a636-be64991ec61d",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "e6250634-c6ba-4e59-b2dc-094ef5db62d9",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "dcf3f20d-92dc-4d8a-ac6f-9f04e5423d4c",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "df412481-ce0e-41f0-8afa-808db3a2968c",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "bee8fc9a-4672-44df-9101-a29141d04156",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "1db1d1ff-a08d-459a-8314-8bee2ff09db0",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "db833713-4c45-4d46-a998-925ca9c4dd4a",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "283654ff-b661-4b33-acd1-4a474ce1b955",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "1189c4d9-336a-4862-ad19-746923002fe7",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "5117de93-3201-4ad4-9c56-318e9b07ba40",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "fc9a4860-f4ea-42d0-a3ec-65c9c1797716",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "6aca809c-8308-4285-9975-ff054318a2fb",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "f946dffc-4a73-4fcf-aa25-342070bac92f",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "5f9c4bfe-511e-45ad-9147-3b9d6fc68e31",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "4653c952-5137-4597-98d2-13d4c57ac139",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "f2004c05-23c9-4f51-9202-60f67e0da204",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "d11b4472-47f8-4cf3-a32e-ea85e4eeaf04",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "8360dbb9-0243-459f-b59b-2f54f80008f1",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "452bbae6-3823-4584-8b2c-1df0e6e141d3",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "459919d1-69e6-4b86-9585-96550dfb6ba8",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "28ace4e6-0211-4b88-9da2-723dd0c0c7e3",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "ada20eb4-95e3-4dea-918a-42d2dfd6e6e3",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "30aefdb4-8710-4165-b8be-7b57fd3cfb32",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "c0347da6-c141-4d30-a524-331c66d14ebf",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "b7c9b9c2-0045-45e6-9bc5-9497a7740c8a",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "0b80d629-b633-4e78-a37e-c7bbdbc42bb9",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "21574655-4071-4058-8144-cb20a606a146",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "413f6d29-4858-4748-9f56-3cc2c9734ff9",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "0a7abe71-0095-4c7a-85eb-b46a5d1098ef",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "0aa0c4e8-b6cb-40ce-aeaf-c814643e17ac",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "b5a78041-9f43-4c1e-a689-fbd3b503a948",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "a930e363-7271-4fc7-8092-457a74321c3e",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "92a29789-466b-43c9-901c-6c15f963383e",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "52920745-a836-4763-a50b-4f2b0ed79b2a",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "e21170c4-84d5-45ce-b081-289375a104eb",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "c6a22d48-8e01-4af9-b9bf-99e52eb34c43",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "283fc465-f726-4a9b-84f5-e17a59263d9c",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "3259b35d-a862-4034-9c3d-c20930a2c8fa",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "e3d51eb2-8593-4bec-b98f-5319d88c9952",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "2cfdbf00-e1ff-40b7-9aad-03e1483d0c8e",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "0438f9b9-dcfe-4646-8532-4ee11e087df1",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "bc8af83e-c8b7-4aa4-b7c5-5979944eeeae",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "754e33ed-7590-4fa5-891b-e410e3a91035",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "ec45fdf3-680d-4feb-9ead-cc96cc9d4cbf",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "10db0ede-f2af-4bbb-9880-60d5ca6c422a",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "c522f568-4e74-43d6-b3f3-08857e6e71e0",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "04fa75c6-0733-468e-b3af-20c52184da43",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "9c520b32-9cf0-4e95-96fe-456a5089d581",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "b0091e08-78d1-4716-8119-de4afc62e5fb",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "12454fff-3343-4fba-a9d4-6ce6b91a1071",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "dac075ab-a323-447d-bb6c-753cbb43c3c8",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "a0cf49f3-dc40-401a-abbf-ef5e2c68ee41",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "8fa145b4-090d-41f2-91b3-f4bdee45695d",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "bc5fc24a-ec7d-453d-adde-c65fcaa9ab1a",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "bdd10cc7-b892-4502-b4c8-1e02433f804e",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "895c43b0-0696-47d9-af09-1dcc3e18b0e0",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "f6aeb43a-321d-4646-be8a-3d8f10dbffcc",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "99227344-c320-429e-81bd-b1c27d98d2ed",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "ed45b506-6b7f-44a1-b371-e893e6e6e977",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
      "chunk_id": "d08d1770-3620-4ea7-b676-741bec42cbbb",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "c8e23b99-90d6-4ed5-94d0-41e212bba969",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "ca0ed032-6c77-4a94-8426-0879d3b0cc5a",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "ec1daf8a-7fc0-4d5f-880f-e702c6246de8",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "2e47c81e-b9b9-450d-88cf-c686358fca31",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "c328953d-b2ca-406f-a162-743d0e003840",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "d1f3bac9-9a4a-4c21-bbc1-c375c304f629",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "c42b4f95-a843-4167-bde7-1778d7bcfd7c",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "2ea4aa71-6ae4-4182-88da-427faf8a754e",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "4e7e47c3-b4f0-4d37-b68e-950e53b0e672",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "e07a0a79-3700-4995-ae32-f0045a4b688a",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "2c41d102-c92f-46a2-8c9b-6269277517c3",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "4f7e3910-f1d7-4374-9f31-00c21bd7a9b9",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "3623a8e8-a8d5-425c-9c08-9851ac3beefd",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "b574eda7-4465-4cb2-9959-b9e31f85cf82",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "371847cf-6e3e-4e4b-bab4-50a49fe281bc",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "e1bb9e33-10ca-4880-9df8-b17ecd3d818a",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "fb22e6d1-e2f2-4d08-92ea-aff2b4e5ad50",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "0725485a-a9c9-4636-944e-ff1802f7269a",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "b86a8c79-4f4c-4dc9-b9f7-580bbc5ae39e",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "4dbe2a0b-8571-44d3-84d7-74d72d948162",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "5308f6a8-32d5-4f85-887c-27aa6ce7d8e0",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "358b0047-b84b-4c49-b639-38d70aa77cee",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "e46160dd-a30d-427c-af95-35db559efdeb",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "055adbe3-2340-4c82-8330-81731b5fde3b",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "039d1ddf-4680-4d00-9744-93e37cbad9e6",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "ad59d07d-4ce3-4101-a4bf-f85510515fe3",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "5d21be43-c55a-4370-b377-70c43b28c146",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "eaef6132-2b87-48f8-9e68-028f9fcaaf4a",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "d575a150-d5e6-423f-b40c-81b1721778bd",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "b24c7bb8-de36-452e-a058-b2158e672622",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "62a0538d-c783-41b2-b948-294ad0cd1a35",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "73537d14-198c-41ad-b968-abf4ea2ae4b3",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "aab5607c-7332-436f-876f-860bd5e911c2",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "e0b781a5-0f67-4868-9363-9b5f7f58dcfe",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "30720fdf-7f6f-4b2f-81ea-b0e4f2c56511",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "bcaf1563-2149-47c2-8fe9-bc5440e687a4",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "b3111cf8-d2db-497b-aba5-3811608042cf",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "8f7d7a46-3556-4a37-b0cf-cd438bcca99c",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "cc3c0844-561a-4f64-89c4-6b3b73a22ca6",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "e21d7a18-d196-4384-88f4-52f4501a5db6",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "4cf2a565-7ef0-4194-bf06-99486fcb3948",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "7445eff8-7444-46f8-ba79-1d2a000951b3",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "8b44d559-8fad-423f-84cb-be0958de6723",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "02eca839-eab0-447b-a81a-8fa8f8ba0e14",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "2a196e8f-fb42-4d75-89b9-82c890d79ebd",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "eaf8b6ea-9c0d-47a5-b47c-bf1b1525c82d",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "5eb096ae-6593-4817-9628-c8e16649925e",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "ba49122e-4832-4c10-ad9a-377374b10cb8",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "24c9272f-ed18-49d6-9640-2c73318486cb",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "5340a477-c0ae-4af4-95ac-4004ab2b55e0",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "02eeacd8-55dd-4f44-a467-b286fa9d8bb7",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "faa8ca72-6d28-447f-ba46-4e7d622a7e79",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "13cd4fbe-bb45-4e64-86ff-0ce757f2ac90",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "d97a2ebb-20ac-4fce-91e5-71699a5c7ffd",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "d3670c66-d1ac-48dd-9e4b-8397faa221ef",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "0ea3291a-937e-4595-9265-0e6baeceb7b0",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "4493fdfd-f73f-4269-90b7-94f06a4ceb6f",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "af98e230-982f-4ded-8b08-e94768e65b8e",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "ceb7e3e8-e6fe-4bc1-8c89-9ccd52fb6839",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "e69d4702-2103-492e-9e26-186d838f5263",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "1fbb9a9b-b78e-4009-bf3e-aeaeb75d6b02",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "24002f55-4239-47b9-bf6e-84b16d3ae383",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "ad0ebadd-b476-49b2-a79c-81fa75f57476",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "2fb8187b-8402-48c6-9e1a-d0d5b4dad5eb",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "591e0f0b-1522-421e-b29a-f5a5ac6909ae",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "f4c6681c-fa41-4198-ba94-8b03606f2e84",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "efd686e1-5ea4-4e48-a226-634bbc5a8f2f",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "c54183ce-f686-4c0d-94a2-4095bca94e2f",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "31aaadeb-6b99-4b7f-b7dd-8bf911007e8b",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "2550bfa3-2de1-4405-8d71-73d2b0a60bb8",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "42e55e5d-ae53-4a7d-a405-508b333c38c8",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "2f61bcd2-d45c-451b-87ed-9ca8dc880615",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "591a2fc8-140c-4c0d-b6b1-9fe9a2475b9d",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "d7020c57-b3a6-4fc0-8b01-c51f38c9373e",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "3eb51723-ac1c-4bf3-ad4e-7380758914c6",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "7549687e-783d-4652-80a4-f8c5a3c23643",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "34838985-6670-44fa-b557-2cba275817ca",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "6a07752e-9056-413d-81b2-3cf24c208e72",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "9292ac30-deae-4dd8-907a-831ef0c0adf3",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "77ae867b-6e24-439a-b0c8-46633dcd3c4e",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "cb889146-1eaa-4e9d-8b23-f073e6394839",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "2b4d7608-ffbd-43fd-bccc-c8a30874c0b4",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "b31fb359-c059-43bb-8524-00fbb2257c30",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "aaffda69-03e9-4cb0-bcf3-4eacc1b4c30b",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "93a57643-b380-48aa-ad08-bbf9451befc5",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "4fc71e6c-9a6d-4791-935f-d4f5fed13fd7",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "3324823b-fecd-4dc4-9307-68e32a759c8a",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "59c55e1e-dd80-47f9-9179-ce73fd61b01f",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "bd1be88e-2289-4146-86b3-a73555989d2c",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "e4a7b042-b90c-43c3-9b6b-2b2b1837311f",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "11fd2a41-5a77-4886-8102-e43d8cabaaae",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "c478090f-3d7e-466a-b822-3801807b87a3",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "6f434643-8362-4a8c-99f5-9a9be11963ef",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "0924ace3-3a8f-4e17-8f63-d478800910fa",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "f93550f1-4538-4097-80d4-22188486fe71",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "c9672a40-79da-4ea0-81c5-f04dd12b9328",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "50d88be4-f7f3-4c71-820c-dc203091a320",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "b58e19b3-7775-4ef0-a479-2149116d6d14",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "a52a3a7a-8bfb-452e-96e0-21896089ba1d",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "09911a9a-8454-4880-bd84-69adb94365ba",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "d6eae889-afe8-47b5-94c3-05f2b6cc6ca8",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "529c8bc2-5b22-464c-89a3-90de20dab6be",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "6725f0bb-55a8-47a1-8e10-d651d1c7af79",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "a8ba251e-3506-4b37-89ed-e34bf4b68f6b",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "421c3853-a6a5-432c-a5df-5e3e2c3f9cee",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "158504e5-f801-4a56-a5ce-dd47d4df1d0a",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "82c3d880-bd83-46de-ba47-dd4e443079d0",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "e2aa534b-b1f3-4d29-a082-d37539f29f64",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "f70bda54-d420-4f50-a397-1981c3c44d56",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "9c1c2563-e025-4639-9d92-15eb8068730e",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "aaf19a85-47fe-4ab6-9f14-e8d4c95a3fb9",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "b65ff250-6c64-4998-a4ee-1fd6a624efa2",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "1fe91919-8b4d-444a-8497-0fe12060b92f",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "ae8fcce2-03a1-48cd-bd56-f65e2b175c10",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "01cbb93e-36d9-4dcb-8072-790fa54ca1c9",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "6dc32bcc-7d0f-4c44-98e1-0d92da0a37cd",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "f331d93c-c116-4b6a-b577-3ada5f27b672",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "771c16a5-f58a-4589-9e41-83a696bbeaa8",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "9c510931-237b-46ce-b2e1-9896681ad8c9",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "0c4795ce-aa10-45fb-8cf2-93f103c3d784",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "25b8fa4c-28e0-486c-968a-91e95ca60ccf",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "3cc7bd7a-2cc7-44d1-bf45-ddf1c9651727",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "d4738988-d0fb-42ac-bd90-83a4b5673184",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "3286d430-e29c-4fbc-9087-de13d85ddebf",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "cedafa67-1f77-4310-9da2-9db44e0576dd",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "ebb3b4eb-0290-4fd2-87ec-5f5578d6c31a",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
      "chunk_id": "19c518f8-b012-44c8-8cf4-9256a8e99b18",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "8b782bc9-beb0-41f0-9a6c-c1f3690f4166",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "e66d484d-e3a1-4daf-8cf5-4f9127921c08",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "26d130d7-cdbf-49bc-bbe7-2e4883b12c91",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "2df7e264-6a36-471c-bd8c-6452f134c459",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "8f704f83-130b-41f9-92b8-9e0a96a9d49b",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "82eddbda-5687-4092-bdf0-5741562eaa7b",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "379f42af-78eb-4920-bab2-54dc4612f0ff",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "15b46d8f-ec52-4577-be38-38fe07f85e04",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "15dcd9d0-fc82-46c5-a2bb-31f6e6e20140",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "96575f82-02bc-4d8e-accb-316225a566cb",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "0d8c41ce-e7f4-4c08-a438-4df645394839",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "205110b3-7f54-47d3-ba92-dc0a9710159d",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "aa42d2c0-a3bf-4185-bcb7-c50e674ce2ef",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "750b720c-fea6-4967-ba9c-b539f4896848",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "08839c08-2c1b-41cc-bda1-e071b25bea0d",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "6ec10ac9-4038-4ebb-821e-0d73c7951f8d",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "e70df12d-92bf-4c41-ba96-4d89fdb77226",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "fd0b0037-4e87-4352-8c6c-4d46dba86c58",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "f3fe9214-53bf-4e2c-82ee-af5ad9a8dfd6",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "0ea79764-cea9-43ff-b2b5-be5e548e291f",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "97008036-c442-4679-a848-8d956f5ca60b",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "0049705a-eacf-4462-9d50-ba984ded9cfb",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "81579556-d3ff-47fe-ae23-0b7745570a23",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "7c102bfe-b877-4ef5-8632-385165800ebc",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "b87771ef-2503-4cab-aaf2-ff5df4e27b85",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "8593c75a-3093-4fb3-9e63-061777b5faf3",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "c9297bf4-7807-4eeb-ac12-18f41652ad67",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "dc777e77-b715-48fa-b6bf-828ed285fd33",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "49fbc2c1-aee5-4a4e-a034-2aada40a5a9c",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "9988ab6d-d7a3-4f97-8f4a-221c9720c885",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "749665e4-99d5-4615-9643-a38afc522d3d",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "f5ccbe8e-9718-4129-8deb-5dbce9c6d1ce",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "4f9e0dc3-8786-4b82-9f3c-833d4d11df6f",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "f2ffd08a-51d9-41f5-a758-cb601a383f81",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "4380450b-f93a-45d8-adc7-10c183ff5592",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "34295a3c-21eb-4eb3-bc77-e225ed42538a",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "736fcc1c-e092-4365-8567-49fa5df6c702",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "99cde96f-6940-4c3d-b59a-4285187d5d45",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "d89e8716-0a30-4f10-a8ab-a3daee2ec2b1",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "c82e00f6-c911-4a1e-819c-1c7c7aa20b7a",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "a4ca1f52-8161-4348-855a-67635abbadc8",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "06721ce0-f64c-40cb-91b4-1af019694f7e",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "a201e725-729d-4a81-aef5-486659695c67",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "1f5fb2df-b7ac-447b-98a6-823af609f6f0",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "9a3f070f-6529-46ba-9b5a-4245705be09e",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "b6010c54-cc7b-48e7-89ba-060476d7d9cb",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "f5a40f5e-b2f9-4a8f-8f09-eaaed44fee0c",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "135b89da-8f45-4748-9c7b-bf854c33fcda",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "782c985d-8449-4901-845d-805e992a88b5",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "8b4f57e2-f691-4a77-b370-10cb87b59c70",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "a8fc5ba6-4240-4a87-95c2-ff6ccf0a0129",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "115dcd0b-7271-4b65-b2c9-79e9d53bf49b",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "d7f3b21a-8035-4da9-ab24-d55b7149b2ce",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "6b60a604-a560-4824-a688-8fa0a69c0622",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "ad971795-c030-4cb0-93a8-032b35fc52d1",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "3ec69c65-02e0-4671-b935-31b0d16b8ed0",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "2f215ab4-dbb7-4aa2-bf25-56fe21306397",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "e743c633-3204-4d53-8527-6cd278f85a2e",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "187de084-e11a-4926-af2f-f653a9a7854c",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "8887fc37-f585-47ce-b0ec-54a7f41ef68a",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "2d432ab1-fe4b-4ec2-b88b-ffc3e946b4ac",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "2c8002e3-f1ab-4b07-b38a-bcdbad3a04ae",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "d3f1b22e-2b27-4d1e-b1b4-99e393f00a1f",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "d058946d-c6a2-4db5-b6c6-46c457e5671b",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "51882bfe-12cf-482b-83bd-d954416cf3be",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "8bd8aa77-0cbd-44ed-9488-5b81be136403",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "c8966d6c-216d-43c1-b5c9-159a026a719a",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "61943e66-6d25-4c16-a419-99dd76940ef4",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "9113cc7c-e407-42cf-8447-dde604f3fffb",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "d0794ece-5b4b-4f9c-807e-7f9f9d9cb718",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "515b2985-7e2e-4baf-a866-9b2bc09de122",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "587bf0af-f78f-480c-a564-7d09a68a5359",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "4af97c63-8dfe-4076-8cd4-4687249e3c3f",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "56901a57-28ec-47e3-b0ae-c46b9ab574df",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "d330997a-c164-41a9-9f22-c1a8c09aabac",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "c9c19c35-2b72-4c4c-82ff-3dc5711573ca",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "dfb415e3-761a-4ad1-ac60-07312436aa2a",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "03c5ebed-4bf2-4e7e-873e-a218c28f0847",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "f0e44104-4426-485d-9977-c43bf467d9e7",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "169dfa5f-7d22-4480-9b47-c6840c31bd84",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "634d56f0-4f46-4306-b602-7f09c7733a74",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "07562b6d-8f75-4221-a58f-f2c35192da3b",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "accce6aa-68d7-4ccf-a53b-008350e5d9f9",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "e5442267-ea92-4461-98fc-cb5d8c45fede",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "57d3fe74-3474-4d74-8b55-5ec312d82e00",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "d71da5d3-11ca-4d06-b99d-ba8b5c0da85f",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "e2aebd95-7f41-4575-9a0d-19d0f518e3b8",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "56c39015-3e0b-49e4-b220-51028bb1d05f",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "e39bd56e-bcab-49f0-8104-0eb4c7054ea0",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "938520a7-5618-4a56-8dc0-25173fd836a8",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "befd14f3-5139-4af9-920e-ee2083b1688a",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "a2f766c6-175f-4ea2-b81c-21a773c299ca",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "53dcac3b-f1e5-4c17-b9ae-52176b7931d2",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "b7983577-cd94-425b-b593-f05b51f21c9b",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "8f46c595-7863-4630-9752-796e8c642b50",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "742a742d-e524-4e91-9c1d-6bd1e0e0d355",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "bd088ae1-de68-4254-9d82-4a11d8c06cb4",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "99a1d770-b57e-4ea1-98cc-0d0b35834201",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "ea748c8e-edb1-46a8-b51f-6e32b8385fe0",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "9e5b8220-57ac-4aec-bc24-80ce3d392860",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "898a419a-da12-4797-803e-6e7d5a348b61",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "afb2efc5-4b28-4b27-a096-a52fbfe460f5",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "d97c2c3b-8abe-49ae-870f-b90e0ccaf16d",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "226086bc-7f4c-4f11-991d-8b060762812a",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "a3000d3d-8676-4348-abff-ca4a0b900f14",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "5670b89c-ab1f-419d-a8e6-0cb0361cf8f4",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "047f6d7b-db64-4a6c-89a9-69e3af3c855f",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "df2b0805-f891-4b7f-95f5-1fd06b5f15df",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "944a8554-afb4-4c31-a276-4a1a015d798d",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "28a0834d-308b-43c2-ab26-bbd9563d8c39",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "7757b821-f325-4526-bb48-007be7936e90",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "248cf5df-9094-40d3-a508-1eb37f47b0f9",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "dae1a1fc-cd8a-42f0-b2db-6c39ac032971",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "05c38c71-a2a1-4385-9c66-71e041fb9827",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "2145b33f-7ec3-41a0-be50-aa58bb6e3943",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "db85f1c3-dd6f-4dec-9dea-843b2302da38",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "f18bc443-79fd-46f1-8e56-77f8ff22339d",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "9a8cba93-30c2-4f69-8c6a-c2f1c6fe047e",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "4f511655-109f-4084-8cbb-0bf2745b2207",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "68d4e5ba-5820-41fc-9fce-fbb212a6854c",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "f02e2614-d834-400b-9aec-e7d7dcb9b056",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "3e56c190-257c-421f-8fdd-87693253ad40",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "08e82d4f-478e-417a-adee-945ce08f2a62",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "0aeb1754-0be4-4aa0-b2a1-b77a37f0400d",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "573d0b4f-1b82-4249-a830-63ae641a65f6",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "bb9adcc9-7a12-454a-98d4-3e5bc651817d",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/select",
      "chunk_id": "263375d0-7590-49ad-9d71-077abdbdd748",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "9cafbd26-981a-4b0b-a759-f20ebc556d83",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "07c57131-eb39-4811-9b2b-fa9725232f6d",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "3687a59d-a68a-4ca6-85f5-44a71459999c",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "c84f9f53-4163-4394-89f3-e8e9286dff0d",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "6d22996a-ab80-4532-92ea-c1274f589b4a",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "7a9f86ad-5f9a-4b46-9536-8e748e1a15c3",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "0d7ef4d7-3863-45e3-968d-3cd19ffee56b",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "54dfa716-8239-41cc-9985-15607dde3e9c",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "efadae16-25ab-43b8-b796-92295f4b0922",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "46a82a2a-6420-4c35-add4-ab7028b69619",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "06801fa3-aabf-45e9-a7de-9f8fd4d8f7ac",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "bf8c9cf2-1143-4d84-ab1d-7da1e15e4936",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "9669267c-0359-4594-8da3-96cddb1f4a2d",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "841577f2-8fed-44a4-8f2d-9c522026ab7c",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "da857337-0666-45a9-96e0-a995701dee0f",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "2d8d1154-f0a1-41fb-b092-ed88b5862395",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "b0f23ab6-a5f7-4aa5-972f-059163ed45ad",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "91229f19-8b53-432f-b06e-c6dff2bbd1f5",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "eb73a9b5-3c4d-47ca-b362-b8438c86d49f",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "438b866e-1d07-4f78-9280-3ff2121f032d",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "cc45f076-718a-4363-9284-024f22826af0",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "1f4c9537-617d-4bf6-a6e6-9eea6cd6b9b9",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "ca863ed4-ab8e-434b-905f-7752fd171413",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "5157f31b-94e1-4d21-8c58-a8530bf3f4bb",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "8b1c53c0-e36a-43cf-9a70-c9ec1263e749",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "f32077dc-6896-4629-93a4-f43bfd39923e",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "3b773178-45d7-4733-b364-24f9af373a02",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "9187d601-50a8-4677-b89d-724c28f6981c",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "bf0ec32b-b61c-4bc8-859f-b5de62ce4ac1",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "bbf2beca-3699-410f-8be6-55f5b2f34717",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "b3122b06-54a4-4de6-b6a5-e52a29f48625",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "802c9e37-e28c-4db3-adaa-bdd44ac2d481",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "a614c467-cb39-4ef1-af26-f3ebb83325a5",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "3698edc6-9e52-4cff-a74a-f59b82747725",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "74a93ddf-d64e-4400-8362-1163d0cd4c30",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "6a2038d2-b936-42ee-96f1-6c6ea668b258",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "1db927e5-7ac6-4563-8172-807a2d892294",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "4e773a9b-7058-49e3-82c9-abdc0e9fc230",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "95a0b913-d4e3-4402-8758-28e68e7df048",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "ecdca5cd-f477-43c0-bbfa-af6f065d7d54",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "499ccc57-fc7a-4395-93c9-9c80b1c5c906",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "9ede12c1-9fd5-4d77-a7fb-994002afbc29",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "0150650d-fbef-4293-a499-4d5146fddde2",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "af527b14-c159-468e-9116-4c67a778ff74",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "7e3bd058-842d-48aa-b7e2-7bf05a1d93ec",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "8f1b2173-0ab2-476d-8829-466611925847",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "12dd5744-4ee1-4913-85cc-a7ec24f6bf04",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "58a35941-ff81-4e97-b8b2-82220dc2a65f",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "4e67a8d5-cffb-4cab-bf15-28aebc0148c8",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "d6173232-c0a0-49e0-852a-360a29886c2c",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "aeb14e87-caff-4936-aeb2-7e9059b628a6",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "e8094ecd-7e89-4aa7-9505-b669c4f4e8c5",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "562b2373-f206-43b3-a7f2-a4eae430ac91",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "4bf4cfe5-5dd3-489d-be81-295daa18381f",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "10d5cc19-57e5-438f-b45e-0b7351d0f48b",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "82aa8ea9-6146-4739-aaa5-c82787b86cf8",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "d7e8243d-5824-4491-ab3f-e35c399ae1ff",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "2832112b-13cf-45a3-a1fd-5a3bfe9659cf",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "c7e4b2c9-a167-43bc-8881-dff7c22b9958",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "d0f1f394-7320-47bf-bfe2-c48788aab297",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "96da0f7a-f6b1-4070-91e6-7a6642cc8887",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "6c5fe297-1d56-4469-8f3e-85750018eb4d",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "38770e88-5e16-41ca-a7c7-b97f7a645753",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "7a26f296-528b-4fd0-b6d0-cf3d1ff3c971",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "7b475440-6474-49b1-88f3-60ec871bde0c",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "90e06733-aeb9-487e-8e4a-7639b6616bf6",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "546f39dd-fe29-4b16-82cc-0bd0f3457b5e",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "30d44597-a6a2-4584-9e03-4613364c2f6d",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "1230ffce-f071-46a5-8279-e613b84aabad",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "0c6a2623-40dd-4ec1-8455-707a17a8c523",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "96973f83-ea70-4a52-a1f9-1e3123c179b8",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "9533345a-7b9c-40f9-9956-115ab0d4deba",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "c5925348-b672-47f7-afc0-e0b878fff71f",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "49c1249d-e5f0-4543-8476-e60cdacc60b5",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "a0457bae-cd90-4b47-a0bb-6a5ed722899e",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "3359f403-18fc-43ff-b124-358befb7de22",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "e994d300-90c5-4043-96e4-cf4be2ef74ba",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "3f3bc8a2-616d-457e-b3e7-b5d9fa540976",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "914d0291-d5f5-4966-abcb-eca6d0457396",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "02dd5832-3fc3-4be4-bc85-8f8598699463",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "7e143c87-23e4-4f09-b461-cbcd0568a1f6",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "e29460ed-c640-4156-a12e-2859339efa71",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "85db6587-e31f-49a9-ae98-2bd3a394994c",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "5f7df953-88f4-4a1a-8ec8-6d48f8c2757f",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "63dd86da-dd1e-406f-94ff-ef07867d5095",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "a70b7a6d-1865-4349-b1a6-b59e8bcacae8",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "6bf62ff3-ba7e-4c0d-b9da-d315d21e561d",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "09ed3b40-399a-439b-8e64-8a4ab7a4712a",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "bb1495ed-7322-49ac-83b2-6d2ccbab3768",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "93fae352-a7b6-47fb-a348-5fbd01b940ac",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "847a3350-0882-4991-bf41-3fb902833299",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "ccbaf0be-3e27-49be-85be-f2c38c92fcd5",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "95bb7a3c-4f79-428e-9ff2-4e79bb3f0752",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "50bb1fca-228c-4817-8b24-1b0cd90df709",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "162474bd-6d8a-4776-abd0-f887142119e9",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "17515aa4-d795-4c0d-82a5-fce52b789ddd",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "7386ecc8-57a3-48c6-ba13-551da830ad22",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "991d9827-b4a5-4b13-bddd-4be501de8b2e",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "b03ad9d7-0023-4172-9672-6519cef516f7",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "b6872de1-fa85-4344-82f5-bdd99bbdc64d",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "caf566a4-3ad1-4af0-8a1a-c3d32fa7bd5c",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "0d789bfd-c6ff-4b7e-93c8-399c32ff61f1",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "acc9db8f-b260-4f59-ba7c-162cefe65811",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "5eea8c59-e86e-4535-a2ad-affe3c909580",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "cb06dfb2-b6c8-4eec-a6e5-39fccfe5e334",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "74f885e4-5d1b-45eb-92c6-70e0cbd6d86f",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "d4ef361e-06b6-4ed4-97b8-4e05f3eab9ca",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "7eeb6bf4-2043-4a8d-ac08-e53b9c1ea71a",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "f3eabf19-e227-4d50-9ff7-315da7be8c54",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "521cecc5-ca46-4b4f-b9f0-a8da77cf4634",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "25d4c503-d445-4aa6-a3cc-e67ecf75a059",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "f367d0ca-3636-4fac-a47b-b67bbd49b1a0",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "6754b71c-8944-48f2-a7db-2ed1fab56d67",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "b785756a-c6a9-4b32-ba98-c852081e8d31",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "7b314684-a934-4561-bb71-5b9966a402c6",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "2c0b1304-571e-422d-b666-1986b85b0fa8",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "4ab7694f-d8b8-4028-a244-ae311f0c1a55",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "67d49723-6fed-48e4-b63d-2dc3219affab",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "eaf56e86-dcb5-4866-b4f0-350fe6178906",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "7b459087-71d5-410f-9a04-c56659a7a5ef",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "58895c35-e8a1-44bd-b6b2-8e5948188704",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "32ccaabf-0509-4e85-bbf5-ceb2623445dd",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "afdefb3b-e679-4513-8bdc-fd353edb1aef",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "c97645f6-5a45-42c9-b31c-fbe1e5bed8c4",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "df165792-941a-453e-bbe3-434c02862a93",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "e138f2e9-9236-4225-9ab0-4dc10558c644",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/insert",
      "chunk_id": "98abb477-3e99-48ec-a04d-1082fb7b1581",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "fa48821c-8968-4dfb-91f0-cb6f465a2ce7",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "e4273a10-bd8b-4972-86c3-20b868742b4b",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "85708f14-d18a-43b9-af22-608c87d3187a",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "b6135348-d817-4c05-b998-e82535965663",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "f4957f88-33db-4c4e-8cbb-858e2e8dbfcb",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "b3a15df9-f6fb-4672-8590-2898e5a43c2b",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "62e31361-fd4c-4fcb-a820-ad02e0ee172c",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "92edeccd-b3e0-4b9f-9f57-9f0aa97fdcce",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "94d8d51d-df26-468e-97de-74bd8af4b058",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "32d6841a-c257-4119-b3ce-4a2a9aa9f12f",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "865850de-505d-4e6c-84f5-4b30a8d969c1",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "7edd4d5c-b4be-412c-9a1d-a32d92c510c2",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "91e99a4c-f1b5-476d-9ebd-47842bd0cc15",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "de88d3c0-aae1-4ac8-99f6-af5b06a89fca",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "c1a2ca17-1b3b-4f67-80b6-973d778411d6",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "04b77800-9ff1-4590-830b-7a38f0a814fd",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "747e0660-bbc3-4f6a-bd7c-276d91c038d4",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "2dea1b74-1048-4bd6-954f-5e3e58d6b371",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "36fcc72d-eb22-4ffb-a7c1-d42226166825",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "c1a2a316-e6d7-495f-89f4-965f367db112",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "28456ead-540b-473d-93c6-fb2e1ff87746",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "7e92a57c-c78d-45ce-9cfc-71c3c23d419e",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "9d27ab20-27c3-4b6e-96d2-1b40d0f0033c",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "6897d985-4e55-4323-955c-2c20a56c6e55",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "0d090e70-1bc5-4d17-8027-9e845906fb76",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "69429a4a-c31f-488f-89b3-ce17db6b1679",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "7c035d7c-1aab-4fb7-b963-50490524d2cb",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "c039954e-02b3-4e6a-bbcf-df5a03b3dc32",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "f88ac58f-c869-414b-a9ea-bf0a7c05c109",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "72c120a2-1501-428b-bbcd-404e546391de",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "45526d89-898a-46de-af96-3de009bfd2ef",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "7e8b3804-1268-4917-95e0-8db9f707c088",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "d73c759e-47c0-41e2-9e29-c8595ef46891",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "62c3031f-3bdd-4f5e-986c-6964c7b4050d",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "d74dd606-c780-40d7-9a7a-f40a9dc88773",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "2841cb0e-5850-42d7-ab11-4a003b5d2f85",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "766e5146-846d-4e0a-960f-60561c6bc073",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "a8c8afc0-de29-4c5d-b92e-f2ffa2dd0280",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "0ce846fd-3a30-4401-be36-cd626bd5b85b",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "a877d688-0c8e-4133-83df-0cfdf75c380c",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "f430f77e-ad83-47f2-a730-ab20902083b0",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "95c06267-4c33-495c-8eca-98a4a5ce1e69",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "759fcf30-38c1-4624-9ab2-caf8788e8c5e",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "83e2332e-30aa-4d4a-b6d4-1c516df0a085",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "e0676433-393c-497b-a1dc-891985e0d9ed",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "509f1501-63f0-4f42-86ad-b44cb32f7166",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "b27344ff-7c6a-4c74-ace2-0433536d5e7a",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "8021bb27-d3ca-44a7-8e71-4053c82c4702",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "845dc377-71b5-47b2-ab31-07c35b845cc3",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "c5906965-9faa-4148-9b46-cb011f8f5d10",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "f9a27609-7fa2-4b51-b38d-9a4bdacf0d42",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "781b35c0-6907-4d5f-a3d0-4f1ceaa60406",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "af29998a-2d93-47b7-b2b1-83e670a8032c",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "a14aff56-14be-420d-8608-53f9b5d25285",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "c77bda80-768a-4295-a30c-cdad2b9975a1",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "b47c7da4-12d0-4708-99f5-2e76c66f656a",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "b2ad12ab-4d8a-4fa0-9950-0641b1cb273e",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "2095a91e-26da-47f0-88ed-d0a9ff5d8b03",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "d46efcff-07e5-4669-8522-6da41abb430c",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "24a3149a-61d8-4e79-9bb4-3670aa96d14b",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "b484598b-62ad-468e-b409-bbbfa2edebed",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "3cae0841-7b9b-4e51-8b5c-b634a2aa74a9",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "bbfed149-0238-4593-95ef-1ca1161ca5f1",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "83095682-c7ee-4675-845e-431f1d2e5668",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "8a361398-ba8e-4717-81fe-7cf783777fd8",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "77c51b20-c36e-43eb-aaaf-1a609b35268a",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "a2eb239f-9db6-436f-ac27-9af1dd307f8b",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "ba8ae89e-da3b-46ba-af00-2a81fac55fe8",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "0553dd71-0f70-441d-9399-c3d8c11ab408",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "b4f500f8-c531-475f-b52b-8913c003fc94",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "0d35ac03-687a-45ff-80ab-6659a3b6f677",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "f1275944-a4f8-4e29-b9a0-35f87043e4e8",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "be811c5c-0435-42df-9558-c0a1ffad377c",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "741445ef-fe44-430e-a6a3-23e3d14c74f4",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "4a1008b6-c0cf-4873-8270-12b8ae32689f",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "8ef24605-5f8d-4c42-aa0d-66fcca28b9e6",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "e14377c2-c0ba-4ca7-9f7e-2b4a814067d3",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "d996cd69-af4b-457c-9824-2e22ef9b0def",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "fa5af09c-8c8e-42c8-a642-bed33a2067b5",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "0abf71d9-cfc0-4c8f-ba28-ce349a3e36e1",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "7aac0f8c-b33a-4167-8c56-3c886bf31968",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "5f95660b-b5a0-427e-8b63-278309e90eb9",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "c9b4e966-bfb4-46ef-a350-67a94ed1ea4d",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "652dee1d-132f-4156-8e1f-ece2a3bc2a91",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "efc22ac0-50ec-4d41-a4ce-77f3b3a19439",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "37f6000e-0d29-481f-b789-406c7057a9b9",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "669af55e-0186-43fd-9de4-562c5c7faaf0",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "163454ca-1e86-4264-97dd-24de39372aac",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "36b0ec7a-11d7-47e1-856e-e6a180b6bd10",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "fbb73e97-9d8a-4122-b131-ea17cac7e05e",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "abc26802-9ca9-42f4-ac7a-647446bb11aa",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "0706ddac-1289-4210-a239-a795f868842c",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "6406e9e3-7e98-464b-9047-46a062336671",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "f5f1bd91-ee4f-4d52-886f-5a1a14f1210e",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "aa5f3a31-450d-4a64-b999-d5ccebeb18f7",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "20c155bf-0dee-4c75-bb57-60da5ef0bff5",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "851f7367-483d-45d9-ad82-50fe0cdd66bf",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "f005cbf3-0ebd-4b8e-a19e-e9b41fba5ce3",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "5a16b266-52e9-4b54-b1d0-60e75c18287f",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "c5724845-e650-4146-ab95-39c5dd696159",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "47ae7849-80f8-4961-a4d1-f87c9f88ba0e",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "0c241d3e-d48e-48d2-a67f-61335a1db824",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "84d88093-2494-4558-8b66-220b1cdcb345",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "876be3ef-7d6f-4150-bfc8-a62a4fa2e88c",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "3fd2ffae-e0f2-4edd-9b8d-8dfa16dc3b27",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "ff1163e5-1253-4f7a-866b-842edb51376b",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "8a1bc1d4-08ae-4bf6-bc6a-8b9381229e0d",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "bf0970f1-6d91-4b97-b1f2-06f3f72d34d0",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "d03685d1-cf0e-490e-9a2a-e3cf6a101c11",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "e290bc98-d7c1-465e-8f23-ee79793858b2",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "1397533a-a51a-422e-98a5-6ec88e8d3683",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "d13f3ccb-4ae1-46c8-9dd6-5942c40e47a3",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "6f1ba259-69d9-4577-9c16-4b8e7224fb2d",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "b95969f8-5e42-4f1c-b6c7-13537e06da47",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "58d3ccbe-68a3-49e6-8e40-9ca6406ada4a",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "614417cc-a55f-46ce-99b8-79434086784f",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "7ddd06de-bf59-4e82-a47a-71b8aebee3bd",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "39618945-ad60-46f5-90a2-c221f4e55eb7",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "e69c777c-a56d-4874-9143-84c02030d08e",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "627c7e28-a180-4c8d-bd7d-14406057fea6",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "c175776a-c300-4140-9dbf-06234fea49d5",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "50717c36-b465-4830-899a-aa809a117786",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "1c11edef-ff5f-430c-955e-0bb7fafeb796",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "f98ca508-8186-49d7-8600-318fd1756aa2",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "eb18be5b-d090-4de5-b4c4-e18071234dfe",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "8194529b-2ef6-4b51-bbf1-b12745c42c71",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/update",
      "chunk_id": "204a8d5d-9c29-4584-9833-f7b3177349e5",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Javascript Reference v2.0\n\n",
      "headers": {
        "H1": "",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "d8bc8023-b5c3-4767-b79d-d611e6f7041b",
      "token_count": 7,
      "has_code_block": false
    },
    {
      "content": "Python Client Library\n=====================\n\nsupabase-py[View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py)\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": ""
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "63df21f0-ee82-4032-96b0-b40351bace82",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Installing\n----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "f8971fd2-9540-4986-8073-56dc00b9fb27",
      "token_count": 3,
      "has_code_block": false
    },
    {
      "content": "### Install with PyPi[#](#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Installing"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "7f453ab7-b12c-499c-bdf6-e743842d9775",
      "token_count": 56,
      "has_code_block": false
    },
    {
      "content": "Initializing\n------------\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "e50a4eb1-4471-41a8-a2ce-c8c733f71c84",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   supabase\\_urlRequiredstring\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n*   supabase\\_keyRequiredstring\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n*   optionsOptionalClientOptions\n\nOptions to change the Auth behaviors.\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Initializing"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "c2a0a326-28be-4f89-9bed-6fd406447c08",
      "token_count": 166,
      "has_code_block": false
    },
    {
      "content": "Fetch data\n----------\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n\n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\nand [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "3b480788-4dc5-42e8-ad6d-250562710b9d",
      "token_count": 174,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnsOptionalstring\n\nThe columns to retrieve, defaults to `*`.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Fetch data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "189c4cf8-4197-4043-8dbf-4d7703f9386e",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Insert data\n-----------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "1df3ed8f-04b7-474f-a9a4-e563bf696beb",
      "token_count": 4,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Insert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "0beb99d5-67b1-43b7-8293-50922be707b9",
      "token_count": 173,
      "has_code_block": false
    },
    {
      "content": "Update data\n-----------\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to update.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "54339b25-78b6-4fb9-8467-c13c2e1479e5",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Update data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "0f6ade3a-3ec9-428c-96cc-68c5f23bc672",
      "token_count": 125,
      "has_code_block": false
    },
    {
      "content": "Upsert data\n-----------\n\n*   Primary keys must be included in the `values` dict to use upsert.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "6a3ed9a2-a152-44fc-9061-5f83e877d482",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jsonRequireddict, list\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n*   ignore\\_duplicatesOptionalbool\n\nWhether duplicate rows should be ignored.\n\n*   on\\_conflictOptionalstring\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n*   default\\_to\\_nullOptionalbool\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upsert data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "83e2ed77-7036-4938-ae48-2d02cd2ba13d",
      "token_count": 221,
      "has_code_block": false
    },
    {
      "content": "Delete data\n-----------\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\nto target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\nenabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "1c1fc8c8-a811-459f-9187-4d6c5bc63b41",
      "token_count": 176,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   countOptionalCountMethod\n\nThe property to use to get the count of rows returned.\n\n*   returningOptionalReturnMethod\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "e7837bac-fb16-4199-b3bb-d41b140362d9",
      "token_count": 85,
      "has_code_block": false
    },
    {
      "content": "Call a Postgres function\n------------------------\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "6d0aacb4-15a8-4b23-b79d-8a4a0e14463f",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   fnRequiredcallable\n\nThe stored procedure call to be executed.\n\n*   paramsOptionaldict of any\n\nParameters passed into the stored procedure call.\n\n*   getOptionaldict of any\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n*   headOptionaldict of any\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n*   countOptionalCountMethod\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n. `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Call a Postgres function"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "eb9793d3-66d4-4e58-8ac0-7ffa112a9994",
      "token_count": 250,
      "has_code_block": false
    },
    {
      "content": "Using filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`     _15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )      `\n\nData source\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using filters"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "85938952-a980-4c18-adc3-372880304649",
      "token_count": 211,
      "has_code_block": false
    },
    {
      "content": "Column is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "8d6b76e7-d8ec-4c84-8cab-76db95b28ce7",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "6d80c376-06a1-414b-a159-8305a94f5dd4",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "0eb6aabb-8bc0-4de5-9814-cc0cea24cae2",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is not equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "f0c2d86d-d16e-4847-a835-752c27e9d78e",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Column is greater than a value\n------------------------------\n\nMatch only rows where `column` is greather than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "a348f391-5ac9-4c5a-bd53-a055c0069370",
      "token_count": 23,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "9045eed1-4734-4ef1-bbba-92a40ef7a843",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Column is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "71d7ffff-cc86-46d5-bb13-d97e6868bc4e",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is greater than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "2ae272dc-b866-43e0-85af-c16760cb0dac",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "9080f125-1318-4f69-86d3-a50c7487822c",
      "token_count": 22,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "b8bf7425-2130-4b8f-abc9-24a6abf2f341",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "073d0904-c9ff-4268-9b95-355e442618e4",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valueRequiredany\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is less than or equal to a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "0e2616e0-4005-480a-84bb-5be220d6c9e5",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Column matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "fbc6606d-8e99-411e-b735-f904300a91da",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "61db4482-81bc-403e-9be9-fccf6f10bc8f",
      "token_count": 76,
      "has_code_block": false
    },
    {
      "content": "Column matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "84de3eda-9845-4a90-888a-f238b9c07385",
      "token_count": 27,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   patternRequiredstring\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column matches a case-insensitive pattern"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "c1cb600e-1b70-4617-af66-b5ba96caa3f6",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Column is a value\n-----------------\n\nMatch only rows where `column` IS `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "25bf137e-5167-406a-aeac-65be2b4b1bfb",
      "token_count": 18,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe name of the column to apply a filter on\n\n*   valueRequirednull | boolean\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "407ee0b2-ef64-4b39-a7e0-61f422591a28",
      "token_count": 82,
      "has_code_block": false
    },
    {
      "content": "Column is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "6a041486-02e1-4b92-b650-f8d1c992941a",
      "token_count": 24,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredarray\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column is in an array"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "a727aecb-fe60-4bd1-a418-b4992964f06b",
      "token_count": 101,
      "has_code_block": false
    },
    {
      "content": "Column contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "5128ced2-c187-4a9a-bab4-04730cabe18c",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   valuesRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Column contains every element in a value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "531248d3-973a-4b34-a937-3842d3abedfb",
      "token_count": 117,
      "has_code_block": false
    },
    {
      "content": "Contained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "8f9f7609-b03d-4368-9477-3c0f02720158",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe jsonb, array, or range column to filter on\n\n*   valueRequiredobject\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Contained by value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "35dcd218-7784-4885-b994-dcc4dc0b896f",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Greater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "c477906c-6629-494f-a681-f7b80b3d9782",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "3fb9a8a0-c5f6-4c4b-a4a1-03fd174101da",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Greater than or equal to a range\n--------------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "4264e4b4-1d04-4535-b2df-d0a5d2758c09",
      "token_count": 42,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredstring\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Greater than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "63cc4e2c-6a33-419e-8ea9-0e12a5097905",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Less than a range\n-----------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "5f713be1-3365-4fa1-b354-788bb049c681",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "685ab978-c5e0-4eae-9713-0c40b5f4fb0e",
      "token_count": 120,
      "has_code_block": false
    },
    {
      "content": "Less than or equal to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "ef468ff0-34ae-4a84-96df-8485438a4420",
      "token_count": 35,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Less than or equal to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "0089b730-f8a6-4a2a-ac65-4c2c145e94ec",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "Mutually exclusive to a range\n-----------------------------\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "e6ecd1de-49cc-4593-ab1b-d6051783365e",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe range column to filter on\n\n*   rangeRequiredarray\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Mutually exclusive to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "0440471d-e560-4e70-9ad9-fadcac1fd180",
      "token_count": 121,
      "has_code_block": false
    },
    {
      "content": "With a common element\n---------------------\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "8286a624-5190-4566-8b8e-26c3a0773339",
      "token_count": 32,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe array or range column to filter on\n\n*   valueRequiredIterable\\[Any\\]\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "With a common element"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "7c1ffebd-39dd-4bfb-b65b-00a2bc201e37",
      "token_count": 114,
      "has_code_block": false
    },
    {
      "content": "Match a string\n--------------\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "ec811d20-70ec-4e26-88df-ade4ff5d920a",
      "token_count": 55,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe text or tsvector column to filter on\n\n*   queryRequiredstring\n\nThe query text to match with\n\n*   optionsOptionalobject\n\nNamed parameters\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match a string"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "6ac10c25-cb88-43b8-b167-6297a8ff4473",
      "token_count": 128,
      "has_code_block": false
    },
    {
      "content": "Match an associated value\n-------------------------\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "dfb9be7e-0b72-42a3-b5b5-30b8e8a3d8e0",
      "token_count": 34,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   queryRequireddict\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match an associated value"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "10dfbc7e-231a-49ad-b24a-68f7bd764ae2",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Don't match the filter\n----------------------\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values      ``\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Don't match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "9511f0d3-314f-41c7-8850-574f676261be",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Match at least one filter\n-------------------------\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "bf116c46-18c6-43cb-a32e-3bfe08da69c5",
      "token_count": 119,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   filtersRequiredstring\n\nThe filters to use, following PostgREST syntax\n\n*   reference\\_tableOptionalstring\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match at least one filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "9db9db08-e4b3-42aa-a971-a865bb726d7b",
      "token_count": 133,
      "has_code_block": false
    },
    {
      "content": "Match the filter\n----------------\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "ce6923b3-2b3b-4d72-8d9c-debd7d577421",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to filter on\n\n*   operatorOptionalstring\n\nThe operator to filter with, following PostgREST syntax\n\n*   valueOptionalany\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Match the filter"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "b7dde27f-04de-461c-bb51-98db2327efe8",
      "token_count": 132,
      "has_code_block": false
    },
    {
      "content": "Using modifiers\n---------------\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using modifiers"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "33434bda-36f4-4f89-995f-b732dd75aabe",
      "token_count": 99,
      "has_code_block": false
    },
    {
      "content": "Order the results\n-----------------\n\nOrder the query result by `column`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "8038f4f7-b7a0-425f-bd18-8e064dc31043",
      "token_count": 14,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   columnRequiredstring\n\nThe column to order by\n\n*   descOptionalbool\n\nWhether the rows should be ordered in descending order or not.\n\n*   foreign\\_tableOptionalstring\n\nForeign table name whose results are to be ordered.\n\n*   nullsfirstOptionalbool\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Order the results"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "18a3d5f8-49c7-4fbf-a709-a050cd80be4b",
      "token_count": 138,
      "has_code_block": false
    },
    {
      "content": "Limit the number of rows returned\n---------------------------------\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "8172305e-ffd8-4a6e-9bc4-d5ac4e707ec1",
      "token_count": 9,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   sizeRequirednumber\n\nThe maximum number of rows to return\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the number of rows returned"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "179a43fe-9dfa-4a36-b710-5a06acdc92af",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Limit the query to a range\n--------------------------\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "adb85282-07d3-4e9a-9c9f-32585b7174ed",
      "token_count": 94,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   startRequirednumber\n\nThe starting index from which to limit the result.\n\n*   endRequirednumber\n\nThe last index to which to limit the result.\n\n*   foreign\\_tableOptionalstring\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Limit the query to a range"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "2a53b025-6a42-4e2a-8c97-3963226ecca2",
      "token_count": 105,
      "has_code_block": false
    },
    {
      "content": "Retrieve one row of data\n------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "97c4ea20-abce-400e-b512-554cc8abeb65",
      "token_count": 65,
      "has_code_block": false
    },
    {
      "content": "Retrieve zero or one row of data\n--------------------------------\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve zero or one row of data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "49794a14-4af2-4264-9c16-0d6fc2d766d6",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Retrieve as a CSV\n-----------------\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").csv().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve as a CSV"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "9261aaa6-963f-4bf7-baae-1a85b9997031",
      "token_count": 57,
      "has_code_block": false
    },
    {
      "content": "Using explain\n-------------\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\nof a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\nto enable the functionality on your project.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "5f82cf75-8e69-425a-8014-c2f36b469c11",
      "token_count": 137,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   walOptionalboolean\n\nIf `true`, include information on WAL record generation.\n\n*   verboseOptionalboolean\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n*   settingsOptionalboolean\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n*   formatOptionalboolean\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   formatOptional\"text\" | \"json\"\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n*   buffersOptionalboolean\n\nIf `true`, include information on buffer usage.\n\n*   analyzeOptionalboolean\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Using explain"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "8653759f-fc35-4b94-ade2-34408392d70a",
      "token_count": 210,
      "has_code_block": false
    },
    {
      "content": "Create a new user\n-----------------\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n.\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n*   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n*   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n.\n*   If sign\\_up() is called for an existing confirmed user:\n*   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n, an obfuscated/fake user object is returned.\n*   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "c304e5bc-e340-4e22-9336-13a0cdb80dfc",
      "token_count": 315,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a new user"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "28ca4039-7f5d-4da5-9a13-9b87591b0606",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Create an anonymous user\n------------------------\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "104b70b8-5942-470b-89c3-7465f1502032",
      "token_count": 45,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create an anonymous user"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "b42a52e4-5be4-4a3f-bbdb-d3166ce123f1",
      "token_count": 71,
      "has_code_block": false
    },
    {
      "content": "Sign in a user\n--------------\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "31095e58-9990-422b-8ff4-351269416e5d",
      "token_count": 37,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "69bf9725-c728-4398-b7ae-cc561675a54d",
      "token_count": 75,
      "has_code_block": false
    },
    {
      "content": "Sign in with ID Token\n---------------------\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "8163816e-68f1-4965-aa85-6fd5d5474d40",
      "token_count": 28,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in with ID Token"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "50c6c299-9a24-422c-b3b8-80c4fe42983d",
      "token_count": 69,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OTP\n--------------------------\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n.\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\nto add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\nto include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "ab91d5d2-6a33-4c8a-8d3a-5f23df8031b5",
      "token_count": 271,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "824cf582-47c6-4324-98c5-3fe24d85bdd3",
      "token_count": 102,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through OAuth\n----------------------------\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "750a4ab7-888f-44d8-87d4-e674016764fe",
      "token_count": 51,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through OAuth"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "7cebbe21-02af-4a4d-9eba-0668a4fd338a",
      "token_count": 72,
      "has_code_block": false
    },
    {
      "content": "Sign in a user through SSO\n--------------------------\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\nto an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\nto do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n*   Mapping specific user email addresses with an identity provider.\n*   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "992a992d-1e84-456b-aeae-30dce46e76c7",
      "token_count": 180,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign in a user through SSO"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "fb5989a7-2b95-4d38-8c19-947cbe699ce1",
      "token_count": 59,
      "has_code_block": false
    },
    {
      "content": "Sign out a user\n---------------\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "9e4cd840-adbe-40a3-bbcf-ea73b1d1e950",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Sign out a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "c5854ff0-5188-4f65-8ae7-5d84ed1e0fa8",
      "token_count": 36,
      "has_code_block": false
    },
    {
      "content": "Verify and log in through OTP\n-----------------------------\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\nand can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\nfor more details.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "bd4e0ae6-5edf-4120-beae-8541cc17d647",
      "token_count": 202,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify and log in through OTP"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "919b200f-bcda-4831-b856-6529957003ac",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "Retrieve a session\n------------------\n\n*   This method retrieves the current local session (i.e in memory).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser)\ninstead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`     _10  response = supabase.auth.get_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a session"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "7aff881a-3c53-4856-89bd-91ab23c3806f",
      "token_count": 153,
      "has_code_block": false
    },
    {
      "content": "Retrieve a new session\n----------------------\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "291bf236-5fd8-46db-81f8-dc223dc26c49",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a new session"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "20dbfc8e-fc0b-4e50-a895-22a3c3029941",
      "token_count": 40,
      "has_code_block": false
    },
    {
      "content": "Retrieve a user\n---------------\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "35a49a79-6221-42d9-892f-4c7da9c5d038",
      "token_count": 49,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   jwtOptionalstring\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a user"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "12ed0a14-b6f0-40bd-a6b1-d2b3e9ced56d",
      "token_count": 77,
      "has_code_block": false
    },
    {
      "content": "Set the session data\n--------------------\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "1177253f-5666-4dd4-a7ab-8502e8c10a75",
      "token_count": 90,
      "has_code_block": false
    },
    {
      "content": "### Parameters\n\n*   access\\_tokenRequiredstring\n\n*   refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Set the session data"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "e6f016d4-b7cb-43a7-9c67-7ce770e5c792",
      "token_count": 52,
      "has_code_block": false
    },
    {
      "content": "Auth MFA\n--------\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Auth MFA"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "0a0748c4-655e-460d-a591-6e4ceccda7a9",
      "token_count": 136,
      "has_code_block": false
    },
    {
      "content": "Enroll a factor\n---------------\n\n*   Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\n.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n*   To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify)\n.\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`     _10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Enroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "703fd198-2238-4dec-98ed-c469c0a849e0",
      "token_count": 191,
      "has_code_block": false
    },
    {
      "content": "Create a challenge\n------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\n.\n\nCreate a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "84e8d525-43fe-44a9-a6d5-18f62db83055",
      "token_count": 122,
      "has_code_block": false
    },
    {
      "content": "Verify a challenge\n------------------\n\n*   To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge)\nfirst.\n\nVerify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "bff6128d-9fb5-4d17-87fc-f25a8859e86c",
      "token_count": 142,
      "has_code_block": false
    },
    {
      "content": "Create and verify a challenge\n-----------------------------\n\n*   An [enrolled factor](/docs/reference/python/auth-mfa-enroll)\nis required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge)\nand [`mfa.verify()`](/docs/reference/python/auth-mfa-verify)\nin a single step.\n\nCreate and verify a challenge for a factor\n\n`     _10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create and verify a challenge"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "2f18fae9-5d17-47c6-9516-fb7f2d2a5aaa",
      "token_count": 159,
      "has_code_block": false
    },
    {
      "content": "Unenroll a factor\n-----------------\n\nUnenroll a factor\n\n`     _10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unenroll a factor"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "f2fcab14-c3d7-4264-bfce-09d3890e2388",
      "token_count": 74,
      "has_code_block": false
    },
    {
      "content": "Get Authenticator Assurance Level\n---------------------------------\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`     _10  res = supabase.auth.mfa.get_authenticator_assurance_level()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Get Authenticator Assurance Level"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "1f86b92b-5f30-4be4-8296-81195238fa8f",
      "token_count": 158,
      "has_code_block": false
    },
    {
      "content": "Invokes a Supabase Edge Function.\n---------------------------------\n\nInvoke a Supabase Function.\n\n*   Requires an Authorization header.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`     _10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Invokes a Supabase Edge Function."
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "6a456fab-80a1-4a9b-939f-705b73f31596",
      "token_count": 165,
      "has_code_block": false
    },
    {
      "content": "Subscribe to channel\n--------------------\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\n.\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`     _10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Subscribe to channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "a0726045-e2b4-4b72-92f3-6e2e9d630b4f",
      "token_count": 320,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from a channel\n--------------------------\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`     _10  supabase.remove_channel(myChannel)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from a channel"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "bb47b027-0353-4e70-9780-333b0c69395e",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Unsubscribe from all channels\n-----------------------------\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`     _10  supabase.remove_all_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Unsubscribe from all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "434d3952-f1f8-4353-85be-f8701275bea3",
      "token_count": 92,
      "has_code_block": false
    },
    {
      "content": "Retrieve all channels\n---------------------\n\nGet all channels\n\n`     _10  channels = supabase.get_channels()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve all channels"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "8c43479b-17a2-48e2-9b9a-4ba5280084d9",
      "token_count": 29,
      "has_code_block": false
    },
    {
      "content": "Broadcast a message\n-------------------\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`     _10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)      `\n\nResponse\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Broadcast a message"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "bd9af18b-5e3f-4a9a-9a6f-b4bc39a3bc71",
      "token_count": 113,
      "has_code_block": false
    },
    {
      "content": "Create a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `insert`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate bucket\n\n`     _10  res = supabase.storage.create_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "3de75bc6-e94f-46e5-98ff-000202cd4332",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "Retrieve a bucket\n-----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nGet bucket\n\n`     _10  res = supabase.storage.get_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "77b6475a-b966-4285-991b-12770d08f535",
      "token_count": 84,
      "has_code_block": false
    },
    {
      "content": "List all buckets\n----------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList buckets\n\n`     _10  res = supabase.storage.list_buckets()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all buckets"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "9f916a59-8f00-4635-8fa8-e5658a244277",
      "token_count": 83,
      "has_code_block": false
    },
    {
      "content": "Delete a bucket\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select` and `delete`\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete bucket\n\n`     _10  res = supabase.storage.delete_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "9288c8a4-2a72-46cb-a84b-7674ca39733c",
      "token_count": 88,
      "has_code_block": false
    },
    {
      "content": "Empty a bucket\n--------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: `select`\n*   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nEmpty bucket\n\n`     _10  res = supabase.storage.empty_bucket(name)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Empty a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "519dcea8-9a64-40a1-8082-249f05feeb32",
      "token_count": 89,
      "has_code_block": false
    },
    {
      "content": "Upload a file\n-------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n*   Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\nif you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Upload a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "63330cdf-fbbf-4aa1-acd7-02487e2ac82a",
      "token_count": 177,
      "has_code_block": false
    },
    {
      "content": "Download a file\n---------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDownload file\n\n`     _10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Download a file"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "9ba6eebd-deb9-42d9-a888-4cb86004ad86",
      "token_count": 110,
      "has_code_block": false
    },
    {
      "content": "List all files in a bucket\n--------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nList files in a bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').list()      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "List all files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "4ca8ebcb-9db2-42ae-85e9-7c9a12dd9b0e",
      "token_count": 93,
      "has_code_block": false
    },
    {
      "content": "Replace an existing file\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nUpdate file\n\n`     _10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Replace an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "359f7155-c8e2-4775-811d-4c5d699da239",
      "token_count": 130,
      "has_code_block": false
    },
    {
      "content": "Move an existing file\n---------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nMove file\n\n`     _10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Move an existing file"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "48d1e124-053e-45ac-9c8d-37e2cae84fae",
      "token_count": 103,
      "has_code_block": false
    },
    {
      "content": "Delete files in a bucket\n------------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nDelete file\n\n`     _10  res = supabase.storage.from_('bucket_name').remove('test.jpg')      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Delete files in a bucket"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "56a446ba-d86a-4485-8c37-938667ca7af3",
      "token_count": 96,
      "has_code_block": false
    },
    {
      "content": "Create a signed URL\n-------------------\n\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nCreate Signed URL\n\n`     _10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)      `\n\n* * *\n\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Create a signed URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "147842ca-9309-48a9-b6f1-f0e16431ec16",
      "token_count": 95,
      "has_code_block": false
    },
    {
      "content": "Retrieve public URL\n-------------------\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket)\nor by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\n, clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n*   `buckets` table permissions: none\n*   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\non how access control works\n\nReturns the URL for an asset in a public bucket\n\n`     _10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')      `\n",
      "headers": {
        "H1": "Python Client Library",
        "H2": "Retrieve public URL"
      },
      "source_url": "https://supabase.com/docs/reference/python/upsert",
      "chunk_id": "cc617f8c-cce9-41f1-8bbc-f2e6f90cba72",
      "token_count": 158,
      "has_code_block": false
    }
  ],
  "validation_report": {
    "heading_preservation": {
      "original_h1_count": 0,
      "chunk_h1_count": 3150,
      "original_h2_count": 0,
      "chunk_h2_count": 3125,
      "all_headings_preserved": false
    },
    "content_preservation": {
      "original_token_count": 306222,
      "chunk_total_token_count": 300797,
      "token_difference_percentage": 1.7744,
      "within_threshold": true
    },
    "chunk_size_validation": {
      "chunks_within_limit": 3175,
      "oversized_chunks": 0,
      "max_chunk_size": 320
    },
    "url_consistency": {
      "consistent_urls": true
    }
  },
  "statistics": {
    "document_stats": {
      "total_documents": 25,
      "avg_document_size": 12032,
      "largest_document": 12062,
      "smallest_document": 11309
    },
    "chunk_stats": {
      "total_chunks": 3175,
      "avg_chunk_size": 94.74,
      "chunk_size_distribution": {
        "0-250": 3100,
        "250-500": 75
      },
      "chunks_with_code_blocks": 0
    },
    "heading_stats": {
      "total_h1": 3150,
      "total_h2": 3125,
      "total_h3": 1150,
      "avg_chunks_per_h1": 1
    }
  }
}