[
  {
    "chunk_id": "b7cabcb4-3e28-41f0-b1d5-8c8173433256",
    "source_url": "https://supabase.com/docs/faq",
    "main_heading": "No Heading",
    "content": "[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\n*   [Start](/docs/guides/getting-started)\n    \n*   Products\n*   Build\n*   Reference\n*   Resources\n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\nSearch docs...\n\nK",
    "summary": "This section provides information on how to access Supabase support, with a link to the Supabase support page. It also includes the Supabase branding and navigation elements, allowing users to explore the Supabase documentation, including sections on getting started, products, building, reference, and resources."
  },
  {
    "chunk_id": "c2162c5f-d52e-452d-9dd9-965ac91d719c",
    "source_url": "https://supabase.com/docs/faq",
    "main_heading": "No Heading",
    "content": "Where do I find support?\n\nChoose the support channel relevant for your situation here: [supabase.com/support](https://supabase.com/support)",
    "summary": "Supabase provides various support channels for users, including a website at supabase.com/support. This allows users to access relevant support resources based on their specific situation and needs."
  },
  {
    "chunk_id": "8a121cc5-5d59-4165-99ac-d0709cf58639",
    "source_url": "https://supabase.com/docs/faq",
    "main_heading": "No Heading",
    "content": "How much does it cost?\n\nSelf-hosting Supabase is free. If you wish to use our cloud-platform, we provide [simple, predictable pricing](https://supabase.com/pricing)\n.",
    "summary": "Self-hosting Supabase is free, while using the Supabase cloud platform offers simple, predictable pricing. Detailed pricing information is available on the Supabase website."
  },
  {
    "chunk_id": "d4ff45bc-be7a-4736-9219-83d4f8675cac",
    "source_url": "https://supabase.com/docs/faq",
    "main_heading": "No Heading",
    "content": "How do I host Supabase?\n\nYou can use the docker compose script [here](https://github.com/supabase/supabase/tree/master/docker)\n, and find detailed instructions [here](/docs/guides/hosting/overview)\n.\n\nSupabase is an amalgamation of open source tools. Some of these tools are made by Supabase (like our [Realtime Server](https://github.com/supabase/realtime)\n), some we support directly (like [PostgREST](http://postgrest.org/en/v7.0.0/)\n), and some are third-party tools (like [KonSupabase is an amalgamation open sourceg](https://github.com/Kong/kong)\n).\n\nAll of the tools we use in Supabase are MIT, Apache 2.0, or PostgreSQL licensed. This is one of the requirements to be considered for the Supabase stack.",
    "summary": "Supabase provides two hosting options: self-hosting using a provided Docker Compose script, or using Supabase's cloud platform. Supabase is an open-source platform composed of various MIT, Apache 2.0, or PostgreSQL licensed tools, including Supabase-built components like the Realtime Server as well as third-party tools like PostgREST and Kong."
  },
  {
    "chunk_id": "ba57d084-5af3-40ce-a10f-d1231290ca57",
    "source_url": "https://supabase.com/docs/faq",
    "main_heading": "No Heading",
    "content": "How can you be a Firebase alternative if you're built with a relational database?\n\nWe started Supabase because we love the functionality of Firebase, but we personally experienced the scaling issues that many others experienced. We chose Postgres because it's well-trusted, with phenomenal scalability.\n\nOur goal is to make Postgres as easy to use as Firebase, so that you no longer have to choose between usability and scalability. We're sure that once you start using Postgres, you'll love it more than any other database.",
    "summary": "Supabase aims to provide the functionality of Firebase with the scalability and robustness of PostgreSQL, a well-established relational database. The team chose Postgres to address the scaling issues often experienced with Firebase, while making Postgres as easy to use as the Firebase platform. Supabase's goal is to enable developers to leverage the power of Postgres without sacrificing the developer experience of a Firebase-like service."
  },
  {
    "chunk_id": "21ab3f99-b996-4109-8e03-73c82789452e",
    "source_url": "https://supabase.com/docs/faq",
    "main_heading": "No Heading",
    "content": "Do you support `[some other database]`?\n\nWe only support PostgreSQL. It's unlikely we'll ever move away from Postgres; however, you can [vote on a new database](https://github.com/supabase/supabase/discussions/6)\n if you want us to start development.",
    "summary": "Supabase currently only supports PostgreSQL as the underlying database and has no plans to move away from it. However, users can vote on a new database option if they want Supabase to start development for a different database system."
  },
  {
    "chunk_id": "f9445b46-758c-42c0-ba1b-e7e27702fbf6",
    "source_url": "https://supabase.com/docs/faq",
    "main_heading": "No Heading",
    "content": "Do you have a library for `[some other language]`?\n\nWe officially support [JavaScript](/docs/reference/javascript/installing)\n, [Swift](/docs/reference/swift/installing)\n, and [Flutter](/docs/reference/dart/installing)\n.\n\nYou can find community-supported libraries including Python, C#, PHP, and Ruby in our [GitHub Community](https://github.com/supabase-community)\n, and you can also help us to identify the most popular languages by [voting for a new client library](https://github.com/supabase/supabase/discussions/5)\n.\n\n*   Need some help?\n    \n    [Contact support](https://supabase.com/support)\n    \n*   Latest product updates?\n    \n    [See Changelog](https://supabase.com/changelog)\n    \n*   Something's not right?\n    \n    [Check system status](https://status.supabase.com/)\n    \n\n* * *\n\n[\u00a9 Supabase Inc](https://supabase.com/)\n\u2014[Contributing](https://github.com/supabase/supabase/blob/master/apps/docs/DEVELOPERS.md)\n[Author Styleguide](https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md)\n[Open Source](https://supabase.com/open-source)\n[SupaSquad](https://supabase.com/supasquad)\nPrivacy Settings\n\n[GitHub](https://github.com/supabase/supabase)\n[Twitter](https://twitter.com/supabase)\n[Discord](https://discord.supabase.com/)",
    "summary": "The documentation states that Supabase officially supports client libraries for JavaScript, Swift, and Flutter, while also providing community-supported libraries for Python, C#, PHP, and Ruby. Users can vote on new client library integrations through the Supabase GitHub community."
  },
  {
    "chunk_id": "14ebdf15-c770-4718-aca4-d846c5250273",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\n*   [Start](/docs/guides/getting-started)\n    \n*   Products\n*   Build\n*   Reference\n*   Resources\n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\nSearch docs...\n\nK\n\nMain menu\n\nJavaScript\n\nv2.0\n\n*   [Introduction](/docs/reference/javascript/introduction)\n    \n*   [Installing](/docs/reference/javascript/installing)\n    \n*   [Initializing](/docs/reference/javascript/initializing)\n    \n*   [TypeScript support](/docs/reference/javascript/typescript-support)\n    \n*   * * *\n    \n    Database\n    \n    *   [Fetch data](/docs/reference/javascript/select)\n        \n    *   [Insert data](/docs/reference/javascript/insert)\n        \n    *   [Update data](/docs/reference/javascript/update)\n        \n    *   [Upsert data](/docs/reference/javascript/upsert)\n        \n    *   [Delete data](/docs/reference/javascript/delete)\n        \n    *   [Call a Postgres function](/docs/reference/javascript/rpc)\n        \n    *   Using filters\n        \n    *   Using modifiers\n        \n*   * * *\n    \n    Auth\n    \n    *   [Overview](/docs/reference/javascript/auth-api)\n        \n    *   [Error codes](/docs/reference/javascript/auth-error-codes)\n        \n    *   [Create a new user](/docs/reference/javascript/auth-signup)\n        \n    *   [Listen to auth events](/docs/reference/javascript/auth-onauthstatechange)\n        \n    *   [Create an anonymous user](/docs/reference/javascript/auth-signinanonymously)\n        \n    *   [Sign in a user](/docs/reference/javascript/auth-signinwithpassword)\n        \n    *   [Sign in with ID Token](/docs/reference/javascript/auth-signinwithidtoken)\n        \n    *   [Sign in a user through OTP](/docs/reference/javascript/auth-signinwithotp)\n        \n    *   [Sign in a user through OAuth](/docs/reference/javascript/auth-signinwithoauth)\n        \n    *   [Sign in a user through SSO](/docs/reference/javascript/auth-signinwithsso)\n        \n    *   [Sign out a user](/docs/reference/javascript/auth-signout)\n        \n    *   [Send a password reset request](/docs/reference/javascript/auth-resetpasswordforemail)\n        \n    *   [Verify and log in through OTP](/docs/reference/javascript/auth-verifyotp)\n        \n    *   [Retrieve a session](/docs/reference/javascript/auth-getsession)\n        \n    *   [Retrieve a new session](/docs/reference/javascript/auth-refreshsession)\n        \n    *   [Retrieve a user](/docs/reference/javascript/auth-getuser)\n        \n    *   [Update a user](/docs/reference/javascript/auth-updateuser)\n        \n    *   [Retrieve identities linked to a user](/docs/reference/javascript/auth-getuseridentities)\n        \n    *   [Link an identity to a user](/docs/reference/javascript/auth-linkidentity)\n        \n    *   [Unlink an identity from a user](/docs/reference/javascript/auth-unlinkidentity)\n        \n    *   [Send a password reauthentication nonce](/docs/reference/javascript/auth-reauthentication)\n        \n    *   [Resend an OTP](/docs/reference/javascript/auth-resend)\n        \n    *   [Set the session data](/docs/reference/javascript/auth-setsession)\n        \n    *   [Exchange an auth code for a session](/docs/reference/javascript/auth-exchangecodeforsession)\n        \n    *   [Start auto-refresh session (non-browser)](/docs/reference/javascript/auth-startautorefresh)\n        \n    *   [Stop auto-refresh session (non-browser)](/docs/reference/javascript/auth-stopautorefresh)\n        \n    *   Auth MFA\n        \n    *   Auth Admin\n        \n*   * * *\n    \n    Edge Functions\n    \n    *   [Invokes a Supabase Edge Function.](/docs/reference/javascript/functions-invoke)\n        \n*   * * *\n    \n    Realtime\n    \n    *   [Subscribe to channel](/docs/reference/javascript/subscribe)\n        \n    *   [Unsubscribe from a channel](/docs/reference/javascript/removechannel)\n        \n    *   [Unsubscribe from all channels](/docs/reference/javascript/removeallchannels)\n        \n    *   [Retrieve all channels](/docs/reference/javascript/getchannels)\n        \n    *   [Broadcast a message](/docs/reference/javascript/broadcastmessage)\n        \n*   * * *\n    \n    Storage\n    \n    *   [Create a bucket](/docs/reference/javascript/storage-createbucket)\n        \n    *   [Retrieve a bucket](/docs/reference/javascript/storage-getbucket)\n        \n    *   [List all buckets](/docs/reference/javascript/storage-listbuckets)\n        \n    *   [Update a bucket](/docs/reference/javascript/storage-updatebucket)\n        \n    *   [Delete a bucket](/docs/reference/javascript/storage-deletebucket)\n        \n    *   [Empty a bucket](/docs/reference/javascript/storage-emptybucket)\n        \n    *   [Upload a file](/docs/reference/javascript/storage-from-upload)\n        \n    *   [Download a file](/docs/reference/javascript/storage-from-download)\n        \n    *   [List all files in a bucket](/docs/reference/javascript/storage-from-list)\n        \n    *   [Replace an existing file](/docs/reference/javascript/storage-from-update)\n        \n    *   [Move an existing file](/docs/reference/javascript/storage-from-move)\n        \n    *   [Copy an existing file](/docs/reference/javascript/storage-from-copy)\n        \n    *   [Delete files in a bucket](/docs/reference/javascript/storage-from-remove)\n        \n    *   [Create a signed URL](/docs/reference/javascript/storage-from-createsignedurl)\n        \n    *   [Create signed URLs](/docs/reference/javascript/storage-from-createsignedurls)\n        \n    *   [Create signed upload URL](/docs/reference/javascript/storage-from-createsigneduploadurl)\n        \n    *   [Upload to a signed URL](/docs/reference/javascript/storage-from-uploadtosignedurl)\n        \n    *   [Retrieve public URL](/docs/reference/javascript/storage-from-getpublicurl)\n        \n*   * * *\n    \n    Misc\n    \n    *   [Release Notes](/docs/reference/javascript/release-notes)\n        \n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\n*   [Start](/docs/guides/getting-started)\n    \n*   Products\n*   Build\n*   Reference\n*   Resources\n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\nSearch docs...\n\nK\n\nJavascript Reference v2.0\n\nJavaScript Client Library\n=========================\n\n@supabase/supabase-js[View on GitHub](https://github.com/supabase/supabase-js)\n\nThis reference documents every object and method available in Supabase's isomorphic JavaScript library, `supabase-js`. You can use `supabase-js` to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\nInstalling\n----------",
    "summary": "The provided content describes how to install the @supabase/supabase-js JavaScript client library, which allows interacting with Supabase's Postgres database, real-time event monitoring, Edge Functions, authentication, and storage management. The library is installed via common package managers (npm, yarn, pnpm) and can be used in both browser and server-side JavaScript environments."
  },
  {
    "chunk_id": "b6aeb09c-f91e-4c6c-b70b-8162968b329c",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Install as package[#](#install-as-package)\n\nYou can install @supabase/supabase-js via the terminal.\n\nnpmYarnpnpm\n\nTerminal\n\n`     _10  npm install @supabase/supabase-js      `",
    "summary": "The section describes how to install the Supabase JavaScript client library (@supabase/supabase-js) using the package manager of your choice (npm, yarn, or pnpm) via the terminal. This allows developers to easily integrate the Supabase client into their web applications, enabling them to interact with the Supabase platform and its features."
  },
  {
    "chunk_id": "680ca18e-b1e3-4db6-a829-f5cb6b84fdc9",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Install via CDN[#](#install-via-cdn)\n\nYou can install @supabase/supabase-js via CDN links.\n\n`     _10  <script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2\"></script>  _10  //or  _10  <script src=\"https://unpkg.com/@supabase/supabase-js@2\"></script>      `",
    "summary": "You can install the Supabase JavaScript client library (@supabase/supabase-js) via CDN links, either from the jsDelivr or Unpkg CDN. This allows you to easily include the library in your web application without needing to set up a local package installation. The CDN approach provides a convenient way to access the Supabase client functionality in your project."
  },
  {
    "chunk_id": "780c83ec-4b2c-4d60-9fce-171cb5d8d031",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Use at runtime in Deno[#](#use-at-runtime-in-deno)\n\nYou can use supabase-js in the Deno runtime via [JSR](https://jsr.io/@supabase/supabase-js)\n:\n\n`     _10  import { createClient } from 'jsr:@supabase/supabase-js@2'      `\n\n* * *\n\nInitializing\n------------\n\nCreate a new client for use in the browser.\n\nYou can initialize a new Supabase client using the `createClient()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.",
    "summary": "The excerpt describes how to use the Supabase JavaScript library in the Deno runtime environment by importing it from the JSR (JavaScript Sandbox Runtime) service. It also covers initializing a new Supabase client using the `createClient()` method, which serves as the entry point to the Supabase ecosystem and allows interacting with its various functionalities."
  },
  {
    "chunk_id": "36f5322f-ee7e-4c3e-9f70-f839bb8bde9e",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   supabaseUrlRequiredstring\n    \n    The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n    \n*   supabaseKeyRequiredstring\n    \n    The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n    \n*   optionsOptionalSupabaseClientOptions\n    \n    Details\n    \n\nCreating a clientWith a custom domainWith additional parametersWith custom schemasCustom fetch implementationReact Native options with AsyncStorageReact Native options with Expo SecureStore\n\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  _10  // Create a single supabase client for interacting with your database  _10  const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')      `\n\n* * *\n\nTypeScript support\n------------------\n\n`supabase-js` has TypeScript support for type inference, autocompletion, type-safe queries, and more.\n\nWith TypeScript, `supabase-js` detects things like `not null` constraints and [generated columns](https://www.postgresql.org/docs/current/ddl-generated-columns.html)\n. Nullable columns are typed as `T | null` when you select the column. Generated columns will show a type error when you insert to it.\n\n`supabase-js` also detects relationships between tables. A referenced table with one-to-many relationship is typed as `T[]`. Likewise, a referenced table with many-to-one relationship is typed as `T | null`.\n\nGenerating TypeScript Types[#](#generating-typescript-types)\n\n-------------------------------------------------------------\n\nYou can use the Supabase CLI to [generate the types](/docs/reference/cli/supabase-gen-types)\n. You can also generate the types [from the dashboard](https://supabase.com/dashboard/project/_/api?page=tables-intro)\n.\n\nTerminal\n\n`     _10  supabase gen types typescript --project-id abcdefghijklmnopqrst > database.types.ts      `\n\nThese types are generated from your database schema. Given a table `public.movies`, the generated types will look like:\n\n`     _10  create table public.movies (  _10  id bigint generated always as identity primary key,  _10  name text not null,  _10  data jsonb null  _10  );      `\n\n./database.types.ts\n\n``     _25  export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]  _25  _25  export interface Database {  _25  public: {  _25  Tables: {  _25  movies: {  _25  Row: { // the data expected from .select()  _25  id: number  _25  name: string  _25  data: Json | null  _25  }  _25  Insert: { // the data to be passed to .insert()  _25  id?: never // generated columns must not be supplied  _25  name: string // `not null` columns with no default must be supplied  _25  data?: Json | null // nullable columns can be omitted  _25  }  _25  Update: { // the data to be passed to .update()  _25  id?: never  _25  name?: string // `not null` columns are optional on .update()  _25  data?: Json | null  _25  }  _25  }  _25  }  _25  }  _25  }      ``\n\nUsing TypeScript type definitions[#](#using-typescript-type-definitions)\n\n-------------------------------------------------------------------------\n\nYou can supply the type definitions to `supabase-js` like so:\n\n./index.tsx\n\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  import { Database } from './database.types'  _10  _10  const supabase = createClient<Database>(  _10  process.env.SUPABASE_URL,  _10  process.env.SUPABASE_ANON_KEY  _10  )      `\n\nHelper types for Tables and Joins[#](#helper-types-for-tables-and-joins)\n\n-------------------------------------------------------------------------\n\nYou can use the following helper types to make the generated TypeScript types easier to use.\n\nSometimes the generated types are not what you expect. For example, a view's column may show up as nullable when you expect it to be `not null`. Using [type-fest](https://github.com/sindresorhus/type-fest)\n, you can override the types like so:\n\n./database-generated.types.ts\n\n`     _10  export type Json = // ...  _10  _10  export interface Database {  _10  // ...  _10  }      `\n\n./database.types.ts\n\n``     _20  import { MergeDeep } from 'type-fest'  _20  import { Database as DatabaseGenerated } from './database-generated.types'  _20  export { Json } from './database-generated.types'  _20  _20  // Override the type for a specific column in a view:  _20  export type Database = MergeDeep<  _20  DatabaseGenerated,  _20  {  _20  public: {  _20  Views: {  _20  movies_view: {  _20  Row: {  _20  // id is a primary key in public.movies, so it must be `not null`  _20  id: number  _20  }  _20  }  _20  }  _20  }  _20  }  _20  >      ``\n\nYou can also override the type of an individual successful response if needed:\n\n`     _10  const { data } = await supabase.from('countries').select().returns<MyType>()      `\n\nThe generated types provide shorthands for accessing tables and enums.\n\n./index.ts\n\n`     _10  import { Database, Tables, Enums } from \"./database.types.ts\";  _10  _10  // Before \ud83d\ude15  _10  let movie: Database['public']['Tables']['movies']['Row'] = // ...  _10  _10  // After \ud83d\ude0d  _10  let movie: Tables<'movies'>      `",
    "summary": "The summary is as follows:\n\nThe Supabase JavaScript client, `supabase-js`, provides TypeScript support for type inference, autocompletion, type-safe queries, and more. It can detect constraints like `not null` and generated columns, and it handles relationships between tables. Developers can generate TypeScript types from the Supabase CLI or dashboard, which can then be used to interact with the client. The library also offers helper types to make the generated types easier to use, including the ability to override specific types."
  },
  {
    "chunk_id": "d8b3a8c8-6c22-4021-90c2-a5f1f3f804ba",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Response types for complex queries[#](#response-types-for-complex-queries)\n\n`supabase-js` always returns a `data` object (for success), and an `error` object (for unsuccessful requests).\n\nThese helper types provide the result types from any query, including nested types for database joins.\n\nGiven the following schema with a relation between cities and countries, we can get the nested `CountriesWithCities` type:\n\n`     _10  create table countries (  _10  \"id\" serial primary key,  _10  \"name\" text  _10  );  _10  _10  create table cities (  _10  \"id\" serial primary key,  _10  \"name\" text,  _10  \"country_id\" int references \"countries\"  _10  );      `\n\n``     _17  import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'  _17  _17  const countriesWithCitiesQuery = supabase  _17  .from(\"countries\")  _17  .select(`  _17  id,  _17  name,  _17  cities (  _17  id,  _17  name  _17  )  _17  `);  _17  type CountriesWithCities = QueryData<typeof countriesWithCitiesQuery>;  _17  _17  const { data, error } = await countriesWithCitiesQuery;  _17  if (error) throw error;  _17  const countriesWithCities: CountriesWithCities = data;      ``\n\n* * *\n\nFetch data\n----------\n\nPerform a SELECT query on the table or view.\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/javascript/using-filters)\n    \n*   `select()` can be combined with [Modifiers](/docs/reference/javascript/using-modifiers)\n    \n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\n     and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n    .",
    "summary": "The provided content describes the response types for complex queries in the `supabase-js` library. It introduces the `QueryResult`, `QueryData`, and `QueryError` types, which are used to handle the responses from database queries, including nested types for database joins. The document also covers the basics of performing `SELECT` queries, such as pagination, filtering, and modifiers, as well as the `apikey` reserved keyword."
  },
  {
    "chunk_id": "1a5b5f0f-aff3-4e7f-b783-db053fb2f51a",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnsOptionalQuery\n    \n    The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()      `\n\nData source\n\nResponse\n\n* * *\n\nInsert data\n-----------\n\nPerform an INSERT into the table or view.",
    "summary": ""
  },
  {
    "chunk_id": "c659484b-7cfd-46e0-b193-6656dc059eed",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredUnion: expand to see options\n    \n    The values to insert. Pass an object to insert a single row or an array to insert multiple rows.\n    \n    Details\n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n\nCreate a recordCreate a record and return itBulk create\n\n`     _10  const { error } = await supabase  _10  .from('countries')  _10  .insert({ id: 1, name: 'Denmark' })      `\n\nData source\n\nResponse\n\n* * *\n\nUpdate data\n-----------\n\nPerform an UPDATE on the table or view.\n\n*   `update()` should always be combined with [Filters](/docs/reference/javascript/using-filters)\n     to target the item(s) you wish to update.",
    "summary": "The documentation covers the \"Update data\" section, which describes how to perform an UPDATE operation on a table or view in Supabase. The key points are that the `update()` method should be combined with filters to target the specific items to be updated, and that this operation is used to modify existing records in the database."
  },
  {
    "chunk_id": "f7b32fbe-f586-45a3-acbe-919fd305c10b",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredRow\n    \n    The values to update with\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nUpdating your dataUpdate a record and return itUpdating JSON data\n\n`     _10  const { error } = await supabase  _10  .from('countries')  _10  .update({ name: 'Australia' })  _10  .eq('id', 1)      `\n\nData source\n\nResponse\n\n* * *\n\nUpsert data\n-----------\n\nPerform an UPSERT on the table or view. Depending on the column(s) passed to `onConflict`, `.upsert()` allows you to perform the equivalent of `.insert()` if a row with the corresponding `onConflict` columns doesn't exist, or if it does exist, perform an alternative action depending on `ignoreDuplicates`.\n\n*   Primary keys must be included in `values` to use upsert.",
    "summary": "The documentation describes the parameters for updating and upserting data in a database. The `update()` method allows updating a record and returning it, while the `upsert()` method performs an UPSERT operation, which inserts a new row if it doesn't exist or updates an existing one. Primary keys must be included in the `values` parameter for `upsert()` to work."
  },
  {
    "chunk_id": "c7d823e4-9cd7-4635-9b7c-224ef2d211bb",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredUnion: expand to see options\n    \n    The values to upsert with. Pass an object to upsert a single row or an array to upsert multiple rows.\n    \n    Details\n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .upsert({ id: 1, name: 'Albania' })  _10  .select()      `\n\nData source\n\nResponse\n\n* * *\n\nDelete data\n-----------\n\nPerform a DELETE on the table or view.\n\n*   `delete()` should always be combined with [filters](/docs/reference/javascript/using-filters)\n     to target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\n     enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.",
    "summary": "The documentation describes the Upsert and Delete functionality of the Supabase client library. Upsert allows you to insert new records or update existing ones, with options to upsert a single row or multiple rows. The Delete functionality allows you to delete records from a table or view, leveraging filters and row-level security policies to target specific records."
  },
  {
    "chunk_id": "40877afb-db0c-44ae-ab1e-9c7a471b7060",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nDelete a single recordDelete a record and return itDelete multiple records\n\n`     _10  const response = await supabase  _10  .from('countries')  _10  .delete()  _10  .eq('id', 1)      `\n\nData source\n\nResponse\n\n* * *\n\nCall a Postgres function\n------------------------\n\nPerform a function call.\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\nTo call Postgres functions on [Read Replicas](/docs/guides/platform/read-replicas)\n, use the `get: true` option.",
    "summary": "The documentation discusses two key features of the Supabase API: deleting records and calling Postgres functions. The delete operation allows deleting a single record or multiple records based on a specified condition. The function call feature enables executing Postgres logic remotely, which is useful for functions that rarely change, such as password resets and updates."
  },
  {
    "chunk_id": "17365780-53f2-4a80-be3e-54fb96bdeb5a",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   fnRequiredFnName\n    \n    The function name to call\n    \n*   argsRequiredFn\\['Args'\\]\n    \n    The arguments to pass to the function call\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  const { data, error } = await supabase.rpc('hello_world')      `\n\nData source\n\nResponse\n\n* * *\n\nUsing filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional ChainingFilter by values within a JSON columnFilter referenced tables\n\n`     _10  const { data, error } = await supabase  _10  .from('cities')  _10  .select('name, country_id')  _10  .eq('name', 'The Shire') // Correct  _10  _10  const { data, error } = await supabase  _10  .from('cities')  _10  .eq('name', 'The Shire') // Incorrect  _10  .select('name, country_id')      `\n\nNotes\n\n* * *\n\nColumn is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.",
    "summary": "The documentation describes how to call Postgres functions in Supabase, including options for passing arguments, applying filters, and chaining queries. Key features include the ability to call read-only functions, apply filters on columns and JSON data, and chain multiple operations. The summary highlights the main technical capabilities and usage patterns for interacting with Postgres functions through the Supabase API."
  },
  {
    "chunk_id": "6954dcfa-6e85-4185-a0f8-1ff81bf36a2b",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredNonNullable\n    \n    The value to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .eq('name', 'Albania')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.",
    "summary": "The provided content describes the parameters for a database query operation, specifically the `columnRequiredUnion` and `valueRequiredNonNullable` parameters. The `columnRequiredUnion` parameter specifies the column to filter on, while the `valueRequiredNonNullable` parameter defines the value to filter with. This query operation uses the `select()` function to retrieve data from a 'countries' table where the 'name' column is equal to 'Albania'."
  },
  {
    "chunk_id": "1aece174-65fc-4603-ac51-4e0f6ca438a5",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .neq('name', 'Albania')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is greater than a value\n------------------------------\n\nMatch only rows where `column` is greater than `value`.",
    "summary": "The provided content describes the \"columnRequiredUnion\" and \"valueRequiredUnion\" parameters for filtering data in a Supabase database query. The \"columnRequiredUnion\" parameter specifies the column to filter on, while the \"valueRequiredUnion\" parameter sets the value to filter with. The example code demonstrates using the `select()` function to retrieve data from the \"countries\" table, excluding rows where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "5d47f314-4462-4de2-aff2-5858a7d0e6d4",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .gt('id', 2)      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\nColumn is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.",
    "summary": "The summary provides information about the `select()` function in Supabase, which allows filtering data based on column values. The parameters `columnRequiredUnion` and `valueRequiredUnion` are used to specify the column and value to filter on, respectively. The example demonstrates filtering the `countries` table to select rows where the `id` column is greater than 2."
  },
  {
    "chunk_id": "8d2405a8-279e-4209-8bda-4a701c8302e0",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .gte('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.",
    "summary": "The document provides details on the `select()` function in Supabase, including parameters for filtering data based on column and value requirements. It also includes an example of using the `select()` function to fetch data from the 'countries' table where the 'id' column is greater than or equal to 2. Additionally, it covers a section on filtering data where the column value is less than a specified value."
  },
  {
    "chunk_id": "b93c4b77-3336-4f51-81e6-b59e1f1cdc5e",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .lt('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.",
    "summary": "The documentation describes the `select()` function in Supabase, which allows filtering data based on column values. The `columnRequiredUnion` and `valueRequiredUnion` parameters define the column and value to filter on, respectively. The example demonstrates using the `lt()` (less than) operator to retrieve rows where the `id` column is less than 2."
  },
  {
    "chunk_id": "4655375a-c9c9-4c6a-a128-5475b85b1dc8",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .lte('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.",
    "summary": "The documentation describes filter parameters for the `select()` function in Supabase, a database client. The key parameters are `columnRequiredUnion` to specify the column to filter on, and `valueRequiredUnion` or `patternRequired` to provide the filter value or pattern. These filters can be used to select specific rows from a database table based on column values."
  },
  {
    "chunk_id": "9439179b-1d96-4bd1-8c37-347924f0fd88",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   patternRequiredstring\n    \n    The pattern to match with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .like('name', '%Alba%')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.",
    "summary": "The documentation describes a set of parameters for filtering data in a database query. The key parameters are `columnRequiredUnion` to specify the column to filter on and `patternRequiredstring` to provide a case-insensitive pattern to match against. The example usage shows how to use the `like()` function in a Supabase query to select rows where the 'name' column matches the '%Alba%' pattern."
  },
  {
    "chunk_id": "3a87ea53-1b6b-4be0-89fd-46ed45fb91e7",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   patternRequiredstring\n    \n    The pattern to match with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .ilike('name', '%alba%')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is a value\n-----------------\n\nMatch only rows where `column` IS `value`.",
    "summary": "The documentation describes two parameters for a filtering operation: `columnRequiredUnion` specifies the column to filter on, and `patternRequiredstring` defines the pattern to match. The `select()` function is used to retrieve data from a 'countries' table, filtering the rows where the 'name' column matches the provided pattern."
  },
  {
    "chunk_id": "87964d01-0e7a-4272-bfa9-4a610aea88db",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nChecking for nullness, true or false\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .is('name', null)      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\nColumn is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.",
    "summary": "The documentation describes a set of parameters for filtering data, including the column to filter on and the values to filter with. It also provides an example of using the `is()` function in Supabase to check for nullness, true, or false values. The key feature is the ability to filter on a column that is part of an array, matching rows where the column is included in the specified values."
  },
  {
    "chunk_id": "d7c3501e-4222-4c2c-a41b-4a3516cf4580",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valuesRequiredArray<Row\\['ColumnName'\\]>\n    \n    The values array to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .in('name', ['Albania', 'Algeria'])      `\n\nData source\n\nResponse\n\n* * *\n\nColumn contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.",
    "summary": "The documentation summarizes the `columnRequiredUnion` and `valuesRequiredArray` parameters used in the `select()` function of the Supabase library. The `columnRequiredUnion` parameter specifies the column to filter on, while the `valuesRequiredArray` parameter defines an array of values to filter with. This feature is particularly useful for filtering on JSON, array, or range columns, where the filter matches rows where the column contains every element in the provided value array."
  },
  {
    "chunk_id": "c8b85283-ac01-4ce9-bba8-8db2425e97f1",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The jsonb, array, or range column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The jsonb, array, or range value to filter with\n    \n    Details\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  const { data, error } = await supabase  _10  .from('issues')  _10  .select()  _10  .contains('tags', ['is:open', 'priority:low'])      `\n\nData source\n\nResponse\n\n* * *\n\nContained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.",
    "summary": "The provided excerpt describes parameters for filtering data in a database table using jsonb, array, or range columns. The `columnRequiredUnion` parameter specifies the column to filter on, while the `valueRequiredUnion` parameter defines the value to filter with. The summary also covers how to filter on specific array and range columns, as well as how to use the `contains` operator to match rows where every element in the column is contained by the provided value."
  },
  {
    "chunk_id": "49f77ee4-f6c2-4c1a-ac83-8a487078de05",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The jsonb, array, or range column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The jsonb, array, or range value to filter with\n    \n    Details\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  const { data, error } = await supabase  _10  .from('classes')  _10  .select('name')  _10  .containedBy('days', ['monday', 'tuesday', 'wednesday', 'friday'])      `\n\nData source\n\nResponse\n\n* * *\n\nGreater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.",
    "summary": "This section describes parameters for filtering data in a Supabase query. The `columnRequiredUnion` parameter specifies the column to filter on, which can be a `jsonb`, array, or range column. The `valueRequiredUnion` parameter specifies the value to filter with. The section also includes examples of using the `containedBy` function to filter on array columns and the \"Greater than a range\" operator for filtering on range columns."
  },
  {
    "chunk_id": "4fa5d09b-9af8-4863-a18c-547cdcdd3933",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The range column to filter on\n    \n    Details\n    \n*   rangeRequiredstring\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeGt('during', '[2000-01-02 08:00, 2000-01-02 09:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nGreater than or equal to a range\\\n--------------------------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\\\n\\",
    "summary": "The provided content describes the `columnRequiredUnion` and `rangeRequiredstring` parameters used in the `select()` function of the Supabase library. `columnRequiredUnion` specifies the range column to filter on, while `rangeRequiredstring` defines the range to filter with. This allows for filtering data based on range conditions, such as selecting rows where the values in a range column are greater than or equal to a specified range."
  },
  {
    "chunk_id": "250593ea-a57c-408d-8db1-c5f46365118d",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeGte('during', '[2000-01-02 08:30, 2000-01-02 09:30)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nLess than a range\\\n-----------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\\\n\\",
    "summary": "This documentation covers the `select()` method in Supabase, specifically the `rangeGte()` function which filters data based on a range column. It includes details on the `columnRequired` and `rangeRequired` parameters, as well as an example usage of the `rangeGte()` function. Additionally, it explains the \"Less than a range\" functionality, which matches rows where every element in the column is less than any element in the provided range."
  },
  {
    "chunk_id": "00cf6432-1430-4062-92c2-876542831829",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeLt('during', '[2000-01-01 15:00, 2000-01-01 16:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nLess than or equal to a range\\\n-----------------------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or less than any element in `range`.\\\n\\",
    "summary": "This section describes the `rangeLt` function in Supabase, which filters rows where the values in the specified column are less than or equal to the provided range. The range column to filter on is specified by the `columnRequired` parameter, and the range itself is provided by the `rangeRequired` parameter. This function can be used in the `select()` method to retrieve data that matches the specified range filter."
  },
  {
    "chunk_id": "6cc32c26-bc1e-43f0-8704-e956a3b6299d",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeLte('during', '[2000-01-01 14:00, 2000-01-01 16:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nMutually exclusive to a range\\\n-----------------------------\\\n\\\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\\\n\\",
    "summary": "The provided content describes two parameters for the `select()` function in Supabase: `columnRequiredUnion` and `rangeRequiredstring`. `columnRequiredUnion` specifies the range column to filter on, while `rangeRequiredstring` defines the range to filter with. The content also explains the use of the `rangeLte()` function to filter records within a specific date range, and the concept of mutually exclusive ranges for range columns."
  },
  {
    "chunk_id": "efcadf7e-6889-4a6a-9096-5f2d1c8d0b04",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeAdjacent('during', '[2000-01-01 12:00, 2000-01-01 13:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nWith a common element\\\n---------------------\\\n\\\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\\\n\\",
    "summary": "This section of the documentation covers the `columnRequired` and `rangeRequired` parameters for the `select()` function in Supabase. The `columnRequired` parameter specifies the column to filter on, while the `rangeRequired` parameter defines the range to filter with. The documentation also explains the use of the `rangeAdjacent()` function to filter rows based on a date range. Additionally, it mentions the \"only relevant for array and range columns\" feature, which allows matching rows where the column and value have a common element."
  },
  {
    "chunk_id": "e649b5b4-cc1e-4158-b9cc-628b8a2ffcf6",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The array or range column to filter on\\\n    \\\n    Details\\\n    \\\n*   valueRequiredUnion: expand to see options\\\n    \\\n    The array or range value to filter with\\\n    \\\n    Details\\\n    \\\n\\\nOn array columnsOn range columns\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('issues')  _10  .select('title')  _10  .overlaps('tags', ['is:closed', 'severity:high'])      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch a string\\\n--------------\\\n\\\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\\\n\\\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\\\n    .\\\n\\",
    "summary": "The documentation describes two parameters for filtering data: `columnRequired` which specifies the array or range column to filter on, and `valueRequired` which specifies the array or range value to filter with. It also discusses how to use the `overlaps` operator to filter on array columns and the `match` operator to filter on text and tsvector columns for full-text search functionality."
  },
  {
    "chunk_id": "7e852e45-21e6-4e30-96e3-142c4205e215",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The text or tsvector column to filter on\\\n    \\\n    Details\\\n    \\\n*   queryRequiredstring\\\n    \\\n    The query text to match with\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nText searchBasic normalizationFull normalizationWebsearch\\\n\\\n``     _10  const result = await supabase  _10  .from(\"texts\")  _10  .select(\"content\")  _10  .textSearch(\"content\", `'eggs' & 'ham'`, {  _10  config: \"english\",  _10  });      ``\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch an associated value\\\n-------------------------\\\n\\\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\\\n\\",
    "summary": "The documentation describes the `textSearch` function in Supabase, which allows filtering a text or tsvector column based on a query string. It provides details on the function parameters, including the column to filter on, the query text to match, and optional configuration settings. The summary also includes an example usage of the function and a note on matching associated values in a query."
  },
  {
    "chunk_id": "da29d6de-b06c-4c67-acde-dad1a2585d0a",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   queryRequiredUnion: expand to see options\\\n    \\\n    The object to filter with, with column names as keys mapped to their filter values\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .match({ id: 2, name: 'Albania' })      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDon't match the filter\\\n----------------------\\\n\\\nMatch only rows which doesn't satisfy the filter.\\\n\\\nnot() expects you to use the raw PostgREST syntax for the filter values.\\\n\\\n``     _10  .not('id', 'in', '(5,6,7)') // Use `()` for `in` filter  _10  .not('arraycol', 'cs', '\\{\"a\",\"b\"\\}') // Use `cs` for `contains()`, `\\{\\}` for array values      ``\\\n\\",
    "summary": "The documentation describes the `queryRequiredUnion` parameter, which is used to filter data in a Supabase query. The parameter accepts an object with column names as keys and their corresponding filter values. The documentation also covers the `not()` function, which can be used to match rows that do not satisfy the given filter criteria, using the raw PostgREST syntax for the filter values."
  },
  {
    "chunk_id": "201fbb59-6060-42bc-b664-1bd5e790cbbf",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to filter on\\\n    \\\n    Details\\\n    \\\n*   operatorRequiredUnion: expand to see options\\\n    \\\n    The operator to be negated to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n*   valueRequiredUnion: expand to see options\\\n    \\\n    The value to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .not('name', 'is', null)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch at least one filter\\\n-------------------------\\\n\\\nMatch only rows which satisfy at least one of the filters.\\\n\\\nor() expects you to use the raw PostgREST syntax for the filter names and values.\\\n\\\n``     _10  .or('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') // Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') // Use `cd` for `containedBy()`      ``\\\n\\",
    "summary": "The documentation describes the parameters for the `not()` method, which allows filtering on a column with a specified operator and value. It also provides an example of using `select()` with the `not()` method, and explains the `or()` method, which allows matching rows that satisfy at least one of the specified filters using the raw PostgREST syntax."
  },
  {
    "chunk_id": "4ec5ebf0-81e0-4a51-bf36-a3ad63c1f5bc",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   filtersRequiredstring\\\n    \\\n    The filters to use, following PostgREST syntax\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .or('id.eq.2,name.eq.Algeria')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch the filter\\\n----------------\\\n\\\nMatch only rows which satisfy the filter. This is an escape hatch - you should use the specific filter methods wherever possible.\\\n\\\nfilter() expects you to use the raw PostgREST syntax for the filter values.\\\n\\\n``     _10  .filter('id', 'in', '(5,6,7)') // Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') // Use `cs` for `contains()`, `\\{\\}` for array values      ``\\\n\\",
    "summary": "The provided content discusses the usage of filters in the Supabase library, including the `filtersRequired` and `optionsRequired` parameters, as well as the `select()` and `filter()` methods. It explains how to use the PostgREST syntax for filtering data, including examples for `or`, `and`, and `contains()` operations. The summary highlights the key technical points, such as the filter syntax, the use of the `filter()` method as an escape hatch, and the importance of using the specific filter methods wherever possible."
  },
  {
    "chunk_id": "f850dea4-bbe2-4b08-ad16-5502874d2bc0",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to filter on\\\n    \\\n    Details\\\n    \\\n*   operatorRequiredUnion: expand to see options\\\n    \\\n    The operator to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n*   valueRequiredunknown\\\n    \\\n    The value to filter with, following PostgREST syntax\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .filter('name', 'in', '(\"Algeria\",\"Japan\")')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUsing modifiers\\\n---------------\\\n\\\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\\\n\\\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\\\n\\\n* * *\\\n\\\nReturn data after inserting\\\n---------------------------\\\n\\\nPerform a SELECT on the query result.\\\n\\",
    "summary": "The documentation outlines the parameters for filtering data using the `select()` function in Supabase, including the required `column`, `operator`, and `value` parameters. It also discusses the use of modifiers to change the format of the response, which must be specified after the filters. Additionally, it mentions that the `select()` function can be used to retrieve data after performing an insert operation."
  },
  {
    "chunk_id": "4eeb2bdb-e91f-4467-afda-6ed47bde6ad8",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnsOptionalQuery\\\n    \\\n    The columns to retrieve, separated by commas\\\n    \\\n\\\nWith \\`upsert()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .upsert({ id: 1, name: 'Algeria' })  _10  .select()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nOrder the results\\\n-----------------\\\n\\\nOrder the query result by `column`.\\\n\\",
    "summary": "The documentation describes parameters for the Supabase `upsert()` function, which allows inserting or updating data in a table. The key parameters are `columnsOptional`, which specifies the columns to retrieve, and `columnOptionalOrder`, which allows ordering the query results by a specified column. The summary also includes an example usage of `upsert()` to insert a new row into the \"countries\" table and retrieve the data."
  },
  {
    "chunk_id": "aea590d4-a57f-4388-9475-eeb96bb9f858",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to order by\\\n    \\\n    Details\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('id', 'name')  _10  .order('id', { ascending: false })      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLimit the number of rows returned\\\n---------------------------------\\\n\\\nLimit the query result by `count`.\\\n\\",
    "summary": "The content describes the `order()` function in the Supabase client library, which allows sorting query results by a specified column in ascending or descending order. It also explains how to limit the number of rows returned in a query using the `count` parameter. The summary covers the key technical details, including the syntax for using `order()` and `count`, and the significance of these features in querying and retrieving data from a database."
  },
  {
    "chunk_id": "c642f446-190d-4d70-ac11-99c5959fac62",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   countRequirednumber\\\n    \\\n    The maximum number of rows to return\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .limit(1)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLimit the query to a range\\\n--------------------------\\\n\\\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly. The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\\\n\\",
    "summary": "The content provides details on the `select()` function in Supabase, including parameters for limiting the number of rows returned (`count`, `from`, `to`) and named parameters (`options`). It explains how to use the `limit()` function to return a specified number of rows, and the `range()` function to return a range of rows based on offsets, which respects the query order."
  },
  {
    "chunk_id": "935f1bc8-8a53-4d5b-8aea-0c05464d3070",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromRequirednumber\\\n    \\\n    The starting index from which to limit the result\\\n    \\\n*   toRequirednumber\\\n    \\\n    The last index to which to limit the result\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .range(0, 1)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSet an abort signal\\\n-------------------\\\n\\\nSet the AbortSignal for the fetch request.\\\n\\\nYou can use this to set a timeout for the request.\\\n\\",
    "summary": "The documentation provides details on the parameters for the `select()` function, including `from` and `to` for limiting the result set, and `options` for additional named parameters. It also covers setting an AbortSignal to allow aborting in-flight requests and setting a timeout for the fetch operation."
  },
  {
    "chunk_id": "a5647260-9d1a-4d85-8c68-8b373a2871e9",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   signalRequiredAbortSignal\\\n    \\\n    The AbortSignal to use for the fetch request\\\n    \\\n\\\nAborting requests in-flightSet a timeout\\\n\\\n`     _10  const ac = new AbortController()  _10  ac.abort()  _10  const { data, error } = await supabase  _10  .from('very_big_table')  _10  .select()  _10  .abortSignal(ac.signal)      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nRetrieve one row of data\\\n------------------------\\\n\\\nReturn `data` as a single object instead of an array of objects.\\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .limit(1)  _10  .single()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve zero or one row of data\\\n--------------------------------\\\n\\\nReturn `data` as a single object instead of an array of objects.\\\n\\",
    "summary": "The provided content describes two key features of the Supabase library: aborting in-flight requests using an AbortSignal, and retrieving a single row of data using the `select()` and `single()` methods. The AbortSignal allows cancelling requests, while the single row retrieval is useful for fetching a specific record instead of an array of results."
  },
  {
    "chunk_id": "999520f3-e187-4a50-ae10-51413a601745",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nUnion: expand to see options\\\n\\\nDetails\\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .eq('name', 'Singapore')  _10  .maybeSingle()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve as a CSV\\\n-----------------\\\n\\\nReturn `data` as a string in CSV format.\\\n\\",
    "summary": "This section describes how to retrieve data from a Supabase database as a CSV string. The `select()` method is used to fetch data, with options to filter the results by specific column values. The returned data can be accessed directly or converted to a CSV format for further processing."
  },
  {
    "chunk_id": "e9222f42-f572-4341-aaf8-c5c59d19af04",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nstring\\\n\\\nReturn data as CSV\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .csv()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nOverride type of successful response\\\n------------------------------------\\\n\\\nOverride the type of the returned `data`.\\\n\\\nOverride type of successful response\\\n\\\n`     _10  const { data } = await supabase  _10  .from('countries')  _10  .select()  _10  .returns<MyType>()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUsing explain\\\n-------------\\\n\\\nReturn `data` as the EXPLAIN plan for the query.\\\n\\\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\\\n of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\\\n\\\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\\\n\\\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\\\n to enable the functionality on your project.\\\n\\",
    "summary": "The provided content describes the `csv()` and `returns<>()` methods for the Supabase client library. The `csv()` method allows returning data as a CSV string, while `returns<>()` overrides the response type for the query. Additionally, the `explain()` method can be used to retrieve the SQL execution plan for a query, which is useful for debugging performance issues, though it should be used with caution in production environments."
  },
  {
    "chunk_id": "d12bb0b2-3e4f-4a92-8363-92355c2912dc",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content describes the parameters for a function call, including an 'options' parameter of type 'object' with unnamed parameters. The function appears to be related to retrieving data, potentially in a CSV format, from a database table named 'countries'. The summary should be useful in a search pipeline to provide users with a quick understanding of the function's purpose and parameters."
  },
  {
    "chunk_id": "7faf0164-b545-4535-9fbd-bc422cbf4a6f",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nUnion: expand to see options\\\n\\\nDetails\\\n\\\nGet the execution planGet the execution plan with analyze and verbose\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .explain()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nOverview\\\n--------\\\n\\\n*   The auth methods can be accessed via the `supabase.auth` namespace.\\\n    \\\n*   By default, the supabase client sets `persistSession` to true and attempts to store the session in local storage. When using the supabase client in an environment that doesn't support local storage, you might notice the following warning message being logged:\\\n    \\\n    > No storage option exists to persist the session, which may result in unexpected behavior when using auth. If you want to set `persistSession` to true, please provide a storage option or you may set `persistSession` to false to disable this warning.\\\n    \\\n    This warning message can be safely ignored if you're not using auth on the server-side. If you are using auth and you want to set `persistSession` to true, you will need to provide a custom storage implementation that follows [this interface](https://github.com/supabase/gotrue-js/blob/master/src/lib/types.ts#L1027)\\\n    .\\\n    \\\n*   Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits)\\\n     in place to guard against brute force attacks.\\\n    \\\n*   The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth)\\\n    . A refresh token never expires and can only be used once.\\\n    \\\n\\\nCreate auth clientCreate auth client (server-side)\\\n\\\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  _10  const supabase = createClient(supabase_url, anon_key)      `\\\n\\\n* * *\\\n\\\nError codes\\\n-----------\\\n\\\nSupabase Auth can throw or return various errors when using the API. All errors originating from the `supabase.auth` namespace of the client library will be wrapped by the `AuthError` class.\\\n\\\nError objects are split in a few classes:\\\n\\\n*   `AuthApiError` -- errors which originate from the Supabase Auth API.\\\n    *   Use `isAuthApiError` instead of `instanceof` checks to see if an error you caught is of this type.\\\n*   `CustomAuthError` -- errors which generally originate from state in the client library.\\\n    *   Use the `name` property on the error to identify the class of error received.\\\n\\\nErrors originating from the server API classed as `AuthApiError` always have a `code` property that can be used to identify the error returned by the server. The `status` property is also present, encoding the HTTP status code received in the response.\\\n\\\nIn general the HTTP status codes you will likely receive are:\\\n\\\n*   [403 Forbidden](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)\\\n     is sent out in rare situations where a certain Auth feature is not available for the user, and you as the developer are not checking a precondition whether that API is available for the user.\\\n*   [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)\\\n     is sent out when the API request is accepted, but cannot be processed because the user or Auth server is in a state where it cannot satisfy the request.\\\n*   [429 Too Many Requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429)\\\n     is sent out when rate-limits are breached for an API. You should handle this status code often, especially in functions that authenticate a user.\\\n*   [500 Internal Server Error](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500)\\\n     often means that the Auth server's service is degraded. Most often it points to issues in your database setup such as a misbehaving trigger on a schema, function, view or other database object.\\\n*   [501 Not Implemented](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/501)\\\n     is sent out when a feature is not enabled on the Auth server, and you are trying to use an API which requires it.\\\n\\\nTo supplement HTTP status codes, Supabase Auth returns a string error code which gives you more insight into what went wrong. These codes are stable and can be used to present an internationalized message to your users.\\\n\\\n| Code | Description |\\\n| --- | --- |\\\n| `anonymous_provider_disabled` | Anonymous sign-ins are disabled. |\\\n| `bad_code_verifier` | Returned from the PKCE flow where the provided code verifier does not match the expected one. Indicates a bug in the implementation of the client library. |\\\n| `bad_json` | Usually used when the HTTP body of the request is not valid JSON. |\\\n| `bad_jwt` | JWT sent in the `Authorization` header is not valid. |\\\n| `bad_oauth_callback` | OAuth callback from provider to Auth does not have all the required attributes (state). Indicates an issue with the OAuth provider or client library implementation. |\\\n| `bad_oauth_state` | OAuth state (data echoed back by the OAuth provider to Supabase Auth) is not in the correct format. Indicates an issue with the OAuth provider integration. |\\\n| `captcha_failed` | Captcha challenge could not be verified with the captcha provider. Check your captcha integration. |\\\n| `conflict` | General database conflict, such as concurrent requests on resources that should not be modified concurrently. Can often occur when you have too many session refresh requests firing off at the same time for a user. Check your app for concurrency issues, and if detected, back off exponentially. |\\\n| `email_conflict_identity_not_deletable` | Unlinking this identity causes the user's account to change to an email address which is already used by another user account. Indicates an issue where the user has two different accounts using different primary email addresses. You may need to migrate user data to one of their accounts in this case. |\\\n| `email_exists` | Email address already exists in the system. |\\\n| `email_not_confirmed` | Signing in is not allowed for this user as the email address is not confirmed. |\\\n| `email_provider_disabled` | Signups are disabled for email and password. |\\\n| `flow_state_expired` | PKCE flow state to which the API request relates has expired. Ask the user to sign in again. |\\\n| `flow_state_not_found` | PKCE flow state to which the API request relates no longer exists. Flow states expire after a while and are progressively cleaned up, which can cause this error. Retried requests can cause this error, as the previous request likely destroyed the flow state. Ask the user to sign in again. |\\\n| `hook_payload_over_size_limit` | Payload from Auth exceeds maximum size limit. |\\\n| `hook_timeout` | Unable to reach hook within maximum time allocated. |\\\n| `hook_timeout_after_retry` | Unable to reach hook after maximum number of retries. |\\\n| `identity_already_exists` | The identity to which the API relates is already linked to a user. |\\\n| `identity_not_found` | Identity to which the API call relates does not exist, such as when an identity is unlinked or deleted. |\\\n| `insufficient_aal` | To call this API, the user must have a higher [Authenticator Assurance Level](https://supabase.com/docs/guides/auth/auth-mfa)<br>. To resolve, ask the user to solve an MFA challenge. |\\\n| `invite_not_found` | Invite is expired or already used. |\\\n| `invalid_credentials` | Login credentials or grant type not recognized. |\\\n| `manual_linking_disabled` | Calling the `supabase.auth.linkUser()` and related APIs is not enabled on the Auth server. |\\\n| `mfa_challenge_expired` | Responding to an MFA challenge should happen within a fixed time period. Request a new challenge when encountering this error. |\\\n| `mfa_factor_name_conflict` | MFA factors for a single user should not have the same friendly name. |\\\n| `mfa_factor_not_found` | MFA factor no longer exists. |\\\n| `mfa_ip_address_mismatch` | The enrollment process for MFA factors must begin and end with the same IP address. |\\\n| `mfa_verification_failed` | MFA challenge could not be verified -- wrong TOTP code. |\\\n| `mfa_verification_rejected` | Further MFA verification is rejected. Only returned if the [MFA verification attempt hook](https://supabase.com/docs/guides/auth/auth-hooks?language=add-admin-role#hook-mfa-verification-attempt)<br> returns a reject decision. |\\\n| `mfa_verified_factor_exists` | Verified phone factor already exists for a user. Unenroll existing verified phone factor to continue. |\\\n| `mfa_totp_enroll_disabled` | Enrollment of MFA TOTP factors is disabled. |\\\n| `mfa_totp_verify_disabled` | Login via TOTP factors and verification of new TOTP factors is disabled. |\\\n| `mfa_phone_enroll_disabled` | Enrollment of MFA Phone factors is disabled. |\\\n| `mfa_phone_verify_disabled` | Login via Phone factors and verification of new Phone factors is disabled. |\\\n| `no_authorization` | This HTTP request requires an `Authorization` header, which is not provided. |\\\n| `not_admin` | User accessing the API is not admin, i.e. the JWT does not contain a `role` claim that identifies them as an admin of the Auth server. |\\\n| `oauth_provider_not_supported` | Using an OAuth provider which is disabled on the Auth server. |\\\n| `otp_disabled` | Sign in with OTPs (magic link, email OTP) is disabled. Check your sever's configuration. |\\\n| `otp_expired` | OTP code for this sign-in has expired. Ask the user to sign in again. |\\\n| `over_email_send_rate_limit` | Too many emails have been sent to this email address. Ask the user to wait a while before trying again. |\\\n| `over_request_rate_limit` | Too many requests have been sent by this client (IP address). Ask the user to try again in a few minutes. Sometimes can indicate a bug in your application that mistakenly sends out too many requests (such as a badly written [`useEffect` React hook](https://react.dev/reference/react/useEffect)<br>). |\\\n| `over_sms_send_rate_limit` | Too many SMS messages have been sent to this phone number. Ask the user to wait a while before trying again. |\\\n| `phone_exists` | Phone number already exists in the system. |\\\n| `phone_not_confirmed` | Signing in is not allowed for this user as the phone number is not confirmed. |\\\n| `phone_provider_disabled` | Signups are disabled for phone and password. |\\\n| `provider_disabled` | OAuth provider is disabled for use. Check your server's configuration. |\\\n| `provider_email_needs_verification` | Not all OAuth providers verify their user's email address. Supabase Auth requires emails to be verified, so this error is sent out when a verification email is sent after completing the OAuth flow. |\\\n| `reauthentication_needed` | A user needs to reauthenticate to change their password. Ask the user to reauthenticate by calling the `supabase.auth.reauthenticate()` API. |\\\n| `reauthentication_not_valid` | Verifying a reauthentication failed, the code is incorrect. Ask the user to enter a new code. |\\\n| `request_timeout` | Processing the request took too long. Retry the request. |\\\n| `same_password` | A user that is updating their password must use a different password than the one currently used. |\\\n| `saml_assertion_no_email` | SAML assertion (user information) was received after sign in, but no email address was found in it, which is required. Check the provider's attribute mapping and/or configuration. |\\\n| `saml_assertion_no_user_id` | SAML assertion (user information) was received after sign in, but a user ID (called NameID) was not found in it, which is required. Check the SAML identity provider's configuration. |\\\n| `saml_entity_id_mismatch` | (Admin API.) Updating the SAML metadata for a SAML identity provider is not possible, as the entity ID in the update does not match the entity ID in the database. This is equivalent to creating a new identity provider, and you should do that instead. |\\\n| `saml_idp_already_exists` | (Admin API.) Adding a SAML identity provider that is already added. |\\\n| `saml_idp_not_found` | SAML identity provider not found. Most often returned after IdP-initiated sign-in with an unregistered SAML identity provider in Supabase Auth. |\\\n| `saml_metadata_fetch_failed` | (Admin API.) Adding or updating a SAML provider failed as its metadata could not be fetched from the provided URL. |\\\n| `saml_provider_disabled` | Using [Enterprise SSO with SAML 2.0](https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml)<br> is not enabled on the Auth server. |\\\n| `saml_relay_state_expired` | SAML relay state is an object that tracks the progress of a `supabase.auth.signInWithSSO()` request. The SAML identity provider should respond after a fixed amount of time, after which this error is shown. Ask the user to sign in again. |\\\n| `saml_relay_state_not_found` | SAML relay states are progressively cleaned up after they expire, which can cause this error. Ask the user to sign in again. |\\\n| `session_not_found` | Session to which the API request relates no longer exists. This can occur if the user has signed out, or the session entry in the database was deleted in some other way. |\\\n| `signup_disabled` | Sign ups (new account creation) are disabled on the server. |\\\n| `single_identity_not_deletable` | Every user must have at least one identity attached to it, so deleting (unlinking) an identity is not allowed if it's the only one for the user. |\\\n| `sms_send_failed` | Sending an SMS message failed. Check your SMS provider configuration. |\\\n| `sso_domain_already_exists` | (Admin API.) Only one SSO domain can be registered per SSO identity provider. |\\\n| `sso_provider_not_found` | SSO provider not found. Check the arguments in `supabase.auth.signInWithSSO()`. |\\\n| `too_many_enrolled_mfa_factors` | A user can only have a fixed number of enrolled MFA factors. |\\\n| `unexpected_audience` | (Deprecated feature not available via Supabase client libraries.) The request's `X-JWT-AUD` claim does not match the JWT's audience. |\\\n| `unexpected_failure` | Auth service is degraded or a bug is present, without a specific reason. |\\\n| `user_already_exists` | User with this information (email address, phone number) cannot be created again as it already exists. |\\\n| `user_banned` | User to which the API request relates has a `banned_until` property which is still active. No further API requests should be attempted until this field is cleared. |\\\n| `user_not_found` | User to which the API request relates no longer exists. |\\\n| `user_sso_managed` | When a user comes from SSO, certain fields of the user cannot be updated (like `email`). |\\\n| `validation_failed` | Provided parameters are not in the expected format. |\\\n| `weak_password` | User is signing up or changing their password without meeting the password strength criteria. Use the `AuthWeakPasswordError` class to access more information about what they need to do to make the password pass. |\\\n\\",
    "summary": "The documentation covers the Supabase Auth API, including details on creating an auth client, handling errors, and understanding various error codes. It provides an extensive list of error codes and their descriptions, which are crucial for developers to troubleshoot authentication-related issues in their applications. The content also discusses rate limits, session management, and considerations around persistent sessions, especially in environments where local storage is not available."
  },
  {
    "chunk_id": "e509a458-54d4-4429-aeca-f57e5e77e7df",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Tips for better error handling[#](#tips-for-better-error-handling)\\\n\\\n*   Do not use string matching on error messages! Always use the `name` and `code` properties of error objects to identify the situation.\\\n*   Although HTTP status codes generally don't change, they can suddenly change due to bugs, so avoid relying on them unless absolutely necessary.\\\n\\\n* * *\\\n\\\nCreate a new user\\\n-----------------\\\n\\\nCreates a new user.\\\n\\\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](/dashboard/project/_/auth/providers)\\\n    .\\\n*   **Confirm email** determines if users need to confirm their email address after signing up.\\\n    *   If **Confirm email** is enabled, a `user` is returned but `session` is null.\\\n    *   If **Confirm email** is disabled, both a `user` and a `session` are returned.\\\n*   When the user confirms their email address, they are redirected to the [`SITE_URL`](/docs/guides/auth/redirect-urls)\\\n     by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](/dashboard/project/_/auth/url-configuration)\\\n    .\\\n*   If signUp() is called for an existing confirmed user:\\\n    *   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\\\n        , an obfuscated/fake user object is returned.\\\n    *   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\\\n*   To fetch the currently logged-in user, refer to [`getUser()`](/docs/reference/javascript/auth-getuser)\\\n    .\\\n\\",
    "summary": "Summary:\n\nThe documentation provides tips for better error handling, emphasizing the use of error object properties over string matching and caution when relying on HTTP status codes. It then describes the process of creating a new user, highlighting the impact of the \"Confirm email\" setting on the returned user and session objects, as well as the behavior when creating an account for an existing confirmed user."
  },
  {
    "chunk_id": "a43e308c-7f17-438b-ae28-6d85fbe421bd",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content describes the \"credentialsRequired\" parameter options for a sign-up process, including signing up with an email and password, or a phone number and password (SMS). The summary covers the key technical details of the available sign-up methods and their respective input requirements."
  },
  {
    "chunk_id": "8f9fa125-3aba-47b8-830f-07e0c2f052c4",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\\\n\\\n`     _10  const { data, error } = await supabase.auth.signUp({  _10  email: 'example@email.com',  _10  password: 'example-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nListen to auth events\\\n---------------------\\\n\\\nReceive a notification every time an auth event happens.\\\n\\\n*   Subscribes to important events occurring on the user's session.\\\n*   Use on the frontend/client. It is less useful on the server.\\\n*   Events are emitted across tabs to keep your application's UI up-to-date. Some events can fire very frequently, based on the number of tabs open. Use a quick and efficient callback function, and defer or debounce as many operations as you can to be performed outside of the callback.\\\n*   **Important:** A callback can be an `async` function and it runs synchronously during the processing of the changes causing the event. You can easily create a dead-lock by using `await` on a call to another method of the Supabase library.\\\n    *   Avoid using `async` functions as callbacks.\\\n    *   Limit the number of `await` calls in `async` callbacks.\\\n    *   Do not use other Supabase functions in the callback function. If you must, dispatch the functions once the callback has finished executing. Use this as a quick way to achieve this:\\\n        \\\n        `     _10  supabase.auth.onAuthStateChange((event, session) => \\{  _10  setTimeout(async () => \\{  _10  // await on other Supabase function here  _10  // this runs right after the callback has finished  _10  \\}, 0)  _10  \\})      `\\\n        \\\n*   Emitted events:\\\n    *   `INITIAL_SESSION`\\\n        *   Emitted right after the Supabase client is constructed and the initial session from storage is loaded.\\\n    *   `SIGNED_IN`\\\n        *   Emitted each time a user session is confirmed or re-established, including on user sign in and when refocusing a tab.\\\n        *   Avoid making assumptions as to when this event is fired, this may occur even when the user is already signed in. Instead, check the user object attached to the event to see if a new user has signed in and update your application's UI.\\\n        *   This event can fire very frequently depending on the number of tabs open in your application.\\\n    *   `SIGNED_OUT`\\\n        *   Emitted when the user signs out. This can be after:\\\n            *   A call to `supabase.auth.signOut()`.\\\n            *   After the user's session has expired for any reason:\\\n                *   User has signed out on another device.\\\n                *   The session has reached its timebox limit or inactivity timeout.\\\n                *   User has signed in on another device with single session per user enabled.\\\n                *   Check the [User Sessions](/docs/guides/auth/sessions)\\\n                     docs for more information.\\\n        *   Use this to clean up any local storage your application has associated with the user.\\\n    *   `TOKEN_REFRESHED`\\\n        *   Emitted each time a new access and refresh token are fetched for the signed in user.\\\n        *   It's best practice and highly recommended to extract the access token (JWT) and store it in memory for further use in your application.\\\n            *   Avoid frequent calls to `supabase.auth.getSession()` for the same purpose.\\\n        *   There is a background process that keeps track of when the session should be refreshed so you will always receive valid tokens by listening to this event.\\\n        *   The frequency of this event is related to the JWT expiry limit configured on your project.\\\n    *   `USER_UPDATED`\\\n        *   Emitted each time the `supabase.auth.updateUser()` method finishes successfully. Listen to it to update your application's UI based on new profile information.\\\n    *   `PASSWORD_RECOVERY`\\\n        *   Emitted instead of the `SIGNED_IN` event when the user lands on a page that includes a password recovery link in the URL.\\\n        *   Use it to show a UI to the user where they can [reset their password](/docs/guides/auth/passwords#resetting-a-users-password-forgot-password)\\\n            .\\\n\\",
    "summary": "The summary covers the signUp method in the Supabase auth library, including various sign-up options and the response format. It also details the auth event listeners that can be used to subscribe to important events like sign-in, sign-out, token refresh, and user updates, providing guidelines on how to handle these callbacks efficiently."
  },
  {
    "chunk_id": "a04656d0-186d-492b-bec4-28490f3b7d23",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   callbackRequiredfunction\\\n    \\\n    A callback function to be invoked when an auth event happens.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation describes a callback function parameter that is invoked when an authentication event occurs. This allows the application to listen for and respond to changes in the user's authentication state, such as signing in or signing out. The callback function is a key part of the authentication process, enabling developers to integrate authentication functionality into their application."
  },
  {
    "chunk_id": "3ccfce83-9aaa-4253-a3cc-806a11dcc929",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nobject\\\n\\\nDetails\\\n\\\nListen to auth changesListen to sign outStore OAuth provider tokens on sign inUse React Context for the User's sessionListen to password recovery eventsListen to sign inListen to token refreshListen to user updates\\\n\\\n`     _20  const { data } = supabase.auth.onAuthStateChange((event, session) => {  _20  console.log(event, session)  _20  _20  if (event === 'INITIAL_SESSION') {  _20  // handle initial session  _20  } else if (event === 'SIGNED_IN') {  _20  // handle sign in event  _20  } else if (event === 'SIGNED_OUT') {  _20  // handle sign out event  _20  } else if (event === 'PASSWORD_RECOVERY') {  _20  // handle password recovery event  _20  } else if (event === 'TOKEN_REFRESHED') {  _20  // handle token refreshed event  _20  } else if (event === 'USER_UPDATED') {  _20  // handle user updated event  _20  }  _20  })  _20  _20  // call unsubscribe to remove the callback  _20  data.subscription.unsubscribe()      `\\\n\\\n* * *\\\n\\\nCreate an anonymous user\\\n------------------------\\\n\\\nCreates a new anonymous user.\\\n\\\n*   Returns an anonymous user\\\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\\\n\\",
    "summary": "The code example demonstrates how to listen for various authentication events, such as initial session, sign-in, sign-out, password recovery, token refresh, and user updates, using the Supabase authentication API. It also shows how to create an anonymous user, which is recommended to be set up with captcha to prevent abuse."
  },
  {
    "chunk_id": "d0d4aab3-6f57-4d49-8067-f72565ef74af",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsOptionalSignInAnonymouslyCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the ability to sign in anonymously and create an anonymous user with custom metadata. This functionality is accessed through a `credentialsOptionalSignInAnonymously` parameter, which returns a Promise that resolves to the created anonymous user. The summary highlights the key technical aspects of this capability, which allows users to interact with the system without providing explicit credentials."
  },
  {
    "chunk_id": "40bb94a7-0de7-4032-8355-2e96450feac2",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate an anonymous userCreate an anonymous user with custom user metadata\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInAnonymously({  _10  options: {  _10  captchaToken  _10  }  _10  });      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user\\\n--------------\\\n\\\nLog in an existing user with an email and password or phone and password.\\\n\\\n*   Requires either an email and password or a phone number and password.\\\n\\",
    "summary": "This section describes how to create an anonymous user with custom metadata, and how to sign in an existing user with an email and password or phone and password. The `signInAnonymously()` function creates an anonymous user, while the sign-in functionality allows users to authenticate with their credentials."
  },
  {
    "chunk_id": "709ae438-5298-4868-b5d3-26a46390f8a7",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters required for creating an anonymous user with custom metadata, as well as signing in with email/password or phone/password. It provides details on the return type, which is a Promise that resolves to a Union type. This functionality allows for the programmatic creation and authentication of users, which is a core capability in many application scenarios."
  },
  {
    "chunk_id": "d9595763-8a32-4493-9a25-6e40a7573233",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with email and passwordSign in with phone and password\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithPassword({  _10  email: 'example@email.com',  _10  password: 'example-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in with ID Token\\\n---------------------\\\n\\\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\\\n\\",
    "summary": "The documentation provides two methods for signing in: 1) with email and password, and 2) with an OIDC ID token. The email/password sign-in is demonstrated with example code, while the ID token sign-in allows authentication with an enabled and configured provider. These sign-in methods return a Promise with the user data or an error, which can be used in the application."
  },
  {
    "chunk_id": "86006f39-00a4-4b74-a28d-484f29bc07d3",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithIdTokenCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters and details for signing in with an ID token using the Supabase authentication API. It includes information about the required credentials and the return type, which is a Promise that resolves to a Union type with data and error properties."
  },
  {
    "chunk_id": "c5ee4995-7dec-47e9-a64c-12fb41ec3051",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign In using ID Token\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithIdToken({  _10  provider: 'google',  _10  token: 'your-id-token'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user through OTP\\\n--------------------------\\\n\\\nLog in a user using magiclink or a one-time password (OTP).\\\n\\\n*   Requires either an email or phone number.\\\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\\\n*   If the user doesn't exist, `signInWithOtp()` will signup the user instead. To restrict this behavior, you can set `shouldCreateUser` in `SignInWithPasswordlessCredentials.options` to `false`.\\\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\\\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\\\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\\\n    .\\\n*   See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards)\\\n     to add additional redirect URLs to your project.\\\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](/dashboard/project/_/auth/templates)\\\n     to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\\\n*   See our [Twilio Phone Auth Guide](/docs/guides/auth/phone-login?showSmsProvider=Twilio)\\\n     for details about configuring WhatsApp sign in.\\\n\\",
    "summary": "The documentation covers two methods for signing in users: sign in with ID token and sign in with one-time password (OTP). The sign in with ID token method allows users to authenticate using a Google ID token, while the sign in with OTP method supports passwordless sign-in using email or phone number. The OTP method can be configured to send either a magic link or a one-time code, and can also be used to sign up new users."
  },
  {
    "chunk_id": "39c23de6-268b-49ed-87ff-6d6d02389dbd",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters and details for signing in to an application using various authentication methods, including ID tokens, email, SMS OTP, and WhatsApp OTP. The summary specifies that the function returns a Promise that resolves to a Union type, indicating multiple possible return values, and provides the key details for each sign-in method."
  },
  {
    "chunk_id": "21dbda45-b3cd-4070-8195-24852b63307c",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithOtp({  _10  email: 'example@email.com',  _10  options: {  _10  emailRedirectTo: 'https://example.com/welcome'  _10  }  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nSign in a user through OAuth\\\n----------------------------\\\n\\\nLog in an existing user via a third-party provider. This method supports the PKCE flow.\\\n\\\n*   This method is used for signing in using a third-party provider.\\\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\\\n    .\\\n\\",
    "summary": "The summary provides details on signing in a user through OAuth, which allows authentication using third-party providers supporting the PKCE flow. It includes example code for signing in with email, SMS OTP, or WhatsApp OTP, and notes that Supabase supports various third-party providers for this purpose."
  },
  {
    "chunk_id": "c5ccb4e6-bc07-43b3-8092-755747370038",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithOAuthCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters required for signing in with OAuth credentials, which allows users to authenticate using a third-party provider. The `credentialsRequiredSignInWithOAuthCredentials` parameter is specifically mentioned, indicating that OAuth credentials are needed for this sign-in method."
  },
  {
    "chunk_id": "cdcf3512-6229-414f-8e00-356c97914eb4",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes and access provider tokens\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithOAuth({  _10  provider: 'github'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user through SSO\\\n--------------------------\\\n\\\nAttempts a single-sign on using an enterprise Identity Provider. A successful SSO attempt will redirect the current page to the identity provider authorization page. The redirect URL is implementation and SSO protocol specific.\\\n\\\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\\\n     to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\\\n     to do this.\\\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\\\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `providerId` property. For example:\\\n    *   Mapping specific user email addresses with an identity provider.\\\n    *   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\\\n\\",
    "summary": "This section describes the `signInWithOAuth()` method in the Supabase authentication API, which allows users to sign in using a third-party provider such as GitHub. It provides details on the different sign-in options, including signing in with scopes and access provider tokens, as well as the ability to sign in through single sign-on (SSO) using an enterprise identity provider. The method supports configuring the identity provider connection and using different ways to start the authentication flow, such as mapping specific email addresses or using company-specific hints."
  },
  {
    "chunk_id": "0de3665e-a27d-4e95-ac2a-d2ceee6dbf18",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content summarizes the parameters and details for a sign-in function that supports third-party providers and email domains. It returns a Promise that resolves to a Union type, allowing developers to handle different sign-in scenarios. The key technical points are the flexible sign-in options and the use of a Promise-based API for asynchronous operations."
  },
  {
    "chunk_id": "5275d569-efaf-4997-982e-910c1d60afae",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with email domainSign in with provider UUID\\\n\\\n`     _11  // You can extract the user's email domain and use it to trigger the  _11  // authentication flow with the correct identity provider.  _11  _11  const { data, error } = await supabase.auth.signInWithSSO({  _11  domain: 'company.com'  _11  })  _11  _11  if (data?.url) {  _11  // redirect the user to the identity provider's authentication flow  _11  window.location.href = data.url  _11  }      `\\\n\\\n* * *\\\n\\\nSign out a user\\\n---------------\\\n\\\nInside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\\\n\\\n*   In order to use the `signOut()` method, the user needs to be signed in first.\\\n*   By default, `signOut()` uses the global scope, which signs out all other sessions that the user is logged into as well.\\\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\\\n\\",
    "summary": "The provided content describes the authentication and sign-out functionality of the Supabase library. It explains how to sign in with an email domain or provider UUID, and outlines the `signOut()` method, which revokes the user's refresh token and removes all session data from the client-side. The key technical points include the use of JWT-based authentication and the ability to sign out all sessions associated with the user."
  },
  {
    "chunk_id": "a50caf2b-77f2-4d8b-af91-7238ef127834",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   optionsRequiredSignOut\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary describes the `signOut()` method from the Supabase authentication API, which returns a Promise that resolves to an object with an `error` property. This method allows users to sign out from the application, providing a simple way to handle user session management."
  },
  {
    "chunk_id": "7f94e3b2-2252-43c3-84f2-4220b26e15d3",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<object>\\\n\\\nDetails\\\n\\\nSign out\\\n\\\n`     _10  const { error } = await supabase.auth.signOut()      `\\\n\\\n* * *\\\n\\\nSend a password reset request\\\n-----------------------------\\\n\\\nSends a password reset request to an email address. This method supports the PKCE flow.\\\n\\\n*   The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\\\n*   The `resetPasswordForEmail()` only sends a password reset link to the user's email. To update the user's password, see [`updateUser()`](/docs/reference/javascript/auth-updateuser)\\\n    .\\\n*   A `SIGNED_IN` and `PASSWORD_RECOVERY` event will be emitted when the password recovery link is clicked. You can use [`onAuthStateChange()`](/docs/reference/javascript/auth-onauthstatechange)\\\n     to listen and invoke a callback function on these events.\\\n*   When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards)\\\n     to add additional redirect URLs to your project.\\\n*   After the user has been redirected successfully, prompt them for a new password and call `updateUser()`:\\\n\\\n`     _10  const \\{ data, error \\} = await supabase.auth.updateUser(\\{  _10  password: new_password  _10  \\})      `\\\n\\",
    "summary": "The content describes the `resetPasswordForEmail()` method in the Supabase JavaScript client library, which sends a password reset link to the user's email. It outlines the two-step password reset flow, where the user clicks the link to log in and then updates their password using the `updateUser()` method. The method supports the PKCE flow, and emits `SIGNED_IN` and `PASSWORD_RECOVERY` events that can be listened to using `onAuthStateChange()`."
  },
  {
    "chunk_id": "3001367d-1875-496a-81f7-2fd76ba4f465",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   emailRequiredstring\\\n    \\\n    The email address of the user.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This API method allows users to reset their password. It requires an email address as a parameter and returns a Promise that resolves to an object containing the reset password data or an error. This functionality is useful for securely resetting a user's credentials if they have forgotten their password."
  },
  {
    "chunk_id": "9ff4501a-bea8-462f-831d-a9678e131522",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nReset passwordReset password (React)\\\n\\\n`     _10  const { data, error } = await supabase.auth.resetPasswordForEmail(email, {  _10  redirectTo: 'https://example.com/update-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nVerify and log in through OTP\\\n-----------------------------\\\n\\\nLog in a user given a User supplied OTP or TokenHash received through mobile or email.\\\n\\\n*   The `verifyOtp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\\\n*   The verification type used should be determined based on the corresponding auth method called before `verifyOtp` to sign up / sign-in a user.\\\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\\\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\\\n     for more details.\\\n\\",
    "summary": "The documentation provides information on resetting a password using the Supabase auth API, as well as verifying and logging in a user through a one-time password (OTP) or token hash received via mobile or email. The `resetPasswordForEmail` method allows resetting a password, while the `verifyOtp` method supports various verification types like SMS, email, and password recovery to authenticate a user."
  },
  {
    "chunk_id": "dc75e6d9-5152-4151-8c81-7356fcb90bc2",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes a method that resets a password, accepting a required parameter of type `Promise<Union: expand to see options>`. The method details are not provided, but it is likely used to handle password reset functionality in a React application."
  },
  {
    "chunk_id": "4a634a40-0264-4caf-ae07-74b3c0e0e95d",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nVerify Signup One-Time Password (OTP)Verify Sms One-Time Password (OTP)Verify Email Auth (Token Hash)\\\n\\\n`     _10  const { data, error } = await supabase.auth.verifyOtp({ email, token, type: 'email'})      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a session\\\n------------------\\\n\\\nReturns the session, refreshing it if necessary.\\\n\\\n*   This method retrieves the current local session (i.e local storage).\\\n*   The session contains a signed JWT and unencoded session data.\\\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`getUser`](/docs/reference/javascript/auth-getuser)\\\n     instead.\\\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\\\n\\",
    "summary": "This documentation describes the `verifyOtp()` method, which allows verifying a one-time password (OTP) sent via email or SMS. It also covers the `getSession()` method, which retrieves the current session, refreshing it if necessary. The session contains a signed JWT and unencoded session data, but the unencoded data should not be relied upon as a trusted source, as it could be tampered with. Instead, the `getUser()` method should be used to retrieve verified user data."
  },
  {
    "chunk_id": "c0cae1f3-3dfe-4b03-a575-1ace7529db5b",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the session data\\\n\\\n`     _10  const { data, error } = await supabase.auth.getSession()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a new session\\\n----------------------\\\n\\\nReturns a new session, regardless of expiry status. Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession(). If the current session's refresh token is invalid, an error will be thrown.\\\n\\\n*   This method will refresh and return a new session whether the current one is expired or not.\\\n\\",
    "summary": "The provided content describes the `refreshSession()` method in a software documentation. This method retrieves a new session, regardless of the expiry status of the current session. It takes an optional current session object, and if not provided, it will attempt to retrieve the session from `getSession()`. If the current session's refresh token is invalid, an error will be thrown. This method allows the user to always obtain a valid session, whether the current one is expired or not."
  },
  {
    "chunk_id": "b867df3c-7ad7-417e-b567-3d8378e7d128",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   currentSessionOptionalobject\\\n    \\\n    The current session. If passed in, it must contain a refresh token.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This method refreshes the current session using the provided refresh token. It returns a Promise that resolves to the updated session data or an error. This functionality is useful for maintaining long-lived user sessions without constantly requiring the user to re-authenticate."
  },
  {
    "chunk_id": "ad91f482-aaec-45e3-805a-90af671de860",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRefresh session using the current sessionRefresh session using a refresh token\\\n\\\n`     _10  const { data, error } = await supabase.auth.refreshSession()  _10  const { session, user } = data      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a user\\\n---------------\\\n\\\nGets the current user details if there is an existing session. This method performs a network request to the Supabase Auth server, so the returned value is authentic and can be used to base authorization rules on.\\\n\\\n*   This method fetches the user object from the database instead of local session.\\\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\\\n*   Should always be used when checking for user authorization on the server. On the client, you can instead use `getSession().session.user` for faster results. `getSession` is insecure on the server.\\\n\\",
    "summary": "The function `refreshSession()` allows refreshing the current session using either the current session or a refresh token. It returns a Promise that resolves to an object containing the updated session and user details. The `getUser()` function retrieves the current user details by fetching the user object from the database, validating the user's access token JWT on the server, and can be used for secure server-side authorization checks."
  },
  {
    "chunk_id": "4214c200-273b-4a78-acc9-6c103246edbf",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   jwtOptionalstring\\\n    \\\n    Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\\\n    \\\n\\",
    "summary": "The provided content describes a method that accepts an optional access token JWT. If no JWT is provided, the method uses the JWT from the current session. This functionality allows for refreshing the user's session or retrieving the logged-in user using the existing session."
  },
  {
    "chunk_id": "c5396e67-c78b-4f68-a0c1-e2e986821f23",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\\\n\\\n`     _10  const { data: { user } } = await supabase.auth.getUser()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a user\\\n-------------\\\n\\\nUpdates user data for a logged in user.\\\n\\\n*   In order to use the `updateUser()` method, the user needs to be signed in first.\\\n*   By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n\\",
    "summary": "The summary covers the `updateUser()` method in the Supabase API, which allows updating the logged-in user's data. It provides details on the required parameters, including `attributes` (user attributes) and `options` (additional options). The method returns a Promise with the updated user data, and it requires the user to be signed in first. Additional information is provided on email updates and the need to disable the \"Secure email change\" setting in the project's email auth provider settings."
  },
  {
    "chunk_id": "c33fe4b0-9929-4101-9acd-d92e1e49e337",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   attributesRequiredUserAttributes\\\n    \\\n    Details\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section details the required user attributes and options for an operation, likely related to user management or authentication. The required user attributes are specified, and the required options are provided as an object, indicating that additional configuration parameters are needed for this operation."
  },
  {
    "chunk_id": "23b2dbbb-87e9-4658-90d6-c0863927c85e",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\\\n\\\n`     _10  const { data, error } = await supabase.auth.updateUser({  _10  email: 'new@email.com'  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nRetrieve identities linked to a user\\\n------------------------------------\\\n\\\nGets all the identities linked to a user.\\\n\\\n*   The user needs to be signed in to call `getUserIdentities()`.\\\n\\",
    "summary": "The documentation provides details on updating user profile information, including email, phone number, password, and metadata, via the Supabase `updateUser()` method. It also covers retrieving all identities linked to a user, which requires the user to be signed in. The response and notes sections provide additional context on the API usage."
  },
  {
    "chunk_id": "fb99eeeb-f135-4b85-94a9-40d6a74bc4b4",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nReturns a list of identities linked to the user\\\n\\\n`     _10  const { data, error } = await supabase.auth.getUserIdentities()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLink an identity to a user\\\n--------------------------\\\n\\\nLinks an oauth identity to an existing user. This method supports the PKCE flow.\\\n\\\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth)\\\n    .\\\n*   The user needs to be signed in to call `linkIdentity()`.\\\n*   If the candidate identity is already linked to the existing user or another user, `linkIdentity()` will fail.\\\n*   If `linkIdentity` is run in the browser, the user is automatically redirected to the returned URL. On the server, you should handle the redirect.\\\n\\",
    "summary": "The provided content describes the return type and details of the `supabase.auth.getUserIdentities()` function, which returns a list of identities linked to the authenticated user. It also covers the `linkIdentity()` function, which allows linking an OAuth identity to an existing user account, with specific requirements and considerations around this process."
  },
  {
    "chunk_id": "cacd4106-f1e0-4911-b5fb-4e310f2c3fb6",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithOAuthCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a function that returns a list of identities linked to the user. It also details a function to link an identity to a user, which requires OAuth credentials. The summary captures the key technical points of these functions and their significance in the context of user identity management."
  },
  {
    "chunk_id": "2a8e2c4e-8016-410d-b60e-6032dc60615e",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nLink an identity to a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.linkIdentity({  _10  provider: 'github'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUnlink an identity from a user\\\n------------------------------\\\n\\\nUnlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\\\n\\\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth)\\\n    .\\\n*   The user needs to be signed in to call `unlinkIdentity()`.\\\n*   The user must have at least 2 identities in order to unlink an identity.\\\n*   The identity to be unlinked must belong to the user.\\\n\\",
    "summary": "This section covers linking and unlinking user identities in the Supabase authentication system. The `linkIdentity()` function allows linking an identity (e.g., GitHub) to a user account, while `unlinkIdentity()` removes an identity from the user. Unlinking requires the \"Enable Manual Linking\" option to be enabled and the user to have at least two identities, as the user must maintain at least one active identity."
  },
  {
    "chunk_id": "1b62dd96-8d68-41d1-9267-ecc86f7a90a3",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   identityRequiredUserIdentity\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provided describes the functionality of linking an identity to a user. It involves making a Promise-based call to the Supabase authentication API, providing a user identity as a parameter. This allows associating an external identity (e.g., social media account) with a user's account, which can be useful for authentication and identity management purposes."
  },
  {
    "chunk_id": "02a62e38-1a12-4b80-9766-6533aaec1534",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUnlink an identity\\\n\\\n`     _10  // retrieve all identites linked to a user  _10  const identities = await supabase.auth.getUserIdentities()  _10  _10  // find the google identity  _10  const googleIdentity = identities.find(  _10  identity => identity.provider === 'google'  _10  )  _10  _10  // unlink the google identity  _10  const { error } = await supabase.auth.unlinkIdentity(googleIdentity)      `\\\n\\\n* * *\\\n\\\nSend a password reauthentication nonce\\\n--------------------------------------\\\n\\\nSends a reauthentication OTP to the user's email or phone number. Requires the user to be signed-in.\\\n\\\n*   This method is used together with `updateUser()` when a user's password needs to be updated.\\\n*   If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n*   A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\\\n*   This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\\\n\\",
    "summary": "The provided content describes the process of unlinking an identity from a user account and sending a password reauthentication nonce. It explains that the `unlinkIdentity()` method can be used to unlink a specific identity (e.g., Google) from a user's account, and the `reauthenticateWithOTP()` method can be used to send a one-time password (OTP) to the user's email or phone number, which is required to update the user's password if the \"Secure password change\" option is enabled in the project settings."
  },
  {
    "chunk_id": "8f5d32bb-4349-4208-a791-49de53ff7bc5",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSend reauthentication nonce\\\n\\\n`     _10  const { error } = await supabase.auth.reauthenticate()      `\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nResend an OTP\\\n-------------\\\n\\\nResends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\\\n\\\n*   Resends a signup confirmation, email change or phone change email to the user.\\\n*   Passwordless sign-ins can be resent by calling the `signInWithOtp()` method again.\\\n*   Password recovery emails can be resent by calling the `resetPasswordForEmail()` method again.\\\n*   This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\\\n*   You can specify a redirect url when you resend an email link using the `emailRedirectTo` option.\\\n\\",
    "summary": "The documentation describes the `reauthenticate()` method, which sends a reauthentication nonce to the client. It also outlines the `resendOtp()` method, which can resend signup confirmation, email change, or password recovery emails, as well as SMS one-time passwords, to the user. This functionality is useful for handling various account-related actions and improving user experience."
  },
  {
    "chunk_id": "c7221f2f-8c24-41f5-997f-bb3dbed17430",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This method sends a reauthentication nonce, which is a one-time token used to verify the user's identity. It returns a Promise that resolves to an object with an error property if the operation fails. The method is useful for re-authenticating users after they've been logged out or their session has expired."
  },
  {
    "chunk_id": "8d06564f-5dea-4a1c-aa26-0c83781afc77",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\\\n\\\n`     _10  const { error } = await supabase.auth.resend({  _10  type: 'signup',  _10  email: 'email@example.com',  _10  options: {  _10  emailRedirectTo: 'https://example.com/welcome'  _10  }  _10  })      `\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nSet the session data\\\n--------------------\\\n\\\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\\\n\\\n*   This method sets the session using an `access_token` and `refresh_token`.\\\n*   If successful, a `SIGNED_IN` event is emitted.\\\n\\",
    "summary": "The summary explains the \"resend\" functionality, which allows resending email signup confirmations, phone signup confirmations, email change emails, and phone change OTPs. It also describes the \"setSession\" method, which sets the session data from the current session, handling token refreshing and emitting a \"SIGNED_IN\" event on success."
  },
  {
    "chunk_id": "d9b12131-fc80-44e2-9502-ebe0fe9a5443",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   currentSessionRequiredobject\\\n    \\\n    The current session that minimally contains an access token and refresh token.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters for the `supabase.auth.setSession()` function, which allows setting the current session by providing an object containing an access token and refresh token. This function is useful for maintaining user authentication state across application sessions."
  },
  {
    "chunk_id": "e146cc57-7012-4e02-8bf0-0fc92daa1da1",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSet the session\\\n\\\n`     _10  const { data, error } = await supabase.auth.setSession({  _10  access_token,  _10  refresh_token  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nExchange an auth code for a session\\\n-----------------------------------\\\n\\\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\\\n\\\n*   Used when `flowType` is set to `pkce` in client options.\\\n\\",
    "summary": "The provided content describes two related methods in the Supabase library:\n\n1. `setSession()`: This method sets the current session by taking an `access_token` and `refresh_token` as parameters and returns a Promise with the session data or an error.\n\n2. An unnamed method that exchanges an `authCode` (obtained during the PKCE flow) for a session. This is used when the `flowType` is set to `pkce` in the client options, allowing an existing user to log in by exchanging the Auth Code."
  },
  {
    "chunk_id": "77f274f3-0c80-4790-a2cb-432f7a227ced",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   authCodeRequiredstring\\\n    \\\n\\",
    "summary": "The summary is as follows:\n\nThis excerpt describes the `exchangeCodeForSession` function in the Supabase auth API, which takes an `authCodeRequired` parameter and returns a Promise that resolves to a session object. This function is used to exchange an authentication code (e.g., from a third-party OAuth provider) for a valid Supabase session, allowing the user to be authenticated and perform actions on the Supabase platform."
  },
  {
    "chunk_id": "aa0a33ba-b1c7-49e5-bd8a-d883eba517b0",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nExchange Auth Code\\\n\\\n`     _10  supabase.auth.exchangeCodeForSession('34e770dd-9ff9-416c-87fa-43b31d7ef225')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nStart auto-refresh session (non-browser)\\\n----------------------------------------\\\n\\\nStarts an auto-refresh process in the background. The session is checked every few seconds. Close to the time of expiration a process is started to refresh the session. If refreshing fails it will be retried for as long as necessary.\\\n\\\n*   Only useful in non-browser environments such as React Native or Electron.\\\n*   The Supabase Auth library automatically starts and stops proactively refreshing the session when a tab is focused or not.\\\n*   On non-browser platforms, such as mobile or desktop apps built with web technologies, the library is not able to effectively determine whether the application is _focused_ or not.\\\n*   To give this hint to the application, you should be calling this method when the app is in focus and calling `supabase.auth.stopAutoRefresh()` when it's out of focus.\\\n\\",
    "summary": "The documentation describes the `supabase.auth.exchangeCodeForSession()` method, which is used to exchange an auth code for a session. It also explains the `supabase.auth.startAutoRefresh()` and `supabase.auth.stopAutoRefresh()` methods, which are used to start and stop an automatic session refresh process in non-browser environments like React Native or Electron. The auto-refresh process checks the session periodically and refreshes it as needed to prevent expiration."
  },
  {
    "chunk_id": "fc4d4961-3b25-4c48-a6da-a7828b6461f3",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<void>\\\n\\\nStart and stop auto refresh in React Native\\\n\\\n`     _10  import { AppState } from 'react-native'  _10  _10  // make sure you register this only once!  _10  AppState.addEventListener('change', (state) => {  _10  if (state === 'active') {  _10  supabase.auth.startAutoRefresh()  _10  } else {  _10  supabase.auth.stopAutoRefresh()  _10  }  _10  })      `\\\n\\\n* * *\\\n\\\nStop auto-refresh session (non-browser)\\\n---------------------------------------\\\n\\\nStops an active auto refresh process running in the background (if any).\\\n\\\n*   Only useful in non-browser environments such as React Native or Electron.\\\n*   The Supabase Auth library automatically starts and stops proactively refreshing the session when a tab is focused or not.\\\n*   On non-browser platforms, such as mobile or desktop apps built with web technologies, the library is not able to effectively determine whether the application is _focused_ or not.\\\n*   When your application goes in the background or out of focus, call this method to stop the proactive refreshing of the session.\\\n\\",
    "summary": "The summary provides instructions for starting and stopping auto-refresh of the Supabase authentication session in a React Native application. It also explains the need to manually stop the auto-refresh in non-browser environments like React Native or Electron to prevent issues when the application goes in the background or out of focus."
  },
  {
    "chunk_id": "8b2cfed6-560a-4fb3-80b1-cba767fe7897",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<void>\\\n\\\nStart and stop auto refresh in React Native\\\n\\\n`     _10  import { AppState } from 'react-native'  _10  _10  // make sure you register this only once!  _10  AppState.addEventListener('change', (state) => {  _10  if (state === 'active') {  _10  supabase.auth.startAutoRefresh()  _10  } else {  _10  supabase.auth.stopAutoRefresh()  _10  }  _10  })      `\\\n\\\n* * *\\\n\\\nAuth MFA\\\n--------\\\n\\\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\\\n\\\nCurrently, there is support for time-based one-time password (TOTP) and phone verification code as the 2nd factor. Recovery codes are not supported but users can enroll multiple factors, with an upper limit of 10.\\\n\\\nHaving a 2nd factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup factor.\\\n\\\n* * *\\\n\\\nEnroll a factor\\\n---------------\\\n\\\nStarts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new `unverified` factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it.\\\n\\\n*   Use `totp` or `phone` as the `factorType` and use the returned `id` to create a challenge.\\\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/javascript/auth-mfa-challenge)\\\n    .\\\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n    .\\\n*   To create and verify a TOTP challenge in a single step, see [`mfa.challengeAndVerify()`](/docs/reference/javascript/auth-mfa-challengeandverify)\\\n    .\\\n*   To generate a QR code for the `totp` secret in Next.js, you can do the following:\\\n\\\n`     _10  <Image src=\\{data.totp.qr_code\\} alt=\\{data.totp.uri\\} layout=\"fill\"></Image>      `\\\n\\\n*   The `challenge` and `verify` steps are separated when using Phone factors as the user will need time to receive and input the code obtained from the SMS in challenge.\\\n\\",
    "summary": "The provided code demonstrates how to start and stop auto-refresh for React Native's `AppState` to maintain Supabase's user session. The documentation also covers Supabase's Multi-Factor Authentication (MFA) functionality, including enrolling and verifying TOTP and phone-based factors. Key features include supporting multiple factors, generating QR codes for TOTP setup, and separating the challenge and verification steps for phone-based factors."
  },
  {
    "chunk_id": "4d72ac9e-850b-4af0-b74a-3381064c79e0",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAEnrollParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary covers the parameters required for enrolling a Time-based One-Time Password (TOTP) or Phone Factor as a multi-factor authentication (MFA) method. It provides details on the specific parameters needed and their significance in the MFA enrollment process."
  },
  {
    "chunk_id": "59313e36-313b-4034-824c-818fb5c019ef",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nEnroll a time-based, one-time password (TOTP) factorEnroll a Phone Factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.enroll({  _10  factorType: 'totp',  _10  friendlyName: 'your_friendly_name'  _10  })  _10  _10  // Use the id to create a challenge.  _10  // The challenge can be verified by entering the code generated from the authenticator app.  _10  // The code will be generated upon scanning the qr_code or entering the secret into the authenticator app.  _10  const { id, type, totp: { qr_code, secret, uri }, friendly_name } = data  _10  const challenge = await supabase.auth.mfa.challenge({ factorId: id });      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a challenge\\\n------------------\\\n\\\nPrepares a challenge used to verify that a user has access to a MFA factor.\\\n\\\n*   An [enrolled factor](/docs/reference/javascript/auth-mfa-enroll)\\\n     is required before creating a challenge.\\\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n    .\\\n*   A phone factor sends a code to the user upon challenge. The channel defaults to `sms` unless otherwise specified.\\\n\\",
    "summary": "The documentation describes how to enroll a time-based, one-time password (TOTP) or phone factor for multi-factor authentication (MFA) using the Supabase JavaScript client. It explains the process of creating a challenge, which is required to verify that a user has access to an enrolled MFA factor. The challenge can be used to generate a code that the user can enter to complete the verification."
  },
  {
    "chunk_id": "ae7fc97f-2ed5-4f26-a9cb-538e40e7c024",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAChallengeParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary describes a method that creates a challenge for a multi-factor authentication (MFA) factor, such as a phone factor. It takes in required parameters of type `MFAChallengeParams` and returns a Promise that resolves to a Union type, likely containing the details of the created challenge."
  },
  {
    "chunk_id": "3256da00-8313-41ba-bad8-0d4f4262dd8e",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate a challenge for a factorCreate a challenge for a phone factorCreate a challenge for a phone factor (WhatsApp)\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.challenge({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nVerify a challenge\\\n------------------\\\n\\\nVerifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app.\\\n\\\n*   To verify a challenge, please [create a challenge](/docs/reference/javascript/auth-mfa-challenge)\\\n     first.\\\n\\",
    "summary": "The documentation covers two related endpoints: 1) `challenge()` which creates a multi-factor authentication (MFA) challenge, and 2) `verify()` which verifies a challenge by checking a code entered by the user. The `challenge()` method supports creating challenges for different factor types, including a phone factor. The `verify()` method is used to validate the challenge response provided by the user."
  },
  {
    "chunk_id": "2b9728ca-51ad-42e7-b293-4b1f2e8f421b",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAVerifyParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section provides details on the `paramsRequiredMFAVerifyParams` parameter, which is used to verify a challenge for a factor. The method returns a Promise that resolves to an object containing `data` and `error` properties, allowing developers to handle the response and potential errors."
  },
  {
    "chunk_id": "05e728bd-d642-4f08-9d7e-51000f10b6ef",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nVerify a challenge for a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.verify({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  challengeId: '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  code: '123456'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate and verify a challenge\\\n-----------------------------\\\n\\\nHelper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app.\\\n\\\n*   Intended for use with only TOTP factors.\\\n*   An [enrolled factor](/docs/reference/javascript/auth-mfa-enroll)\\\n     is required before invoking `challengeAndVerify()`.\\\n*   Executes [`mfa.challenge()`](/docs/reference/javascript/auth-mfa-challenge)\\\n     and [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n     in a single step.\\\n\\",
    "summary": "The provided content describes a helper method `challengeAndVerify()` that creates a Multi-Factor Authentication (MFA) challenge and immediately verifies the given code against it. This is intended for use with TOTP factors and requires an enrolled factor. The method executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, simplifying the process for the user."
  },
  {
    "chunk_id": "fb616ad9-995b-417b-a0e9-c7497aec1148",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAChallengeAndVerifyParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes a function that can create and verify a multi-factor authentication (MFA) challenge. It takes in a set of required parameters, including those related to the MFA challenge, and returns a Promise that resolves to the challenge data or an error. This functionality is likely important for implementing secure authentication workflows in the software."
  },
  {
    "chunk_id": "2b8de44a-1b76-462b-b63d-251d14734bf8",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate and verify a challenge for a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.challengeAndVerify({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  code: '123456'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUnenroll a factor\\\n-----------------\\\n\\\nUnenroll removes a MFA factor. A user has to have an `aal2` authenticator level in order to unenroll a `verified` factor.\\\n\\",
    "summary": "This section covers two related MFA (Multi-Factor Authentication) operations: 1) Challenging and verifying a factor, which allows creating and verifying a challenge for a specific MFA factor, and 2) Unenrolling a factor, which removes a previously enrolled MFA factor, requiring an `aal2` (Authenticator Assurance Level 2) to unenroll a `verified` factor."
  },
  {
    "chunk_id": "ed60d7c5-a6ff-493e-90f4-87a8764d0166",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAUnenrollParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters required for the `mfa.unenroll()` function, which allows users to unenroll a multi-factor authentication (MFA) factor. The summary outlines the purpose of this function, which is to remove a previously enrolled MFA factor, enabling users to manage their authentication preferences."
  },
  {
    "chunk_id": "6cd62072-06e7-48a6-bfd9-698e6458bcc9",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUnenroll a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.unenroll({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nGet Authenticator Assurance Level\\\n---------------------------------\\\n\\\nReturns the Authenticator Assurance Level (AAL) for the active session.\\\n\\\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\\\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP) or Phone factor.\\\n*   If the user has a verified factor, the `nextLevel` field will return `aal2`, else, it will return `aal1`.\\\n\\",
    "summary": "The documentation outlines the functionality to unenroll a multi-factor authentication (MFA) factor and retrieve the Authenticator Assurance Level (AAL) for the active session. The AAL indicates the strength of the authentication mechanism, where `aal1` represents a single factor (e.g., email and password) and `aal2` represents a second factor (e.g., TOTP or phone factor). The `nextLevel` field in the response indicates the required AAL level for the user to have a verified factor."
  },
  {
    "chunk_id": "ddd1a986-fb0b-4d04-b74a-78d4350c70cc",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the AAL details of a session\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()  _10  const { currentLevel, nextLevel, currentAuthenticationMethods } = data      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nAuth Admin\\\n----------\\\n\\\n*   Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\\\n*   These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\\\n\\\nCreate server-side auth client\\\n\\\n`     _11  import { createClient } from '@supabase/supabase-js'  _11  _11  const supabase = createClient(supabase_url, service_role_key, {  _11  auth: {  _11  autoRefreshToken: false,  _11  persistSession: false  _11  }  _11  })  _11  _11  // Access auth admin api  _11  const adminAuthClient = supabase.auth.admin      `\\\n\\\n* * *\\\n\\\nRetrieve a user\\\n---------------\\\n\\\nGet user by id.\\\n\\\n*   Fetches the user object from the database based on the user's id.\\\n*   The `getUserById()` method requires the user's id which maps to the `auth.users.id` column.\\\n\\",
    "summary": "The documentation describes how to unenroll a factor for multi-factor authentication (MFA) using the Supabase Auth API. It also explains the concept of \"Auth Admin\" methods, which are server-side operations that require a service role key and should not be exposed in the client. Additionally, it provides an example of retrieving a user by their unique identifier using the `getUserById()` method."
  },
  {
    "chunk_id": "1379444a-f0d5-491f-81ce-95f71aec9063",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   uidRequiredstring\\\n    \\\n    The user's unique identifier\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n\\",
    "summary": "This function retrieves the AAL (Adaptive Authentication Level) details of a session using a user's unique identifier (uid). It should only be called on a server and never expose the service_role key in the browser, as that would be a security risk."
  },
  {
    "chunk_id": "a41f1942-130f-422a-a403-a313b59c8086",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nFetch the user object using the access\\_token jwt\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.getUserById(1)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all users\\\n--------------\\\n\\\nGet a list of users.\\\n\\\n*   Defaults to return 50 users per page.\\\n\\",
    "summary": "The provided content describes a function that fetches a user object using a user ID and an access token. It also outlines a method to list all users, with the option to specify the number of users per page. The key technical points include the use of the Supabase auth.admin.getUserById() function and the ability to control the pagination of the user list."
  },
  {
    "chunk_id": "63ffd517-054e-4cf1-b649-a8e0e2279fc4",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsOptionalPageParams\\\n    \\\n    An object which supports `page` and `perPage` as numbers, to alter the paginated results.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content describes a function that fetches a paginated list of users, with optional parameters to control the page and number of results per page. The function returns a Promise that resolves to the user data, or an error if the operation fails. This functionality allows for efficient retrieval and pagination of user information in a software application."
  },
  {
    "chunk_id": "0bd51423-20ca-4006-98a7-9f5a75b6eb28",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet a page of usersPaginated list of users\\\n\\\n`     _10  const { data: { users }, error } = await supabase.auth.admin.listUsers()      `\\\n\\\n* * *\\\n\\\nCreate a user\\\n-------------\\\n\\\nCreates a new user. This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n\\\n*   To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\\\n*   `createUser()` will not send a confirmation email to the user. You can use [`inviteUserByEmail()`](/docs/reference/javascript/auth-admin-inviteuserbyemail)\\\n     if you want to send them an email invite instead.\\\n*   If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\\\n\\",
    "summary": "The documentation describes two key functions: `listUsers()` and `createUser()`. `listUsers()` retrieves a paginated list of users, while `createUser()` creates a new user, with options to confirm the user's email or phone number. The `createUser()` function should only be called on a server, as it uses the `service_role` key, which should not be exposed in the browser."
  },
  {
    "chunk_id": "074a2c34-29c2-4266-bded-4458a299853c",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   attributesRequiredAdminUserAttributes\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a set of required administrative user attributes, which are likely used to manage user profiles or permissions in the application. The summary includes details about the required attributes, suggesting this information is relevant for configuring or interacting with the user management functionality of the system."
  },
  {
    "chunk_id": "c8e30627-4890-456d-8e0c-0af7d0fad2a7",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.createUser({  _10  email: 'user@email.com',  _10  password: 'password',  _10  user_metadata: { name: 'Yoda' }  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a user\\\n-------------\\\n\\\nDelete a user. Requires a `service_role` key.\\\n\\\n*   The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.\\\n\\",
    "summary": "The documentation describes the `supabase.auth.admin.createUser()` method, which allows creating a new user with custom metadata. It also covers the `supabase.auth.admin.deleteUser()` method, which requires the user's ID and a `service_role` key to delete a user. The summary highlights the key functionality of creating and deleting users, along with the required parameters and response details."
  },
  {
    "chunk_id": "252bf3dc-23d3-46f5-859a-314db5a9e833",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The user id you want to remove.\\\n    \\\n*   shouldSoftDeleteRequiredboolean\\\n    \\\n    If true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n\\",
    "summary": "The provided content describes a function that removes a user from the Supabase authentication schema. The function takes two parameters: `id` (the user ID to remove) and `shouldSoftDelete` (a boolean indicating whether to soft-delete the user, which preserves their data while disabling their account). This function should only be used on a server-side environment to avoid exposing the sensitive `service_role` key."
  },
  {
    "chunk_id": "702d175b-57e9-4612-868e-94d61566ac96",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRemoves a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.deleteUser(  _10  '715ed5db-f090-4b8c-a067-640ecee36aa0'  _10  )      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSend an email invite link\\\n-------------------------\\\n\\\nSends an invite link to an email address.\\\n\\\n*   Sends an invite link to the user's email address.\\\n*   The `inviteUserByEmail()` method is typically used by administrators to invite users to join the application.\\\n*   Note that PKCE is not supported when using `inviteUserByEmail`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\\\n\\",
    "summary": "The documentation describes two related methods in the Supabase authentication API: `deleteUser()` and `inviteUserByEmail()`. `deleteUser()` removes a user from the system, with options to soft-delete or permanently delete the user. `inviteUserByEmail()` sends an invite link to the specified email address, typically used by administrators to invite users to join the application. This method does not support PKCE due to security considerations when the invite is accepted from a different browser."
  },
  {
    "chunk_id": "5e630a3b-24e8-43c9-914b-f48dd1f2543d",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   emailRequiredstring\\\n    \\\n    The email address of the user.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Additional options to be included when inviting.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provided here is a concise yet comprehensive overview of the functionality to invite a user in the Supabase authentication API. It highlights the key parameters required, including the email address and additional options, as well as the high-level purpose of the API - to invite a user. This summary would be highly useful in a search pipeline to help users quickly understand the core functionality and relevant details of this Supabase authentication operation."
  },
  {
    "chunk_id": "3322afc8-121e-41ae-abd4-deabbb33a685",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nInvite a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.inviteUserByEmail('email@example.com')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nGenerate an email link\\\n----------------------\\\n\\\nGenerates email links and OTPs to be sent via a custom email provider.\\\n\\\n*   The following types can be passed into `generateLink()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\\\n*   `generateLink()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n*   `generateLink()` handles the creation of the user for `signup`, `invite` and `magiclink`.\\\n\\",
    "summary": "The provided content describes a function to invite a user by email and generate email links for various authentication purposes, such as signup, magic link, email change, and recovery. The function handles the creation of the user for specific link types and provides details on the available link types and their use cases, including the requirement for enabling secure email change in the project's email auth provider settings."
  },
  {
    "chunk_id": "db4d8ecc-f350-48de-b72a-f8a0059274b3",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredGenerateLinkParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation describes functions for generating various types of authentication links, including signup, invite, magic, and recovery links. The `generateLinkParams` parameter is required for these functions, which take in details such as the user's email address and the desired link type."
  },
  {
    "chunk_id": "ae59e68b-6535-4867-b153-967e7c76a2cd",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.generateLink({  _10  type: 'signup',  _10  email: 'email@example.com',  _10  password: 'secret'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a user\\\n-------------\\\n\\\nUpdates the user data.\\\n\\",
    "summary": "This section describes the `supabase.auth.admin.generateLink()` function, which can be used to generate various types of links, such as signup, invite, magic, recovery, and email change links. It also covers the `supabase.auth.admin.updateUser()` function, which allows updating a user's data."
  },
  {
    "chunk_id": "f3f76bbe-b079-40f6-81d6-9c43ef64629a",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   uidRequiredstring\\\n    \\\n*   attributesRequiredAdminUserAttributes\\\n    \\\n    The data you want to update.\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This function updates a user's account attributes, including email, password, and metadata, using the provided `uid` and `attributes` parameters. It is designed to be called on a server-side environment, as it requires the `service_role` key which should not be exposed in the browser."
  },
  {
    "chunk_id": "ce2ed49a-2fc8-4d04-9fa9-f176fe2d565e",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\\\n\\\n`     _10  const { data: user, error } = await supabase.auth.admin.updateUserById(  _10  '11111111-1111-1111-1111-111111111111',  _10  { email: 'new@email.com' }  _10  )      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a factor for a user\\\n--------------------------\\\n\\\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\\\n\\",
    "summary": "This function allows updating various user attributes, including email, password, metadata, and app metadata, as well as confirming email and phone number. It also provides a method to delete a user's authentication factor, which will log the user out of all active sessions."
  },
  {
    "chunk_id": "0a173cea-492d-4d50-9174-eb2adf70f3a9",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredAuthMFAAdminDeleteFactorParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section provides details on deleting a user's two-factor authentication (2FA) factor. It takes a `paramsRequiredAuthMFAAdminDeleteFactorParams` object as input, which likely contains the necessary parameters to identify the user and the 2FA factor to be deleted. The function returns a Promise that resolves to the result of the 2FA factor deletion operation."
  },
  {
    "chunk_id": "aa031dc1-2e2c-4194-9708-7549e11c4a66",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete a factor for a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.mfa.deleteFactor({  _10  id: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  userId: 'a89baba7-b1b7-440f-b4bb-91026967f66b',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nInvokes a Supabase Edge Function.\\\n---------------------------------\\\n\\\nInvokes a function\\\n\\\nInvoke a Supabase Edge Function.\\\n\\\n*   Requires an Authorization header.\\\n*   Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\\\n     spec.\\\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialize it and attach the `Content-Type` header as `application/json`. You can override this behavior by passing in a `Content-Type` header of your own.\\\n*   Responses are automatically parsed as `json`, `blob` and `form-data` depending on the `Content-Type` header sent by your function. Responses are parsed as `text` by default.\\\n\\",
    "summary": "This documentation describes a function to delete a factor for a user in the Supabase authentication system. It provides a sample code snippet demonstrating how to invoke the function using the Supabase Edge Function API, which requires an authorization header. The response from the function is automatically parsed based on the content type header, and can be in various formats such as JSON, blob, or form data."
  },
  {
    "chunk_id": "14928bd3-cfd9-449d-b82c-ef3b4e95f54b",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   functionNameRequiredstring\\\n    \\\n    The name of the Function to invoke.\\\n    \\\n*   optionsRequiredFunctionInvokeOptions\\\n    \\\n    Options for invoking the Function.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary describes the parameters required to invoke a function, including the function name and function invoke options. It provides details on the expected data types and the purpose of each parameter, which is critical information for developers when integrating this functionality into their applications."
  },
  {
    "chunk_id": "daec683d-d2f4-4050-9a27-f7d8c2d95643",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nBasic invocationError handlingPassing custom headersCalling with DELETE HTTP verbInvoking a Function in the UsEast1 regionCalling with GET HTTP verb\\\n\\\n`     _10  const { data, error } = await supabase.functions.invoke('hello', {  _10  body: { foo: 'bar' }  _10  })      `\\\n\\\n* * *\\\n\\\nSubscribe to channel\\\n--------------------\\\n\\\nCreates an event handler that listens to changes.\\\n\\\n*   By default, Broadcast and Presence are enabled for all projects.\\\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\\\n    .\\\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\\\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\\\n\\",
    "summary": "The documentation describes the parameters for invoking a Function, including the function name, options, and details about the `type` and `filter` parameters. It also provides example code for invoking a Function, and outlines key points about subscribing to a channel, such as enabling Broadcast and Presence, managing Realtime's replication, and handling row-level security and replica identity for updates and deletes."
  },
  {
    "chunk_id": "d1861f99-4208-4a16-8321-03f31d3cc7a0",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   typeRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n*   filterRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n*   callbackRequiredfunction\\\n    \\\n    Details\\\n    \\\n\\\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\\\n\\\n`     _13  const channel = supabase.channel(\"room1\")  _13  _13  channel.on(\"broadcast\", { event: \"cursor-pos\" }, (payload) => {  _13  console.log(\"Cursor position received!\", payload);  _13  }).subscribe((status) => {  _13  if (status === \"SUBSCRIBED\") {  _13  channel.send({  _13  type: \"broadcast\",  _13  event: \"cursor-pos\",  _13  payload: { x: Math.random(), y: Math.random() },  _13  });  _13  }  _13  });      `\\\n\\\n* * *\\\n\\\nUnsubscribe from a channel\\\n--------------------------\\\n\\\nUnsubscribes and removes Realtime channel from Realtime client.\\\n\\\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\\\n\\",
    "summary": "The documentation outlines the parameters for listening to various types of Realtime events in a Supabase application, including broadcast messages, presence sync, database changes, and more. It also provides an example of how to subscribe to a channel and send a broadcast message. Additionally, it explains the importance of unsubscribing from unused Realtime channels to maintain performance and database efficiency."
  },
  {
    "chunk_id": "cbf52b08-ae18-4550-b736-9a478ef2771e",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   channelRequired@supabase/realtime-js.RealtimeChannel\\\n    \\\n    The name of the Realtime channel.\\\n    \\\n\\",
    "summary": "The parameters include a required `channel` parameter of type `RealtimeChannel`, which represents the name of the Realtime channel to be removed. This method is part of the `supabase/realtime-js` library and is used to remove a specified Realtime channel."
  },
  {
    "chunk_id": "7e681a5f-22f6-42c1-8fd6-645ab6a6c423",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRemoves a channel\\\n\\\n`     _10  supabase.removeChannel(myChannel)      `\\\n\\\n* * *\\\n\\\nUnsubscribe from all channels\\\n-----------------------------\\\n\\\nUnsubscribes and removes all Realtime channels from Realtime client.\\\n\\\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\\\n\\",
    "summary": "The documentation describes two methods for managing Realtime channels in the Supabase client: `removeChannel()` to remove a specific channel, and `removeAllChannels()` to unsubscribe and remove all Realtime channels. Removing unused channels is recommended to maintain the performance of the Realtime service and the underlying database, as unused channels can cause degradation as more clients are subscribed."
  },
  {
    "chunk_id": "072320bb-55bd-446f-b693-7fc56939f27d",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Array<Union: expand to see options>>\\\n\\\nDetails\\\n\\\nRemove all channels\\\n\\\n`     _10  supabase.removeAllChannels()      `\\\n\\\n* * *\\\n\\\nRetrieve all channels\\\n---------------------\\\n\\\nReturns all Realtime channels.\\\n\\",
    "summary": "The provided content describes two Supabase Realtime API methods: `removeAllChannels()`, which removes all active channels, and `getChannels()`, which returns an array of all currently active channels. The return types for these methods are a Promise that resolves to `void` for `removeAllChannels()`, and an array of `RealtimeChannel` objects for `getChannels()`, respectively."
  },
  {
    "chunk_id": "7b68e0e0-01c5-4bf8-907f-6cf2a091bfd0",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nArray<@supabase/realtime-js.RealtimeChannel>\\\n\\\nGet all channels\\\n\\\n`     _10  const channels = supabase.getChannels()      `\\\n\\\n* * *\\\n\\\nBroadcast a message\\\n-------------------\\\n\\\nSends a message into the channel.\\\n\\\nBroadcast a message to all connected clients to a channel.\\\n\\\n*   When using REST you don't need to subscribe to the channel\\\n*   REST calls are only available from 2.37.0 onwards\\\n\\",
    "summary": "The provided excerpt describes two methods for working with Supabase Realtime channels: `getChannels()` to retrieve all currently active channels, and `supabase.broadcast()` to send messages to all connected clients in a channel. Key features include support for REST calls (from version 2.37.0) and the ability to broadcast messages without needing to subscribe to the channel."
  },
  {
    "chunk_id": "b0fa83c4-21f1-46ff-9a9d-8baf9db0bf30",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   argsRequiredobject\\\n    \\\n    Arguments to send to channel\\\n    \\\n    Details\\\n    \\\n*   optsRequired{ \\[key: string\\]: any }\\\n    \\\n    Options to be used during the send process\\\n    \\\n\\",
    "summary": "This method takes an object of arguments to be sent to the Realtime channel and an options object with various parameters for the send process. The arguments object contains the data to be transmitted, while the options object allows customizing the send operation, such as specifying headers or other metadata."
  },
  {
    "chunk_id": "a15a35dc-340a-4540-9538-62e9674a16e3",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSend a message via websocketSend a message via REST\\\n\\\n`     _11  supabase  _11  .channel('room1')  _11  .subscribe((status) => {  _11  if (status === 'SUBSCRIBED') {  _11  channel.send({  _11  type: 'broadcast',  _11  event: 'cursor-pos',  _11  payload: { x: Math.random(), y: Math.random() },  _11  })  _11  }  _11  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a bucket\\\n---------------\\\n\\\nCreates a new Storage bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `insert`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The content describes a method to send a message via a WebSocket channel, and the process of creating a new storage bucket in a Supabase application. The WebSocket channel allows real-time updates, such as broadcasting cursor positions. Creating a new storage bucket requires specific permissions in the `buckets` and `objects` tables, and the access control is further detailed in the Storage guide."
  },
  {
    "chunk_id": "5ea41593-a317-4f49-b46a-bdf431287e91",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    A unique identifier for the bucket you are creating.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation describes the `supabase.storage.createBucket()` method, which allows creating a new storage bucket. It takes two parameters: `id`, a required unique identifier for the bucket, and `options`, an optional object that can specify additional details about the bucket being created."
  },
  {
    "chunk_id": "18df4ab1-9445-4eaa-9229-d4fa31448250",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .createBucket('avatars', {  _10  public: false,  _10  allowedMimeTypes: ['image/png'],  _10  fileSizeLimit: 1024  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a bucket\\\n-----------------\\\n\\\nRetrieves the details of an existing Storage bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation covers two main operations for working with Storage buckets in Supabase: creating a new bucket and retrieving the details of an existing bucket. The create bucket operation allows specifying various parameters like the bucket ID, access permissions, and allowed MIME types. The retrieve bucket operation requires specific permissions on the `buckets` and `objects` tables, and the access control is further detailed in the Storage guide."
  },
  {
    "chunk_id": "96ba0572-d907-4165-8767-3168bda00489",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to retrieve.\\\n    \\\n\\",
    "summary": "The provided documentation describes the \"Get bucket\" operation, which retrieves a specific bucket from the Supabase storage. The function takes a required `id` parameter, which is the unique identifier of the bucket to be retrieved. This operation returns a Promise that resolves to an object containing the data and any potential errors encountered during the retrieval process."
  },
  {
    "chunk_id": "7acb1f15-0793-494a-9b17-33325acc16f7",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .getBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all buckets\\\n----------------\\\n\\\nRetrieves the details of all Storage buckets within an existing project.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The summary provides details on retrieving a specific bucket and listing all buckets in a Supabase storage project. It requires the `select` permission on the `buckets` table, and the response is returned as a Promise. The main purpose is to retrieve the details of all storage buckets within an existing project, which is a common operation in managing Supabase storage."
  },
  {
    "chunk_id": "abb44f38-dd60-4044-b113-d5401dda900e",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nList buckets\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .listBuckets()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a bucket\\\n---------------\\\n\\\nUpdates a Storage bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select` and `update`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The summary covers how to list and update storage buckets in Supabase. The `listBuckets()` function returns a Promise with the list of buckets, and the update process requires specific permissions on the `buckets` and `objects` tables. The summary also notes that the Storage guide provides details on Supabase's access control model."
  },
  {
    "chunk_id": "00a4e72d-b56b-4f6e-b1c5-3ccd18fc383b",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    A unique identifier for the bucket you are updating.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on updating a bucket in Supabase storage, including the required `id` parameter (a unique identifier for the bucket) and an `options` object parameter that contains the details of the update operation. The function returns a Promise with a Union type that represents the result of the update operation."
  },
  {
    "chunk_id": "c414e0a8-af54-4619-94ad-7638fd9d9444",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .updateBucket('avatars', {  _10  public: false,  _10  allowedMimeTypes: ['image/png'],  _10  fileSizeLimit: 1024  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a bucket\\\n---------------\\\n\\\nDeletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select` and `delete`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "This documentation covers the Supabase Storage API for updating and deleting buckets. To update a bucket, you can set properties like `public`, `allowedMimeTypes`, and `fileSizeLimit`. To delete a bucket, you must first empty it, and the user requires specific permissions on the `buckets` and `objects` tables. The documentation provides guidance on Supabase's access control mechanisms for storage operations."
  },
  {
    "chunk_id": "664158a7-bee9-455f-8c0d-d245b72eff95",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to delete.\\\n    \\\n\\",
    "summary": "The provided documentation describes the method to delete a bucket in the Supabase storage service. The method takes a required `id` parameter, which is the unique identifier of the bucket to be deleted. The return type is a Promise that resolves with the data or error response from the Supabase storage operation."
  },
  {
    "chunk_id": "934baf34-bfc0-426d-9198-e5fe451c5987",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .deleteBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nEmpty a bucket\\\n--------------\\\n\\\nRemoves all objects inside a single bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: `select` and `delete`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two distinct operations on Supabase storage buckets: deleting a bucket and emptying a bucket. Deleting a bucket permanently removes it, while emptying a bucket removes all objects inside it. Emptying a bucket requires specific Role-Level Security (RLS) permissions on the `buckets` and `objects` tables."
  },
  {
    "chunk_id": "e848beca-cf0e-4f01-b81f-5f8960c07931",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to empty.\\\n    \\\n\\",
    "summary": "The provided excerpt describes a function to empty a specific bucket in a storage system. The function takes a required `id` parameter, which is the unique identifier of the bucket to be emptied. The return type of the function is a Promise that resolves to a union of possible outcomes."
  },
  {
    "chunk_id": "4abbfdc5-3d9c-4082-89eb-6ae34e4e8cbd",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nEmpty bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .emptyBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpload a file\\\n-------------\\\n\\\nUploads a file to an existing bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: only `insert` when you are uploading new files and `select`, `insert` and `update` when you are upserting files\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n*   For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Upload file using `ArrayBuffer` from base64 file data instead, see example below.\\\n\\",
    "summary": "The provided content summarizes two key operations for a storage service: emptying a bucket and uploading a file. Emptying a bucket is a simple operation that deletes all objects in the specified bucket. Uploading a file requires specific permissions on the `buckets` and `objects` tables, and for React Native, it is recommended to use `ArrayBuffer` from base64 file data instead of `Blob`, `File`, or `FormData`."
  },
  {
    "chunk_id": "fce06edc-8780-4637-b468-0ce5655b8fed",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\\\n    \\\n*   fileBodyRequiredFileBody\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function uploads a file to a Supabase storage bucket using the provided file path, file body, and optional file options. The file path must include the bucket name and file name, and the bucket must already exist before attempting the upload. The file body can be an ArrayBuffer from base64 file data."
  },
  {
    "chunk_id": "b8bcaa1b-54cd-4840-a1f8-8e06b6144a84",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpload fileUpload file using \\`ArrayBuffer\\` from base64 file data\\\n\\\n`     _10  const avatarFile = event.target.files[0]  _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .upload('public/avatar1.png', avatarFile, {  _10  cacheControl: '3600',  _10  upsert: false  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDownload a file\\\n---------------\\\n\\\nDownloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes how to upload a file using `ArrayBuffer` from base64 file data, and how to download a file from a private bucket in Supabase. The upload operation requires the file path, while the download operation requires the full path and file name. The download functionality is subject to RLS policy permissions, with the `objects` table requiring `select` permissions."
  },
  {
    "chunk_id": "3ab7475f-c4ad-4afc-ba14-83429f490c3a",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The full path and file name of the file to be downloaded. For example `folder/image.png`.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function takes a file path and optional options object as parameters, and returns a Promise that downloads the file with specified transformations. The file path is required and represents the full path and filename of the file to be downloaded."
  },
  {
    "chunk_id": "27193205-9423-42bf-870d-b3e87c63d87d",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDownload fileDownload file with transformations\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .download('folder/avatar1.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all files in a bucket\\\n--------------------------\\\n\\\nLists all the files within a bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided documentation describes the `download` and `list` functions of the Supabase storage service. The `download` function downloads a file from a specified path, with optional search options. The `list` function lists all files in a storage bucket, requiring `select` permissions on the `objects` table. This functionality is important for managing and accessing files stored in a Supabase application."
  },
  {
    "chunk_id": "40f9c209-e37d-4733-af35-c4b4a744977f",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathOptionalstring\\\n    \\\n    The folder path.\\\n    \\\n*   optionsOptionalSearchOptions\\\n    \\\n    Details\\\n    \\\n*   parametersOptionalFetchParameters\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on the parameters for a function that allows downloading a file with transformations and listing files in a bucket. It includes parameters for specifying the folder path, search options, and fetch parameters. This information is important for understanding how to interact with the file storage and management capabilities of the system."
  },
  {
    "chunk_id": "b429528d-0d97-4bd9-896a-e4081fa6a59b",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nList files in a bucketSearch files in a bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .list('folder', {  _10  limit: 100,  _10  offset: 0,  _10  sortBy: { column: 'name', order: 'asc' },  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nReplace an existing file\\\n------------------------\\\n\\\nReplaces an existing file at the specified path with a new one.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `update` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n*   For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Update file using `ArrayBuffer` from base64 file data instead, see example below.\\\n\\",
    "summary": "The provided documentation describes a function to list files in a Supabase storage bucket, and a separate function to replace an existing file in the bucket. The list files function allows configuring parameters like limit, offset, and sort order. The replace file function requires specific permissions on the `objects` table and provides guidance for usage in React Native applications."
  },
  {
    "chunk_id": "c4489209-127c-4484-aa89-bc9e4547afc2",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\\\n    \\\n*   fileBodyRequiredUnion: expand to see options\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n    Details\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation describes a function that updates a file in a storage bucket. It takes three parameters: the file path, the file body (as an ArrayBuffer from base64 data), and optional file options. This function returns a Promise that resolves to the updated file."
  },
  {
    "chunk_id": "a9871256-a66c-450f-b48d-bd1a5e7b23ec",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate fileUpdate file using \\`ArrayBuffer\\` from base64 file data\\\n\\\n`     _10  const avatarFile = event.target.files[0]  _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .update('public/avatar1.png', avatarFile, {  _10  cacheControl: '3600',  _10  upsert: true  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMove an existing file\\\n---------------------\\\n\\\nMoves an existing file to a new path in the same bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `update` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation details the `update` method of the Supabase Storage API, which allows updating an existing file using an `ArrayBuffer` from base64 file data. Additionally, it describes the `move` operation, which moves an existing file to a new path within the same bucket, requiring `update` and `select` permissions on the `objects` table."
  },
  {
    "chunk_id": "f578cf05-21dd-4ab1-af48-84d6ca855aba",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromPathRequiredstring\\\n    \\\n    The original file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   toPathRequiredstring\\\n    \\\n    The new file path, including the new file name. For example `folder/image-new.png`.\\\n    \\\n\\",
    "summary": "This operation allows you to move a file from one path to another within your Supabase storage. The `fromPath` parameter specifies the original file path, and the `toPath` parameter specifies the new file path, including the new file name. This can be useful for renaming or reorganizing files in your Supabase storage."
  },
  {
    "chunk_id": "f4ff9d6f-44f2-4acd-bad1-ee76861f693d",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nMove file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .move('public/avatar1.png', 'private/avatar2.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCopy an existing file\\\n---------------------\\\n\\\nCopies an existing file to a new path in the same bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `insert` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The summary provides details on the `move` operation in Supabase Storage, which allows copying an existing file to a new path within the same bucket. It outlines the required permissions for the `buckets` and `objects` tables, and refers to the Storage guide for more information on access control. The summary also highlights the key functionality of the `move` operation, which is to copy a file to a new location."
  },
  {
    "chunk_id": "04b6eb2c-a3a2-4623-bc30-08affa89e7c9",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromPathRequiredstring\\\n    \\\n    The original file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   toPathRequiredstring\\\n    \\\n    The new file path, including the new file name. For example `folder/image-copy.png`.\\\n    \\\n\\",
    "summary": "This function moves a file from one location to another within a storage system. The `fromPath` parameter specifies the original file path, and the `toPath` parameter specifies the new file path. This functionality is useful for reorganizing files or renaming them within the storage system."
  },
  {
    "chunk_id": "3fc12745-6c44-44ca-a191-4ff8ad3d986f",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCopy file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .copy('public/avatar1.png', 'private/avatar2.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete files in a bucket\\\n------------------------\\\n\\\nDeletes files within the same bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `delete` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two key storage functionality:\n1) Copying a file from one location to another within the same storage bucket using the `supabase.storage.from().copy()` method.\n2) Deleting files within the same storage bucket, which requires specific permissions on the `buckets` and `objects` tables, as outlined in the Storage security guide."
  },
  {
    "chunk_id": "74212067-f9c2-4a4d-97c9-f136ebb53c62",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathsRequiredArray<string>\\\n    \\\n    An array of files to delete, including the path and file name. For example \\[`'folder/image.png'`\\].\\\n    \\\n\\",
    "summary": "This section describes the parameters for the Supabase storage API's delete file operation. It specifies that `pathsRequiredArray<string>` takes an array of file paths (including the file name) to be deleted, such as `['folder/image.png']`. This allows developers to efficiently delete multiple files in a single operation."
  },
  {
    "chunk_id": "3e672f69-ccb9-4b1a-94da-11eea3fa62a6",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .remove(['folder/avatar1.png'])      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a signed URL\\\n-------------------\\\n\\\nCreates a signed URL. Use a signed URL to share a file for a fixed amount of time.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided content describes two main functionalities:\n\n1. Deleting a file from a Supabase storage bucket using the `storage.remove()` method, which takes an array of file paths as a parameter.\n\n2. Creating a signed URL for a file in a Supabase storage bucket, which allows sharing the file for a fixed duration of time. This requires the necessary permissions on the `objects` table, as described in the Supabase Storage guide."
  },
  {
    "chunk_id": "6156f7a7-236b-4147-8d26-d6faa4d32793",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   expiresInRequirednumber\\\n    \\\n    The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary covers the parameters and details for the \"Delete file\" operation in the Supabase storage API. The key points are:\n- `path` (required string): the file path, including the filename, to be deleted\n- `expiresIn` (required number): the number of seconds until the signed URL for deleting the file expires, e.g. 60 seconds\n- `options` (optional object): additional options for the delete operation"
  },
  {
    "chunk_id": "cb446fb0-9822-4824-a091-74a0e6fd96d4",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed URLCreate a signed URL for an asset with transformationsCreate a signed URL which triggers the download of the asset\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUrl('folder/avatar1.png', 60)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate signed URLs\\\n------------------\\\n\\\nCreates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes a function that creates a signed URL for an asset, allowing it to be downloaded with transformations. The function can create multiple signed URLs, which can be used to share files for a fixed amount of time. It requires specific permissions on the `objects` table in the Supabase storage system."
  },
  {
    "chunk_id": "cbb9ff2f-05a1-4de8-8381-cc4d6873b052",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathsRequiredArray<string>\\\n    \\\n    The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\\\n    \\\n*   expiresInRequirednumber\\\n    \\\n    The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation describes the `createSignedUrls` function, which generates signed URLs for downloading files from a storage service. It takes an array of file paths, an expiration time in seconds, and optional configuration options as parameters. The signed URLs allow secure, time-limited access to the specified files, enabling controlled download functionality in applications."
  },
  {
    "chunk_id": "0b5fd70d-b740-4205-b7c2-3a122deb48c9",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed URLs\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUrls(['folder/avatar1.png', 'folder/avatar2.png'], 60)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate signed upload URL\\\n------------------------\\\n\\\nCreates a signed upload URL. Signed upload URLs can be used to upload files to the bucket without further authentication. They are valid for 2 hours.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `insert`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes how to create signed URLs for file uploads using the Supabase storage API. It explains that the `createSignedUrls()` function generates signed URLs valid for 60 seconds, which can be used to upload files without further authentication. The required permissions include insert access to the `objects` table, as per the Storage guide's access control policies."
  },
  {
    "chunk_id": "3365ccd6-8c75-46c1-b698-b07b08dad9b4",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the current file name. For example `folder/image.png`.\\\n    \\\n\\",
    "summary": "The function creates a signed upload URL for a file at the specified path, which can be used to securely upload the file to a storage service. The return type is a Promise that resolves to an object containing the generated URL or an error if the operation fails."
  },
  {
    "chunk_id": "832badaa-33d0-4396-a62a-f38f6d47ea6c",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed Upload URL\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUploadUrl('folder/cat.jpg')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpload to a signed URL\\\n----------------------\\\n\\\nUpload a file with a token generated from `createSignedUploadUrl`.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided content describes the `createSignedUploadUrl` function in the Supabase Storage API, which generates a signed URL for uploading a file to the storage service. The signed URL can be used to securely upload a file without requiring specific permissions in the `buckets` or `objects` tables. The summary also notes that the access control details are further explained in the Storage guide."
  },
  {
    "chunk_id": "72beeb88-0b9f-4c2a-b085-39670151f125",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\\\n    \\\n*   tokenRequiredstring\\\n    \\\n    The token generated from `createSignedUploadUrl`\\\n    \\\n*   fileBodyRequiredFileBody\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The `uploadToSignedUrl` function in the documentation allows uploading a file to a signed URL, which is generated using the `createSignedUploadUrl` function. The function takes in required parameters like the file path, token, and file body, as well as optional file options, and returns a Promise with the upload result."
  },
  {
    "chunk_id": "eccfff3a-3606-4787-a282-881a96fc972f",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpload to a signed URL\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .uploadToSignedUrl('folder/cat.jpg', 'token-from-createSignedUploadUrl', file)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve public URL\\\n-------------------\\\n\\\nA simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\\\n\\\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket)\\\n     or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\\\n    , clicking the overflow menu on a bucket and choosing \"Make public\"\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "This document provides information about uploading files to a signed URL and retrieving a public URL for an asset in a public bucket using the Supabase storage API. Key technical points include: 1) Uploading to a signed URL requires passing the file path, a token, and the file data. 2) Retrieving a public URL is a convenience function that constructs the URL by concatenating the bucket URL and the asset path, though it does not verify if the bucket is public. 3) The bucket must be set to public, and the necessary permissions in the `buckets` and `objects` tables must be granted for this functionality to work."
  },
  {
    "chunk_id": "2708701d-8186-4d36-8375-c63269c67e7f",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The path and name of the file to generate the public URL for. For example `folder/image.png`.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function generates a public URL for an asset in a Supabase public bucket, with optional transformation parameters. The required `path` parameter specifies the file path and name, while the optional `options` parameter allows for transformations like resizing or cropping the asset. This functionality enables easy access and display of public assets in web or mobile applications."
  },
  {
    "chunk_id": "9f0700d3-0f77-4c76-8715-032de9dac115",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nobject\\\n\\\nDetails\\\n\\\nReturns the URL for an asset in a public bucketReturns the URL for an asset in a public bucket with transformationsReturns the URL which triggers the download of an asset in a public bucket\\\n\\\n`     _10  const { data } = supabase  _10  .storage  _10  .from('public-bucket')  _10  .getPublicUrl('folder/avatar1.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRelease Notes\\\n-------------\\\n\\\nSupabase.js v2 release notes.\\\n\\\nInstall the latest version of @supabase/supabase-js\\\n\\\nTerminal\\\n\\\n`     _10  npm install @supabase/supabase-js      `\\\n\\",
    "summary": "The documentation summarizes the `getPublicUrl()` method in the Supabase.js library, which generates a public URL for an asset stored in a public bucket. It returns an object with the generated URL and supports optional transformations. The documentation also covers the latest Supabase.js v2 release and installation instructions."
  },
  {
    "chunk_id": "bdf3b0c5-c287-4825-aa3c-31b83c567b95",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Explicit constructor options[#](#explicit-constructor-options)\\\n\\\nAll client specific options within the constructor are keyed to the library.\\\n\\\nSee [PR](https://github.com/supabase/supabase-js/pull/458)\\\n:\\\n\\\n`     _19  const supabase = createClient(apiURL, apiKey, {  _19  db: {  _19  schema: 'public',  _19  },  _19  auth: {  _19  storage: AsyncStorage,  _19  autoRefreshToken: true,  _19  persistSession: true,  _19  detectSessionInUrl: true,  _19  },  _19  realtime: {  _19  channels,  _19  endpoint,  _19  },  _19  global: {  _19  fetch: customFetch,  _19  headers: DEFAULT_HEADERS,  _19  },  _19  })      `\\\n\\",
    "summary": "The content describes the ability to pass explicit constructor options when creating a Supabase client instance. These options allow configuring the database schema, authentication settings (e.g., storage, auto-refresh tokens, session persistence), real-time channel and endpoint, as well as global settings like custom fetch and default headers. This provides developers with fine-grained control over the Supabase client's behavior to suit their specific application requirements."
  },
  {
    "chunk_id": "4acaaabf-9124-490f-bd98-e13494e57afa",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "TypeScript support[#](#typescript-support)\\\n\\\nThe libraries now support typescript.\\\n\\\nv1.0\\\n\\\n``     _10  // previously definitions were injected in the `from()` method  _10  supabase.from<Definitions['Message']>('messages').select('\\*')      ``\\\n\\\n* * *\\\n\\\nv2.0\\\n\\\n``     _10  import type { Database } from './DatabaseDefinitions'  _10  _10  // definitions are injected in `createClient()`  _10  const supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)  _10  _10  const { data } = await supabase.from('messages').select().match({ id: 1 })      ``\\\n\\\nTypes can be generated via the CLI:\\\n\\\nTerminal\\\n\\\n`     _10  supabase start  _10  supabase gen types typescript --local > DatabaseDefinitions.ts      `\\\n\\",
    "summary": "The libraries now provide TypeScript support, with v2.0 allowing type definitions to be generated via the CLI and injected into the `createClient()` method, enabling strongly-typed database operations. The previous v1.0 approach of injecting definitions in the `from()` method has been deprecated."
  },
  {
    "chunk_id": "c5d910d4-7685-4dd7-85a6-7377766bdc60",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Data operations return minimal[#](#data-operations-return-minimal)\\\n\\\n`.insert()` / `.upsert()` / `.update()` / `.delete()` don't return rows by default: [PR](https://github.com/supabase/postgrest-js/pull/276)\\\n.\\\n\\\nPreviously, these methods return inserted/updated/deleted rows by default (which caused [some confusion](https://github.com/supabase/supabase/discussions/1548)\\\n), and you can opt to not return it by specifying `returning: 'minimal'`. Now the default behavior is to not return rows. To return inserted/updated/deleted rows, add a `.select()` call at the end, e.g.:\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('my_table')  _10  .delete()  _10  .eq('id', 1)  _10  .select()      `\\\n\\",
    "summary": "The libraries now support TypeScript. The default behavior for data operations like `.insert()`, `.upsert()`, `.update()`, and `.delete()` has changed - they no longer return rows by default, to reduce confusion and overhead. To retrieve the inserted/updated/deleted rows, users need to explicitly call `.select()` at the end of the operation."
  },
  {
    "chunk_id": "d0b147a1-6b30-461f-82f9-42b1cd9ccbfc",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "New ordering defaults[#](#new-ordering-defaults)\\\n\\\n`.order()` now defaults to Postgres\u2019s default: [PR](https://github.com/supabase/postgrest-js/pull/283)\\\n.\\\n\\\nPreviously `nullsFirst` defaults to `false` , meaning `null`s are ordered last. This is bad for performance if e.g. the column uses an index with `NULLS FIRST` (which is the default direction for indexes).\\\n\\",
    "summary": "The `.order()` method in the Supabase client library now defaults to Postgres's default ordering behavior, which is to order `null` values last. This change is important for performance, as it aligns with the default index ordering of `NULLS FIRST`, which is commonly used in Postgres databases."
  },
  {
    "chunk_id": "5e6659aa-0832-4db5-8d54-955442df9ca3",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Cookies and localstorage namespace[#](#cookies-and-localstorage-namespace)\\\n\\\nStorage key name in the Auth library has changed to include project reference which means that existing websites that had their JWT expiry set to a longer time could find their users logged out with this upgrade.\\\n\\\n``     _10  const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`      ``\\\n\\",
    "summary": "The storage key name in the Auth library has been changed to include the project reference, which means that existing websites with longer JWT expiry settings could experience users getting logged out after the upgrade. The default storage key is now `sb-{hostname.split('.')[0]}-auth-token`, which helps differentiate between auth tokens for different Supabase projects on the same domain."
  },
  {
    "chunk_id": "93791652-1767-45ae-af9f-0675f1756814",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "New Auth Types[#](#new-auth-types)\\\n\\\nTypescript typings have been reworked. `Session` interface now guarantees that it will always have an `access_token`, `refresh_token` and `user`\\\n\\\n./types.ts\\\n\\\n`     _10  interface Session {  _10  provider_token?: string | null  _10  access_token: string  _10  expires_in?: number  _10  expires_at?: number  _10  refresh_token: string  _10  token_type: string  _10  user: User  _10  }      `\\\n\\",
    "summary": "The Typescript typings for the `Session` interface in the Auth library have been reworked, now guaranteeing that it will always include an `access_token`, `refresh_token`, and `user` property. This change provides more consistent and predictable session data, simplifying integration with the Auth library."
  },
  {
    "chunk_id": "7613fd19-1f21-42b3-9b49-c16425b2cdff",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "New Auth methods[#](#new-auth-methods)\\\n\\\nWe're removing the `signIn()` method in favor of more explicit function signatures: `signInWithPassword()`, `signInWithOtp()`, and `signInWithOAuth()`.\\\n\\\nv1.0\\\n\\\n`     _10  const { data } = await supabase.auth.signIn({  _10  email: 'hello@example',  _10  password: 'pass',  _10  })      `\\\n\\\n* * *\\\n\\\nv2.0\\\n\\\n`     _10  const { data } = await supabase.auth.signInWithPassword({  _10  email: 'hello@example',  _10  password: 'pass',  _10  })      `\\\n\\",
    "summary": "The documentation outlines changes to the Supabase authentication methods. The `signIn()` method is being deprecated in favor of more explicit function signatures such as `signInWithPassword()`, `signInWithOtp()`, and `signInWithOAuth()`. This transition from version 1.0 to 2.0 represents a shift towards a more granular and transparent authentication flow."
  },
  {
    "chunk_id": "6dabc566-2195-4cce-93be-e4c820206356",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "New Realtime methods[#](#new-realtime-methods)\\\n\\\nThere is a new `channel()` method in the Realtime library, which will be used for our Multiplayer updates.\\\n\\\nWe will deprecate the `.from().on().subscribe()` method previously used for listening to postgres changes.\\\n\\\n`     _21  supabase  _21  .channel('any_string_you_want')  _21  .on('presence', { event: 'track' }, (payload) => {  _21  console.log(payload)  _21  })  _21  .subscribe()  _21  _21  supabase  _21  .channel('any_string_you_want')  _21  .on(  _21  'postgres_changes',  _21  {  _21  event: 'INSERT',  _21  schema: 'public',  _21  table: 'movies',  _21  },  _21  (payload) => {  _21  console.log(payload)  _21  }  _21  )  _21  .subscribe()      `\\\n\\",
    "summary": "The documentation introduces new Realtime methods, including a `channel()` method for Multiplayer updates, and deprecates the previous `.from().on().subscribe()` method for listening to Postgres changes. The new `channel()` method allows developers to subscribe to specific channels and events, such as presence updates and Postgres changes, providing more granular control over real-time functionality."
  },
  {
    "chunk_id": "4e738627-052e-4190-a7af-74d74d1aae0e",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "Deprecated setAuth()[#](#deprecated-setauth)\\\n\\\nDeprecated and removed `setAuth()` . To set a custom `access_token` jwt instead, pass the custom header into the `createClient()` method provided: ([PR](https://github.com/supabase/gotrue-js/pull/340)\\\n)\\\n\\",
    "summary": "The documentation indicates that the `setAuth()` method in the Realtime library has been deprecated and removed. Instead, developers should pass a custom `access_token` JWT directly into the `createClient()` method to set the authorization. This change is significant as it simplifies the authentication workflow and aligns with the latest client library updates."
  },
  {
    "chunk_id": "804ebf9a-cbae-4cca-9adf-185efdba9668",
    "source_url": "https://supabase.com/docs/reference/javascript/initializing",
    "main_heading": "No Heading",
    "content": "All changes[#](#all-changes)\\\n\\\n*   `supabase-js`\\\n    *   `shouldThrowOnError` has been removed until all the client libraries support this option ([PR](https://github.com/supabase/supabase-js/pull/490)\\\n        ).\\\n*   `postgrest-js`\\\n    *   TypeScript typings have been reworked [PR](https://github.com/supabase/postgrest-js/pull/279)\\\n        \\\n    *   Use `undefined` instead of `null` for function params, types, etc. ([https://github.com/supabase/postgrest-js/pull/278](https://github.com/supabase/postgrest-js/pull/278)\\\n        )\\\n    *   Some features are now obsolete: ([https://github.com/supabase/postgrest-js/pull/275](https://github.com/supabase/postgrest-js/pull/275)\\\n        )\\\n        *   filter shorthands (e.g. `cs` vs. `contains`)\\\n        *   `body` in response (vs. `data`)\\\n        *   `upsert`ing through the `.insert()` method\\\n        *   `auth` method on `PostgrestClient`\\\n        *   client-level `throwOnError`\\\n*   `gotrue-js`\\\n    *   `supabase-js` client allows passing a `storageKey` param which will allow the user to set the key used in local storage for storing the session. By default, this will be namespace-d with the supabase project ref. ([PR](https://github.com/supabase/supabase-js/pull/460)\\\n        )\\\n    *   `signIn` method is now split into `signInWithPassword` , `signInWithOtp` , `signInWithOAuth` ([PR](https://github.com/supabase/gotrue-js/pull/304)\\\n        )\\\n    *   Deprecated and removed `session()` , `user()` in favour of using `getSession()` instead. `getSession()` will always return a valid session if a user is already logged in, meaning no more random logouts. ([PR](https://github.com/supabase/gotrue-js/pull/299)\\\n        )\\\n    *   Deprecated and removed setting for `multitab` support because `getSession()` and gotrue\u2019s reuse interval setting takes care of session management across multiple tabs ([PR](https://github.com/supabase/gotrue-js/pull/366)\\\n        )\\\n    *   No more throwing of random errors, gotrue-js v2 always returns a custom error type: ([PR](https://github.com/supabase/gotrue-js/pull/341)\\\n        )\\\n        *   `AuthSessionMissingError`\\\n            *   Indicates that a session is expected but missing\\\n        *   `AuthNoCookieError`\\\n            *   Indicates that a cookie is expected but missing\\\n        *   `AuthInvalidCredentialsError`\\\n            *   Indicates that the incorrect credentials were passed\\\n    *   Renamed the `api` namespace to `admin` , the `admin` namespace will only contain methods that should only be used in a trusted server-side environment with the service role key\\\n    *   Moved `resetPasswordForEmail` , `getUser` and `updateUser` to the `GoTrueClient` which means they will be accessible from the `supabase.auth` namespace in `supabase-js` instead of having to do `supabase.auth.api` to access them\\\n    *   Removed `sendMobileOTP` , `sendMagicLinkEmail` in favor of `signInWithOtp`\\\n    *   Removed `signInWithEmail`, `signInWithPhone` in favor of `signInWithPassword`\\\n    *   Removed `signUpWithEmail` , `signUpWithPhone` in favor of `signUp`\\\n    *   Replaced `update` with `updateUser`\\\n*   `storage-js`\\\n    *   Return types are more strict. Functions types used to indicate that the data returned could be null even if there was no error. We now make use of union types which only mark the data as null if there is an error and vice versa. ([PR](https://github.com/supabase/storage-js/pull/60)\\\n        )\\\n    *   The `upload` and `update` function returns the path of the object uploaded as the `path` parameter. Previously the returned value had the bucket name prepended to the path which made it harder to pass the value on to other storage-js methods since all methods take the bucket name and path separately. We also chose to call the returned value `path` instead of `Key` ([PR](https://github.com/supabase/storage-js/pull/75)\\\n        )\\\n    *   `getPublicURL` only returns the public URL inside the data object. This keeps it consistent with our other methods of returning only within the data object. No error is returned since this method cannot does not throw an error ([PR](https://github.com/supabase/storage-js/pull/93)\\\n        )\\\n    *   signed urls are returned as `signedUrl` instead of `signedURL` in both `createSignedUrl` and `createSignedUrls` ([PR](https://github.com/supabase/storage-js/pull/94)\\\n        )\\\n    *   Encodes URLs returned by `createSignedUrl`, `createSignedUrls` and `getPublicUrl` ([PR](https://github.com/supabase/storage-js/pull/86)\\\n        )\\\n    *   `createsignedUrl` used to return a url directly and and within the data object. This was inconsistent. Now we always return values only inside the data object across all methods. ([PR](https://github.com/supabase/storage-js/pull/88)\\\n        )\\\n    *   `createBucket` returns a data object instead of the name of the bucket directly. ([PR](https://github.com/supabase/storage-js/pull/89)\\\n        )\\\n    *   Fixed types for metadata ([PR](https://github.com/supabase/storage-js/pull/90)\\\n        )\\\n    *   Better error types make it easier to track down what went wrong quicker.\\\n    *   `SupabaseStorageClient` is no longer exported. Use `StorageClient` instead. ([PR](https://github.com/supabase/storage-js/pull/92)\\\n        ).\\\n*   `realtime-js`\\\n    *   `RealtimeSubscription` class no longer exists and replaced by `RealtimeChannel`.\\\n    *   `RealtimeClient`'s `disconnect` method now returns type of `void` . It used to return type of `Promise<{ error: Error | null; data: boolean }`.\\\n    *   Removed `removeAllSubscriptions` and `removeSubscription` methods from `SupabaseClient` class.\\\n    *   Removed `SupabaseRealtimeClient` class.\\\n    *   Removed `SupabaseQueryBuilder` class.\\\n    *   Removed `SupabaseEventTypes` type.\\\n        *   Thinking about renaming this to something like `RealtimePostgresChangeEvents` and moving it to `realtime-js` v2.\\\n    *   Removed `.from(\u2019table\u2019).on(\u2019INSERT\u2019, () \u21d2 {}).subscribe()` in favor of new Realtime client API.\\\n*   `functions-js`\\\n    *   supabase-js v1 only threw an error if the fetch call itself threw an error (network errors, etc) and not if the function returned HTTP errors like 400s or 500s. We have changed this behaviour to return an error if your function throws an error.\\\n    *   We have introduced new error types to distinguish between different kinds of errors. A `FunctionsHttpError` error is returned if your function throws an error, `FunctionsRelayError` if the Supabase Relay has an error processing your function and `FunctionsFetchError` if there is a network error in calling your function.\\\n    *   The correct content-type headers are automatically attached when sending the request if you don\u2019t pass in a `Content-Type` header and pass in an argument to your function. We automatically attach the content type for `Blob`, `ArrayBuffer`, `File`, `FormData` ,`String` . If it doesn\u2019t match any of these we assume the payload is `json` , we serialise the payload as JSON and attach the content type as `application/json`.\\\n    *   `responseType` does not need to be explicitly passed in. We parse the response based on the `Content-Type` response header sent by the function. We support parsing the responses as `text`, `json`, `blob`, `form-data` and are parsed as `text` by default.\\\n\\\n*   Need some help?\\\n    \\\n    [Contact support](https://supabase.com/support)\\\n    \\\n*   Latest product updates?\\\n    \\\n    [See Changelog](https://supabase.com/changelog)\\\n    \\\n*   Something's not right?\\\n    \\\n    [Check system status](https://status.supabase.com/)\\\n    \\\n\\\n* * *\\\n\\\n[\u00a9 Supabase Inc](https://supabase.com/)\\\n\u2014[Contributing](https://github.com/supabase/supabase/blob/master/apps/docs/DEVELOPERS.md)\\\n[Author Styleguide](https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md)\\\n[Open Source](https://supabase.com/open-source)\\\n[SupaSquad](https://supabase.com/supasquad)\\\nPrivacy Settings\\\n\\\n[GitHub](https://github.com/supabase/supabase)\\\n[Twitter](https://twitter.com/supabase)\\\n[Discord](https://discord.supabase.com/)",
    "summary": "This document outlines various changes and deprecations across the Supabase client libraries, including the removal of the `setAuth()` function, updates to the `supabase-js`, `postgrest-js`, `gotrue-js`, `storage-js`, `realtime-js`, and `functions-js` libraries. Key changes include improved TypeScript typings, new error handling, and reorganization of functionalities across the libraries. The summary highlights the significance of these changes in improving the overall developer experience and maintaining consistency across the Supabase ecosystem."
  },
  {
    "chunk_id": "e5596b84-a1fe-45ec-9bd9-6799c1c232a1",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\n*   [Start](/docs/guides/getting-started)\n    \n*   Products\n*   Build\n*   Reference\n*   Resources\n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\nSearch docs...\n\nK\n\nMain menu\n\nJavaScript\n\nv2.0\n\n*   [Introduction](/docs/reference/javascript/introduction)\n    \n*   [Installing](/docs/reference/javascript/installing)\n    \n*   [Initializing](/docs/reference/javascript/initializing)\n    \n*   [TypeScript support](/docs/reference/javascript/typescript-support)\n    \n*   * * *\n    \n    Database\n    \n    *   [Fetch data](/docs/reference/javascript/select)\n        \n    *   [Insert data](/docs/reference/javascript/insert)\n        \n    *   [Update data](/docs/reference/javascript/update)\n        \n    *   [Upsert data](/docs/reference/javascript/upsert)\n        \n    *   [Delete data](/docs/reference/javascript/delete)\n        \n    *   [Call a Postgres function](/docs/reference/javascript/rpc)\n        \n    *   Using filters\n        \n    *   Using modifiers\n        \n*   * * *\n    \n    Auth\n    \n    *   [Overview](/docs/reference/javascript/auth-api)\n        \n    *   [Error codes](/docs/reference/javascript/auth-error-codes)\n        \n    *   [Create a new user](/docs/reference/javascript/auth-signup)\n        \n    *   [Listen to auth events](/docs/reference/javascript/auth-onauthstatechange)\n        \n    *   [Create an anonymous user](/docs/reference/javascript/auth-signinanonymously)\n        \n    *   [Sign in a user](/docs/reference/javascript/auth-signinwithpassword)\n        \n    *   [Sign in with ID Token](/docs/reference/javascript/auth-signinwithidtoken)\n        \n    *   [Sign in a user through OTP](/docs/reference/javascript/auth-signinwithotp)\n        \n    *   [Sign in a user through OAuth](/docs/reference/javascript/auth-signinwithoauth)\n        \n    *   [Sign in a user through SSO](/docs/reference/javascript/auth-signinwithsso)\n        \n    *   [Sign out a user](/docs/reference/javascript/auth-signout)\n        \n    *   [Send a password reset request](/docs/reference/javascript/auth-resetpasswordforemail)\n        \n    *   [Verify and log in through OTP](/docs/reference/javascript/auth-verifyotp)\n        \n    *   [Retrieve a session](/docs/reference/javascript/auth-getsession)\n        \n    *   [Retrieve a new session](/docs/reference/javascript/auth-refreshsession)\n        \n    *   [Retrieve a user](/docs/reference/javascript/auth-getuser)\n        \n    *   [Update a user](/docs/reference/javascript/auth-updateuser)\n        \n    *   [Retrieve identities linked to a user](/docs/reference/javascript/auth-getuseridentities)\n        \n    *   [Link an identity to a user](/docs/reference/javascript/auth-linkidentity)\n        \n    *   [Unlink an identity from a user](/docs/reference/javascript/auth-unlinkidentity)\n        \n    *   [Send a password reauthentication nonce](/docs/reference/javascript/auth-reauthentication)\n        \n    *   [Resend an OTP](/docs/reference/javascript/auth-resend)\n        \n    *   [Set the session data](/docs/reference/javascript/auth-setsession)\n        \n    *   [Exchange an auth code for a session](/docs/reference/javascript/auth-exchangecodeforsession)\n        \n    *   [Start auto-refresh session (non-browser)](/docs/reference/javascript/auth-startautorefresh)\n        \n    *   [Stop auto-refresh session (non-browser)](/docs/reference/javascript/auth-stopautorefresh)\n        \n    *   Auth MFA\n        \n    *   Auth Admin\n        \n*   * * *\n    \n    Edge Functions\n    \n    *   [Invokes a Supabase Edge Function.](/docs/reference/javascript/functions-invoke)\n        \n*   * * *\n    \n    Realtime\n    \n    *   [Subscribe to channel](/docs/reference/javascript/subscribe)\n        \n    *   [Unsubscribe from a channel](/docs/reference/javascript/removechannel)\n        \n    *   [Unsubscribe from all channels](/docs/reference/javascript/removeallchannels)\n        \n    *   [Retrieve all channels](/docs/reference/javascript/getchannels)\n        \n    *   [Broadcast a message](/docs/reference/javascript/broadcastmessage)\n        \n*   * * *\n    \n    Storage\n    \n    *   [Create a bucket](/docs/reference/javascript/storage-createbucket)\n        \n    *   [Retrieve a bucket](/docs/reference/javascript/storage-getbucket)\n        \n    *   [List all buckets](/docs/reference/javascript/storage-listbuckets)\n        \n    *   [Update a bucket](/docs/reference/javascript/storage-updatebucket)\n        \n    *   [Delete a bucket](/docs/reference/javascript/storage-deletebucket)\n        \n    *   [Empty a bucket](/docs/reference/javascript/storage-emptybucket)\n        \n    *   [Upload a file](/docs/reference/javascript/storage-from-upload)\n        \n    *   [Download a file](/docs/reference/javascript/storage-from-download)\n        \n    *   [List all files in a bucket](/docs/reference/javascript/storage-from-list)\n        \n    *   [Replace an existing file](/docs/reference/javascript/storage-from-update)\n        \n    *   [Move an existing file](/docs/reference/javascript/storage-from-move)\n        \n    *   [Copy an existing file](/docs/reference/javascript/storage-from-copy)\n        \n    *   [Delete files in a bucket](/docs/reference/javascript/storage-from-remove)\n        \n    *   [Create a signed URL](/docs/reference/javascript/storage-from-createsignedurl)\n        \n    *   [Create signed URLs](/docs/reference/javascript/storage-from-createsignedurls)\n        \n    *   [Create signed upload URL](/docs/reference/javascript/storage-from-createsigneduploadurl)\n        \n    *   [Upload to a signed URL](/docs/reference/javascript/storage-from-uploadtosignedurl)\n        \n    *   [Retrieve public URL](/docs/reference/javascript/storage-from-getpublicurl)\n        \n*   * * *\n    \n    Misc\n    \n    *   [Release Notes](/docs/reference/javascript/release-notes)\n        \n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\n*   [Start](/docs/guides/getting-started)\n    \n*   Products\n*   Build\n*   Reference\n*   Resources\n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\nSearch docs...\n\nK\n\nJavascript Reference v2.0\n\nJavaScript Client Library\n=========================\n\n@supabase/supabase-js[View on GitHub](https://github.com/supabase/supabase-js)\n\nThis reference documents every object and method available in Supabase's isomorphic JavaScript library, `supabase-js`. You can use `supabase-js` to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\nInstalling\n----------",
    "summary": "The documentation describes how to install the @supabase/supabase-js library, which provides an isomorphic JavaScript client for interacting with a Supabase backend. The library allows developers to perform a variety of operations, including querying the Postgres database, managing authentication, invoking Edge Functions, and working with file storage."
  },
  {
    "chunk_id": "f9955e14-66a1-49e1-95e0-6e45a047c6b1",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Install as package[#](#install-as-package)\n\nYou can install @supabase/supabase-js via the terminal.\n\nnpmYarnpnpm\n\nTerminal\n\n`     _10  npm install @supabase/supabase-js      `",
    "summary": "The documentation provides instructions for installing the Supabase JavaScript library via the terminal using npm, yarn, or pnpm. This allows developers to easily integrate the Supabase SDK into their projects and leverage its functionality for interacting with the Supabase platform."
  },
  {
    "chunk_id": "d07537ae-8b53-4b7e-a1bf-28d21426b816",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Install via CDN[#](#install-via-cdn)\n\nYou can install @supabase/supabase-js via CDN links.\n\n`     _10  <script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2\"></script>  _10  //or  _10  <script src=\"https://unpkg.com/@supabase/supabase-js@2\"></script>      `",
    "summary": "You can install the Supabase JavaScript client library (@supabase/supabase-js) via CDN links, which provide easy access to the library without the need for a package manager. The two primary CDN options are the JSDelivr and Unpkg CDNs, which allow you to directly include the library in your HTML using a `<script>` tag."
  },
  {
    "chunk_id": "1faf139c-3279-4227-b6db-a6964ae6c8a0",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Use at runtime in Deno[#](#use-at-runtime-in-deno)\n\nYou can use supabase-js in the Deno runtime via [JSR](https://jsr.io/@supabase/supabase-js)\n:\n\n`     _10  import { createClient } from 'jsr:@supabase/supabase-js@2'      `\n\n* * *\n\nInitializing\n------------\n\nCreate a new client for use in the browser.\n\nYou can initialize a new Supabase client using the `createClient()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.",
    "summary": "The Supabase client can be initialized in Deno using the `createClient()` method from the `@supabase/supabase-js` library, which is accessible through the JSR service. The Supabase client is the primary entry point to interact with the Supabase ecosystem and provides access to various Supabase functionalities in the browser."
  },
  {
    "chunk_id": "ba3fd95c-e2be-4f9c-b975-55f9dec733a2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   supabaseUrlRequiredstring\n    \n    The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n    \n*   supabaseKeyRequiredstring\n    \n    The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n    \n*   optionsOptionalSupabaseClientOptions\n    \n    Details\n    \n\nCreating a clientWith a custom domainWith additional parametersWith custom schemasCustom fetch implementationReact Native options with AsyncStorageReact Native options with Expo SecureStore\n\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  _10  // Create a single supabase client for interacting with your database  _10  const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')      `\n\n* * *\n\nTypeScript support\n------------------\n\n`supabase-js` has TypeScript support for type inference, autocompletion, type-safe queries, and more.\n\nWith TypeScript, `supabase-js` detects things like `not null` constraints and [generated columns](https://www.postgresql.org/docs/current/ddl-generated-columns.html)\n. Nullable columns are typed as `T | null` when you select the column. Generated columns will show a type error when you insert to it.\n\n`supabase-js` also detects relationships between tables. A referenced table with one-to-many relationship is typed as `T[]`. Likewise, a referenced table with many-to-one relationship is typed as `T | null`.\n\nGenerating TypeScript Types[#](#generating-typescript-types)\n\n-------------------------------------------------------------\n\nYou can use the Supabase CLI to [generate the types](/docs/reference/cli/supabase-gen-types)\n. You can also generate the types [from the dashboard](https://supabase.com/dashboard/project/_/api?page=tables-intro)\n.\n\nTerminal\n\n`     _10  supabase gen types typescript --project-id abcdefghijklmnopqrst > database.types.ts      `\n\nThese types are generated from your database schema. Given a table `public.movies`, the generated types will look like:\n\n`     _10  create table public.movies (  _10  id bigint generated always as identity primary key,  _10  name text not null,  _10  data jsonb null  _10  );      `\n\n./database.types.ts\n\n``     _25  export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]  _25  _25  export interface Database {  _25  public: {  _25  Tables: {  _25  movies: {  _25  Row: { // the data expected from .select()  _25  id: number  _25  name: string  _25  data: Json | null  _25  }  _25  Insert: { // the data to be passed to .insert()  _25  id?: never // generated columns must not be supplied  _25  name: string // `not null` columns with no default must be supplied  _25  data?: Json | null // nullable columns can be omitted  _25  }  _25  Update: { // the data to be passed to .update()  _25  id?: never  _25  name?: string // `not null` columns are optional on .update()  _25  data?: Json | null  _25  }  _25  }  _25  }  _25  }  _25  }      ``\n\nUsing TypeScript type definitions[#](#using-typescript-type-definitions)\n\n-------------------------------------------------------------------------\n\nYou can supply the type definitions to `supabase-js` like so:\n\n./index.tsx\n\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  import { Database } from './database.types'  _10  _10  const supabase = createClient<Database>(  _10  process.env.SUPABASE_URL,  _10  process.env.SUPABASE_ANON_KEY  _10  )      `\n\nHelper types for Tables and Joins[#](#helper-types-for-tables-and-joins)\n\n-------------------------------------------------------------------------\n\nYou can use the following helper types to make the generated TypeScript types easier to use.\n\nSometimes the generated types are not what you expect. For example, a view's column may show up as nullable when you expect it to be `not null`. Using [type-fest](https://github.com/sindresorhus/type-fest)\n, you can override the types like so:\n\n./database-generated.types.ts\n\n`     _10  export type Json = // ...  _10  _10  export interface Database {  _10  // ...  _10  }      `\n\n./database.types.ts\n\n``     _20  import { MergeDeep } from 'type-fest'  _20  import { Database as DatabaseGenerated } from './database-generated.types'  _20  export { Json } from './database-generated.types'  _20  _20  // Override the type for a specific column in a view:  _20  export type Database = MergeDeep<  _20  DatabaseGenerated,  _20  {  _20  public: {  _20  Views: {  _20  movies_view: {  _20  Row: {  _20  // id is a primary key in public.movies, so it must be `not null`  _20  id: number  _20  }  _20  }  _20  }  _20  }  _20  }  _20  >      ``\n\nYou can also override the type of an individual successful response if needed:\n\n`     _10  const { data } = await supabase.from('countries').select().returns<MyType>()      `\n\nThe generated types provide shorthands for accessing tables and enums.\n\n./index.ts\n\n`     _10  import { Database, Tables, Enums } from \"./database.types.ts\";  _10  _10  // Before \ud83d\ude15  _10  let movie: Database['public']['Tables']['movies']['Row'] = // ...  _10  _10  // After \ud83d\ude0d  _10  let movie: Tables<'movies'>      `",
    "summary": "The summary is as follows:\n\nThe supabase-js library provides TypeScript support, enabling type inference, autocompletion, and type-safe queries. It generates TypeScript types from the database schema, which can be used to interact with the database in a type-safe manner. The library also offers helper types to override or customize the generated types, improving developer experience."
  },
  {
    "chunk_id": "74384745-26a2-4ed2-bb87-7ed93247a5f9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Response types for complex queries[#](#response-types-for-complex-queries)\n\n`supabase-js` always returns a `data` object (for success), and an `error` object (for unsuccessful requests).\n\nThese helper types provide the result types from any query, including nested types for database joins.\n\nGiven the following schema with a relation between cities and countries, we can get the nested `CountriesWithCities` type:\n\n`     _10  create table countries (  _10  \"id\" serial primary key,  _10  \"name\" text  _10  );  _10  _10  create table cities (  _10  \"id\" serial primary key,  _10  \"name\" text,  _10  \"country_id\" int references \"countries\"  _10  );      `\n\n``     _17  import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'  _17  _17  const countriesWithCitiesQuery = supabase  _17  .from(\"countries\")  _17  .select(`  _17  id,  _17  name,  _17  cities (  _17  id,  _17  name  _17  )  _17  `);  _17  type CountriesWithCities = QueryData<typeof countriesWithCitiesQuery>;  _17  _17  const { data, error } = await countriesWithCitiesQuery;  _17  if (error) throw error;  _17  const countriesWithCities: CountriesWithCities = data;      ``\n\n* * *\n\nFetch data\n----------\n\nPerform a SELECT query on the table or view.\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/javascript/using-filters)\n    \n*   `select()` can be combined with [Modifiers](/docs/reference/javascript/using-modifiers)\n    \n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\n     and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n    .",
    "summary": "The documentation provides information on the response types for complex queries in the `supabase-js` library. It outlines how the library returns a `data` object for successful requests and an `error` object for unsuccessful ones, and introduces the `QueryData` type for handling nested data structures resulting from database joins. The section also covers the basics of performing `SELECT` queries, including pagination, filtering, and modifiers, as well as a note about the reserved `apikey` keyword."
  },
  {
    "chunk_id": "15612775-7100-4fd6-b195-e423f878b9dd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnsOptionalQuery\n    \n    The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()      `\n\nData source\n\nResponse\n\n* * *\n\nInsert data\n-----------\n\nPerform an INSERT into the table or view.",
    "summary": "The summary covers the \"Parameters\" section of the software documentation, which describes various options for querying and working with data in Supabase. Key points include selecting specific columns, querying referenced tables, filtering through referenced tables, querying with count options, and querying JSON data. The summary also covers inserting data into the table or view."
  },
  {
    "chunk_id": "df8d277e-4143-4063-a7d4-142371088be0",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredUnion: expand to see options\n    \n    The values to insert. Pass an object to insert a single row or an array to insert multiple rows.\n    \n    Details\n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n\nCreate a recordCreate a record and return itBulk create\n\n`     _10  const { error } = await supabase  _10  .from('countries')  _10  .insert({ id: 1, name: 'Denmark' })      `\n\nData source\n\nResponse\n\n* * *\n\nUpdate data\n-----------\n\nPerform an UPDATE on the table or view.\n\n*   `update()` should always be combined with [Filters](/docs/reference/javascript/using-filters)\n     to target the item(s) you wish to update.",
    "summary": "The documentation provides details on updating data in a table or view using the `update()` method in Supabase. It requires specifying the values to update using the `values` parameter, which can be an object for a single row or an array for multiple rows. The `options` parameter can be used to provide additional named parameters. The update operation should be combined with filters to target the specific items to be updated."
  },
  {
    "chunk_id": "1079dd4e-6604-4142-bd17-02ee6346bf97",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredRow\n    \n    The values to update with\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nUpdating your dataUpdate a record and return itUpdating JSON data\n\n`     _10  const { error } = await supabase  _10  .from('countries')  _10  .update({ name: 'Australia' })  _10  .eq('id', 1)      `\n\nData source\n\nResponse\n\n* * *\n\nUpsert data\n-----------\n\nPerform an UPSERT on the table or view. Depending on the column(s) passed to `onConflict`, `.upsert()` allows you to perform the equivalent of `.insert()` if a row with the corresponding `onConflict` columns doesn't exist, or if it does exist, perform an alternative action depending on `ignoreDuplicates`.\n\n*   Primary keys must be included in `values` to use upsert.",
    "summary": "The provided content describes the update and upsert functionality of the Supabase API. The `update()` method allows updating a record and returning it, while the `upsert()` method performs an \"upsert\" operation, inserting a new row if it doesn't exist or updating an existing one based on the provided primary key columns. The summary highlights the key technical aspects, including the required parameters and the behavior of these database operations."
  },
  {
    "chunk_id": "4e997125-953e-4c6d-81ee-bda5c6baebc9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredUnion: expand to see options\n    \n    The values to upsert with. Pass an object to upsert a single row or an array to upsert multiple rows.\n    \n    Details\n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .upsert({ id: 1, name: 'Albania' })  _10  .select()      `\n\nData source\n\nResponse\n\n* * *\n\nDelete data\n-----------\n\nPerform a DELETE on the table or view.\n\n*   `delete()` should always be combined with [filters](/docs/reference/javascript/using-filters)\n     to target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\n     enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.",
    "summary": "The documentation describes the upsert (update or insert) functionality in Supabase, which allows you to update existing records or insert new ones. It includes detailed parameters for the upsert operation, such as `valuesRequired` for the data to be updated and `optionsRequired` for named parameters. The documentation also covers the delete functionality, which allows you to delete records by applying filters, and highlights the importance of using row-level security policies to control which rows are visible and can be deleted."
  },
  {
    "chunk_id": "20c2dfdd-b1d8-4006-999b-7a8892f670fb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nDelete a single recordDelete a record and return itDelete multiple records\n\n`     _10  const response = await supabase  _10  .from('countries')  _10  .delete()  _10  .eq('id', 1)      `\n\nData source\n\nResponse\n\n* * *\n\nCall a Postgres function\n------------------------\n\nPerform a function call.\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\nTo call Postgres functions on [Read Replicas](/docs/guides/platform/read-replicas)\n, use the `get: true` option.",
    "summary": "The summary covers two main sections: deleting records and calling Postgres functions.\n\nThe first section explains how to delete a single record or multiple records using the `delete()` method and `eq()` filter. The second section demonstrates how to call a Postgres function using a `remote procedure call`, which is useful for executing database logic that rarely changes, such as password resets and updates."
  },
  {
    "chunk_id": "013dc843-835e-4be1-8ee1-778f6aed66f5",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   fnRequiredFnName\n    \n    The function name to call\n    \n*   argsRequiredFn\\['Args'\\]\n    \n    The arguments to pass to the function call\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  const { data, error } = await supabase.rpc('hello_world')      `\n\nData source\n\nResponse\n\n* * *\n\nUsing filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional ChainingFilter by values within a JSON columnFilter referenced tables\n\n`     _10  const { data, error } = await supabase  _10  .from('cities')  _10  .select('name, country_id')  _10  .eq('name', 'The Shire') // Correct  _10  _10  const { data, error } = await supabase  _10  .from('cities')  _10  .eq('name', 'The Shire') // Incorrect  _10  .select('name, country_id')      `\n\nNotes\n\n* * *\n\nColumn is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.",
    "summary": "The documentation describes parameters and usage of the Supabase RPC (Remote Procedure Call) functionality, including calling Postgres functions with or without arguments, applying filters, and working with table responses. Key points include using the `rpc()` method, applying various filters (e.g., `eq()` for equality), and handling the response data and error objects."
  },
  {
    "chunk_id": "841da87b-0343-4428-916c-a21b2f447b32",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredNonNullable\n    \n    The value to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .eq('name', 'Albania')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.",
    "summary": "The documentation describes the use of the `select()` function in Supabase, which allows filtering data based on column and value. The key parameters are `columnRequiredUnion` to specify the column to filter on and `valueRequiredNonNullable` to provide the value to filter with. This operation performs a not-equal-to comparison, returning rows where the specified column does not match the given value."
  },
  {
    "chunk_id": "b5cc6ae5-9cec-4d74-a01e-872b61370761",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .neq('name', 'Albania')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is greater than a value\n------------------------------\n\nMatch only rows where `column` is greater than `value`.",
    "summary": "The summary covers the following key points:\n\n1. The parameters include a `columnRequiredUnion` that specifies the column to filter on, and a `valueRequiredUnion` that specifies the value to filter with.\n2. The documentation provides an example usage of the `select()` function to filter rows where the `name` column is not equal to 'Albania'.\n3. The section describes how to filter rows where a column is greater than a specified value."
  },
  {
    "chunk_id": "0b1fe7eb-0232-4488-8762-a5121d3a9208",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .gt('id', 2)      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\nColumn is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.",
    "summary": "The documentation provides details on the `select()` function in Supabase, specifically the `columnRequiredUnion` and `valueRequiredUnion` parameters. `columnRequiredUnion` specifies the column to filter on, while `valueRequiredUnion` defines the value to filter with. The summary also notes that the `select()` function can be used to filter rows where the column value is greater than or equal to a specified value."
  },
  {
    "chunk_id": "68845d22-f825-4e63-b6e1-a7fdbf418e77",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .gte('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.",
    "summary": "The summary covers the following key technical points:\n1. The documentation describes parameters for filtering data, including the column to filter on (`columnRequiredUnion`) and the value to filter with (`valueRequiredUnion`).\n2. It provides an example usage of the `select()` function in Supabase to filter rows where the `id` column is greater than or equal to 2.\n3. It also describes a general filtering operation where the data is filtered to only include rows where the specified column is less than the given value."
  },
  {
    "chunk_id": "e94e8439-3be8-4d2c-93d7-79a2254db45e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .lt('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.",
    "summary": "Summary:\n\nThe documentation describes two parameters, \"columnRequiredUnion\" and \"valueRequiredUnion\", which are used to filter the data in a \"select()\" query. The \"columnRequiredUnion\" parameter specifies the column to filter on, while the \"valueRequiredUnion\" parameter defines the value to filter with. The example demonstrates how to use the \"lt()\" method to select rows where the column value is less than or equal to a specified value."
  },
  {
    "chunk_id": "b0275d18-6e23-4764-8deb-7f66b8f8980f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .lte('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.",
    "summary": "The documentation provides details on the `select()` function in Supabase, including parameters for filtering data by column and value. It specifically covers the `columnRequiredUnion` and `valueRequiredUnion` parameters, which allow filtering on a specific column and value, respectively. Additionally, it mentions a `pattern` parameter that can be used to filter rows where a column matches a given pattern case-sensitively."
  },
  {
    "chunk_id": "ad3e0293-5289-4b69-8d89-69ff348ff2b9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   patternRequiredstring\n    \n    The pattern to match with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .like('name', '%Alba%')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.",
    "summary": "The summary covers the parameter options for the `select()` function in the Supabase library. The key parameters are `columnRequiredUnion`, which specifies the column to filter on, and `patternRequiredstring`, which defines the case-insensitive pattern to match against the column values. This allows filtering the database table to retrieve rows where the specified column matches the provided pattern."
  },
  {
    "chunk_id": "dfc0b053-9e06-483e-8866-56851bf78f5f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   patternRequiredstring\n    \n    The pattern to match with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .ilike('name', '%alba%')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is a value\n-----------------\n\nMatch only rows where `column` IS `value`.",
    "summary": "The summary covers two main parameters for filtering data in a SQL-like query:\n1. `columnRequiredUnion`: The column to filter on, with additional details on the expected string pattern.\n2. `valueRequiredUnion`: The value to match against the specified column, allowing for column-value equality filtering.\nThe example usage demonstrates how to apply these parameters using the `select()` method to filter a 'countries' table, returning rows where the 'name' column contains the pattern '%alba%'."
  },
  {
    "chunk_id": "95c490c5-e689-4dc7-a1da-0b4754b4e653",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nChecking for nullness, true or false\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .is('name', null)      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\nColumn is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.",
    "summary": "The documentation covers two key parameters for filtering data in a database table: 'column' and 'values'. The 'column' parameter specifies the column to filter on, while the 'values' parameter allows filtering on a list of values for that column. Additionally, the documentation provides an example of using the 'is' method to check for null values in the 'name' column of a 'countries' table."
  },
  {
    "chunk_id": "4e3bd053-e3f6-41ba-b506-968f974e27f4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valuesRequiredArray<Row\\['ColumnName'\\]>\n    \n    The values array to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .in('name', ['Albania', 'Algeria'])      `\n\nData source\n\nResponse\n\n* * *\n\nColumn contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.",
    "summary": "The provided content describes two parameters for filtering data in a software application: \"columnRequiredUnion\" and \"valuesRequiredArray\". The \"columnRequiredUnion\" parameter specifies the column to filter on, which can be a jsonb, array, or range column. The \"valuesRequiredArray\" parameter defines the values to filter with, and the filter will only match rows where the column contains every element in the provided values array. The example usage demonstrates how to use the \"in\" operator with the \"select()\" function to filter a \"countries\" table by the \"name\" column."
  },
  {
    "chunk_id": "47ad3e7b-126a-4591-bb44-d260ae7153f2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The jsonb, array, or range column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The jsonb, array, or range value to filter with\n    \n    Details\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  const { data, error } = await supabase  _10  .from('issues')  _10  .select()  _10  .contains('tags', ['is:open', 'priority:low'])      `\n\nData source\n\nResponse\n\n* * *\n\nContained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.",
    "summary": "The provided documentation describes parameters for filtering data in a Supabase database using the `contains` function. The key parameters are `columnRequiredUnion`, which specifies the column to filter on (e.g., jsonb, array, or range), and `valueRequiredUnion`, which specifies the value to filter with. The documentation also provides examples of using the `contains` function to filter data based on array, range, and jsonb columns."
  },
  {
    "chunk_id": "c0e76ecf-4e3e-4b9e-a75b-c9d039fea838",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The jsonb, array, or range column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The jsonb, array, or range value to filter with\n    \n    Details\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  const { data, error } = await supabase  _10  .from('classes')  _10  .select('name')  _10  .containedBy('days', ['monday', 'tuesday', 'wednesday', 'friday'])      `\n\nData source\n\nResponse\n\n* * *\n\nGreater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.",
    "summary": "The documentation describes parameters for filtering on jsonb, array, and range columns in a database query. Key parameters include `columnRequiredUnion` to specify the column to filter on, and `valueRequiredUnion` to provide the filter value. For range columns, the documentation also covers the `greater than a range` operator to match rows where every element in the column is greater than any element in the provided range."
  },
  {
    "chunk_id": "29bd1977-2fc5-408c-a3bb-e4766ff27313",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The range column to filter on\n    \n    Details\n    \n*   rangeRequiredstring\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeGt('during', '[2000-01-02 08:00, 2000-01-02 09:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nGreater than or equal to a range\\\n--------------------------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\\\n\\",
    "summary": "The documentation describes a parameter called `columnRequiredUnion` that specifies the range column to filter on, and a parameter called `rangeRequiredstring` that defines the range to filter with. The `select()` method can be used to retrieve data from a 'reservations' table, filtering the results based on a date range specified in the `during` column."
  },
  {
    "chunk_id": "920af610-1c5a-46be-9792-b800d3a3fd3a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeGte('during', '[2000-01-02 08:30, 2000-01-02 09:30)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nLess than a range\\\n-----------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\\\n\\",
    "summary": "The documentation describes parameters for filtering a database table using the `rangeGte` operator, including the `columnRequired` and `rangeRequired` parameters. The `rangeGte` operator is used to filter rows where the values in a given column are greater than or equal to a specified range. This functionality is demonstrated with an example using the Supabase library to query a `reservations` table."
  },
  {
    "chunk_id": "15acb075-a464-4720-a5dd-05a8bdf1f6e9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeLt('during', '[2000-01-01 15:00, 2000-01-01 16:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nLess than or equal to a range\\\n-----------------------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or less than any element in `range`.\\\n\\",
    "summary": "The documentation describes the `rangeGt` parameter, which is used to filter a range column in a Supabase database query. The parameter matches rows where every element in the column is either contained in the specified range or greater than any element in the range. Example usage is provided, demonstrating how to use the `rangeGt` parameter with the `select()` method."
  },
  {
    "chunk_id": "f0cba6c9-fdaa-4b4c-b782-eccf505bf987",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeLte('during', '[2000-01-01 14:00, 2000-01-01 16:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nMutually exclusive to a range\\\n-----------------------------\\\n\\\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\\\n\\",
    "summary": "The provided content describes parameters for the `select()` function in a Supabase database query. The `columnRequiredUnion` parameter specifies the range column to filter on, and the `rangeRequiredstring` parameter defines the range to filter with. The content also discusses the \"mutually exclusive to a range\" option, which is used for range columns to match rows where the column is mutually exclusive to the given range."
  },
  {
    "chunk_id": "84eb9961-ae7b-47c7-b1fc-567d5a1ed185",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeAdjacent('during', '[2000-01-01 12:00, 2000-01-01 13:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nWith a common element\\\n---------------------\\\n\\\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\\\n\\",
    "summary": "This documentation discusses the `columnRequired` and `rangeRequired` parameters used in the `select()` query of a Supabase database. The `columnRequired` parameter specifies the range column to filter on, while the `rangeRequired` parameter defines the range to filter with. The documentation also mentions the `rangeAdjacent()` function, which is used to filter rows where the `column` and `value` have a common element, particularly for array and range columns."
  },
  {
    "chunk_id": "906095c7-cacb-446f-9ce6-aea1bf715887",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The array or range column to filter on\\\n    \\\n    Details\\\n    \\\n*   valueRequiredUnion: expand to see options\\\n    \\\n    The array or range value to filter with\\\n    \\\n    Details\\\n    \\\n\\\nOn array columnsOn range columns\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('issues')  _10  .select('title')  _10  .overlaps('tags', ['is:closed', 'severity:high'])      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch a string\\\n--------------\\\n\\\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\\\n\\\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\\\n    .\\\n\\",
    "summary": "This section covers two types of column filters in a database query: array/range columns and text/tsvector columns. For array/range columns, the `columnRequired` and `valueRequired` parameters allow filtering based on overlapping values. For text/tsvector columns, the `columnRequired` and `query` parameters enable full-text search functionality, as described in the Postgres full-text search documentation."
  },
  {
    "chunk_id": "696d0fe5-9e12-421e-ac13-fab23cddfcba",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The text or tsvector column to filter on\\\n    \\\n    Details\\\n    \\\n*   queryRequiredstring\\\n    \\\n    The query text to match with\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nText searchBasic normalizationFull normalizationWebsearch\\\n\\\n``     _10  const result = await supabase  _10  .from(\"texts\")  _10  .select(\"content\")  _10  .textSearch(\"content\", `'eggs' & 'ham'`, {  _10  config: \"english\",  _10  });      ``\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch an associated value\\\n-------------------------\\\n\\\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\\\n\\",
    "summary": "The provided content describes a set of parameters for a text search operation, including the column to filter on, the query text to match, and optional configuration options. It also includes an example of how to perform a text search using the Supabase library, and explains the \"Match an associated value\" feature, which allows matching rows where each column in the query object has an equal associated value."
  },
  {
    "chunk_id": "6bcf026b-507a-477a-a169-94b8ae54d0ea",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   queryRequiredUnion: expand to see options\\\n    \\\n    The object to filter with, with column names as keys mapped to their filter values\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .match({ id: 2, name: 'Albania' })      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDon't match the filter\\\n----------------------\\\n\\\nMatch only rows which doesn't satisfy the filter.\\\n\\\nnot() expects you to use the raw PostgREST syntax for the filter values.\\\n\\\n``     _10  .not('id', 'in', '(5,6,7)') // Use `()` for `in` filter  _10  .not('arraycol', 'cs', '\\{\"a\",\"b\"\\}') // Use `cs` for `contains()`, `\\{\\}` for array values      ``\\\n\\",
    "summary": "The documentation describes the 'match()' and 'not()' functions in the Supabase library for filtering data. The 'match()' function allows filtering based on a set of key-value pairs, while 'not()' is used to filter out rows that don't match the specified criteria. It provides examples of using these functions for filtering on column values and array columns."
  },
  {
    "chunk_id": "a30f9c2a-5f9f-4c99-af73-43f97a99051b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to filter on\\\n    \\\n    Details\\\n    \\\n*   operatorRequiredUnion: expand to see options\\\n    \\\n    The operator to be negated to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n*   valueRequiredUnion: expand to see options\\\n    \\\n    The value to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .not('name', 'is', null)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch at least one filter\\\n-------------------------\\\n\\\nMatch only rows which satisfy at least one of the filters.\\\n\\\nor() expects you to use the raw PostgREST syntax for the filter names and values.\\\n\\\n``     _10  .or('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') // Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') // Use `cd` for `containedBy()`      ``\\\n\\",
    "summary": "The documentation describes the `select()` function in Supabase, which allows filtering rows based on various parameters. The `columnRequired`, `operatorRequired`, and `valueRequired` parameters define the column, operator, and value to filter on, following PostgREST syntax. The `or()` function can be used to match rows that satisfy at least one of the specified filters, using the raw PostgREST syntax for filter names and values."
  },
  {
    "chunk_id": "5fbce306-b332-4a35-9e6e-fbce02e06f0a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   filtersRequiredstring\\\n    \\\n    The filters to use, following PostgREST syntax\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .or('id.eq.2,name.eq.Algeria')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch the filter\\\n----------------\\\n\\\nMatch only rows which satisfy the filter. This is an escape hatch - you should use the specific filter methods wherever possible.\\\n\\\nfilter() expects you to use the raw PostgREST syntax for the filter values.\\\n\\\n``     _10  .filter('id', 'in', '(5,6,7)') // Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') // Use `cs` for `contains()`, `\\{\\}` for array values      ``\\\n\\",
    "summary": "The documentation covers the use of the `select()` and `filter()` methods in a Supabase client library. The `select()` method allows filtering data using PostgREST syntax, including the ability to use `or` and `and` operators. The `filter()` method provides a more direct way to apply filters, using the raw PostgREST syntax, which can be useful as an \"escape hatch\" when the specific filter methods are not sufficient."
  },
  {
    "chunk_id": "ba2c666a-604a-4b23-8543-9e0c27779022",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to filter on\\\n    \\\n    Details\\\n    \\\n*   operatorRequiredUnion: expand to see options\\\n    \\\n    The operator to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n*   valueRequiredunknown\\\n    \\\n    The value to filter with, following PostgREST syntax\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .filter('name', 'in', '(\"Algeria\",\"Japan\")')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUsing modifiers\\\n---------------\\\n\\\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\\\n\\\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\\\n\\\n* * *\\\n\\\nReturn data after inserting\\\n---------------------------\\\n\\\nPerform a SELECT on the query result.\\\n\\",
    "summary": "The documentation describes the parameters for filtering data using the `select()` function in Supabase, including the `column`, `operator`, and `value` parameters. It also discusses modifiers, which allow changing the format of the response, and the ability to return data after inserting. The summary covers the key technical points around filtering, modifiers, and data retrieval in Supabase's API."
  },
  {
    "chunk_id": "4531a7dc-b1e6-4c5f-8228-c13acef02984",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnsOptionalQuery\\\n    \\\n    The columns to retrieve, separated by commas\\\n    \\\n\\\nWith \\`upsert()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .upsert({ id: 1, name: 'Algeria' })  _10  .select()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nOrder the results\\\n-----------------\\\n\\\nOrder the query result by `column`.\\\n\\",
    "summary": "The summary covers the following key points:\n\n1. The `columns` parameter specifies the columns to retrieve in the query, separated by commas.\n2. The `upsert()` method is used to insert or update a row in the 'countries' table, with the provided `id` and `name` values.\n3. The query results can be ordered by the specified `column` parameter."
  },
  {
    "chunk_id": "b337ffe1-4374-48e7-af78-b72354e0f673",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to order by\\\n    \\\n    Details\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('id', 'name')  _10  .order('id', { ascending: false })      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLimit the number of rows returned\\\n---------------------------------\\\n\\\nLimit the query result by `count`.\\\n\\",
    "summary": "The documentation provides details on using the `select()` method with Supabase to retrieve data from a table, including how to specify the columns to retrieve, order the results, and limit the number of rows returned. Key points include the `column` parameter to order by, the `options` object for named parameters, and the `count` parameter to limit the query result."
  },
  {
    "chunk_id": "5f36137d-2799-4e78-8067-e98ec669f2bf",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   countRequirednumber\\\n    \\\n    The maximum number of rows to return\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .limit(1)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLimit the query to a range\\\n--------------------------\\\n\\\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly. The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\\\n\\",
    "summary": "The provided content describes parameters for limiting the number of rows returned by a database query, including `count` to specify the maximum number of rows and `options` to configure additional parameters. It also explains how to use the `limit()` function to return a range of rows from the query result, with the `from` and `to` parameters specifying the starting and ending offsets of the range. This functionality is important for efficiently retrieving subsets of large data sets."
  },
  {
    "chunk_id": "021e0fd0-ac35-4be7-ac50-30e36ee8bf87",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromRequirednumber\\\n    \\\n    The starting index from which to limit the result\\\n    \\\n*   toRequirednumber\\\n    \\\n    The last index to which to limit the result\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .range(0, 1)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSet an abort signal\\\n-------------------\\\n\\\nSet the AbortSignal for the fetch request.\\\n\\\nYou can use this to set a timeout for the request.\\\n\\",
    "summary": "The documentation outlines parameters for the `select()` function, including `from` (starting index), `to` (ending index), and `options` (named parameters). It also discusses setting an AbortSignal to allow aborting in-flight requests and setting a timeout for the fetch request."
  },
  {
    "chunk_id": "1c53920c-39cd-4855-9e0f-086a0316b973",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   signalRequiredAbortSignal\\\n    \\\n    The AbortSignal to use for the fetch request\\\n    \\\n\\\nAborting requests in-flightSet a timeout\\\n\\\n`     _10  const ac = new AbortController()  _10  ac.abort()  _10  const { data, error } = await supabase  _10  .from('very_big_table')  _10  .select()  _10  .abortSignal(ac.signal)      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nRetrieve one row of data\\\n------------------------\\\n\\\nReturn `data` as a single object instead of an array of objects.\\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .limit(1)  _10  .single()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve zero or one row of data\\\n--------------------------------\\\n\\\nReturn `data` as a single object instead of an array of objects.\\\n\\",
    "summary": "The provided content covers two main topics: aborting in-flight requests and retrieving a single row of data from a database. For aborting requests, it demonstrates the use of the AbortSignal to cancel a fetch operation. For single row retrieval, it shows how to use the .select(), .limit(1), and .single() methods to return a single object instead of an array."
  },
  {
    "chunk_id": "73cab2f6-0ae6-447e-a8be-a4bfe83e9229",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nUnion: expand to see options\\\n\\\nDetails\\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .eq('name', 'Singapore')  _10  .maybeSingle()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve as a CSV\\\n-----------------\\\n\\\nReturn `data` as a string in CSV format.\\\n\\",
    "summary": "The documentation describes the \"select()\" method in the Supabase library, which allows retrieving data from a database table as a CSV string. It provides details on the return type, how to filter and retrieve a single record, and the ability to retrieve the data in a CSV format, which can be useful for further processing or data analysis."
  },
  {
    "chunk_id": "b93c3c73-92d2-4404-9b1b-f8f2d728648f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nstring\\\n\\\nReturn data as CSV\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .csv()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nOverride type of successful response\\\n------------------------------------\\\n\\\nOverride the type of the returned `data`.\\\n\\\nOverride type of successful response\\\n\\\n`     _10  const { data } = await supabase  _10  .from('countries')  _10  .select()  _10  .returns<MyType>()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUsing explain\\\n-------------\\\n\\\nReturn `data` as the EXPLAIN plan for the query.\\\n\\\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\\\n of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\\\n\\\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\\\n\\\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\\\n to enable the functionality on your project.\\\n\\",
    "summary": "The documentation covers the `csv()` and `returns<>()` methods of the Supabase client library, which allow overriding the response type. The `csv()` method returns data as a CSV string, while `returns<>()` specifies a custom data type for the response. Additionally, the `explain()` method can be used to get the Postgres EXPLAIN plan for a query, which is useful for debugging performance issues."
  },
  {
    "chunk_id": "46233b43-5f0e-4b11-97ac-a0eaa559c089",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters for a function, which expects an 'options' object as a required input. The options object likely contains configuration settings for the function, but the specific details are not provided in this excerpt."
  },
  {
    "chunk_id": "79a83653-846a-48a8-a9b0-4b3f2289f94e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nUnion: expand to see options\\\n\\\nDetails\\\n\\\nGet the execution planGet the execution plan with analyze and verbose\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .explain()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nOverview\\\n--------\\\n\\\n*   The auth methods can be accessed via the `supabase.auth` namespace.\\\n    \\\n*   By default, the supabase client sets `persistSession` to true and attempts to store the session in local storage. When using the supabase client in an environment that doesn't support local storage, you might notice the following warning message being logged:\\\n    \\\n    > No storage option exists to persist the session, which may result in unexpected behavior when using auth. If you want to set `persistSession` to true, please provide a storage option or you may set `persistSession` to false to disable this warning.\\\n    \\\n    This warning message can be safely ignored if you're not using auth on the server-side. If you are using auth and you want to set `persistSession` to true, you will need to provide a custom storage implementation that follows [this interface](https://github.com/supabase/gotrue-js/blob/master/src/lib/types.ts#L1027)\\\n    .\\\n    \\\n*   Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits)\\\n     in place to guard against brute force attacks.\\\n    \\\n*   The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth)\\\n    . A refresh token never expires and can only be used once.\\\n    \\\n\\\nCreate auth clientCreate auth client (server-side)\\\n\\\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  _10  const supabase = createClient(supabase_url, anon_key)      `\\\n\\\n* * *\\\n\\\nError codes\\\n-----------\\\n\\\nSupabase Auth can throw or return various errors when using the API. All errors originating from the `supabase.auth` namespace of the client library will be wrapped by the `AuthError` class.\\\n\\\nError objects are split in a few classes:\\\n\\\n*   `AuthApiError` -- errors which originate from the Supabase Auth API.\\\n    *   Use `isAuthApiError` instead of `instanceof` checks to see if an error you caught is of this type.\\\n*   `CustomAuthError` -- errors which generally originate from state in the client library.\\\n    *   Use the `name` property on the error to identify the class of error received.\\\n\\\nErrors originating from the server API classed as `AuthApiError` always have a `code` property that can be used to identify the error returned by the server. The `status` property is also present, encoding the HTTP status code received in the response.\\\n\\\nIn general the HTTP status codes you will likely receive are:\\\n\\\n*   [403 Forbidden](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)\\\n     is sent out in rare situations where a certain Auth feature is not available for the user, and you as the developer are not checking a precondition whether that API is available for the user.\\\n*   [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)\\\n     is sent out when the API request is accepted, but cannot be processed because the user or Auth server is in a state where it cannot satisfy the request.\\\n*   [429 Too Many Requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429)\\\n     is sent out when rate-limits are breached for an API. You should handle this status code often, especially in functions that authenticate a user.\\\n*   [500 Internal Server Error](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500)\\\n     often means that the Auth server's service is degraded. Most often it points to issues in your database setup such as a misbehaving trigger on a schema, function, view or other database object.\\\n*   [501 Not Implemented](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/501)\\\n     is sent out when a feature is not enabled on the Auth server, and you are trying to use an API which requires it.\\\n\\\nTo supplement HTTP status codes, Supabase Auth returns a string error code which gives you more insight into what went wrong. These codes are stable and can be used to present an internationalized message to your users.\\\n\\\n| Code | Description |\\\n| --- | --- |\\\n| `anonymous_provider_disabled` | Anonymous sign-ins are disabled. |\\\n| `bad_code_verifier` | Returned from the PKCE flow where the provided code verifier does not match the expected one. Indicates a bug in the implementation of the client library. |\\\n| `bad_json` | Usually used when the HTTP body of the request is not valid JSON. |\\\n| `bad_jwt` | JWT sent in the `Authorization` header is not valid. |\\\n| `bad_oauth_callback` | OAuth callback from provider to Auth does not have all the required attributes (state). Indicates an issue with the OAuth provider or client library implementation. |\\\n| `bad_oauth_state` | OAuth state (data echoed back by the OAuth provider to Supabase Auth) is not in the correct format. Indicates an issue with the OAuth provider integration. |\\\n| `captcha_failed` | Captcha challenge could not be verified with the captcha provider. Check your captcha integration. |\\\n| `conflict` | General database conflict, such as concurrent requests on resources that should not be modified concurrently. Can often occur when you have too many session refresh requests firing off at the same time for a user. Check your app for concurrency issues, and if detected, back off exponentially. |\\\n| `email_conflict_identity_not_deletable` | Unlinking this identity causes the user's account to change to an email address which is already used by another user account. Indicates an issue where the user has two different accounts using different primary email addresses. You may need to migrate user data to one of their accounts in this case. |\\\n| `email_exists` | Email address already exists in the system. |\\\n| `email_not_confirmed` | Signing in is not allowed for this user as the email address is not confirmed. |\\\n| `email_provider_disabled` | Signups are disabled for email and password. |\\\n| `flow_state_expired` | PKCE flow state to which the API request relates has expired. Ask the user to sign in again. |\\\n| `flow_state_not_found` | PKCE flow state to which the API request relates no longer exists. Flow states expire after a while and are progressively cleaned up, which can cause this error. Retried requests can cause this error, as the previous request likely destroyed the flow state. Ask the user to sign in again. |\\\n| `hook_payload_over_size_limit` | Payload from Auth exceeds maximum size limit. |\\\n| `hook_timeout` | Unable to reach hook within maximum time allocated. |\\\n| `hook_timeout_after_retry` | Unable to reach hook after maximum number of retries. |\\\n| `identity_already_exists` | The identity to which the API relates is already linked to a user. |\\\n| `identity_not_found` | Identity to which the API call relates does not exist, such as when an identity is unlinked or deleted. |\\\n| `insufficient_aal` | To call this API, the user must have a higher [Authenticator Assurance Level](https://supabase.com/docs/guides/auth/auth-mfa)<br>. To resolve, ask the user to solve an MFA challenge. |\\\n| `invite_not_found` | Invite is expired or already used. |\\\n| `invalid_credentials` | Login credentials or grant type not recognized. |\\\n| `manual_linking_disabled` | Calling the `supabase.auth.linkUser()` and related APIs is not enabled on the Auth server. |\\\n| `mfa_challenge_expired` | Responding to an MFA challenge should happen within a fixed time period. Request a new challenge when encountering this error. |\\\n| `mfa_factor_name_conflict` | MFA factors for a single user should not have the same friendly name. |\\\n| `mfa_factor_not_found` | MFA factor no longer exists. |\\\n| `mfa_ip_address_mismatch` | The enrollment process for MFA factors must begin and end with the same IP address. |\\\n| `mfa_verification_failed` | MFA challenge could not be verified -- wrong TOTP code. |\\\n| `mfa_verification_rejected` | Further MFA verification is rejected. Only returned if the [MFA verification attempt hook](https://supabase.com/docs/guides/auth/auth-hooks?language=add-admin-role#hook-mfa-verification-attempt)<br> returns a reject decision. |\\\n| `mfa_verified_factor_exists` | Verified phone factor already exists for a user. Unenroll existing verified phone factor to continue. |\\\n| `mfa_totp_enroll_disabled` | Enrollment of MFA TOTP factors is disabled. |\\\n| `mfa_totp_verify_disabled` | Login via TOTP factors and verification of new TOTP factors is disabled. |\\\n| `mfa_phone_enroll_disabled` | Enrollment of MFA Phone factors is disabled. |\\\n| `mfa_phone_verify_disabled` | Login via Phone factors and verification of new Phone factors is disabled. |\\\n| `no_authorization` | This HTTP request requires an `Authorization` header, which is not provided. |\\\n| `not_admin` | User accessing the API is not admin, i.e. the JWT does not contain a `role` claim that identifies them as an admin of the Auth server. |\\\n| `oauth_provider_not_supported` | Using an OAuth provider which is disabled on the Auth server. |\\\n| `otp_disabled` | Sign in with OTPs (magic link, email OTP) is disabled. Check your sever's configuration. |\\\n| `otp_expired` | OTP code for this sign-in has expired. Ask the user to sign in again. |\\\n| `over_email_send_rate_limit` | Too many emails have been sent to this email address. Ask the user to wait a while before trying again. |\\\n| `over_request_rate_limit` | Too many requests have been sent by this client (IP address). Ask the user to try again in a few minutes. Sometimes can indicate a bug in your application that mistakenly sends out too many requests (such as a badly written [`useEffect` React hook](https://react.dev/reference/react/useEffect)<br>). |\\\n| `over_sms_send_rate_limit` | Too many SMS messages have been sent to this phone number. Ask the user to wait a while before trying again. |\\\n| `phone_exists` | Phone number already exists in the system. |\\\n| `phone_not_confirmed` | Signing in is not allowed for this user as the phone number is not confirmed. |\\\n| `phone_provider_disabled` | Signups are disabled for phone and password. |\\\n| `provider_disabled` | OAuth provider is disabled for use. Check your server's configuration. |\\\n| `provider_email_needs_verification` | Not all OAuth providers verify their user's email address. Supabase Auth requires emails to be verified, so this error is sent out when a verification email is sent after completing the OAuth flow. |\\\n| `reauthentication_needed` | A user needs to reauthenticate to change their password. Ask the user to reauthenticate by calling the `supabase.auth.reauthenticate()` API. |\\\n| `reauthentication_not_valid` | Verifying a reauthentication failed, the code is incorrect. Ask the user to enter a new code. |\\\n| `request_timeout` | Processing the request took too long. Retry the request. |\\\n| `same_password` | A user that is updating their password must use a different password than the one currently used. |\\\n| `saml_assertion_no_email` | SAML assertion (user information) was received after sign in, but no email address was found in it, which is required. Check the provider's attribute mapping and/or configuration. |\\\n| `saml_assertion_no_user_id` | SAML assertion (user information) was received after sign in, but a user ID (called NameID) was not found in it, which is required. Check the SAML identity provider's configuration. |\\\n| `saml_entity_id_mismatch` | (Admin API.) Updating the SAML metadata for a SAML identity provider is not possible, as the entity ID in the update does not match the entity ID in the database. This is equivalent to creating a new identity provider, and you should do that instead. |\\\n| `saml_idp_already_exists` | (Admin API.) Adding a SAML identity provider that is already added. |\\\n| `saml_idp_not_found` | SAML identity provider not found. Most often returned after IdP-initiated sign-in with an unregistered SAML identity provider in Supabase Auth. |\\\n| `saml_metadata_fetch_failed` | (Admin API.) Adding or updating a SAML provider failed as its metadata could not be fetched from the provided URL. |\\\n| `saml_provider_disabled` | Using [Enterprise SSO with SAML 2.0](https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml)<br> is not enabled on the Auth server. |\\\n| `saml_relay_state_expired` | SAML relay state is an object that tracks the progress of a `supabase.auth.signInWithSSO()` request. The SAML identity provider should respond after a fixed amount of time, after which this error is shown. Ask the user to sign in again. |\\\n| `saml_relay_state_not_found` | SAML relay states are progressively cleaned up after they expire, which can cause this error. Ask the user to sign in again. |\\\n| `session_not_found` | Session to which the API request relates no longer exists. This can occur if the user has signed out, or the session entry in the database was deleted in some other way. |\\\n| `signup_disabled` | Sign ups (new account creation) are disabled on the server. |\\\n| `single_identity_not_deletable` | Every user must have at least one identity attached to it, so deleting (unlinking) an identity is not allowed if it's the only one for the user. |\\\n| `sms_send_failed` | Sending an SMS message failed. Check your SMS provider configuration. |\\\n| `sso_domain_already_exists` | (Admin API.) Only one SSO domain can be registered per SSO identity provider. |\\\n| `sso_provider_not_found` | SSO provider not found. Check the arguments in `supabase.auth.signInWithSSO()`. |\\\n| `too_many_enrolled_mfa_factors` | A user can only have a fixed number of enrolled MFA factors. |\\\n| `unexpected_audience` | (Deprecated feature not available via Supabase client libraries.) The request's `X-JWT-AUD` claim does not match the JWT's audience. |\\\n| `unexpected_failure` | Auth service is degraded or a bug is present, without a specific reason. |\\\n| `user_already_exists` | User with this information (email address, phone number) cannot be created again as it already exists. |\\\n| `user_banned` | User to which the API request relates has a `banned_until` property which is still active. No further API requests should be attempted until this field is cleared. |\\\n| `user_not_found` | User to which the API request relates no longer exists. |\\\n| `user_sso_managed` | When a user comes from SSO, certain fields of the user cannot be updated (like `email`). |\\\n| `validation_failed` | Provided parameters are not in the expected format. |\\\n| `weak_password` | User is signing up or changing their password without meeting the password strength criteria. Use the `AuthWeakPasswordError` class to access more information about what they need to do to make the password pass. |\\\n\\",
    "summary": "The documentation covers the Supabase Auth API, including how to create an auth client, handle various error codes, and understand the different types of errors that can be thrown (AuthApiError, CustomAuthError). It provides a detailed list of the possible error codes and their corresponding descriptions, which is valuable for developers working with the Supabase Auth system to understand and handle errors effectively."
  },
  {
    "chunk_id": "94374875-66d7-4a6b-9578-d1ad52e434c9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Tips for better error handling[#](#tips-for-better-error-handling)\\\n\\\n*   Do not use string matching on error messages! Always use the `name` and `code` properties of error objects to identify the situation.\\\n*   Although HTTP status codes generally don't change, they can suddenly change due to bugs, so avoid relying on them unless absolutely necessary.\\\n\\\n* * *\\\n\\\nCreate a new user\\\n-----------------\\\n\\\nCreates a new user.\\\n\\\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](/dashboard/project/_/auth/providers)\\\n    .\\\n*   **Confirm email** determines if users need to confirm their email address after signing up.\\\n    *   If **Confirm email** is enabled, a `user` is returned but `session` is null.\\\n    *   If **Confirm email** is disabled, both a `user` and a `session` are returned.\\\n*   When the user confirms their email address, they are redirected to the [`SITE_URL`](/docs/guides/auth/redirect-urls)\\\n     by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](/dashboard/project/_/auth/url-configuration)\\\n    .\\\n*   If signUp() is called for an existing confirmed user:\\\n    *   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\\\n        , an obfuscated/fake user object is returned.\\\n    *   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\\\n*   To fetch the currently logged-in user, refer to [`getUser()`](/docs/reference/javascript/auth-getuser)\\\n    .\\\n\\",
    "summary": "The summary covers tips for better error handling, such as using the `name` and `code` properties of error objects instead of string matching, and avoiding reliance on HTTP status codes. It also details the process of creating a new user, including the impact of the \"Confirm email\" setting on the returned user and session objects, and the behavior when creating an account for an existing confirmed user."
  },
  {
    "chunk_id": "85d06309-dff2-4230-ab57-532db62af452",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content discusses the \"credentialsRequired\" parameter, which is a union type that can take various forms, such as signing up with an email and password, or a phone number and password (SMS). This information is likely relevant for implementing user authentication or registration functionality in a software application."
  },
  {
    "chunk_id": "91b5f26c-7ac6-4fd5-921d-e8f4a29f2e51",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\\\n\\\n`     _10  const { data, error } = await supabase.auth.signUp({  _10  email: 'example@email.com',  _10  password: 'example-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nListen to auth events\\\n---------------------\\\n\\\nReceive a notification every time an auth event happens.\\\n\\\n*   Subscribes to important events occurring on the user's session.\\\n*   Use on the frontend/client. It is less useful on the server.\\\n*   Events are emitted across tabs to keep your application's UI up-to-date. Some events can fire very frequently, based on the number of tabs open. Use a quick and efficient callback function, and defer or debounce as many operations as you can to be performed outside of the callback.\\\n*   **Important:** A callback can be an `async` function and it runs synchronously during the processing of the changes causing the event. You can easily create a dead-lock by using `await` on a call to another method of the Supabase library.\\\n    *   Avoid using `async` functions as callbacks.\\\n    *   Limit the number of `await` calls in `async` callbacks.\\\n    *   Do not use other Supabase functions in the callback function. If you must, dispatch the functions once the callback has finished executing. Use this as a quick way to achieve this:\\\n        \\\n        `     _10  supabase.auth.onAuthStateChange((event, session) => \\{  _10  setTimeout(async () => \\{  _10  // await on other Supabase function here  _10  // this runs right after the callback has finished  _10  \\}, 0)  _10  \\})      `\\\n        \\\n*   Emitted events:\\\n    *   `INITIAL_SESSION`\\\n        *   Emitted right after the Supabase client is constructed and the initial session from storage is loaded.\\\n    *   `SIGNED_IN`\\\n        *   Emitted each time a user session is confirmed or re-established, including on user sign in and when refocusing a tab.\\\n        *   Avoid making assumptions as to when this event is fired, this may occur even when the user is already signed in. Instead, check the user object attached to the event to see if a new user has signed in and update your application's UI.\\\n        *   This event can fire very frequently depending on the number of tabs open in your application.\\\n    *   `SIGNED_OUT`\\\n        *   Emitted when the user signs out. This can be after:\\\n            *   A call to `supabase.auth.signOut()`.\\\n            *   After the user's session has expired for any reason:\\\n                *   User has signed out on another device.\\\n                *   The session has reached its timebox limit or inactivity timeout.\\\n                *   User has signed in on another device with single session per user enabled.\\\n                *   Check the [User Sessions](/docs/guides/auth/sessions)\\\n                     docs for more information.\\\n        *   Use this to clean up any local storage your application has associated with the user.\\\n    *   `TOKEN_REFRESHED`\\\n        *   Emitted each time a new access and refresh token are fetched for the signed in user.\\\n        *   It's best practice and highly recommended to extract the access token (JWT) and store it in memory for further use in your application.\\\n            *   Avoid frequent calls to `supabase.auth.getSession()` for the same purpose.\\\n        *   There is a background process that keeps track of when the session should be refreshed so you will always receive valid tokens by listening to this event.\\\n        *   The frequency of this event is related to the JWT expiry limit configured on your project.\\\n    *   `USER_UPDATED`\\\n        *   Emitted each time the `supabase.auth.updateUser()` method finishes successfully. Listen to it to update your application's UI based on new profile information.\\\n    *   `PASSWORD_RECOVERY`\\\n        *   Emitted instead of the `SIGNED_IN` event when the user lands on a page that includes a password recovery link in the URL.\\\n        *   Use it to show a UI to the user where they can [reset their password](/docs/guides/auth/passwords#resetting-a-users-password-forgot-password)\\\n            .\\\n\\",
    "summary": "The documentation describes the Supabase authentication library's sign-up functionality, including options for email/password, phone number/password, and additional user metadata. It also details the `onAuthStateChange` event listener, which emits events like `SIGNED_IN`, `SIGNED_OUT`, `TOKEN_REFRESHED`, and `USER_UPDATED` to help keep the application's UI up-to-date with the user's authentication state. Developers are advised to use these events carefully, avoiding frequent calls to other Supabase functions and limiting `await` usage within the callbacks."
  },
  {
    "chunk_id": "c14db2c2-eb48-495d-bb1e-7f2662cab635",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   callbackRequiredfunction\\\n    \\\n    A callback function to be invoked when an auth event happens.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content summarizes a callback function parameter that is invoked when an authentication event occurs. This callback function allows tracking of user sign-in and sign-out events, as well as storage of OAuth provider tokens after sign-in, which can be used to manage the user's session state within a React context."
  },
  {
    "chunk_id": "9ca5f7b9-e094-4ee3-8ccc-2a75f50623cc",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nobject\\\n\\\nDetails\\\n\\\nListen to auth changesListen to sign outStore OAuth provider tokens on sign inUse React Context for the User's sessionListen to password recovery eventsListen to sign inListen to token refreshListen to user updates\\\n\\\n`     _20  const { data } = supabase.auth.onAuthStateChange((event, session) => {  _20  console.log(event, session)  _20  _20  if (event === 'INITIAL_SESSION') {  _20  // handle initial session  _20  } else if (event === 'SIGNED_IN') {  _20  // handle sign in event  _20  } else if (event === 'SIGNED_OUT') {  _20  // handle sign out event  _20  } else if (event === 'PASSWORD_RECOVERY') {  _20  // handle password recovery event  _20  } else if (event === 'TOKEN_REFRESHED') {  _20  // handle token refreshed event  _20  } else if (event === 'USER_UPDATED') {  _20  // handle user updated event  _20  }  _20  })  _20  _20  // call unsubscribe to remove the callback  _20  data.subscription.unsubscribe()      `\\\n\\\n* * *\\\n\\\nCreate an anonymous user\\\n------------------------\\\n\\\nCreates a new anonymous user.\\\n\\\n*   Returns an anonymous user\\\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\\\n\\",
    "summary": "The content describes the Supabase Authentication API, which provides methods for listening to various authentication events such as sign-in, sign-out, password recovery, and token refresh. The API also supports creating anonymous user accounts, which is recommended to be set up with captcha to prevent abuse. The summary highlights the key functionality of the authentication API, including its ability to manage user sessions and listen to authentication-related events."
  },
  {
    "chunk_id": "1102df66-d696-4a47-99e8-ab749a3beef5",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsOptionalSignInAnonymouslyCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes how to create an anonymous user with custom metadata using the `credentialsOptionalSignInAnonymously()` method. It provides a way to sign in anonymously and store user data without requiring a full sign-in process. This can be useful for user experiences that don't require a persistent user account, such as demos or temporary sessions."
  },
  {
    "chunk_id": "217f454c-5bf4-412c-8888-6dd96b13d99d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate an anonymous userCreate an anonymous user with custom user metadata\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInAnonymously({  _10  options: {  _10  captchaToken  _10  }  _10  });      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user\\\n--------------\\\n\\\nLog in an existing user with an email and password or phone and password.\\\n\\\n*   Requires either an email and password or a phone number and password.\\\n\\",
    "summary": "This section describes the `signInAnonymously()` method, which creates an anonymous user with custom user metadata. The method returns a Promise that resolves to an object containing the user data and any errors. Additionally, the section provides details on the `signIn()` method, which logs in an existing user with an email and password or phone and password."
  },
  {
    "chunk_id": "c301d3fa-be36-42bd-a7ff-b7dc624162cd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters required for creating an anonymous user with custom user metadata. It provides a union type for the credentials, which can include email and password or phone and password. The summary should be used in a search pipeline to help users quickly find relevant information about user authentication and creation."
  },
  {
    "chunk_id": "1a445fd7-307d-441e-b7bd-5debaae43b1b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with email and passwordSign in with phone and password\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithPassword({  _10  email: 'example@email.com',  _10  password: 'example-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in with ID Token\\\n---------------------\\\n\\\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\\\n\\",
    "summary": "The documentation provides two methods for signing in: 1) with email and password, and 2) with an OIDC ID token. The first method uses the `supabase.auth.signInWithPassword()` function, which takes an email and password as input. The second method allows signing in with an OIDC ID token, which requires the authentication provider to be enabled and configured."
  },
  {
    "chunk_id": "100c2379-db6d-4e40-9583-b5a9d79c4f37",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithIdTokenCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the `signInWithIdToken()` method, which allows users to sign in using an ID token. It returns a Promise that resolves to a response object containing the signed-in user's data or any errors that occurred during the sign-in process."
  },
  {
    "chunk_id": "6d911a6a-8d4b-40f3-b1d1-73ee78c291fc",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign In using ID Token\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithIdToken({  _10  provider: 'google',  _10  token: 'your-id-token'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user through OTP\\\n--------------------------\\\n\\\nLog in a user using magiclink or a one-time password (OTP).\\\n\\\n*   Requires either an email or phone number.\\\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\\\n*   If the user doesn't exist, `signInWithOtp()` will signup the user instead. To restrict this behavior, you can set `shouldCreateUser` in `SignInWithPasswordlessCredentials.options` to `false`.\\\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\\\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\\\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\\\n    .\\\n*   See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards)\\\n     to add additional redirect URLs to your project.\\\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](/dashboard/project/_/auth/templates)\\\n     to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\\\n*   See our [Twilio Phone Auth Guide](/docs/guides/auth/phone-login?showSmsProvider=Twilio)\\\n     for details about configuring WhatsApp sign in.\\\n\\",
    "summary": "The documentation covers two methods for signing in users: 1) Sign in with ID token, which allows signing in a user using a Google ID token, and 2) Sign in with OTP, which enables passwordless sign-in using a one-time password sent to the user's email or phone. The OTP-based sign-in can also be used for user signup if the user doesn't exist. The documentation provides code examples and details on configuring the sign-in flow, including handling email-based magic links and SMS-based OTPs."
  },
  {
    "chunk_id": "7b0c1968-8009-44f4-a605-7afa3bfeb7bf",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content provides details on signing in using an ID token, email, SMS OTP, or WhatsApp OTP. The method returns a Promise with a Union type, which can contain data or an error. This functionality is useful for implementing secure authentication flows in an application."
  },
  {
    "chunk_id": "acd9ed06-1666-4634-8fda-b352bd9839ca",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithOtp({  _10  email: 'example@email.com',  _10  options: {  _10  emailRedirectTo: 'https://example.com/welcome'  _10  }  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nSign in a user through OAuth\\\n----------------------------\\\n\\\nLog in an existing user via a third-party provider. This method supports the PKCE flow.\\\n\\\n*   This method is used for signing in using a third-party provider.\\\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\\\n    .\\\n\\",
    "summary": "The documentation describes two different sign-in methods: sign-in with email/SMS OTP/WhatsApp OTP, and sign-in with OAuth. The email/OTP sign-in method uses the `supabase.auth.signInWithOtp()` function, while the OAuth sign-in method supports the PKCE flow and various third-party providers. The summary covers the key technical details of these two sign-in approaches."
  },
  {
    "chunk_id": "31aa9cd5-71aa-4df9-8e4c-3033bfb43af3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithOAuthCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary describes the parameters and details for signing in with email, SMS OTP, or WhatsApp OTP. It also covers signing in using a third-party provider with a redirect mechanism. The key technical points are the different authentication methods supported and the use of a Promise-based return type to handle the asynchronous sign-in process."
  },
  {
    "chunk_id": "59fd09ce-fa31-46b1-94c8-1ade73a47bf5",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes and access provider tokens\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithOAuth({  _10  provider: 'github'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user through SSO\\\n--------------------------\\\n\\\nAttempts a single-sign on using an enterprise Identity Provider. A successful SSO attempt will redirect the current page to the identity provider authorization page. The redirect URL is implementation and SSO protocol specific.\\\n\\\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\\\n     to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\\\n     to do this.\\\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\\\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `providerId` property. For example:\\\n    *   Mapping specific user email addresses with an identity provider.\\\n    *   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\\\n\\",
    "summary": "This section describes how to sign in a user using a third-party OAuth provider or through a single sign-on (SSO) integration. The OAuth flow involves calling `supabase.auth.signInWithOAuth()` with a provider parameter, while the SSO flow requires establishing a connection to an identity provider using the Supabase CLI. The SSO flow can be customized by specifying a domain or provider ID to handle different authentication scenarios."
  },
  {
    "chunk_id": "70af4a79-60a5-43f3-80d3-6be2f5de6c3e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content describes a function that takes a required \"paramsRequiredUnion\" parameter, which is a union type with multiple options. This function returns a Promise that resolves to one of the options in the union. The purpose of this function is likely to facilitate signing in with a third-party provider or an email domain, allowing users to authenticate with the system."
  },
  {
    "chunk_id": "f1bb5f9f-9ed5-417c-b468-8c8634a41a33",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with email domainSign in with provider UUID\\\n\\\n`     _11  // You can extract the user's email domain and use it to trigger the  _11  // authentication flow with the correct identity provider.  _11  _11  const { data, error } = await supabase.auth.signInWithSSO({  _11  domain: 'company.com'  _11  })  _11  _11  if (data?.url) {  _11  // redirect the user to the identity provider's authentication flow  _11  window.location.href = data.url  _11  }      `\\\n\\\n* * *\\\n\\\nSign out a user\\\n---------------\\\n\\\nInside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\\\n\\\n*   In order to use the `signOut()` method, the user needs to be signed in first.\\\n*   By default, `signOut()` uses the global scope, which signs out all other sessions that the user is logged into as well.\\\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\\\n\\",
    "summary": "This documentation describes two Supabase authentication functions: `signInWithSSO()` and `signOut()`. `signInWithSSO()` allows users to sign in using their email domain, triggering the authentication flow with the correct identity provider. `signOut()` logs out the currently signed-in user, revoking the refresh token and deleting the JWT from the client-side, though the JWT remains valid until expiration. The `signOut()` method can sign out all sessions for the user by default."
  },
  {
    "chunk_id": "87826f99-8a15-4f9e-9164-ba098e7c0c81",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   optionsRequiredSignOut\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the `signOut()` method of the Supabase authentication API, which signs the user out and returns a Promise containing an error object if the operation fails. It requires no input parameters and simply performs the sign-out action."
  },
  {
    "chunk_id": "97a06e29-57d1-4cac-8e98-c202a0668af8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<object>\\\n\\\nDetails\\\n\\\nSign out\\\n\\\n`     _10  const { error } = await supabase.auth.signOut()      `\\\n\\\n* * *\\\n\\\nSend a password reset request\\\n-----------------------------\\\n\\\nSends a password reset request to an email address. This method supports the PKCE flow.\\\n\\\n*   The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\\\n*   The `resetPasswordForEmail()` only sends a password reset link to the user's email. To update the user's password, see [`updateUser()`](/docs/reference/javascript/auth-updateuser)\\\n    .\\\n*   A `SIGNED_IN` and `PASSWORD_RECOVERY` event will be emitted when the password recovery link is clicked. You can use [`onAuthStateChange()`](/docs/reference/javascript/auth-onauthstatechange)\\\n     to listen and invoke a callback function on these events.\\\n*   When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards)\\\n     to add additional redirect URLs to your project.\\\n*   After the user has been redirected successfully, prompt them for a new password and call `updateUser()`:\\\n\\\n`     _10  const \\{ data, error \\} = await supabase.auth.updateUser(\\{  _10  password: new_password  _10  \\})      `\\\n\\",
    "summary": "The documentation describes the `supabase.auth.signOut()` and `supabase.auth.resetPasswordForEmail()` functions. `signOut()` logs the user out, while `resetPasswordForEmail()` sends a password reset link to the user's email. This allows users to reset their password through a two-step process: clicking the reset link, then updating their password using the `supabase.auth.updateUser()` function. The reset password flow emits `SIGNED_IN` and `PASSWORD_RECOVERY` events that can be listened for using `supabase.auth.onAuthStateChange()`."
  },
  {
    "chunk_id": "d0a06bf5-f75d-472c-8456-ccd0b6f158a7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   emailRequiredstring\\\n    \\\n    The email address of the user.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function takes an email address and an optional options object as parameters. It is used to reset the password for the specified user account, returning a Promise that resolves to an object containing the result of the password reset operation."
  },
  {
    "chunk_id": "e01ee5b2-7542-45cb-988f-f191fdc9f1da",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nReset passwordReset password (React)\\\n\\\n`     _10  const { data, error } = await supabase.auth.resetPasswordForEmail(email, {  _10  redirectTo: 'https://example.com/update-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nVerify and log in through OTP\\\n-----------------------------\\\n\\\nLog in a user given a User supplied OTP or TokenHash received through mobile or email.\\\n\\\n*   The `verifyOtp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\\\n*   The verification type used should be determined based on the corresponding auth method called before `verifyOtp` to sign up / sign-in a user.\\\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\\\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\\\n     for more details.\\\n\\",
    "summary": "The documentation describes two main features: (1) a method to reset a user's password, which takes an email address and a redirect URL, and (2) a method to verify a user's one-time password (OTP) or token hash received through mobile or email, supporting various verification types like SMS, phone change, email, recovery, invite, and email change. The verified OTP or token hash can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "d36bf6af-15aa-4f95-8d2c-6f4d5709a037",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes a function that resets a password, returning a Promise with a Union type. The function takes a required parameter, which is not further specified in the given context."
  },
  {
    "chunk_id": "4f21a457-89ea-454e-846b-c8cac14eb121",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nVerify Signup One-Time Password (OTP)Verify Sms One-Time Password (OTP)Verify Email Auth (Token Hash)\\\n\\\n`     _10  const { data, error } = await supabase.auth.verifyOtp({ email, token, type: 'email'})      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a session\\\n------------------\\\n\\\nReturns the session, refreshing it if necessary.\\\n\\\n*   This method retrieves the current local session (i.e local storage).\\\n*   The session contains a signed JWT and unencoded session data.\\\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`getUser`](/docs/reference/javascript/auth-getuser)\\\n     instead.\\\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\\\n\\",
    "summary": "The documentation describes a function to verify email authentication using a one-time password (OTP) or token hash. It also explains how to retrieve a session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, and the `getUser` method should be used instead to retrieve verified user data."
  },
  {
    "chunk_id": "4598294f-439c-4a02-98be-f6cc6a2f9817",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the session data\\\n\\\n`     _10  const { data, error } = await supabase.auth.getSession()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a new session\\\n----------------------\\\n\\\nReturns a new session, regardless of expiry status. Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession(). If the current session's refresh token is invalid, an error will be thrown.\\\n\\\n*   This method will refresh and return a new session whether the current one is expired or not.\\\n\\",
    "summary": "The provided content describes the `refreshSession()` function in a software documentation. This function returns a new session, regardless of the expiry status of the current session. It takes an optional parameter of the current session, and if not provided, it will attempt to retrieve it using the `getSession()` function. If the current session's refresh token is invalid, the function will throw an error."
  },
  {
    "chunk_id": "529aa60c-ba36-4014-8642-405c2bd004c1",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   currentSessionOptionalobject\\\n    \\\n    The current session. If passed in, it must contain a refresh token.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This method refreshes the current session using a provided refresh token. It returns a Promise that resolves to an object containing the updated session data or an error. The `currentSession` parameter is optional and must contain a refresh token if provided."
  },
  {
    "chunk_id": "93c68c35-403a-4243-845c-4f9c92d28d5e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRefresh session using the current sessionRefresh session using a refresh token\\\n\\\n`     _10  const { data, error } = await supabase.auth.refreshSession()  _10  const { session, user } = data      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a user\\\n---------------\\\n\\\nGets the current user details if there is an existing session. This method performs a network request to the Supabase Auth server, so the returned value is authentic and can be used to base authorization rules on.\\\n\\\n*   This method fetches the user object from the database instead of local session.\\\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\\\n*   Should always be used when checking for user authorization on the server. On the client, you can instead use `getSession().session.user` for faster results. `getSession` is insecure on the server.\\\n\\",
    "summary": "This documentation describes the `refreshSession()` method in the Supabase auth library, which allows refreshing the current session using a refresh token or the current session. It also covers the `getUser()` method, which fetches the current user details from the Supabase Auth server, providing an authoritative and secure way to check user authorization, especially for server-side use cases."
  },
  {
    "chunk_id": "f4f74196-eb46-451c-9254-bc6ae5a80ec5",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   jwtOptionalstring\\\n    \\\n    Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\\\n    \\\n\\",
    "summary": "This method takes an optional access token JWT as a parameter. If no JWT is provided, the JWT from the current session is used. The method refreshes the current session using either the provided JWT or the one from the current session."
  },
  {
    "chunk_id": "72f2374c-e48e-4539-bd23-4d0fcabca935",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\\\n\\\n`     _10  const { data: { user } } = await supabase.auth.getUser()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a user\\\n-------------\\\n\\\nUpdates user data for a logged in user.\\\n\\\n*   In order to use the `updateUser()` method, the user needs to be signed in first.\\\n*   By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n\\",
    "summary": "The documentation describes how to get the logged-in user's information using the Supabase library, either with the current session or a custom JWT access token. It also explains the `updateUser()` method, which allows updating a user's data, noting that email updates require disabling the \"Secure email change\" setting to avoid sending a confirmation link to the current email."
  },
  {
    "chunk_id": "00dec6a9-751f-42e1-a2cf-37d243df9dd5",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   attributesRequiredUserAttributes\\\n    \\\n    Details\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation provides details on retrieving the logged-in user's information and updating their email or phone number. It specifies that the method requires user attributes and an options object as parameters, but does not provide a heading for this section."
  },
  {
    "chunk_id": "c79b2a4c-b218-4d98-9ebc-80b6579c524d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\\\n\\\n`     _10  const { data, error } = await supabase.auth.updateUser({  _10  email: 'new@email.com'  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nRetrieve identities linked to a user\\\n------------------------------------\\\n\\\nGets all the identities linked to a user.\\\n\\\n*   The user needs to be signed in to call `getUserIdentities()`.\\\n\\",
    "summary": "The documentation summarizes methods for updating user information, including email, phone number, password, and metadata. It also describes a method for retrieving all identities linked to a signed-in user. The key technical points are the specific update and retrieve user identity functions, along with the required parameters and return types."
  },
  {
    "chunk_id": "4f147773-f843-4e9c-b4b1-a5c1e00c8288",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nReturns a list of identities linked to the user\\\n\\\n`     _10  const { data, error } = await supabase.auth.getUserIdentities()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLink an identity to a user\\\n--------------------------\\\n\\\nLinks an oauth identity to an existing user. This method supports the PKCE flow.\\\n\\\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth)\\\n    .\\\n*   The user needs to be signed in to call `linkIdentity()`.\\\n*   If the candidate identity is already linked to the existing user or another user, `linkIdentity()` will fail.\\\n*   If `linkIdentity` is run in the browser, the user is automatically redirected to the returned URL. On the server, you should handle the redirect.\\\n\\",
    "summary": "The provided documentation describes a method to fetch the list of identities linked to a user, and a method to link an OAuth identity to an existing user account. The linking method supports the PKCE flow and requires the \"Enable Manual Linking\" option to be enabled in the project's authentication settings. The user must be signed in to call the `linkIdentity()` method, and the method will fail if the candidate identity is already linked to the existing user or another user."
  },
  {
    "chunk_id": "fc99cea4-0b42-44c4-beaa-5bb3a53de52d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithOAuthCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on the `credentialsRequiredSignInWithOAuthCredentials` parameter, which is used to link an identity to a user. It returns a Promise that resolves to a list of identities linked to the user. This functionality is crucial for implementing authentication and user management in a software application."
  },
  {
    "chunk_id": "90b54504-2f0b-4f92-952a-703148231325",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nLink an identity to a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.linkIdentity({  _10  provider: 'github'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUnlink an identity from a user\\\n------------------------------\\\n\\\nUnlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\\\n\\\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth)\\\n    .\\\n*   The user needs to be signed in to call `unlinkIdentity()`.\\\n*   The user must have at least 2 identities in order to unlink an identity.\\\n*   The identity to be unlinked must belong to the user.\\\n\\",
    "summary": "The documentation describes how to link and unlink an identity to a user in a Supabase application. Linking an identity allows users to sign in with that identity, while unlinking removes the identity and prevents the user from signing in with it. Unlinking an identity requires the user to have at least two identities and have the \"Enable Manual Linking\" option enabled in the project's authentication settings."
  },
  {
    "chunk_id": "b5d8c62e-b215-4207-97ee-0b74cca3d708",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   identityRequiredUserIdentity\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes two related operations: linking an identity to a user and unlinking an identity. The `identityRequiredUserIdentity` parameter is used to specify the identity to be linked or unlinked. These functions allow users to manage the identities associated with their account, which is a common requirement in authentication and authorization systems."
  },
  {
    "chunk_id": "857ff5d5-f388-4c0b-bc50-d598e864b0c7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUnlink an identity\\\n\\\n`     _10  // retrieve all identites linked to a user  _10  const identities = await supabase.auth.getUserIdentities()  _10  _10  // find the google identity  _10  const googleIdentity = identities.find(  _10  identity => identity.provider === 'google'  _10  )  _10  _10  // unlink the google identity  _10  const { error } = await supabase.auth.unlinkIdentity(googleIdentity)      `\\\n\\\n* * *\\\n\\\nSend a password reauthentication nonce\\\n--------------------------------------\\\n\\\nSends a reauthentication OTP to the user's email or phone number. Requires the user to be signed-in.\\\n\\\n*   This method is used together with `updateUser()` when a user's password needs to be updated.\\\n*   If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n*   A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\\\n*   This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\\\n\\",
    "summary": "The documentation describes how to unlink an identity from a user account and how to send a password reauthentication nonce. Unlinking an identity involves retrieving all linked identities, finding the one to be unlinked, and then calling the `unlinkIdentity` method. Sending a reauthentication nonce is used to update a user's password and requires the user to be signed in, with the nonce sent to the user's email or phone number if email is not confirmed."
  },
  {
    "chunk_id": "a8df29e5-35ab-42a0-b14a-5e363a33650f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSend reauthentication nonce\\\n\\\n`     _10  const { error } = await supabase.auth.reauthenticate()      `\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nResend an OTP\\\n-------------\\\n\\\nResends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\\\n\\\n*   Resends a signup confirmation, email change or phone change email to the user.\\\n*   Passwordless sign-ins can be resent by calling the `signInWithOtp()` method again.\\\n*   Password recovery emails can be resent by calling the `resetPasswordForEmail()` method again.\\\n*   This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\\\n*   You can specify a redirect url when you resend an email link using the `emailRedirectTo` option.\\\n\\",
    "summary": "The provided documentation describes a Supabase authentication method called `reauthenticate()`, which sends a reauthentication nonce to the client. Additionally, it explains the `resendOTP()` method, which can be used to resend signup confirmation, email change, or phone change emails, as well as password recovery emails. This functionality is useful for handling various user authentication and verification scenarios."
  },
  {
    "chunk_id": "91adbff5-4ec9-4709-be3c-593f91a6de2d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the `credentialsRequired` parameter, which is a union type that allows specifying the required credentials for various authentication scenarios, such as re-authentication, email signup confirmation, and phone signup confirmation. The function likely handles the process of resending these credentials or notifications to the user."
  },
  {
    "chunk_id": "342332fa-dbb6-485d-bbbb-15243ce9b9d9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\\\n\\\n`     _10  const { error } = await supabase.auth.resend({  _10  type: 'signup',  _10  email: 'email@example.com',  _10  options: {  _10  emailRedirectTo: 'https://example.com/welcome'  _10  }  _10  })      `\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nSet the session data\\\n--------------------\\\n\\\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\\\n\\\n*   This method sets the session using an `access_token` and `refresh_token`.\\\n*   If successful, a `SIGNED_IN` event is emitted.\\\n\\",
    "summary": "The content describes a method to resend email or phone signup confirmation, email change, or phone change OTP. The method sets the session data from the current session, handling session refresh and token validation. If successful, a 'SIGNED_IN' event is emitted."
  },
  {
    "chunk_id": "f09ce578-9956-4645-8844-59995a4052cb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   currentSessionRequiredobject\\\n    \\\n    The current session that minimally contains an access token and refresh token.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the `setSession` function in the Supabase authentication API, which allows setting the current session by passing an object containing an access token and refresh token. This function is used to manage the user's authentication state within the application."
  },
  {
    "chunk_id": "a69f384c-727e-463f-be3b-202375bce536",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSet the session\\\n\\\n`     _10  const { data, error } = await supabase.auth.setSession({  _10  access_token,  _10  refresh_token  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nExchange an auth code for a session\\\n-----------------------------------\\\n\\\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\\\n\\\n*   Used when `flowType` is set to `pkce` in client options.\\\n\\",
    "summary": "The summary describes two related methods in the Supabase authentication API:\n\n1. `setSession()`: Sets the current session by providing an access token and refresh token. This method is used to manage the user's session.\n\n2. Exchange an auth code for a session: Logs in an existing user by exchanging an Auth Code issued during the PKCE (Proof Key for Code Exchange) flow. This is used when the `flowType` is set to `pkce` in the client options."
  },
  {
    "chunk_id": "5e6712e8-c126-48c2-a008-cfd654599559",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   authCodeRequiredstring\\\n    \\\n\\",
    "summary": "The provided excerpt describes a method to exchange an auth code for a session in Supabase's authentication system. It takes an `authCodeRequired` parameter of type string and returns a Promise that resolves to either the session data or an error. This functionality allows users to authenticate with the Supabase service by exchanging a previously obtained auth code for a session."
  },
  {
    "chunk_id": "a6519a4e-bae1-475c-a28e-feea29ed7d2c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nExchange Auth Code\\\n\\\n`     _10  supabase.auth.exchangeCodeForSession('34e770dd-9ff9-416c-87fa-43b31d7ef225')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nStart auto-refresh session (non-browser)\\\n----------------------------------------\\\n\\\nStarts an auto-refresh process in the background. The session is checked every few seconds. Close to the time of expiration a process is started to refresh the session. If refreshing fails it will be retried for as long as necessary.\\\n\\\n*   Only useful in non-browser environments such as React Native or Electron.\\\n*   The Supabase Auth library automatically starts and stops proactively refreshing the session when a tab is focused or not.\\\n*   On non-browser platforms, such as mobile or desktop apps built with web technologies, the library is not able to effectively determine whether the application is _focused_ or not.\\\n*   To give this hint to the application, you should be calling this method when the app is in focus and calling `supabase.auth.stopAutoRefresh()` when it's out of focus.\\\n\\",
    "summary": "The documentation describes the `supabase.auth.exchangeCodeForSession()` method, which exchanges an authorization code for a session. It also covers the `supabase.auth.startAutoRefresh()` and `supabase.auth.stopAutoRefresh()` methods, which are used to proactively refresh the session in non-browser environments like React Native or Electron, where the library cannot automatically determine whether the application is focused or not."
  },
  {
    "chunk_id": "87b97014-b231-4d76-bbd1-b0664285820c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<void>\\\n\\\nStart and stop auto refresh in React Native\\\n\\\n`     _10  import { AppState } from 'react-native'  _10  _10  // make sure you register this only once!  _10  AppState.addEventListener('change', (state) => {  _10  if (state === 'active') {  _10  supabase.auth.startAutoRefresh()  _10  } else {  _10  supabase.auth.stopAutoRefresh()  _10  }  _10  })      `\\\n\\\n* * *\\\n\\\nStop auto-refresh session (non-browser)\\\n---------------------------------------\\\n\\\nStops an active auto refresh process running in the background (if any).\\\n\\\n*   Only useful in non-browser environments such as React Native or Electron.\\\n*   The Supabase Auth library automatically starts and stops proactively refreshing the session when a tab is focused or not.\\\n*   On non-browser platforms, such as mobile or desktop apps built with web technologies, the library is not able to effectively determine whether the application is _focused_ or not.\\\n*   When your application goes in the background or out of focus, call this method to stop the proactive refreshing of the session.\\\n\\",
    "summary": "The provided excerpt describes a method to start and stop auto-refresh of a Supabase authentication session in a React Native application. It explains that the auto-refresh mechanism is necessary to maintain a valid session, and provides a way to manually stop the auto-refresh process when the application goes in the background or out of focus, which is important for non-browser environments like mobile or desktop apps."
  },
  {
    "chunk_id": "7344475f-b359-4c87-9934-e9db3f65465e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<void>\\\n\\\nStart and stop auto refresh in React Native\\\n\\\n`     _10  import { AppState } from 'react-native'  _10  _10  // make sure you register this only once!  _10  AppState.addEventListener('change', (state) => {  _10  if (state === 'active') {  _10  supabase.auth.startAutoRefresh()  _10  } else {  _10  supabase.auth.stopAutoRefresh()  _10  }  _10  })      `\\\n\\\n* * *\\\n\\\nAuth MFA\\\n--------\\\n\\\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\\\n\\\nCurrently, there is support for time-based one-time password (TOTP) and phone verification code as the 2nd factor. Recovery codes are not supported but users can enroll multiple factors, with an upper limit of 10.\\\n\\\nHaving a 2nd factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup factor.\\\n\\\n* * *\\\n\\\nEnroll a factor\\\n---------------\\\n\\\nStarts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new `unverified` factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it.\\\n\\\n*   Use `totp` or `phone` as the `factorType` and use the returned `id` to create a challenge.\\\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/javascript/auth-mfa-challenge)\\\n    .\\\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n    .\\\n*   To create and verify a TOTP challenge in a single step, see [`mfa.challengeAndVerify()`](/docs/reference/javascript/auth-mfa-challengeandverify)\\\n    .\\\n*   To generate a QR code for the `totp` secret in Next.js, you can do the following:\\\n\\\n`     _10  <Image src=\\{data.totp.qr_code\\} alt=\\{data.totp.uri\\} layout=\"fill\"></Image>      `\\\n\\\n*   The `challenge` and `verify` steps are separated when using Phone factors as the user will need time to receive and input the code obtained from the SMS in challenge.\\\n\\",
    "summary": "The provided content describes methods for implementing auto-refresh functionality in React Native apps, as well as the Supabase Auth MFA (Multi-Factor Authentication) API. The auto-refresh feature allows starting and stopping automatic token refreshing based on the app's active state. The MFA section covers enrolling new factors, creating and verifying challenges for TOTP (time-based one-time password) and phone-based authentication, and generating QR codes for TOTP setup. The MFA functionality helps secure user accounts by requiring a second authentication factor, improving security and reducing the burden of managing recovery codes."
  },
  {
    "chunk_id": "085342fe-b30f-40f2-b9fb-d60c6e0228b7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAEnrollParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This method enrolls a time-based, one-time password (TOTP) factor or a phone factor. The required parameters are specified in the `paramsRequiredMFAEnrollParams` object, which contains details about the enrollment process."
  },
  {
    "chunk_id": "b200b684-a9af-433c-a58b-dfc7ca198730",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nEnroll a time-based, one-time password (TOTP) factorEnroll a Phone Factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.enroll({  _10  factorType: 'totp',  _10  friendlyName: 'your_friendly_name'  _10  })  _10  _10  // Use the id to create a challenge.  _10  // The challenge can be verified by entering the code generated from the authenticator app.  _10  // The code will be generated upon scanning the qr_code or entering the secret into the authenticator app.  _10  const { id, type, totp: { qr_code, secret, uri }, friendly_name } = data  _10  const challenge = await supabase.auth.mfa.challenge({ factorId: id });      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a challenge\\\n------------------\\\n\\\nPrepares a challenge used to verify that a user has access to a MFA factor.\\\n\\\n*   An [enrolled factor](/docs/reference/javascript/auth-mfa-enroll)\\\n     is required before creating a challenge.\\\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n    .\\\n*   A phone factor sends a code to the user upon challenge. The channel defaults to `sms` unless otherwise specified.\\\n\\",
    "summary": "The content describes the Supabase authentication API for enrolling and creating a challenge for a time-based, one-time password (TOTP) or phone factor. It outlines the process of enrolling a TOTP factor, obtaining the necessary details (QR code, secret, URI), and then creating a challenge that can be verified by entering the code generated from the authenticator app or sent to the user's phone."
  },
  {
    "chunk_id": "302c321e-d2f7-4b64-934a-231a2593fabd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAChallengeParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation outlines how to create a challenge for a multi-factor authentication (MFA) factor, including a phone factor. The `paramsRequiredMFAChallengeParams` parameter is required to create this challenge, which likely contains details about the specific factor and the user's authentication credentials."
  },
  {
    "chunk_id": "235dcff2-9a2c-45b8-a94b-53812c194cc3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate a challenge for a factorCreate a challenge for a phone factorCreate a challenge for a phone factor (WhatsApp)\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.challenge({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nVerify a challenge\\\n------------------\\\n\\\nVerifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app.\\\n\\\n*   To verify a challenge, please [create a challenge](/docs/reference/javascript/auth-mfa-challenge)\\\n     first.\\\n\\",
    "summary": "This documentation describes two related API methods: `challenge` and `verify`. The `challenge` method creates a new multi-factor authentication (MFA) challenge, which can be for a phone factor (e.g., WhatsApp) or other types of factors. The `verify` method allows verifying the challenge by providing a code from the user's authenticator app. These APIs are used to implement secure user authentication with MFA."
  },
  {
    "chunk_id": "6f92eceb-0285-4dfa-b75d-e60ba639bc65",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAVerifyParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a function that verifies a challenge for a factor in a multi-factor authentication (MFA) system. The function takes in required MFA verify parameters and returns a Promise that resolves to an object with `data` and `error` properties, allowing the caller to handle the success or failure of the verification process."
  },
  {
    "chunk_id": "211ca2a1-575f-45ea-8488-84e2cd3ff371",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nVerify a challenge for a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.verify({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  challengeId: '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  code: '123456'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate and verify a challenge\\\n-----------------------------\\\n\\\nHelper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app.\\\n\\\n*   Intended for use with only TOTP factors.\\\n*   An [enrolled factor](/docs/reference/javascript/auth-mfa-enroll)\\\n     is required before invoking `challengeAndVerify()`.\\\n*   Executes [`mfa.challenge()`](/docs/reference/javascript/auth-mfa-challenge)\\\n     and [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n     in a single step.\\\n\\",
    "summary": "The summary describes a Supabase function called `mfa.challengeAndVerify()` that allows users to create and immediately verify a multi-factor authentication (MFA) challenge. This function is intended for use with TOTP factors, and it executes the `mfa.challenge()` and `mfa.verify()` functions in a single step, providing a convenient way to handle MFA challenges and verifications."
  },
  {
    "chunk_id": "a3853a71-b2ab-415f-bfef-f63b376a8134",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAChallengeAndVerifyParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes a function that creates and verifies a multi-factor authentication (MFA) challenge. The function takes in `paramsRequiredMFAChallengeAndVerifyParams` as its parameters and returns a Promise that resolves to a Union type. This functionality is likely used to implement secure authentication flows in the application."
  },
  {
    "chunk_id": "87af814d-9a98-4d99-b0bf-6ff2e99be561",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate and verify a challenge for a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.challengeAndVerify({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  code: '123456'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUnenroll a factor\\\n-----------------\\\n\\\nUnenroll removes a MFA factor. A user has to have an `aal2` authenticator level in order to unenroll a `verified` factor.\\\n\\",
    "summary": "This documentation describes two related functions for Multi-Factor Authentication (MFA) in the Supabase platform:\n\n1. `challengeAndVerify`: Creates and verifies a challenge for an MFA factor, requiring a factor ID and a one-time code.\n2. `unenroll`: Removes an MFA factor, but requires the user to have an `aal2` (Authenticator Assurance Level 2) to unenroll a `verified` factor."
  },
  {
    "chunk_id": "9a570559-91a3-4a62-ba1a-8972579ed2f4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAUnenrollParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This function unenrolls a multi-factor authentication (MFA) factor for the current user. It takes in required parameters for MFA unenrollment, and returns a Promise that resolves with the response data or an error if the operation fails."
  },
  {
    "chunk_id": "4e3f617f-8de4-4d50-8d2e-4f3c36ca500d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUnenroll a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.unenroll({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nGet Authenticator Assurance Level\\\n---------------------------------\\\n\\\nReturns the Authenticator Assurance Level (AAL) for the active session.\\\n\\\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\\\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP) or Phone factor.\\\n*   If the user has a verified factor, the `nextLevel` field will return `aal2`, else, it will return `aal1`.\\\n\\",
    "summary": "This documentation describes how to unenroll a multi-factor authentication (MFA) factor and how to retrieve the Authenticator Assurance Level (AAL) for the active session. The unenroll process is performed using the `supabase.auth.mfa.unenroll()` function, which takes a `factorId` parameter. The AAL represents the strength of the authentication mechanism, with `aal1` indicating a single factor (e.g., email and password) and `aal2` indicating a second factor (e.g., TOTP or phone factor). The AAL information is returned as a Promise with the `nextLevel` field indicating the minimum AAL required for the session."
  },
  {
    "chunk_id": "39ff1cb3-7f3f-41b2-956d-324c8d161ac9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the AAL details of a session\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()  _10  const { currentLevel, nextLevel, currentAuthenticationMethods } = data      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nAuth Admin\\\n----------\\\n\\\n*   Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\\\n*   These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\\\n\\\nCreate server-side auth client\\\n\\\n`     _11  import { createClient } from '@supabase/supabase-js'  _11  _11  const supabase = createClient(supabase_url, service_role_key, {  _11  auth: {  _11  autoRefreshToken: false,  _11  persistSession: false  _11  }  _11  })  _11  _11  // Access auth admin api  _11  const adminAuthClient = supabase.auth.admin      `\\\n\\\n* * *\\\n\\\nRetrieve a user\\\n---------------\\\n\\\nGet user by id.\\\n\\\n*   Fetches the user object from the database based on the user's id.\\\n*   The `getUserById()` method requires the user's id which maps to the `auth.users.id` column.\\\n\\",
    "summary": "The documentation covers the Supabase Authentication API, specifically the methods for unenrolling a multi-factor authentication (MFA) factor and retrieving the Authentication Assurance Level (AAL) for a session. It also highlights the importance of using the `service_role` key for admin-level authentication methods, which should be handled on a trusted server. Additionally, it provides guidance on retrieving user information by user ID."
  },
  {
    "chunk_id": "b11f5ced-de23-4dc7-b402-8b971cf84709",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   uidRequiredstring\\\n    \\\n    The user's unique identifier\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n\\",
    "summary": "This function retrieves the AAL (Authentication Assurance Level) details of a session, given the user's unique identifier (uid). It should only be called on a server, as it requires the service_role key, which should never be exposed in the browser. The function returns a Promise that resolves to the session data or an error."
  },
  {
    "chunk_id": "f44df48c-80b2-4f31-a8f6-b23fdc37ca08",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nFetch the user object using the access\\_token jwt\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.getUserById(1)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all users\\\n--------------\\\n\\\nGet a list of users.\\\n\\\n*   Defaults to return 50 users per page.\\\n\\",
    "summary": "This function fetches a user object by their unique identifier (UID) using the provided access_token JWT. It also provides a way to list all users, with optional pagination parameters to control the number of results returned per page."
  },
  {
    "chunk_id": "4634bd1e-c08b-4347-9ceb-1342ca18bec2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsOptionalPageParams\\\n    \\\n    An object which supports `page` and `perPage` as numbers, to alter the paginated results.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters used to fetch a paginated list of users. The `paramsOptional` parameter is an object that supports `page` and `perPage` as numbers, allowing the user to control the pagination of the fetched user data."
  },
  {
    "chunk_id": "e54e5623-6132-4773-ace7-071e398adbc0",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet a page of usersPaginated list of users\\\n\\\n`     _10  const { data: { users }, error } = await supabase.auth.admin.listUsers()      `\\\n\\\n* * *\\\n\\\nCreate a user\\\n-------------\\\n\\\nCreates a new user. This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n\\\n*   To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\\\n*   `createUser()` will not send a confirmation email to the user. You can use [`inviteUserByEmail()`](/docs/reference/javascript/auth-admin-inviteuserbyemail)\\\n     if you want to send them an email invite instead.\\\n*   If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\\\n\\",
    "summary": "This documentation describes the Supabase Auth API for managing users. It provides methods to list users, create new users, and confirm their email or phone number. The `listUsers()` function retrieves a paginated list of users, while `createUser()` allows creating a new user on the server-side, with options to confirm the user's email or phone number."
  },
  {
    "chunk_id": "ab223740-352c-4739-967c-e0bc4c382f0b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   attributesRequiredAdminUserAttributes\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details about the required admin user attributes parameter, which is used to get a list of users with custom user metadata, auto-confirm the user's email and phone, and perform other related operations. The parameter is a required input for the operation, and the response is a Promise that returns a Union type."
  },
  {
    "chunk_id": "e0a6221d-afac-4684-a086-e058d89f81ae",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.createUser({  _10  email: 'user@email.com',  _10  password: 'password',  _10  user_metadata: { name: 'Yoda' }  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a user\\\n-------------\\\n\\\nDelete a user. Requires a `service_role` key.\\\n\\\n*   The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.\\\n\\",
    "summary": "The summary provides details on the `supabase.auth.admin.createUser()` method, which allows creating a new user with custom user metadata, auto-confirming their email and phone number. It also covers the `supabase.auth.admin.deleteUser()` method, which requires the user's ID and a `service_role` key to delete a user."
  },
  {
    "chunk_id": "330daec7-cf29-4929-a6f1-789ff9596abe",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The user id you want to remove.\\\n    \\\n*   shouldSoftDeleteRequiredboolean\\\n    \\\n    If true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n\\",
    "summary": "The provided documentation describes the `supabase.auth.admin.deleteUser()` function, which removes a user from the Supabase authentication schema. The function takes two parameters: `id` (the user ID to be removed) and `shouldSoftDelete` (a boolean indicating whether to soft-delete the user, preserving their data while disabling their account). This function should only be called on a server, as it uses the `service_role` key and should not be exposed in the browser."
  },
  {
    "chunk_id": "49e2b72f-042a-4d7b-84dd-386d74d5a5a0",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRemoves a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.deleteUser(  _10  '715ed5db-f090-4b8c-a067-640ecee36aa0'  _10  )      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSend an email invite link\\\n-------------------------\\\n\\\nSends an invite link to an email address.\\\n\\\n*   Sends an invite link to the user's email address.\\\n*   The `inviteUserByEmail()` method is typically used by administrators to invite users to join the application.\\\n*   Note that PKCE is not supported when using `inviteUserByEmail`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\\\n\\",
    "summary": "The provided documentation describes a method to remove a user from the system, specified by their ID, and an optional parameter to soft-delete the user. Additionally, it details a method to send an email invite link to a user, which is typically used by administrators to invite users to join the application, but does not support PKCE (Proof Key for Code Exchange) for security reasons."
  },
  {
    "chunk_id": "06671f8c-2fdb-4b32-b54e-49ea383f604d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   emailRequiredstring\\\n    \\\n    The email address of the user.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Additional options to be included when inviting.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function invites a user by taking an email address and an optional options object as parameters. The options object can be used to include additional details when inviting the user. This functionality is part of the Supabase authentication admin API, which allows administrative management of user accounts."
  },
  {
    "chunk_id": "51fbe26a-7760-4430-8422-a2bd2b866ce6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nInvite a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.inviteUserByEmail('email@example.com')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nGenerate an email link\\\n----------------------\\\n\\\nGenerates email links and OTPs to be sent via a custom email provider.\\\n\\\n*   The following types can be passed into `generateLink()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\\\n*   `generateLink()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n*   `generateLink()` handles the creation of the user for `signup`, `invite` and `magiclink`.\\\n\\",
    "summary": "The provided content describes a function to invite a user by email and generate email links for various authentication workflows, such as signup, magic link, and password recovery. The function handles the creation of the user for certain workflows, and it can generate links for email change scenarios if the \"Secure email change\" feature is enabled in the project's settings."
  },
  {
    "chunk_id": "75563861-29c2-4340-abf4-62014a01bc35",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredGenerateLinkParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content provides details on the `GenerateLinkParams` object, which is a required parameter for generating various types of links, such as signup links, invite links, magic links, and recovery links. These links are used to facilitate user authentication and account management operations within the application."
  },
  {
    "chunk_id": "eb3a7bbb-2d7e-470b-8f47-85fa0135351f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.generateLink({  _10  type: 'signup',  _10  email: 'email@example.com',  _10  password: 'secret'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a user\\\n-------------\\\n\\\nUpdates the user data.\\\n\\",
    "summary": "This section describes the `generateLink` function in the Supabase Auth Admin API, which can be used to generate various types of user authentication links, such as signup, invite, magic, and recovery links. Additionally, it covers the `updateUser` function, which allows updating a user's data."
  },
  {
    "chunk_id": "87786309-c215-463e-8981-d50143e792fd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   uidRequiredstring\\\n    \\\n*   attributesRequiredAdminUserAttributes\\\n    \\\n    The data you want to update.\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This function allows administrators to update various user attributes, including email, password, and metadata, through a server-side API call. The function takes a required `uid` parameter to identify the user, as well as an `attributes` object containing the data to be updated. This functionality should only be used on the server-side, as exposing the `service_role` key in the client would be a security risk."
  },
  {
    "chunk_id": "70e8c30a-9666-4fcb-abce-53e09480e44a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\\\n\\\n`     _10  const { data: user, error } = await supabase.auth.admin.updateUserById(  _10  '11111111-1111-1111-1111-111111111111',  _10  { email: 'new@email.com' }  _10  )      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a factor for a user\\\n--------------------------\\\n\\\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\\\n\\",
    "summary": "The function updates a user's email, password, metadata, and app_metadata, as well as confirms their email address and phone number. It also provides a function to delete a factor for a user, which will log the user out of all active sessions if the deleted factor was verified."
  },
  {
    "chunk_id": "cdf3b445-362f-4d21-8d61-614305df954f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredAuthMFAAdminDeleteFactorParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content summarizes the parameters required for deleting a multi-factor authentication (MFA) factor for a user in an administrative context. It specifies that the `paramsRequiredAuthMFAAdminDeleteFactorParams` object is required, which likely contains details about the user and the MFA factor to be deleted."
  },
  {
    "chunk_id": "6691f25f-2c93-4cb5-bae9-288b8472c48f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete a factor for a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.mfa.deleteFactor({  _10  id: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  userId: 'a89baba7-b1b7-440f-b4bb-91026967f66b',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nInvokes a Supabase Edge Function.\\\n---------------------------------\\\n\\\nInvokes a function\\\n\\\nInvoke a Supabase Edge Function.\\\n\\\n*   Requires an Authorization header.\\\n*   Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\\\n     spec.\\\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialize it and attach the `Content-Type` header as `application/json`. You can override this behavior by passing in a `Content-Type` header of your own.\\\n*   Responses are automatically parsed as `json`, `blob` and `form-data` depending on the `Content-Type` header sent by your function. Responses are parsed as `text` by default.\\\n\\",
    "summary": "The provided content describes the functionality of deleting a multi-factor authentication (MFA) factor for a user. It includes a code example and details on invoking a Supabase Edge Function, which requires an Authorization header and supports various payload and response formats. The summary also highlights that the function invocation follows the Fetch API specification."
  },
  {
    "chunk_id": "66d0aac2-cc99-4c5c-bf13-767b9c5074c4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   functionNameRequiredstring\\\n    \\\n    The name of the Function to invoke.\\\n    \\\n*   optionsRequiredFunctionInvokeOptions\\\n    \\\n    Options for invoking the Function.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters for invoking a function in a software system. The required parameters are the function name (a string) and the FunctionInvokeOptions object, which contains the options for the function invocation. This information is crucial for developers to understand how to properly call and execute functions in the system."
  },
  {
    "chunk_id": "85c9ce0b-ee02-4942-b270-a1f143b60190",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nBasic invocationError handlingPassing custom headersCalling with DELETE HTTP verbInvoking a Function in the UsEast1 regionCalling with GET HTTP verb\\\n\\\n`     _10  const { data, error } = await supabase.functions.invoke('hello', {  _10  body: { foo: 'bar' }  _10  })      `\\\n\\\n* * *\\\n\\\nSubscribe to channel\\\n--------------------\\\n\\\nCreates an event handler that listens to changes.\\\n\\\n*   By default, Broadcast and Presence are enabled for all projects.\\\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\\\n    .\\\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\\\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\\\n\\",
    "summary": "The documentation provides details on invoking Supabase functions, including parameters, error handling, and custom headers. It also covers subscribing to database changes using the Supabase Realtime API, including enabling Broadcast and Presence, managing replication, and handling row-level security with replica identity. Key points include the ability to receive \"previous\" data for updates and deletes, and the limitation that row-level security is not applied to delete statements."
  },
  {
    "chunk_id": "4479d16c-a9b4-47de-89c1-1b33affa6d4e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   typeRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n*   filterRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n*   callbackRequiredfunction\\\n    \\\n    Details\\\n    \\\n\\\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\\\n\\\n`     _13  const channel = supabase.channel(\"room1\")  _13  _13  channel.on(\"broadcast\", { event: \"cursor-pos\" }, (payload) => {  _13  console.log(\"Cursor position received!\", payload);  _13  }).subscribe((status) => {  _13  if (status === \"SUBSCRIBED\") {  _13  channel.send({  _13  type: \"broadcast\",  _13  event: \"cursor-pos\",  _13  payload: { x: Math.random(), y: Math.random() },  _13  });  _13  }  _13  });      `\\\n\\\n* * *\\\n\\\nUnsubscribe from a channel\\\n--------------------------\\\n\\\nUnsubscribes and removes Realtime channel from Realtime client.\\\n\\\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\\\n\\",
    "summary": "The documentation provides detailed information on the \"channel\" parameter in the Supabase Realtime API, including its required properties (type, filter, and callback), and various use cases such as listening to broadcast messages, presence sync, and database changes. It also covers unsubscribing from a Realtime channel, emphasizing the importance of maintaining performance and cleaning up unused channels."
  },
  {
    "chunk_id": "3f49930b-ad30-4ed3-930b-3b5062aa22fa",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   channelRequired@supabase/realtime-js.RealtimeChannel\\\n    \\\n    The name of the Realtime channel.\\\n    \\\n\\",
    "summary": "The provided section describes the parameters required for the `removeChannel` function in the Supabase Realtime API. Specifically, it requires a `RealtimeChannel` object as the `channel` parameter, which represents the name of the Realtime channel to be removed. This function is used to remove a previously established Realtime channel, which is a crucial operation in managing real-time communication in a web application."
  },
  {
    "chunk_id": "ce54a0f0-f6f0-404f-9357-4f69c51e077d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRemoves a channel\\\n\\\n`     _10  supabase.removeChannel(myChannel)      `\\\n\\\n* * *\\\n\\\nUnsubscribe from all channels\\\n-----------------------------\\\n\\\nUnsubscribes and removes all Realtime channels from Realtime client.\\\n\\\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\\\n\\",
    "summary": "The provided excerpt describes two functions related to removing Realtime channels: `supabase.removeChannel(myChannel)` which removes a specific channel, and `supabase.removeAllChannels()` which unsubscribes and removes all Realtime channels from the Realtime client. Removing unused channels is recommended to maintain the performance of the Realtime service and the connected database, as excessive subscriptions can lead to degradation."
  },
  {
    "chunk_id": "1ed2256d-e388-4120-a32c-f9bfd34ebbfe",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Array<Union: expand to see options>>\\\n\\\nDetails\\\n\\\nRemove all channels\\\n\\\n`     _10  supabase.removeAllChannels()      `\\\n\\\n* * *\\\n\\\nRetrieve all channels\\\n---------------------\\\n\\\nReturns all Realtime channels.\\\n\\",
    "summary": "The provided code snippets demonstrate two related Supabase Realtime API methods: `removeAllChannels()` which removes all active channels, and `getChannels()` which returns an array of all current Realtime channels. These functions allow developers to manage the lifecycle of Realtime channels in their applications, which is crucial for maintaining scalable and efficient real-time communication systems."
  },
  {
    "chunk_id": "1a2bc6f3-e4c7-4528-b96f-e5f51371e784",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nArray<@supabase/realtime-js.RealtimeChannel>\\\n\\\nGet all channels\\\n\\\n`     _10  const channels = supabase.getChannels()      `\\\n\\\n* * *\\\n\\\nBroadcast a message\\\n-------------------\\\n\\\nSends a message into the channel.\\\n\\\nBroadcast a message to all connected clients to a channel.\\\n\\\n*   When using REST you don't need to subscribe to the channel\\\n*   REST calls are only available from 2.37.0 onwards\\\n\\",
    "summary": "The provided content describes two Supabase Realtime API methods: `supabase.getChannels()` which returns an array of all active channels, and `supabase.broadcast()` which allows sending messages to all connected clients in a channel. Key points include that REST calls for broadcasting are available from version 2.37.0 onwards, and no subscription is required when using REST for broadcasting."
  },
  {
    "chunk_id": "39123ec4-022c-4190-bd2f-4799a39fbdbd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   argsRequiredobject\\\n    \\\n    Arguments to send to channel\\\n    \\\n    Details\\\n    \\\n*   optsRequired{ \\[key: string\\]: any }\\\n    \\\n    Options to be used during the send process\\\n    \\\n\\",
    "summary": "The provided content describes the parameters and options available when sending a message via a Supabase Realtime channel. The `args` parameter allows passing arguments to the channel, while the `opts` parameter provides options to customize the send process. These features enable developers to control the behavior of their real-time communication channels within the Supabase ecosystem."
  },
  {
    "chunk_id": "7684c5c3-c6c5-47ff-be6e-9007d1b21ccb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSend a message via websocketSend a message via REST\\\n\\\n`     _11  supabase  _11  .channel('room1')  _11  .subscribe((status) => {  _11  if (status === 'SUBSCRIBED') {  _11  channel.send({  _11  type: 'broadcast',  _11  event: 'cursor-pos',  _11  payload: { x: Math.random(), y: Math.random() },  _11  })  _11  }  _11  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a bucket\\\n---------------\\\n\\\nCreates a new Storage bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `insert`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two parts: 1) a code example that demonstrates sending a message via a WebSocket channel, and 2) the process of creating a new Storage bucket. The WebSocket example shows how to subscribe to a channel and send a message with cursor position data. The bucket creation details the required RLS policy permissions and refers to the Storage guide for access control information."
  },
  {
    "chunk_id": "731fb7b1-e365-4e4e-b5b0-9713c0218d24",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    A unique identifier for the bucket you are creating.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides the details for creating a new bucket in the Supabase storage service. It includes the required parameters, with the `id` parameter being a unique identifier for the new bucket, and the `options` parameter providing additional configuration details. The function returns a Promise with the result of the bucket creation operation."
  },
  {
    "chunk_id": "584037de-7f09-4793-b25f-6915fc72575c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .createBucket('avatars', {  _10  public: false,  _10  allowedMimeTypes: ['image/png'],  _10  fileSizeLimit: 1024  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a bucket\\\n-----------------\\\n\\\nRetrieves the details of an existing Storage bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two operations related to Supabase storage buckets: creating a new bucket and retrieving the details of an existing bucket. The create bucket operation allows specifying details like the bucket ID, visibility, allowed file types, and size limit. The retrieve bucket operation requires specific permissions on the `buckets` and `objects` tables, as outlined in the Storage security guide."
  },
  {
    "chunk_id": "d3693dc0-2c56-4e0d-a0ab-111cc0416d97",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to retrieve.\\\n    \\\n\\",
    "summary": "This function retrieves a specific bucket from the Supabase storage service using the provided unique identifier. It returns a Promise that resolves to an object containing the retrieved data or any encountered errors."
  },
  {
    "chunk_id": "f3200069-960c-43ed-9b5d-87ed5f13ad87",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .getBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all buckets\\\n----------------\\\n\\\nRetrieves the details of all Storage buckets within an existing project.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes the `getBucket()` and `list buckets` functions of the Supabase Storage API. The `getBucket()` function retrieves the details of a specific bucket, while the `list buckets` function retrieves the details of all Storage buckets within the project. The required permissions for these operations are specified, and the user is referred to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "7faf566b-4550-40b5-90e4-c11eff654e02",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nList buckets\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .listBuckets()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a bucket\\\n---------------\\\n\\\nUpdates a Storage bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select` and `update`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation provides methods to list and update storage buckets in Supabase. The `listBuckets()` method returns a Promise with the available buckets, while the update functionality requires specific permissions on the `buckets` and `objects` tables. Access control and security considerations are important when updating a bucket."
  },
  {
    "chunk_id": "07799efd-7dd2-4b10-be2c-9b4b1f5faeb4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    A unique identifier for the bucket you are updating.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content summarizes the details for updating a bucket in a Supabase storage operation. The key technical points include: 1) The operation takes an `id` parameter, which is a required string that uniquely identifies the bucket to be updated, and 2) An `options` parameter, which is a required object that contains the details for the bucket update."
  },
  {
    "chunk_id": "45dbde71-afab-438d-b37b-7ccca21e5c3e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .updateBucket('avatars', {  _10  public: false,  _10  allowedMimeTypes: ['image/png'],  _10  fileSizeLimit: 1024  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a bucket\\\n---------------\\\n\\\nDeletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select` and `delete`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two storage operations: updating a bucket and deleting a bucket. Updating a bucket allows setting properties such as public access, allowed MIME types, and file size limits. Deleting a bucket requires the user to have appropriate permissions on the `buckets` and `objects` tables, and the bucket must be empty before it can be deleted."
  },
  {
    "chunk_id": "634209f4-04df-492c-91a8-79bc4132ade8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to delete.\\\n    \\\n\\",
    "summary": "This section describes the API to delete a Supabase storage bucket. It takes a required `id` parameter, which is the unique identifier of the bucket to be deleted. The return type is a Promise that resolves to the API response, which can be used to handle the success or error of the bucket deletion operation."
  },
  {
    "chunk_id": "23d7e863-21b7-4339-9932-e30b141ab6a4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .deleteBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nEmpty a bucket\\\n--------------\\\n\\\nRemoves all objects inside a single bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: `select` and `delete`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two related operations on Supabase storage buckets: deleting a bucket and emptying a bucket. The delete bucket operation requires the `id` of the bucket to be deleted, while the empty bucket operation removes all objects within a specified bucket. Both operations require specific permissions on the `buckets` and `objects` tables, as outlined in the storage security guide."
  },
  {
    "chunk_id": "b60e491c-2b32-418a-aea7-a7bb09f4e7cf",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to empty.\\\n    \\\n\\",
    "summary": "This method allows you to empty the contents of a specified Supabase storage bucket. It takes a required `id` parameter, which is the unique identifier of the bucket you want to empty. The method returns a Promise that resolves with the operation's result."
  },
  {
    "chunk_id": "3b61e7e5-112a-41bb-973a-7532b3f406d6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nEmpty bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .emptyBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpload a file\\\n-------------\\\n\\\nUploads a file to an existing bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: only `insert` when you are uploading new files and `select`, `insert` and `update` when you are upserting files\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n*   For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Upload file using `ArrayBuffer` from base64 file data instead, see example below.\\\n\\",
    "summary": "The documentation describes two key storage operations: emptying a bucket and uploading a file. Emptying a bucket can be done using the `supabase.storage.emptyBucket()` function. Uploading a file requires specific permissions on the `buckets` and `objects` tables, and for React Native, it's recommended to use `ArrayBuffer` from base64 file data instead of `Blob`, `File`, or `FormData`."
  },
  {
    "chunk_id": "4d8a9ebb-d166-4e6b-b496-09b1c18e6294",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\\\n    \\\n*   fileBodyRequiredFileBody\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided documentation outlines the parameters for uploading a file to a Supabase storage bucket. The `path` parameter specifies the file path, including the file name, where the file should be stored. The `fileBody` parameter contains the actual file data to be uploaded. Optional `fileOptions` can also be provided to customize the upload process."
  },
  {
    "chunk_id": "553aa8d1-261b-4454-8566-587b23f6032e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpload fileUpload file using \\`ArrayBuffer\\` from base64 file data\\\n\\\n`     _10  const avatarFile = event.target.files[0]  _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .upload('public/avatar1.png', avatarFile, {  _10  cacheControl: '3600',  _10  upsert: false  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDownload a file\\\n---------------\\\n\\\nDownloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The document provides instructions for uploading and downloading files using the Supabase storage API. It describes the required parameters for the `upload` and `download` methods, including path and file name. The download method requires read permissions on the `objects` table, and the documentation references the Storage guide for details on access control."
  },
  {
    "chunk_id": "0bae4de9-49da-4313-9d11-fcd278dda042",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The full path and file name of the file to be downloaded. For example `folder/image.png`.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function downloads a file from the specified path, with optional transformation parameters. It returns a Promise that resolves with the downloaded file data or an error. The path parameter specifies the full path and filename of the file to be downloaded, and the optional options parameter can be used to configure transformations on the downloaded file."
  },
  {
    "chunk_id": "7381b865-fbea-4b2e-874e-84a075c952c2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDownload fileDownload file with transformations\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .download('folder/avatar1.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all files in a bucket\\\n--------------------------\\\n\\\nLists all the files within a bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided documentation describes the `download` function of the Supabase Storage API, which allows downloading a file with optional transformations. It also covers the `list` function, which lists all files within a storage bucket. The key technical points are the required parameters for the `download` function, the specific permissions needed for the `list` function, and how access control works in the Supabase Storage system."
  },
  {
    "chunk_id": "2da2d073-ba68-4cdd-9479-a556b2f87112",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathOptionalstring\\\n    \\\n    The folder path.\\\n    \\\n*   optionsOptionalSearchOptions\\\n    \\\n    Details\\\n    \\\n*   parametersOptionalFetchParameters\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content describes a function that downloads a file with transformations and lists files in a bucket. The function takes two optional parameters: a `path` string representing the folder path, and `options` and `parameters` objects containing search and fetch options. This function returns a Promise that resolves to the requested data or an error."
  },
  {
    "chunk_id": "7b230291-3d17-4371-a7e2-6cbff4fd0f6c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nList files in a bucketSearch files in a bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .list('folder', {  _10  limit: 100,  _10  offset: 0,  _10  sortBy: { column: 'name', order: 'asc' },  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nReplace an existing file\\\n------------------------\\\n\\\nReplaces an existing file at the specified path with a new one.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `update` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n*   For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Update file using `ArrayBuffer` from base64 file data instead, see example below.\\\n\\",
    "summary": "The documentation describes the `list` and `replace` functions of the Supabase storage API. The `list` function retrieves a list of files in a specified bucket and folder, supporting pagination and sorting. The `replace` function updates an existing file in the storage, requiring specific permissions on the `objects` table. It also provides a note about using `ArrayBuffer` instead of `Blob`, `File`, or `FormData` for React Native applications."
  },
  {
    "chunk_id": "7981d649-fe39-42c4-bce5-5eea4e0bb17e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\\\n    \\\n*   fileBodyRequiredUnion: expand to see options\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n    Details\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on the update file functionality, which allows updating a file in a bucket using an ArrayBuffer from base64 file data. The key parameters are the relative file path and the file body, with optional file options. This functionality is useful for programmatically updating files stored in a cloud-based storage bucket."
  },
  {
    "chunk_id": "a74c643c-fb50-4708-ae81-b68477f20bba",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate fileUpdate file using \\`ArrayBuffer\\` from base64 file data\\\n\\\n`     _10  const avatarFile = event.target.files[0]  _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .update('public/avatar1.png', avatarFile, {  _10  cacheControl: '3600',  _10  upsert: true  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMove an existing file\\\n---------------------\\\n\\\nMoves an existing file to a new path in the same bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `update` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation summarizes two storage operations: updating a file using an ArrayBuffer from base64 file data, and moving an existing file to a new path within the same bucket. The update operation requires `update` and `select` permissions on the `objects` table, while the move operation has similar permission requirements. These storage operations are relevant for managing files in a Supabase-powered application."
  },
  {
    "chunk_id": "a2f670ca-d6a0-403c-ba81-179859194aab",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromPathRequiredstring\\\n    \\\n    The original file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   toPathRequiredstring\\\n    \\\n    The new file path, including the new file name. For example `folder/image-new.png`.\\\n    \\\n\\",
    "summary": "The function allows moving a file from one path to another, specified by the `fromPath` and `toPath` parameters. This operation is performed asynchronously, returning a Promise that resolves with the updated file information or an error."
  },
  {
    "chunk_id": "6992167c-ecd4-410c-9895-4e6dbfda6a4a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nMove file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .move('public/avatar1.png', 'private/avatar2.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCopy an existing file\\\n---------------------\\\n\\\nCopies an existing file to a new path in the same bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `insert` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided content describes the `move` operation in the Supabase storage API, which allows copying an existing file to a new path within the same storage bucket. This operation requires specific permissions on the `objects` table, as outlined in the Supabase storage security guide. The summary also covers the response format and the overall purpose of the `move` function."
  },
  {
    "chunk_id": "c3103b95-9f17-458f-9cec-b86455570a09",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromPathRequiredstring\\\n    \\\n    The original file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   toPathRequiredstring\\\n    \\\n    The new file path, including the new file name. For example `folder/image-copy.png`.\\\n    \\\n\\",
    "summary": "This function moves a file from one path to another within the Supabase storage. The `fromPath` parameter specifies the original file location, while the `toPath` parameter defines the new file path. This operation is asynchronous and returns a Promise."
  },
  {
    "chunk_id": "5c2a9ac9-d2b3-4eae-99a5-58619a575a80",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCopy file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .copy('public/avatar1.png', 'private/avatar2.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete files in a bucket\\\n------------------------\\\n\\\nDeletes files within the same bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `delete` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two main functionalities related to Supabase Storage:\n\n1. Copying a file from one location to another within the same storage bucket, using the `copy()` method.\n2. Deleting files within the same storage bucket, which requires specific permissions on the `objects` table (`delete` and `select`) and follows the security guidelines outlined in the Storage guide."
  },
  {
    "chunk_id": "8789c5c3-bf9c-4cac-9f0a-cd6da47654c6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathsRequiredArray<string>\\\n    \\\n    An array of files to delete, including the path and file name. For example \\[`'folder/image.png'`\\].\\\n    \\\n\\",
    "summary": "This section describes the parameters required for deleting one or more files from Supabase Storage. The `pathsRequiredArray` parameter is an array of strings, where each string represents the path and filename of a file to be deleted, such as `'folder/image.png'`. This functionality allows users to efficiently remove multiple files from the storage service in a single operation."
  },
  {
    "chunk_id": "0c4fb975-f43e-4d7c-9458-119fa64dfde2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .remove(['folder/avatar1.png'])      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a signed URL\\\n-------------------\\\n\\\nCreates a signed URL. Use a signed URL to share a file for a fixed amount of time.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation covers two main features: file deletion and signed URL creation. The file deletion feature allows deleting one or more files from the 'avatars' storage bucket using the Supabase storage API. The signed URL creation feature generates a temporary, shareable link to a file, which requires 'select' permissions on the 'objects' table but no permissions on the 'buckets' table."
  },
  {
    "chunk_id": "3ac83216-fb7b-47b3-99ce-e7c5782a5b6f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   expiresInRequirednumber\\\n    \\\n    The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters for the `deleteFile()` function in the Supabase storage API. The function takes a required `path` parameter specifying the file path, a required `expiresIn` parameter defining the signed URL expiration time in seconds, and an optional `options` object for additional settings. This functionality allows users to securely delete files from the Supabase storage service."
  },
  {
    "chunk_id": "c201368a-794e-494b-8860-0fd1005411d7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed URLCreate a signed URL for an asset with transformationsCreate a signed URL which triggers the download of the asset\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUrl('folder/avatar1.png', 60)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate signed URLs\\\n------------------\\\n\\\nCreates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided content describes the `createSignedUrl` function in the Supabase Storage API, which generates a temporary, signed URL for accessing a file. This allows users to share files securely for a fixed amount of time, without exposing the actual file path. The function supports creating signed URLs for a single file or multiple files, and the required permissions are limited to the `objects` table's `select` permission."
  },
  {
    "chunk_id": "ea9dd02d-27be-49b4-a7a3-37460b719225",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathsRequiredArray<string>\\\n    \\\n    The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\\\n    \\\n*   expiresInRequirednumber\\\n    \\\n    The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content describes the parameters for the `createSignedUrls` function in the Supabase storage API. The function takes an array of file paths, an expiration time in seconds, and optional configuration options to generate signed URLs for downloading the specified files. This allows secure, time-limited access to the stored assets."
  },
  {
    "chunk_id": "c0f52cbe-bcbb-44b8-92b4-84278c796c4b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed URLs\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUrls(['folder/avatar1.png', 'folder/avatar2.png'], 60)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate signed upload URL\\\n------------------------\\\n\\\nCreates a signed upload URL. Signed upload URLs can be used to upload files to the bucket without further authentication. They are valid for 2 hours.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `insert`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes the `createSignedUrls` function in the Supabase storage API, which generates signed upload URLs for a list of file paths. These signed URLs can be used to upload files to the storage bucket without further authentication, and are valid for 2 hours. The function requires the `insert` permission on the `objects` table, as outlined in the Storage guide on access control."
  },
  {
    "chunk_id": "6f0adb04-1dbd-46f0-a592-d6d704f85cb9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the current file name. For example `folder/image.png`.\\\n    \\\n\\",
    "summary": "The provided content describes a function that creates a signed URL for uploading a file to a storage service. The function takes a required `path` parameter, which represents the file path including the file name, and returns a Promise that resolves to an object with `data` and `error` properties. This functionality is likely used to generate secure, time-limited URLs for uploading files to the storage service."
  },
  {
    "chunk_id": "a5acefbb-31ec-4301-8dbb-fa8cfb57e08b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed Upload URL\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUploadUrl('folder/cat.jpg')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpload to a signed URL\\\n----------------------\\\n\\\nUpload a file with a token generated from `createSignedUploadUrl`.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided content describes how to create a signed upload URL using the Supabase storage API. The signed URL allows uploading a file to the storage service, and the necessary permissions for this operation are outlined. The summary emphasizes the key technical aspects of generating a signed URL and uploading a file using it."
  },
  {
    "chunk_id": "a1ae89d9-6c76-41cf-8f13-bedd0c182fe5",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\\\n    \\\n*   tokenRequiredstring\\\n    \\\n    The token generated from `createSignedUploadUrl`\\\n    \\\n*   fileBodyRequiredFileBody\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on the parameters required for the `uploadToSignedUrl` function, including the file path, token, file body, and optional file options. This function is used to upload a file to a signed URL, which is generated through the `createSignedUploadUrl` function. The summary highlights the key technical aspects of this functionality, which is useful for users seeking to understand and utilize the file upload capabilities of the system."
  },
  {
    "chunk_id": "ebf4abe8-0a69-4610-870a-74b33ce1c27d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpload to a signed URL\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .uploadToSignedUrl('folder/cat.jpg', 'token-from-createSignedUploadUrl', file)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve public URL\\\n-------------------\\\n\\\nA simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\\\n\\\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket)\\\n     or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\\\n    , clicking the overflow menu on a bucket and choosing \"Make public\"\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided documentation describes a function to upload files to a signed URL and retrieve the public URL for an asset in a public bucket. It outlines the required parameters, response format, and the necessary permissions and configurations for creating a public URL, emphasizing the importance of ensuring the bucket is set to public for the public URL to be accessible."
  },
  {
    "chunk_id": "af4d20f4-0803-4123-aa28-a1ae8e418b81",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The path and name of the file to generate the public URL for. For example `folder/image.png`.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function generates a public URL for an asset stored in a public bucket, with optional transformations applied. The `path` parameter specifies the file path and name, while the `options` parameter allows for additional transformations to be applied to the asset."
  },
  {
    "chunk_id": "370ace19-cc18-4d47-9032-92d1599f7ec1",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nobject\\\n\\\nDetails\\\n\\\nReturns the URL for an asset in a public bucketReturns the URL for an asset in a public bucket with transformationsReturns the URL which triggers the download of an asset in a public bucket\\\n\\\n`     _10  const { data } = supabase  _10  .storage  _10  .from('public-bucket')  _10  .getPublicUrl('folder/avatar1.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRelease Notes\\\n-------------\\\n\\\nSupabase.js v2 release notes.\\\n\\\nInstall the latest version of @supabase/supabase-js\\\n\\\nTerminal\\\n\\\n`     _10  npm install @supabase/supabase-js      `\\\n\\",
    "summary": "The function `getPublicUrl()` returns the public URL for an asset stored in a Supabase public bucket, with optional transformations. It can be used to generate a download URL for the asset. The documentation also includes release notes for the latest Supabase.js v2 version, which can be installed via the provided npm command."
  },
  {
    "chunk_id": "9b944187-35c4-4183-a8f9-a2ea98628d57",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Explicit constructor options[#](#explicit-constructor-options)\\\n\\\nAll client specific options within the constructor are keyed to the library.\\\n\\\nSee [PR](https://github.com/supabase/supabase-js/pull/458)\\\n:\\\n\\\n`     _19  const supabase = createClient(apiURL, apiKey, {  _19  db: {  _19  schema: 'public',  _19  },  _19  auth: {  _19  storage: AsyncStorage,  _19  autoRefreshToken: true,  _19  persistSession: true,  _19  detectSessionInUrl: true,  _19  },  _19  realtime: {  _19  channels,  _19  endpoint,  _19  },  _19  global: {  _19  fetch: customFetch,  _19  headers: DEFAULT_HEADERS,  _19  },  _19  })      `\\\n\\",
    "summary": "The documentation discusses the ability to provide explicit constructor options when creating a Supabase client instance. These options allow configuring various aspects of the client's behavior, including the database schema, authentication settings, real-time channel configurations, and global fetch and header settings. This level of customization enables developers to tailor the Supabase client to their specific application requirements."
  },
  {
    "chunk_id": "49f08dee-5d82-4f60-8c44-55450f391ab9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "TypeScript support[#](#typescript-support)\\\n\\\nThe libraries now support typescript.\\\n\\\nv1.0\\\n\\\n``     _10  // previously definitions were injected in the `from()` method  _10  supabase.from<Definitions['Message']>('messages').select('\\*')      ``\\\n\\\n* * *\\\n\\\nv2.0\\\n\\\n``     _10  import type { Database } from './DatabaseDefinitions'  _10  _10  // definitions are injected in `createClient()`  _10  const supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)  _10  _10  const { data } = await supabase.from('messages').select().match({ id: 1 })      ``\\\n\\\nTypes can be generated via the CLI:\\\n\\\nTerminal\\\n\\\n`     _10  supabase start  _10  supabase gen types typescript --local > DatabaseDefinitions.ts      `\\\n\\",
    "summary": "The libraries now support TypeScript, allowing for type-safe interactions with the database. In v1.0, type definitions were injected in the `from()` method, while in v2.0, they are defined in the `createClient()` function. The CLI can be used to generate these type definitions locally, enabling improved type safety and developer experience."
  },
  {
    "chunk_id": "41b4e08d-3748-45b2-8d42-994179d36fd9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Data operations return minimal[#](#data-operations-return-minimal)\\\n\\\n`.insert()` / `.upsert()` / `.update()` / `.delete()` don't return rows by default: [PR](https://github.com/supabase/postgrest-js/pull/276)\\\n.\\\n\\\nPreviously, these methods return inserted/updated/deleted rows by default (which caused [some confusion](https://github.com/supabase/supabase/discussions/1548)\\\n), and you can opt to not return it by specifying `returning: 'minimal'`. Now the default behavior is to not return rows. To return inserted/updated/deleted rows, add a `.select()` call at the end, e.g.:\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('my_table')  _10  .delete()  _10  .eq('id', 1)  _10  .select()      `\\\n\\",
    "summary": "The libraries now support TypeScript. Data operation methods like `.insert()`, `.upsert()`, `.update()`, and `.delete()` no longer return rows by default, as this was causing confusion. To retrieve the inserted/updated/deleted rows, users must explicitly call the `.select()` method after the data operation."
  },
  {
    "chunk_id": "eeb2341a-9409-4dc8-b007-36a4ef7eb035",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "New ordering defaults[#](#new-ordering-defaults)\\\n\\\n`.order()` now defaults to Postgres\u2019s default: [PR](https://github.com/supabase/postgrest-js/pull/283)\\\n.\\\n\\\nPreviously `nullsFirst` defaults to `false` , meaning `null`s are ordered last. This is bad for performance if e.g. the column uses an index with `NULLS FIRST` (which is the default direction for indexes).\\\n\\",
    "summary": "The summary is as follows:\n\nThe `.order()` function in the Postgrest.js library now defaults to Postgres's default ordering behavior, where `null` values are ordered last. This is an improvement over the previous default of `nullsFirst=false`, which could lead to performance issues when indexing columns with the default `NULLS FIRST` direction. The change was made in PR [#283](https://github.com/supabase/postgrest-js/pull/283) to better align with common database indexing practices."
  },
  {
    "chunk_id": "2487c5be-9264-44e8-bc25-746863588b99",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Cookies and localstorage namespace[#](#cookies-and-localstorage-namespace)\\\n\\\nStorage key name in the Auth library has changed to include project reference which means that existing websites that had their JWT expiry set to a longer time could find their users logged out with this upgrade.\\\n\\\n``     _10  const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`      ``\\\n\\",
    "summary": "The summary states that the storage key name in the Auth library has been changed to include the project reference, which means that existing websites with longer JWT expiry may experience users being logged out after the upgrade. The new default storage key format is `sb-{hostname-without-tld}-auth-token`."
  },
  {
    "chunk_id": "93ffd3d6-feaa-4daa-8309-7f341d780f5b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "New Auth Types[#](#new-auth-types)\\\n\\\nTypescript typings have been reworked. `Session` interface now guarantees that it will always have an `access_token`, `refresh_token` and `user`\\\n\\\n./types.ts\\\n\\\n`     _10  interface Session {  _10  provider_token?: string | null  _10  access_token: string  _10  expires_in?: number  _10  expires_at?: number  _10  refresh_token: string  _10  token_type: string  _10  user: User  _10  }      `\\\n\\",
    "summary": "The excerpt describes changes to the Typescript typings for the `Session` interface in the Auth library. The `Session` interface now guarantees the presence of an `access_token`, `refresh_token`, and `user` object, providing a more consistent and robust data structure for managing user sessions."
  },
  {
    "chunk_id": "fe0012b7-4ab7-4baf-af23-19cefb2dea21",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "New Auth methods[#](#new-auth-methods)\\\n\\\nWe're removing the `signIn()` method in favor of more explicit function signatures: `signInWithPassword()`, `signInWithOtp()`, and `signInWithOAuth()`.\\\n\\\nv1.0\\\n\\\n`     _10  const { data } = await supabase.auth.signIn({  _10  email: 'hello@example',  _10  password: 'pass',  _10  })      `\\\n\\\n* * *\\\n\\\nv2.0\\\n\\\n`     _10  const { data } = await supabase.auth.signInWithPassword({  _10  email: 'hello@example',  _10  password: 'pass',  _10  })      `\\\n\\",
    "summary": "The summary is as follows:\n\nThe Supabase authentication API has been updated to use more explicit function signatures, replacing the generic `signIn()` method with `signInWithPassword()`, `signInWithOtp()`, and `signInWithOAuth()`. This change provides a clearer and more intuitive interface for handling different authentication methods, improving the overall developer experience."
  },
  {
    "chunk_id": "bae9965b-3c1c-4492-bb0d-d799e56ded5c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "New Realtime methods[#](#new-realtime-methods)\\\n\\\nThere is a new `channel()` method in the Realtime library, which will be used for our Multiplayer updates.\\\n\\\nWe will deprecate the `.from().on().subscribe()` method previously used for listening to postgres changes.\\\n\\\n`     _21  supabase  _21  .channel('any_string_you_want')  _21  .on('presence', { event: 'track' }, (payload) => {  _21  console.log(payload)  _21  })  _21  .subscribe()  _21  _21  supabase  _21  .channel('any_string_you_want')  _21  .on(  _21  'postgres_changes',  _21  {  _21  event: 'INSERT',  _21  schema: 'public',  _21  table: 'movies',  _21  },  _21  (payload) => {  _21  console.log(payload)  _21  }  _21  )  _21  .subscribe()      `\\\n\\",
    "summary": "The documentation describes new Realtime methods in the Supabase library, including a new `channel()` method for Multiplayer updates and a deprecation of the previous `.from().on().subscribe()` method for listening to Postgres changes. The new methods allow developers to subscribe to specific events, such as presence tracking and Postgres changes, using more explicit function signatures."
  },
  {
    "chunk_id": "6692dfdb-6e80-42a5-b3a6-19ddb157cdd4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "Deprecated setAuth()[#](#deprecated-setauth)\\\n\\\nDeprecated and removed `setAuth()` . To set a custom `access_token` jwt instead, pass the custom header into the `createClient()` method provided: ([PR](https://github.com/supabase/gotrue-js/pull/340)\\\n)\\\n\\",
    "summary": "The `setAuth()` method in the Realtime library has been deprecated. Instead, developers should pass a custom `access_token` JWT header directly to the `createClient()` method to set a custom authentication token. This change is part of a broader set of updates across the Supabase client libraries."
  },
  {
    "chunk_id": "f561fa31-c1d5-44ed-8cc3-45e27f597c12",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-api",
    "main_heading": "No Heading",
    "content": "All changes[#](#all-changes)\\\n\\\n*   `supabase-js`\\\n    *   `shouldThrowOnError` has been removed until all the client libraries support this option ([PR](https://github.com/supabase/supabase-js/pull/490)\\\n        ).\\\n*   `postgrest-js`\\\n    *   TypeScript typings have been reworked [PR](https://github.com/supabase/postgrest-js/pull/279)\\\n        \\\n    *   Use `undefined` instead of `null` for function params, types, etc. ([https://github.com/supabase/postgrest-js/pull/278](https://github.com/supabase/postgrest-js/pull/278)\\\n        )\\\n    *   Some features are now obsolete: ([https://github.com/supabase/postgrest-js/pull/275](https://github.com/supabase/postgrest-js/pull/275)\\\n        )\\\n        *   filter shorthands (e.g. `cs` vs. `contains`)\\\n        *   `body` in response (vs. `data`)\\\n        *   `upsert`ing through the `.insert()` method\\\n        *   `auth` method on `PostgrestClient`\\\n        *   client-level `throwOnError`\\\n*   `gotrue-js`\\\n    *   `supabase-js` client allows passing a `storageKey` param which will allow the user to set the key used in local storage for storing the session. By default, this will be namespace-d with the supabase project ref. ([PR](https://github.com/supabase/supabase-js/pull/460)\\\n        )\\\n    *   `signIn` method is now split into `signInWithPassword` , `signInWithOtp` , `signInWithOAuth` ([PR](https://github.com/supabase/gotrue-js/pull/304)\\\n        )\\\n    *   Deprecated and removed `session()` , `user()` in favour of using `getSession()` instead. `getSession()` will always return a valid session if a user is already logged in, meaning no more random logouts. ([PR](https://github.com/supabase/gotrue-js/pull/299)\\\n        )\\\n    *   Deprecated and removed setting for `multitab` support because `getSession()` and gotrue\u2019s reuse interval setting takes care of session management across multiple tabs ([PR](https://github.com/supabase/gotrue-js/pull/366)\\\n        )\\\n    *   No more throwing of random errors, gotrue-js v2 always returns a custom error type: ([PR](https://github.com/supabase/gotrue-js/pull/341)\\\n        )\\\n        *   `AuthSessionMissingError`\\\n            *   Indicates that a session is expected but missing\\\n        *   `AuthNoCookieError`\\\n            *   Indicates that a cookie is expected but missing\\\n        *   `AuthInvalidCredentialsError`\\\n            *   Indicates that the incorrect credentials were passed\\\n    *   Renamed the `api` namespace to `admin` , the `admin` namespace will only contain methods that should only be used in a trusted server-side environment with the service role key\\\n    *   Moved `resetPasswordForEmail` , `getUser` and `updateUser` to the `GoTrueClient` which means they will be accessible from the `supabase.auth` namespace in `supabase-js` instead of having to do `supabase.auth.api` to access them\\\n    *   Removed `sendMobileOTP` , `sendMagicLinkEmail` in favor of `signInWithOtp`\\\n    *   Removed `signInWithEmail`, `signInWithPhone` in favor of `signInWithPassword`\\\n    *   Removed `signUpWithEmail` , `signUpWithPhone` in favor of `signUp`\\\n    *   Replaced `update` with `updateUser`\\\n*   `storage-js`\\\n    *   Return types are more strict. Functions types used to indicate that the data returned could be null even if there was no error. We now make use of union types which only mark the data as null if there is an error and vice versa. ([PR](https://github.com/supabase/storage-js/pull/60)\\\n        )\\\n    *   The `upload` and `update` function returns the path of the object uploaded as the `path` parameter. Previously the returned value had the bucket name prepended to the path which made it harder to pass the value on to other storage-js methods since all methods take the bucket name and path separately. We also chose to call the returned value `path` instead of `Key` ([PR](https://github.com/supabase/storage-js/pull/75)\\\n        )\\\n    *   `getPublicURL` only returns the public URL inside the data object. This keeps it consistent with our other methods of returning only within the data object. No error is returned since this method cannot does not throw an error ([PR](https://github.com/supabase/storage-js/pull/93)\\\n        )\\\n    *   signed urls are returned as `signedUrl` instead of `signedURL` in both `createSignedUrl` and `createSignedUrls` ([PR](https://github.com/supabase/storage-js/pull/94)\\\n        )\\\n    *   Encodes URLs returned by `createSignedUrl`, `createSignedUrls` and `getPublicUrl` ([PR](https://github.com/supabase/storage-js/pull/86)\\\n        )\\\n    *   `createsignedUrl` used to return a url directly and and within the data object. This was inconsistent. Now we always return values only inside the data object across all methods. ([PR](https://github.com/supabase/storage-js/pull/88)\\\n        )\\\n    *   `createBucket` returns a data object instead of the name of the bucket directly. ([PR](https://github.com/supabase/storage-js/pull/89)\\\n        )\\\n    *   Fixed types for metadata ([PR](https://github.com/supabase/storage-js/pull/90)\\\n        )\\\n    *   Better error types make it easier to track down what went wrong quicker.\\\n    *   `SupabaseStorageClient` is no longer exported. Use `StorageClient` instead. ([PR](https://github.com/supabase/storage-js/pull/92)\\\n        ).\\\n*   `realtime-js`\\\n    *   `RealtimeSubscription` class no longer exists and replaced by `RealtimeChannel`.\\\n    *   `RealtimeClient`'s `disconnect` method now returns type of `void` . It used to return type of `Promise<{ error: Error | null; data: boolean }`.\\\n    *   Removed `removeAllSubscriptions` and `removeSubscription` methods from `SupabaseClient` class.\\\n    *   Removed `SupabaseRealtimeClient` class.\\\n    *   Removed `SupabaseQueryBuilder` class.\\\n    *   Removed `SupabaseEventTypes` type.\\\n        *   Thinking about renaming this to something like `RealtimePostgresChangeEvents` and moving it to `realtime-js` v2.\\\n    *   Removed `.from(\u2019table\u2019).on(\u2019INSERT\u2019, () \u21d2 {}).subscribe()` in favor of new Realtime client API.\\\n*   `functions-js`\\\n    *   supabase-js v1 only threw an error if the fetch call itself threw an error (network errors, etc) and not if the function returned HTTP errors like 400s or 500s. We have changed this behaviour to return an error if your function throws an error.\\\n    *   We have introduced new error types to distinguish between different kinds of errors. A `FunctionsHttpError` error is returned if your function throws an error, `FunctionsRelayError` if the Supabase Relay has an error processing your function and `FunctionsFetchError` if there is a network error in calling your function.\\\n    *   The correct content-type headers are automatically attached when sending the request if you don\u2019t pass in a `Content-Type` header and pass in an argument to your function. We automatically attach the content type for `Blob`, `ArrayBuffer`, `File`, `FormData` ,`String` . If it doesn\u2019t match any of these we assume the payload is `json` , we serialise the payload as JSON and attach the content type as `application/json`.\\\n    *   `responseType` does not need to be explicitly passed in. We parse the response based on the `Content-Type` response header sent by the function. We support parsing the responses as `text`, `json`, `blob`, `form-data` and are parsed as `text` by default.\\\n\\\n*   Need some help?\\\n    \\\n    [Contact support](https://supabase.com/support)\\\n    \\\n*   Latest product updates?\\\n    \\\n    [See Changelog](https://supabase.com/changelog)\\\n    \\\n*   Something's not right?\\\n    \\\n    [Check system status](https://status.supabase.com/)\\\n    \\\n\\\n* * *\\\n\\\n[\u00a9 Supabase Inc](https://supabase.com/)\\\n\u2014[Contributing](https://github.com/supabase/supabase/blob/master/apps/docs/DEVELOPERS.md)\\\n[Author Styleguide](https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md)\\\n[Open Source](https://supabase.com/open-source)\\\n[SupaSquad](https://supabase.com/supasquad)\\\nPrivacy Settings\\\n\\\n[GitHub](https://github.com/supabase/supabase)\\\n[Twitter](https://twitter.com/supabase)\\\n[Discord](https://discord.supabase.com/)",
    "summary": "The summary covers key changes across several Supabase client libraries:\n\n- `supabase-js` removed the `shouldThrowOnError` option, `postgrest-js` deprecated various features, and `gotrue-js` introduced new authentication methods and error handling.\n- `storage-js` improved return types, URL handling, and error reporting, while `realtime-js` simplified the API by removing several classes and methods.\n- `functions-js` now throws errors for failed function calls and automatically handles content types and response parsing."
  },
  {
    "chunk_id": "2c7b665c-e413-455d-9676-3533afa02aa7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\n*   [Start](/docs/guides/getting-started)\n    \n*   Products\n*   Build\n*   Reference\n*   Resources\n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\nSearch docs...\n\nK\n\nMain menu\n\nJavaScript\n\nv2.0\n\n*   [Introduction](/docs/reference/javascript/introduction)\n    \n*   [Installing](/docs/reference/javascript/installing)\n    \n*   [Initializing](/docs/reference/javascript/initializing)\n    \n*   [TypeScript support](/docs/reference/javascript/typescript-support)\n    \n*   * * *\n    \n    Database\n    \n    *   [Fetch data](/docs/reference/javascript/select)\n        \n    *   [Insert data](/docs/reference/javascript/insert)\n        \n    *   [Update data](/docs/reference/javascript/update)\n        \n    *   [Upsert data](/docs/reference/javascript/upsert)\n        \n    *   [Delete data](/docs/reference/javascript/delete)\n        \n    *   [Call a Postgres function](/docs/reference/javascript/rpc)\n        \n    *   Using filters\n        \n    *   Using modifiers\n        \n*   * * *\n    \n    Auth\n    \n    *   [Overview](/docs/reference/javascript/auth-api)\n        \n    *   [Error codes](/docs/reference/javascript/auth-error-codes)\n        \n    *   [Create a new user](/docs/reference/javascript/auth-signup)\n        \n    *   [Listen to auth events](/docs/reference/javascript/auth-onauthstatechange)\n        \n    *   [Create an anonymous user](/docs/reference/javascript/auth-signinanonymously)\n        \n    *   [Sign in a user](/docs/reference/javascript/auth-signinwithpassword)\n        \n    *   [Sign in with ID Token](/docs/reference/javascript/auth-signinwithidtoken)\n        \n    *   [Sign in a user through OTP](/docs/reference/javascript/auth-signinwithotp)\n        \n    *   [Sign in a user through OAuth](/docs/reference/javascript/auth-signinwithoauth)\n        \n    *   [Sign in a user through SSO](/docs/reference/javascript/auth-signinwithsso)\n        \n    *   [Sign out a user](/docs/reference/javascript/auth-signout)\n        \n    *   [Send a password reset request](/docs/reference/javascript/auth-resetpasswordforemail)\n        \n    *   [Verify and log in through OTP](/docs/reference/javascript/auth-verifyotp)\n        \n    *   [Retrieve a session](/docs/reference/javascript/auth-getsession)\n        \n    *   [Retrieve a new session](/docs/reference/javascript/auth-refreshsession)\n        \n    *   [Retrieve a user](/docs/reference/javascript/auth-getuser)\n        \n    *   [Update a user](/docs/reference/javascript/auth-updateuser)\n        \n    *   [Retrieve identities linked to a user](/docs/reference/javascript/auth-getuseridentities)\n        \n    *   [Link an identity to a user](/docs/reference/javascript/auth-linkidentity)\n        \n    *   [Unlink an identity from a user](/docs/reference/javascript/auth-unlinkidentity)\n        \n    *   [Send a password reauthentication nonce](/docs/reference/javascript/auth-reauthentication)\n        \n    *   [Resend an OTP](/docs/reference/javascript/auth-resend)\n        \n    *   [Set the session data](/docs/reference/javascript/auth-setsession)\n        \n    *   [Exchange an auth code for a session](/docs/reference/javascript/auth-exchangecodeforsession)\n        \n    *   [Start auto-refresh session (non-browser)](/docs/reference/javascript/auth-startautorefresh)\n        \n    *   [Stop auto-refresh session (non-browser)](/docs/reference/javascript/auth-stopautorefresh)\n        \n    *   Auth MFA\n        \n    *   Auth Admin\n        \n*   * * *\n    \n    Edge Functions\n    \n    *   [Invokes a Supabase Edge Function.](/docs/reference/javascript/functions-invoke)\n        \n*   * * *\n    \n    Realtime\n    \n    *   [Subscribe to channel](/docs/reference/javascript/subscribe)\n        \n    *   [Unsubscribe from a channel](/docs/reference/javascript/removechannel)\n        \n    *   [Unsubscribe from all channels](/docs/reference/javascript/removeallchannels)\n        \n    *   [Retrieve all channels](/docs/reference/javascript/getchannels)\n        \n    *   [Broadcast a message](/docs/reference/javascript/broadcastmessage)\n        \n*   * * *\n    \n    Storage\n    \n    *   [Create a bucket](/docs/reference/javascript/storage-createbucket)\n        \n    *   [Retrieve a bucket](/docs/reference/javascript/storage-getbucket)\n        \n    *   [List all buckets](/docs/reference/javascript/storage-listbuckets)\n        \n    *   [Update a bucket](/docs/reference/javascript/storage-updatebucket)\n        \n    *   [Delete a bucket](/docs/reference/javascript/storage-deletebucket)\n        \n    *   [Empty a bucket](/docs/reference/javascript/storage-emptybucket)\n        \n    *   [Upload a file](/docs/reference/javascript/storage-from-upload)\n        \n    *   [Download a file](/docs/reference/javascript/storage-from-download)\n        \n    *   [List all files in a bucket](/docs/reference/javascript/storage-from-list)\n        \n    *   [Replace an existing file](/docs/reference/javascript/storage-from-update)\n        \n    *   [Move an existing file](/docs/reference/javascript/storage-from-move)\n        \n    *   [Copy an existing file](/docs/reference/javascript/storage-from-copy)\n        \n    *   [Delete files in a bucket](/docs/reference/javascript/storage-from-remove)\n        \n    *   [Create a signed URL](/docs/reference/javascript/storage-from-createsignedurl)\n        \n    *   [Create signed URLs](/docs/reference/javascript/storage-from-createsignedurls)\n        \n    *   [Create signed upload URL](/docs/reference/javascript/storage-from-createsigneduploadurl)\n        \n    *   [Upload to a signed URL](/docs/reference/javascript/storage-from-uploadtosignedurl)\n        \n    *   [Retrieve public URL](/docs/reference/javascript/storage-from-getpublicurl)\n        \n*   * * *\n    \n    Misc\n    \n    *   [Release Notes](/docs/reference/javascript/release-notes)\n        \n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\n*   [Start](/docs/guides/getting-started)\n    \n*   Products\n*   Build\n*   Reference\n*   Resources\n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\nSearch docs...\n\nK\n\nJavascript Reference v2.0\n\nJavaScript Client Library\n=========================\n\n@supabase/supabase-js[View on GitHub](https://github.com/supabase/supabase-js)\n\nThis reference documents every object and method available in Supabase's isomorphic JavaScript library, `supabase-js`. You can use `supabase-js` to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\nInstalling\n----------",
    "summary": "Summary:\n\nThe content describes how to install the @supabase/supabase-js package, which provides an isomorphic JavaScript library for interacting with Supabase's Postgres database, realtime events, Edge Functions, authentication, and storage services. The library can be installed via npm, yarn, or pnpm, and is a key component for building applications on the Supabase platform."
  },
  {
    "chunk_id": "9de9444e-f53b-4bbe-b976-382896c7d7b0",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Install as package[#](#install-as-package)\n\nYou can install @supabase/supabase-js via the terminal.\n\nnpmYarnpnpm\n\nTerminal\n\n`     _10  npm install @supabase/supabase-js      `",
    "summary": "The documentation describes how to install the Supabase JavaScript client library (@supabase/supabase-js) via the terminal using npm, yarn, or pnpm package managers. This allows developers to integrate the Supabase client into their applications and access the Supabase platform's features and services programmatically."
  },
  {
    "chunk_id": "bde5d8d0-af91-4719-af3c-90fab9c2a1e3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Install via CDN[#](#install-via-cdn)\n\nYou can install @supabase/supabase-js via CDN links.\n\n`     _10  <script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2\"></script>  _10  //or  _10  <script src=\"https://unpkg.com/@supabase/supabase-js@2\"></script>      `",
    "summary": "The documentation describes how to install the Supabase JavaScript library using a CDN. It provides two example CDN links that can be used to include the library in a web page, allowing developers to use the Supabase client in their applications without the need for a package manager."
  },
  {
    "chunk_id": "0114ed8a-d979-4490-8fb1-5de8e4d96dfc",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Use at runtime in Deno[#](#use-at-runtime-in-deno)\n\nYou can use supabase-js in the Deno runtime via [JSR](https://jsr.io/@supabase/supabase-js)\n:\n\n`     _10  import { createClient } from 'jsr:@supabase/supabase-js@2'      `\n\n* * *\n\nInitializing\n------------\n\nCreate a new client for use in the browser.\n\nYou can initialize a new Supabase client using the `createClient()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.",
    "summary": "The Supabase client can be used in the Deno runtime via the JSR platform. It is the primary entry point for interacting with the Supabase ecosystem, allowing developers to easily initialize a new Supabase client and access the full range of Supabase functionality within their applications."
  },
  {
    "chunk_id": "8a03bdd7-a230-45df-9ed5-ec0d9872c567",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   supabaseUrlRequiredstring\n    \n    The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n    \n*   supabaseKeyRequiredstring\n    \n    The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n    \n*   optionsOptionalSupabaseClientOptions\n    \n    Details\n    \n\nCreating a clientWith a custom domainWith additional parametersWith custom schemasCustom fetch implementationReact Native options with AsyncStorageReact Native options with Expo SecureStore\n\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  _10  // Create a single supabase client for interacting with your database  _10  const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')      `\n\n* * *\n\nTypeScript support\n------------------\n\n`supabase-js` has TypeScript support for type inference, autocompletion, type-safe queries, and more.\n\nWith TypeScript, `supabase-js` detects things like `not null` constraints and [generated columns](https://www.postgresql.org/docs/current/ddl-generated-columns.html)\n. Nullable columns are typed as `T | null` when you select the column. Generated columns will show a type error when you insert to it.\n\n`supabase-js` also detects relationships between tables. A referenced table with one-to-many relationship is typed as `T[]`. Likewise, a referenced table with many-to-one relationship is typed as `T | null`.\n\nGenerating TypeScript Types[#](#generating-typescript-types)\n\n-------------------------------------------------------------\n\nYou can use the Supabase CLI to [generate the types](/docs/reference/cli/supabase-gen-types)\n. You can also generate the types [from the dashboard](https://supabase.com/dashboard/project/_/api?page=tables-intro)\n.\n\nTerminal\n\n`     _10  supabase gen types typescript --project-id abcdefghijklmnopqrst > database.types.ts      `\n\nThese types are generated from your database schema. Given a table `public.movies`, the generated types will look like:\n\n`     _10  create table public.movies (  _10  id bigint generated always as identity primary key,  _10  name text not null,  _10  data jsonb null  _10  );      `\n\n./database.types.ts\n\n``     _25  export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]  _25  _25  export interface Database {  _25  public: {  _25  Tables: {  _25  movies: {  _25  Row: { // the data expected from .select()  _25  id: number  _25  name: string  _25  data: Json | null  _25  }  _25  Insert: { // the data to be passed to .insert()  _25  id?: never // generated columns must not be supplied  _25  name: string // `not null` columns with no default must be supplied  _25  data?: Json | null // nullable columns can be omitted  _25  }  _25  Update: { // the data to be passed to .update()  _25  id?: never  _25  name?: string // `not null` columns are optional on .update()  _25  data?: Json | null  _25  }  _25  }  _25  }  _25  }  _25  }      ``\n\nUsing TypeScript type definitions[#](#using-typescript-type-definitions)\n\n-------------------------------------------------------------------------\n\nYou can supply the type definitions to `supabase-js` like so:\n\n./index.tsx\n\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  import { Database } from './database.types'  _10  _10  const supabase = createClient<Database>(  _10  process.env.SUPABASE_URL,  _10  process.env.SUPABASE_ANON_KEY  _10  )      `\n\nHelper types for Tables and Joins[#](#helper-types-for-tables-and-joins)\n\n-------------------------------------------------------------------------\n\nYou can use the following helper types to make the generated TypeScript types easier to use.\n\nSometimes the generated types are not what you expect. For example, a view's column may show up as nullable when you expect it to be `not null`. Using [type-fest](https://github.com/sindresorhus/type-fest)\n, you can override the types like so:\n\n./database-generated.types.ts\n\n`     _10  export type Json = // ...  _10  _10  export interface Database {  _10  // ...  _10  }      `\n\n./database.types.ts\n\n``     _20  import { MergeDeep } from 'type-fest'  _20  import { Database as DatabaseGenerated } from './database-generated.types'  _20  export { Json } from './database-generated.types'  _20  _20  // Override the type for a specific column in a view:  _20  export type Database = MergeDeep<  _20  DatabaseGenerated,  _20  {  _20  public: {  _20  Views: {  _20  movies_view: {  _20  Row: {  _20  // id is a primary key in public.movies, so it must be `not null`  _20  id: number  _20  }  _20  }  _20  }  _20  }  _20  }  _20  >      ``\n\nYou can also override the type of an individual successful response if needed:\n\n`     _10  const { data } = await supabase.from('countries').select().returns<MyType>()      `\n\nThe generated types provide shorthands for accessing tables and enums.\n\n./index.ts\n\n`     _10  import { Database, Tables, Enums } from \"./database.types.ts\";  _10  _10  // Before \ud83d\ude15  _10  let movie: Database['public']['Tables']['movies']['Row'] = // ...  _10  _10  // After \ud83d\ude0d  _10  let movie: Tables<'movies'>      `",
    "summary": "The Supabase JavaScript (supabase-js) library provides TypeScript support for seamless integration with Deno and other runtimes. It offers features like type inference, autocompletion, type-safe queries, and support for generated columns and database relationships. The library also provides helper types and utilities to simplify the usage of the generated TypeScript types, allowing developers to customize and override them as needed."
  },
  {
    "chunk_id": "b0bb531e-fed8-4e80-b485-d058c2324cbb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Response types for complex queries[#](#response-types-for-complex-queries)\n\n`supabase-js` always returns a `data` object (for success), and an `error` object (for unsuccessful requests).\n\nThese helper types provide the result types from any query, including nested types for database joins.\n\nGiven the following schema with a relation between cities and countries, we can get the nested `CountriesWithCities` type:\n\n`     _10  create table countries (  _10  \"id\" serial primary key,  _10  \"name\" text  _10  );  _10  _10  create table cities (  _10  \"id\" serial primary key,  _10  \"name\" text,  _10  \"country_id\" int references \"countries\"  _10  );      `\n\n``     _17  import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'  _17  _17  const countriesWithCitiesQuery = supabase  _17  .from(\"countries\")  _17  .select(`  _17  id,  _17  name,  _17  cities (  _17  id,  _17  name  _17  )  _17  `);  _17  type CountriesWithCities = QueryData<typeof countriesWithCitiesQuery>;  _17  _17  const { data, error } = await countriesWithCitiesQuery;  _17  if (error) throw error;  _17  const countriesWithCities: CountriesWithCities = data;      ``\n\n* * *\n\nFetch data\n----------\n\nPerform a SELECT query on the table or view.\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/javascript/using-filters)\n    \n*   `select()` can be combined with [Modifiers](/docs/reference/javascript/using-modifiers)\n    \n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\n     and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n    .",
    "summary": "The summary provides information on the response types for complex queries in the `supabase-js` library. It explains that the library returns a `data` object for successful requests and an `error` object for unsuccessful ones, and it introduces the `QueryData` type that can be used to describe the structure of the returned data. The summary also covers key points about fetching data, such as the default 1,000-row limit, using filters and modifiers, and avoiding the `apikey` column name."
  },
  {
    "chunk_id": "e2b32c1c-4ae5-4568-a89d-3028399a8d77",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnsOptionalQuery\n    \n    The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()      `\n\nData source\n\nResponse\n\n* * *\n\nInsert data\n-----------\n\nPerform an INSERT into the table or view.",
    "summary": "The summary covers the key parameters and operations for querying and inserting data using the `supabase-js` library. It includes details on selecting specific columns, querying referenced tables, filtering, and inserting data, highlighting the flexibility and capabilities of the library in handling complex data operations."
  },
  {
    "chunk_id": "b53e82ec-a133-41ad-a616-ad9683ab2475",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredUnion: expand to see options\n    \n    The values to insert. Pass an object to insert a single row or an array to insert multiple rows.\n    \n    Details\n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n\nCreate a recordCreate a record and return itBulk create\n\n`     _10  const { error } = await supabase  _10  .from('countries')  _10  .insert({ id: 1, name: 'Denmark' })      `\n\nData source\n\nResponse\n\n* * *\n\nUpdate data\n-----------\n\nPerform an UPDATE on the table or view.\n\n*   `update()` should always be combined with [Filters](/docs/reference/javascript/using-filters)\n     to target the item(s) you wish to update.",
    "summary": "The documentation describes the parameters for updating data in a table or view using the `update()` function. The `values` parameter is required and specifies the new values to be inserted, either as a single object or an array for multiple rows. The `options` parameter provides optional named parameters. The example demonstrates how to update a record in the `countries` table."
  },
  {
    "chunk_id": "02ac7f98-cdee-42e2-a474-1bf7da2c67d9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredRow\n    \n    The values to update with\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nUpdating your dataUpdate a record and return itUpdating JSON data\n\n`     _10  const { error } = await supabase  _10  .from('countries')  _10  .update({ name: 'Australia' })  _10  .eq('id', 1)      `\n\nData source\n\nResponse\n\n* * *\n\nUpsert data\n-----------\n\nPerform an UPSERT on the table or view. Depending on the column(s) passed to `onConflict`, `.upsert()` allows you to perform the equivalent of `.insert()` if a row with the corresponding `onConflict` columns doesn't exist, or if it does exist, perform an alternative action depending on `ignoreDuplicates`.\n\n*   Primary keys must be included in `values` to use upsert.",
    "summary": "The provided content discusses updating and upserting data in a database using the Supabase library. It covers the syntax for updating a single record by specifying the `values` to update and the `options` object, as well as the `upsert` operation, which allows inserting a new record or updating an existing one based on the provided primary key values. The summary highlights the key technical points, emphasizing the different update and upsert operations and their usage in the Supabase library."
  },
  {
    "chunk_id": "a7b7f64f-026d-454b-bc99-264db0652b7d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredUnion: expand to see options\n    \n    The values to upsert with. Pass an object to upsert a single row or an array to upsert multiple rows.\n    \n    Details\n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .upsert({ id: 1, name: 'Albania' })  _10  .select()      `\n\nData source\n\nResponse\n\n* * *\n\nDelete data\n-----------\n\nPerform a DELETE on the table or view.\n\n*   `delete()` should always be combined with [filters](/docs/reference/javascript/using-filters)\n     to target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\n     enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.",
    "summary": "The documentation explains how to perform upserts (insert or update) and deletes in a Supabase database. It covers the necessary parameters for upsert operations, including options for updating a single or multiple rows. For deleting data, it emphasizes the importance of using filters to target specific records, especially when row-level security (RLS) is enabled, and highlights the efficiency of using the `delete().in()` method for batch deleting records."
  },
  {
    "chunk_id": "4c879da5-c9c6-43ef-b6fb-d866f669337b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nDelete a single recordDelete a record and return itDelete multiple records\n\n`     _10  const response = await supabase  _10  .from('countries')  _10  .delete()  _10  .eq('id', 1)      `\n\nData source\n\nResponse\n\n* * *\n\nCall a Postgres function\n------------------------\n\nPerform a function call.\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\nTo call Postgres functions on [Read Replicas](/docs/guides/platform/read-replicas)\n, use the `get: true` option.",
    "summary": "The documentation provides details on two main functionalities: deleting records in a database table and calling Postgres functions. For deleting records, it shows an example of how to delete a single record or multiple records using the Supabase client library. For calling Postgres functions, it explains how to perform Remote Procedure Calls to execute database logic, such as for password resets and updates, and highlights the use of the `get: true` option when calling functions on Read Replicas."
  },
  {
    "chunk_id": "53bcc627-e3fe-4ac6-9214-eebc0f10e8dc",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   fnRequiredFnName\n    \n    The function name to call\n    \n*   argsRequiredFn\\['Args'\\]\n    \n    The arguments to pass to the function call\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  const { data, error } = await supabase.rpc('hello_world')      `\n\nData source\n\nResponse\n\n* * *\n\nUsing filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional ChainingFilter by values within a JSON columnFilter referenced tables\n\n`     _10  const { data, error } = await supabase  _10  .from('cities')  _10  .select('name, country_id')  _10  .eq('name', 'The Shire') // Correct  _10  _10  const { data, error } = await supabase  _10  .from('cities')  _10  .eq('name', 'The Shire') // Incorrect  _10  .select('name, country_id')      `\n\nNotes\n\n* * *\n\nColumn is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.",
    "summary": "The documentation provides details on using the Supabase library to call Postgres functions, including how to pass arguments, handle responses, and apply filters to function calls. It covers calling functions without arguments, with arguments, and with filters, as well as using filters on select, update, upsert, and delete operations. The summary highlights the key technical points, such as the function call syntax, parameter types, and filter usage, which are important for effectively utilizing the Supabase library to interact with a Postgres database."
  },
  {
    "chunk_id": "222c10c3-45c5-470c-9aba-f6d64b862a4c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredNonNullable\n    \n    The value to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .eq('name', 'Albania')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.",
    "summary": "The documentation describes the parameters for filtering data using the `select()` function in Supabase. The main parameters are `columnRequiredUnion`, which specifies the column to filter on, and `valueRequiredNonNullable`, which provides the value to filter with. The documentation also includes an example usage of the `select()` function to retrieve data from the 'countries' table where the 'name' column is not equal to 'Albania'."
  },
  {
    "chunk_id": "0948c90c-b9b2-4e8b-b080-90213c28489b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .neq('name', 'Albania')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is greater than a value\n------------------------------\n\nMatch only rows where `column` is greater than `value`.",
    "summary": "The documentation describes two parameters for filtering data in a database:\n1. columnRequiredUnion: the column to filter on\n2. valueRequiredUnion: the value to filter with\nIt also provides an example of using the `select()` method to fetch data from a 'countries' table, filtering for rows where the 'name' column is not equal to 'Albania'. The key technical point is the ability to filter data based on a column being greater than a specified value."
  },
  {
    "chunk_id": "73fdd358-d992-409e-9263-6f38f57036c9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .gt('id', 2)      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\nColumn is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.",
    "summary": "The document describes two parameters, `columnRequiredUnion` and `valueRequiredUnion`, which allow filtering a table column by a specified value. The `select()` function is used to retrieve data from the 'countries' table, filtering for rows where the 'id' column is greater than 2."
  },
  {
    "chunk_id": "a1e48da6-b9d9-455a-ac5d-4accab994df6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .gte('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.",
    "summary": "The provided content describes the \"columnRequiredUnion\" and \"valueRequiredUnion\" parameters for filtering data using the Supabase library's \"select()\" method. It also includes an example of using the \"gte\" (greater than or equal to) operator to filter rows where the \"id\" column is greater than or equal to 2. Additionally, the content mentions a section on filtering where the column is less than a given value."
  },
  {
    "chunk_id": "e0adf16c-a3b8-43ff-b902-e13dcc298fff",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .lt('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.",
    "summary": "The content summarizes the API documentation for the `select()` function in Supabase, which allows filtering rows based on column values. The key parameters are `columnRequiredUnion` to specify the column to filter on, and `valueRequiredUnion` to provide the filter value. The example demonstrates using the `lt()` (less than) operator to select rows where the `id` column is less than 2."
  },
  {
    "chunk_id": "97d94a5d-f55b-45c5-bccc-3e4530eab460",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .lte('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.",
    "summary": "The documentation describes two parameters for filtering data in a Supabase query: `columnRequiredUnion` which specifies the column to filter on, and `valueRequiredUnion` which specifies the value to filter with. It also provides an example of using the `select()` function to filter rows where the `id` column is less than or equal to 2. Additionally, it explains that the `column` can be matched against a case-sensitive `pattern`."
  },
  {
    "chunk_id": "bc5eb3f5-19f4-447d-b4d8-df4dafe2d85c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   patternRequiredstring\n    \n    The pattern to match with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .like('name', '%Alba%')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.",
    "summary": "The provided parameters allow for filtering a database table column using a case-insensitive pattern match. The `columnRequiredUnion` parameter specifies the column to filter on, while the `patternRequiredstring` parameter defines the pattern to match. This functionality can be used with the `select()` method to retrieve rows from the database that satisfy the specified criteria."
  },
  {
    "chunk_id": "7b7bd906-14a8-4ab7-94df-00a34de808a3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   patternRequiredstring\n    \n    The pattern to match with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .ilike('name', '%alba%')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is a value\n-----------------\n\nMatch only rows where `column` IS `value`.",
    "summary": "The documentation describes parameters for filtering data using the `select()` function in Supabase. The `columnRequiredUnion` parameter specifies the column to filter on, and the `patternRequiredstring` parameter defines the pattern to match. The example demonstrates how to use the `ilike()` function to perform a case-insensitive search for rows where the 'name' column contains the substring 'alba'."
  },
  {
    "chunk_id": "f181457a-9c94-4c6e-9488-337477db79ae",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nChecking for nullness, true or false\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .is('name', null)      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\nColumn is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.",
    "summary": "The documentation describes the parameters for filtering data in a database table. The `columnRequired` parameter specifies the column to filter on, while the `valueRequired` parameter specifies the value to filter with. The documentation also provides an example of using the `is()` method to check for nullness, true, or false values in the data."
  },
  {
    "chunk_id": "92317359-0d39-4df9-b7d0-4b7def0dde37",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valuesRequiredArray<Row\\['ColumnName'\\]>\n    \n    The values array to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .in('name', ['Albania', 'Algeria'])      `\n\nData source\n\nResponse\n\n* * *\n\nColumn contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.",
    "summary": "The documentation describes two parameters for filtering data in a Supabase database: 'columnRequiredUnion' and 'valuesRequiredArray'. The 'columnRequiredUnion' parameter specifies the column to filter on, which can be a jsonb, array, or range column. The 'valuesRequiredArray' parameter provides the values to filter with. This filtering works with the 'select()' function, allowing users to retrieve data where the column contains every element in the provided values array."
  },
  {
    "chunk_id": "e9949997-eb6c-4a10-8fd5-8a831075aec2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The jsonb, array, or range column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The jsonb, array, or range value to filter with\n    \n    Details\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  const { data, error } = await supabase  _10  .from('issues')  _10  .select()  _10  .contains('tags', ['is:open', 'priority:low'])      `\n\nData source\n\nResponse\n\n* * *\n\nContained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.",
    "summary": "The provided content describes parameters for filtering data on JSON, array, or range columns. Key parameters include `columnRequiredUnion` to specify the column to filter on, and `valueRequiredUnion` to provide the filter value. The summary includes details on how to filter on array, range, and JSON columns, as well as an example usage with the Supabase library."
  },
  {
    "chunk_id": "c81857ea-0395-4a8a-b6af-314ad40ebfa8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The jsonb, array, or range column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The jsonb, array, or range value to filter with\n    \n    Details\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  const { data, error } = await supabase  _10  .from('classes')  _10  .select('name')  _10  .containedBy('days', ['monday', 'tuesday', 'wednesday', 'friday'])      `\n\nData source\n\nResponse\n\n* * *\n\nGreater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.",
    "summary": "The provided content covers parameters for filtering data in a database table. The key parameters include 'columnRequiredUnion' to specify the column to filter on (e.g., jsonb, array, or range), and 'valueRequiredUnion' to specify the value to filter with. Additional details are provided for using these parameters with different column types, such as arrays, ranges, and jsonb data. A specific example is given for using the 'containedBy' operator to filter an array column."
  },
  {
    "chunk_id": "25b4f6f2-cbd1-4a9b-924e-90106e2652dc",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The range column to filter on\n    \n    Details\n    \n*   rangeRequiredstring\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeGt('during', '[2000-01-02 08:00, 2000-01-02 09:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nGreater than or equal to a range\\\n--------------------------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\\\n\\",
    "summary": "The documentation provides details on using the `rangeGt` query operator in the Supabase client library to filter rows in a table based on a range column. The `columnRequiredUnion` parameter specifies the range column to filter on, and the `rangeRequiredstring` parameter defines the range to filter with. This functionality is useful for querying records that fall within a specific date or time range."
  },
  {
    "chunk_id": "c593976a-d27f-4ac9-a31a-bf7e3971319a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeGte('during', '[2000-01-02 08:30, 2000-01-02 09:30)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nLess than a range\\\n-----------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\\\n\\",
    "summary": "This documentation describes the `columnRequiredUnion` and `rangeRequiredstring` parameters for the `select()` function in a database query. The `columnRequiredUnion` parameter specifies the range column to filter on, while the `rangeRequiredstring` parameter defines the range to filter with. The documentation also includes an example query using the `rangeGte` operator to filter rows where the `during` column is greater than or equal to a specified date range."
  },
  {
    "chunk_id": "a9ce5781-4d9a-4c4d-b55a-fad8773d6304",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeLt('during', '[2000-01-01 15:00, 2000-01-01 16:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nLess than or equal to a range\\\n-----------------------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or less than any element in `range`.\\\n\\",
    "summary": "The documentation covers the `rangeGt` filter in Supabase, which allows filtering rows where elements in the specified column are less than or equal to a given range. The range can be specified as a string in the format `[start, end)`. This filter is particularly useful for range columns, enabling efficient queries on date/time or numeric ranges."
  },
  {
    "chunk_id": "7adad6bb-3292-421c-9acf-c91a837abf49",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeLte('during', '[2000-01-01 14:00, 2000-01-01 16:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nMutually exclusive to a range\\\n-----------------------------\\\n\\\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\\\n\\",
    "summary": "The provided content describes two parameters, `columnRequiredUnion` and `rangeRequiredstring`, used in the `select()` method of the Supabase library to filter data from the `reservations` table. `columnRequiredUnion` specifies the range column to filter on, while `rangeRequiredstring` defines the range to filter with. The summary also mentions the \"mutually exclusive to a range\" feature, which is relevant for range columns and ensures that there is no element between the two ranges."
  },
  {
    "chunk_id": "b7015d46-61c0-4fec-8bb0-833f588f4341",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeAdjacent('during', '[2000-01-01 12:00, 2000-01-01 13:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nWith a common element\\\n---------------------\\\n\\\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\\\n\\",
    "summary": "The documentation describes parameters for a filter operation on a column, including the required `columnRequiredUnion` parameter to specify the column to filter on, and the optional `rangeRequiredstring` parameter to provide the range to filter with. It also includes examples of using the `select()` function to perform this filtering operation, and notes that the \"with a common element\" feature is only relevant for array and range columns."
  },
  {
    "chunk_id": "57140dee-c363-44c0-8883-a5fdb602386d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The array or range column to filter on\\\n    \\\n    Details\\\n    \\\n*   valueRequiredUnion: expand to see options\\\n    \\\n    The array or range value to filter with\\\n    \\\n    Details\\\n    \\\n\\\nOn array columnsOn range columns\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('issues')  _10  .select('title')  _10  .overlaps('tags', ['is:closed', 'severity:high'])      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch a string\\\n--------------\\\n\\\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\\\n\\\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\\\n    .\\\n\\",
    "summary": "The documentation describes two parameters for filtering data: `columnRequired` and `valueRequired`. The `columnRequired` parameter specifies the array or range column to filter on, while the `valueRequired` parameter specifies the array or range value to filter with. Additionally, the documentation covers the use of `overlaps` for filtering on array columns and using full-text search for text and tsvector columns."
  },
  {
    "chunk_id": "ec6932fa-f09f-49f9-946a-3eab2122e6a0",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The text or tsvector column to filter on\\\n    \\\n    Details\\\n    \\\n*   queryRequiredstring\\\n    \\\n    The query text to match with\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nText searchBasic normalizationFull normalizationWebsearch\\\n\\\n``     _10  const result = await supabase  _10  .from(\"texts\")  _10  .select(\"content\")  _10  .textSearch(\"content\", `'eggs' & 'ham'`, {  _10  config: \"english\",  _10  });      ``\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch an associated value\\\n-------------------------\\\n\\\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\\\n\\",
    "summary": "The provided content describes the \"textSearch\" function in the Supabase library, which allows filtering rows based on a text or tsvector column and a query text. It includes details on the required and optional parameters, as well as an example usage. The key technical points are the use of the \"textSearch\" function for basic and full text search, and the ability to match an associated value in the filter query."
  },
  {
    "chunk_id": "2cb43a09-e0dd-4eb0-8e8e-3ed89415a56a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   queryRequiredUnion: expand to see options\\\n    \\\n    The object to filter with, with column names as keys mapped to their filter values\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .match({ id: 2, name: 'Albania' })      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDon't match the filter\\\n----------------------\\\n\\\nMatch only rows which doesn't satisfy the filter.\\\n\\\nnot() expects you to use the raw PostgREST syntax for the filter values.\\\n\\\n``     _10  .not('id', 'in', '(5,6,7)') // Use `()` for `in` filter  _10  .not('arraycol', 'cs', '\\{\"a\",\"b\"\\}') // Use `cs` for `contains()`, `\\{\\}` for array values      ``\\\n\\",
    "summary": "The documentation describes the `match()` and `not()` functions for filtering data in a Supabase query. The `match()` function allows filtering by multiple column values, while the `not()` function filters for rows that do not match the given criteria. The documentation provides examples of using these functions, including how to filter arrays and use the `in` operator."
  },
  {
    "chunk_id": "05bdc6e6-e922-491d-9fb3-d3965a9d5a55",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to filter on\\\n    \\\n    Details\\\n    \\\n*   operatorRequiredUnion: expand to see options\\\n    \\\n    The operator to be negated to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n*   valueRequiredUnion: expand to see options\\\n    \\\n    The value to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .not('name', 'is', null)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch at least one filter\\\n-------------------------\\\n\\\nMatch only rows which satisfy at least one of the filters.\\\n\\\nor() expects you to use the raw PostgREST syntax for the filter names and values.\\\n\\\n``     _10  .or('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') // Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') // Use `cd` for `containedBy()`      ``\\\n\\",
    "summary": "The documentation describes the parameters for the `select()` function in the Supabase client library, which allow filtering and querying data from a database. Key parameters include `columnRequired`, `operatorRequired`, and `valueRequired`, which define the column, operator, and value to filter on, respectively. It also explains the `or()` function, which allows matching rows that satisfy at least one of multiple filters, using the raw PostgREST syntax."
  },
  {
    "chunk_id": "9ec45159-1e06-4cff-a4cf-b1475aa3fa7c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   filtersRequiredstring\\\n    \\\n    The filters to use, following PostgREST syntax\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .or('id.eq.2,name.eq.Algeria')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch the filter\\\n----------------\\\n\\\nMatch only rows which satisfy the filter. This is an escape hatch - you should use the specific filter methods wherever possible.\\\n\\\nfilter() expects you to use the raw PostgREST syntax for the filter values.\\\n\\\n``     _10  .filter('id', 'in', '(5,6,7)') // Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') // Use `cs` for `contains()`, `\\{\\}` for array values      ``\\\n\\",
    "summary": "The documentation describes the parameters and usage of the `select()` and `filter()` methods in a software library. The `select()` method allows specifying filters using PostgREST syntax, including the ability to use `or` and `and` operators. The `filter()` method provides a more flexible way to apply filters, using the raw PostgREST syntax, which can be useful when the specific filter methods are not sufficient."
  },
  {
    "chunk_id": "2dd67082-f578-45d1-9ebf-f4f1cf0fe73d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to filter on\\\n    \\\n    Details\\\n    \\\n*   operatorRequiredUnion: expand to see options\\\n    \\\n    The operator to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n*   valueRequiredunknown\\\n    \\\n    The value to filter with, following PostgREST syntax\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .filter('name', 'in', '(\"Algeria\",\"Japan\")')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUsing modifiers\\\n---------------\\\n\\\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\\\n\\\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\\\n\\\n* * *\\\n\\\nReturn data after inserting\\\n---------------------------\\\n\\\nPerform a SELECT on the query result.\\\n\\",
    "summary": "The content describes parameters for filtering data in Supabase, including the required `column`, `operator`, and `value` fields, as well as the use of the `select()` function to retrieve data from a referenced table. It also explains the distinction between filters and modifiers, and how to return data after inserting new records."
  },
  {
    "chunk_id": "c45f5c41-0fdd-41d7-8122-b727da9a2291",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnsOptionalQuery\\\n    \\\n    The columns to retrieve, separated by commas\\\n    \\\n\\\nWith \\`upsert()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .upsert({ id: 1, name: 'Algeria' })  _10  .select()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nOrder the results\\\n-----------------\\\n\\\nOrder the query result by `column`.\\\n\\",
    "summary": "The summary covers the following key points:\n1. The `columns` parameter specifies the columns to retrieve from the database, separated by commas.\n2. The `upsert()` function is demonstrated, which inserts a new record or updates an existing one in the 'countries' table.\n3. The results can be ordered by a specified `column` parameter."
  },
  {
    "chunk_id": "68acec44-41f6-4402-b182-aaaf2f8b28dd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to order by\\\n    \\\n    Details\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('id', 'name')  _10  .order('id', { ascending: false })      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLimit the number of rows returned\\\n---------------------------------\\\n\\\nLimit the query result by `count`.\\\n\\",
    "summary": "The documentation covers the use of the `order()` and `select()` functions in Supabase, a database management system. It explains the parameters for `order()`, including the required `column` parameter and optional `options` parameter. The summary also covers how to limit the number of rows returned using the `count` parameter, which is a common requirement in database queries."
  },
  {
    "chunk_id": "b8d81473-77d3-49b5-a363-45f94b1b7a69",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   countRequirednumber\\\n    \\\n    The maximum number of rows to return\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .limit(1)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLimit the query to a range\\\n--------------------------\\\n\\\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly. The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\\\n\\",
    "summary": "The documentation describes the `select()` method on a referenced table in Supabase, which allows fetching data with various parameters. Key points include: 1) `count` and `options` parameters to control the number of rows returned and provide additional options, and 2) the `from` and `to` parameters to limit the query result to a specific range of rows, respecting the query order."
  },
  {
    "chunk_id": "db98815c-b8ff-4c1c-94f3-37fb169c42eb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromRequirednumber\\\n    \\\n    The starting index from which to limit the result\\\n    \\\n*   toRequirednumber\\\n    \\\n    The last index to which to limit the result\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .range(0, 1)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSet an abort signal\\\n-------------------\\\n\\\nSet the AbortSignal for the fetch request.\\\n\\\nYou can use this to set a timeout for the request.\\\n\\",
    "summary": "The documentation provides details on the `select()` function in Supabase, including parameters such as `from`, `to`, and `options` to limit and customize the result set. It also explains how to set an AbortSignal to timeout a fetch request, which can be useful for handling long-running or potentially unresponsive API calls."
  },
  {
    "chunk_id": "f0305c7b-cddc-4907-9afa-a98d9f05c351",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   signalRequiredAbortSignal\\\n    \\\n    The AbortSignal to use for the fetch request\\\n    \\\n\\\nAborting requests in-flightSet a timeout\\\n\\\n`     _10  const ac = new AbortController()  _10  ac.abort()  _10  const { data, error } = await supabase  _10  .from('very_big_table')  _10  .select()  _10  .abortSignal(ac.signal)      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nRetrieve one row of data\\\n------------------------\\\n\\\nReturn `data` as a single object instead of an array of objects.\\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .limit(1)  _10  .single()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve zero or one row of data\\\n--------------------------------\\\n\\\nReturn `data` as a single object instead of an array of objects.\\\n\\",
    "summary": "The summary covers the following key points:\n\n1. The `signalRequired` parameter is used to specify an AbortSignal object, which can be used to abort in-flight requests. This is demonstrated with an example using `AbortController`.\n2. The documentation covers retrieving a single row of data using the `select()` and `single()` methods, as well as retrieving zero or one row of data using the `single()` method."
  },
  {
    "chunk_id": "09542550-91c9-4a48-bab2-b431e712e569",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nUnion: expand to see options\\\n\\\nDetails\\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .eq('name', 'Singapore')  _10  .maybeSingle()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve as a CSV\\\n-----------------\\\n\\\nReturn `data` as a string in CSV format.\\\n\\",
    "summary": "The provided content describes the return type and options for retrieving data from a Supabase database as a CSV string. It includes details on using the `select()` method to filter and retrieve data, and the ability to return the data in a CSV format, which can be useful for data analysis and processing tasks."
  },
  {
    "chunk_id": "9cbbe4ce-eaf8-4bcb-8759-58afba5d4934",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nstring\\\n\\\nReturn data as CSV\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .csv()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nOverride type of successful response\\\n------------------------------------\\\n\\\nOverride the type of the returned `data`.\\\n\\\nOverride type of successful response\\\n\\\n`     _10  const { data } = await supabase  _10  .from('countries')  _10  .select()  _10  .returns<MyType>()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUsing explain\\\n-------------\\\n\\\nReturn `data` as the EXPLAIN plan for the query.\\\n\\\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\\\n of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\\\n\\\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\\\n\\\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\\\n to enable the functionality on your project.\\\n\\",
    "summary": "The provided content discusses the return type and usage of the `csv()` and `returns<>()` methods in the Supabase library. The `csv()` method allows returning data as a CSV string, while `returns<>()` overrides the type of the returned data. Additionally, the content covers the use of the `explain()` method to retrieve the Postgres execution plan for debugging slow queries, emphasizing the need for caution when enabling it in production environments."
  },
  {
    "chunk_id": "4044afd2-e6a9-431e-b78e-d2f15f35c861",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters for a function, specifically an 'options' parameter of type 'object'. The options parameter contains named parameters that provide additional details for the function's execution, such as the execution plan for the function."
  },
  {
    "chunk_id": "4a35f4a1-791b-4ca6-affd-cdd71179d15b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nUnion: expand to see options\\\n\\\nDetails\\\n\\\nGet the execution planGet the execution plan with analyze and verbose\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .explain()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nOverview\\\n--------\\\n\\\n*   The auth methods can be accessed via the `supabase.auth` namespace.\\\n    \\\n*   By default, the supabase client sets `persistSession` to true and attempts to store the session in local storage. When using the supabase client in an environment that doesn't support local storage, you might notice the following warning message being logged:\\\n    \\\n    > No storage option exists to persist the session, which may result in unexpected behavior when using auth. If you want to set `persistSession` to true, please provide a storage option or you may set `persistSession` to false to disable this warning.\\\n    \\\n    This warning message can be safely ignored if you're not using auth on the server-side. If you are using auth and you want to set `persistSession` to true, you will need to provide a custom storage implementation that follows [this interface](https://github.com/supabase/gotrue-js/blob/master/src/lib/types.ts#L1027)\\\n    .\\\n    \\\n*   Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits)\\\n     in place to guard against brute force attacks.\\\n    \\\n*   The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth)\\\n    . A refresh token never expires and can only be used once.\\\n    \\\n\\\nCreate auth clientCreate auth client (server-side)\\\n\\\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  _10  const supabase = createClient(supabase_url, anon_key)      `\\\n\\\n* * *\\\n\\\nError codes\\\n-----------\\\n\\\nSupabase Auth can throw or return various errors when using the API. All errors originating from the `supabase.auth` namespace of the client library will be wrapped by the `AuthError` class.\\\n\\\nError objects are split in a few classes:\\\n\\\n*   `AuthApiError` -- errors which originate from the Supabase Auth API.\\\n    *   Use `isAuthApiError` instead of `instanceof` checks to see if an error you caught is of this type.\\\n*   `CustomAuthError` -- errors which generally originate from state in the client library.\\\n    *   Use the `name` property on the error to identify the class of error received.\\\n\\\nErrors originating from the server API classed as `AuthApiError` always have a `code` property that can be used to identify the error returned by the server. The `status` property is also present, encoding the HTTP status code received in the response.\\\n\\\nIn general the HTTP status codes you will likely receive are:\\\n\\\n*   [403 Forbidden](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)\\\n     is sent out in rare situations where a certain Auth feature is not available for the user, and you as the developer are not checking a precondition whether that API is available for the user.\\\n*   [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)\\\n     is sent out when the API request is accepted, but cannot be processed because the user or Auth server is in a state where it cannot satisfy the request.\\\n*   [429 Too Many Requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429)\\\n     is sent out when rate-limits are breached for an API. You should handle this status code often, especially in functions that authenticate a user.\\\n*   [500 Internal Server Error](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500)\\\n     often means that the Auth server's service is degraded. Most often it points to issues in your database setup such as a misbehaving trigger on a schema, function, view or other database object.\\\n*   [501 Not Implemented](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/501)\\\n     is sent out when a feature is not enabled on the Auth server, and you are trying to use an API which requires it.\\\n\\\nTo supplement HTTP status codes, Supabase Auth returns a string error code which gives you more insight into what went wrong. These codes are stable and can be used to present an internationalized message to your users.\\\n\\\n| Code | Description |\\\n| --- | --- |\\\n| `anonymous_provider_disabled` | Anonymous sign-ins are disabled. |\\\n| `bad_code_verifier` | Returned from the PKCE flow where the provided code verifier does not match the expected one. Indicates a bug in the implementation of the client library. |\\\n| `bad_json` | Usually used when the HTTP body of the request is not valid JSON. |\\\n| `bad_jwt` | JWT sent in the `Authorization` header is not valid. |\\\n| `bad_oauth_callback` | OAuth callback from provider to Auth does not have all the required attributes (state). Indicates an issue with the OAuth provider or client library implementation. |\\\n| `bad_oauth_state` | OAuth state (data echoed back by the OAuth provider to Supabase Auth) is not in the correct format. Indicates an issue with the OAuth provider integration. |\\\n| `captcha_failed` | Captcha challenge could not be verified with the captcha provider. Check your captcha integration. |\\\n| `conflict` | General database conflict, such as concurrent requests on resources that should not be modified concurrently. Can often occur when you have too many session refresh requests firing off at the same time for a user. Check your app for concurrency issues, and if detected, back off exponentially. |\\\n| `email_conflict_identity_not_deletable` | Unlinking this identity causes the user's account to change to an email address which is already used by another user account. Indicates an issue where the user has two different accounts using different primary email addresses. You may need to migrate user data to one of their accounts in this case. |\\\n| `email_exists` | Email address already exists in the system. |\\\n| `email_not_confirmed` | Signing in is not allowed for this user as the email address is not confirmed. |\\\n| `email_provider_disabled` | Signups are disabled for email and password. |\\\n| `flow_state_expired` | PKCE flow state to which the API request relates has expired. Ask the user to sign in again. |\\\n| `flow_state_not_found` | PKCE flow state to which the API request relates no longer exists. Flow states expire after a while and are progressively cleaned up, which can cause this error. Retried requests can cause this error, as the previous request likely destroyed the flow state. Ask the user to sign in again. |\\\n| `hook_payload_over_size_limit` | Payload from Auth exceeds maximum size limit. |\\\n| `hook_timeout` | Unable to reach hook within maximum time allocated. |\\\n| `hook_timeout_after_retry` | Unable to reach hook after maximum number of retries. |\\\n| `identity_already_exists` | The identity to which the API relates is already linked to a user. |\\\n| `identity_not_found` | Identity to which the API call relates does not exist, such as when an identity is unlinked or deleted. |\\\n| `insufficient_aal` | To call this API, the user must have a higher [Authenticator Assurance Level](https://supabase.com/docs/guides/auth/auth-mfa)<br>. To resolve, ask the user to solve an MFA challenge. |\\\n| `invite_not_found` | Invite is expired or already used. |\\\n| `invalid_credentials` | Login credentials or grant type not recognized. |\\\n| `manual_linking_disabled` | Calling the `supabase.auth.linkUser()` and related APIs is not enabled on the Auth server. |\\\n| `mfa_challenge_expired` | Responding to an MFA challenge should happen within a fixed time period. Request a new challenge when encountering this error. |\\\n| `mfa_factor_name_conflict` | MFA factors for a single user should not have the same friendly name. |\\\n| `mfa_factor_not_found` | MFA factor no longer exists. |\\\n| `mfa_ip_address_mismatch` | The enrollment process for MFA factors must begin and end with the same IP address. |\\\n| `mfa_verification_failed` | MFA challenge could not be verified -- wrong TOTP code. |\\\n| `mfa_verification_rejected` | Further MFA verification is rejected. Only returned if the [MFA verification attempt hook](https://supabase.com/docs/guides/auth/auth-hooks?language=add-admin-role#hook-mfa-verification-attempt)<br> returns a reject decision. |\\\n| `mfa_verified_factor_exists` | Verified phone factor already exists for a user. Unenroll existing verified phone factor to continue. |\\\n| `mfa_totp_enroll_disabled` | Enrollment of MFA TOTP factors is disabled. |\\\n| `mfa_totp_verify_disabled` | Login via TOTP factors and verification of new TOTP factors is disabled. |\\\n| `mfa_phone_enroll_disabled` | Enrollment of MFA Phone factors is disabled. |\\\n| `mfa_phone_verify_disabled` | Login via Phone factors and verification of new Phone factors is disabled. |\\\n| `no_authorization` | This HTTP request requires an `Authorization` header, which is not provided. |\\\n| `not_admin` | User accessing the API is not admin, i.e. the JWT does not contain a `role` claim that identifies them as an admin of the Auth server. |\\\n| `oauth_provider_not_supported` | Using an OAuth provider which is disabled on the Auth server. |\\\n| `otp_disabled` | Sign in with OTPs (magic link, email OTP) is disabled. Check your sever's configuration. |\\\n| `otp_expired` | OTP code for this sign-in has expired. Ask the user to sign in again. |\\\n| `over_email_send_rate_limit` | Too many emails have been sent to this email address. Ask the user to wait a while before trying again. |\\\n| `over_request_rate_limit` | Too many requests have been sent by this client (IP address). Ask the user to try again in a few minutes. Sometimes can indicate a bug in your application that mistakenly sends out too many requests (such as a badly written [`useEffect` React hook](https://react.dev/reference/react/useEffect)<br>). |\\\n| `over_sms_send_rate_limit` | Too many SMS messages have been sent to this phone number. Ask the user to wait a while before trying again. |\\\n| `phone_exists` | Phone number already exists in the system. |\\\n| `phone_not_confirmed` | Signing in is not allowed for this user as the phone number is not confirmed. |\\\n| `phone_provider_disabled` | Signups are disabled for phone and password. |\\\n| `provider_disabled` | OAuth provider is disabled for use. Check your server's configuration. |\\\n| `provider_email_needs_verification` | Not all OAuth providers verify their user's email address. Supabase Auth requires emails to be verified, so this error is sent out when a verification email is sent after completing the OAuth flow. |\\\n| `reauthentication_needed` | A user needs to reauthenticate to change their password. Ask the user to reauthenticate by calling the `supabase.auth.reauthenticate()` API. |\\\n| `reauthentication_not_valid` | Verifying a reauthentication failed, the code is incorrect. Ask the user to enter a new code. |\\\n| `request_timeout` | Processing the request took too long. Retry the request. |\\\n| `same_password` | A user that is updating their password must use a different password than the one currently used. |\\\n| `saml_assertion_no_email` | SAML assertion (user information) was received after sign in, but no email address was found in it, which is required. Check the provider's attribute mapping and/or configuration. |\\\n| `saml_assertion_no_user_id` | SAML assertion (user information) was received after sign in, but a user ID (called NameID) was not found in it, which is required. Check the SAML identity provider's configuration. |\\\n| `saml_entity_id_mismatch` | (Admin API.) Updating the SAML metadata for a SAML identity provider is not possible, as the entity ID in the update does not match the entity ID in the database. This is equivalent to creating a new identity provider, and you should do that instead. |\\\n| `saml_idp_already_exists` | (Admin API.) Adding a SAML identity provider that is already added. |\\\n| `saml_idp_not_found` | SAML identity provider not found. Most often returned after IdP-initiated sign-in with an unregistered SAML identity provider in Supabase Auth. |\\\n| `saml_metadata_fetch_failed` | (Admin API.) Adding or updating a SAML provider failed as its metadata could not be fetched from the provided URL. |\\\n| `saml_provider_disabled` | Using [Enterprise SSO with SAML 2.0](https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml)<br> is not enabled on the Auth server. |\\\n| `saml_relay_state_expired` | SAML relay state is an object that tracks the progress of a `supabase.auth.signInWithSSO()` request. The SAML identity provider should respond after a fixed amount of time, after which this error is shown. Ask the user to sign in again. |\\\n| `saml_relay_state_not_found` | SAML relay states are progressively cleaned up after they expire, which can cause this error. Ask the user to sign in again. |\\\n| `session_not_found` | Session to which the API request relates no longer exists. This can occur if the user has signed out, or the session entry in the database was deleted in some other way. |\\\n| `signup_disabled` | Sign ups (new account creation) are disabled on the server. |\\\n| `single_identity_not_deletable` | Every user must have at least one identity attached to it, so deleting (unlinking) an identity is not allowed if it's the only one for the user. |\\\n| `sms_send_failed` | Sending an SMS message failed. Check your SMS provider configuration. |\\\n| `sso_domain_already_exists` | (Admin API.) Only one SSO domain can be registered per SSO identity provider. |\\\n| `sso_provider_not_found` | SSO provider not found. Check the arguments in `supabase.auth.signInWithSSO()`. |\\\n| `too_many_enrolled_mfa_factors` | A user can only have a fixed number of enrolled MFA factors. |\\\n| `unexpected_audience` | (Deprecated feature not available via Supabase client libraries.) The request's `X-JWT-AUD` claim does not match the JWT's audience. |\\\n| `unexpected_failure` | Auth service is degraded or a bug is present, without a specific reason. |\\\n| `user_already_exists` | User with this information (email address, phone number) cannot be created again as it already exists. |\\\n| `user_banned` | User to which the API request relates has a `banned_until` property which is still active. No further API requests should be attempted until this field is cleared. |\\\n| `user_not_found` | User to which the API request relates no longer exists. |\\\n| `user_sso_managed` | When a user comes from SSO, certain fields of the user cannot be updated (like `email`). |\\\n| `validation_failed` | Provided parameters are not in the expected format. |\\\n| `weak_password` | User is signing up or changing their password without meeting the password strength criteria. Use the `AuthWeakPasswordError` class to access more information about what they need to do to make the password pass. |\\\n\\",
    "summary": "The documentation covers the Supabase Auth client, including creating an auth client, error handling, and a detailed list of error codes and their descriptions. It provides guidance on using features like PKCE, MFA, and SAML, as well as information on rate limits and session management. The error codes and their explanations are particularly valuable for developers integrating Supabase Auth into their applications."
  },
  {
    "chunk_id": "3e67c8ed-f958-4c2b-8fc5-1587b0d165a6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Tips for better error handling[#](#tips-for-better-error-handling)\\\n\\\n*   Do not use string matching on error messages! Always use the `name` and `code` properties of error objects to identify the situation.\\\n*   Although HTTP status codes generally don't change, they can suddenly change due to bugs, so avoid relying on them unless absolutely necessary.\\\n\\\n* * *\\\n\\\nCreate a new user\\\n-----------------\\\n\\\nCreates a new user.\\\n\\\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](/dashboard/project/_/auth/providers)\\\n    .\\\n*   **Confirm email** determines if users need to confirm their email address after signing up.\\\n    *   If **Confirm email** is enabled, a `user` is returned but `session` is null.\\\n    *   If **Confirm email** is disabled, both a `user` and a `session` are returned.\\\n*   When the user confirms their email address, they are redirected to the [`SITE_URL`](/docs/guides/auth/redirect-urls)\\\n     by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](/dashboard/project/_/auth/url-configuration)\\\n    .\\\n*   If signUp() is called for an existing confirmed user:\\\n    *   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\\\n        , an obfuscated/fake user object is returned.\\\n    *   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\\\n*   To fetch the currently logged-in user, refer to [`getUser()`](/docs/reference/javascript/auth-getuser)\\\n    .\\\n\\",
    "summary": "The summary covers best practices for error handling in software development, including the importance of using the `name` and `code` properties of error objects rather than string matching, and the potential for HTTP status codes to change unexpectedly. It also provides details on creating a new user, including the behavior of the \"Confirm email\" setting and how it affects the returned user and session objects. Additionally, it explains the behavior when signing up an existing confirmed user, depending on the \"Confirm email\" and \"Confirm phone\" settings."
  },
  {
    "chunk_id": "9e50ff88-11b7-4a3e-9429-f34ffc566ceb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation discusses the parameters for various authentication methods, including signing up with an email and password, a phone number and password (SMS), and the required credentials for each option. The summary covers the key technical details and options available to users for authentication in the system."
  },
  {
    "chunk_id": "cc2f8278-c1e4-4f18-a200-998571ed558d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\\\n\\\n`     _10  const { data, error } = await supabase.auth.signUp({  _10  email: 'example@email.com',  _10  password: 'example-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nListen to auth events\\\n---------------------\\\n\\\nReceive a notification every time an auth event happens.\\\n\\\n*   Subscribes to important events occurring on the user's session.\\\n*   Use on the frontend/client. It is less useful on the server.\\\n*   Events are emitted across tabs to keep your application's UI up-to-date. Some events can fire very frequently, based on the number of tabs open. Use a quick and efficient callback function, and defer or debounce as many operations as you can to be performed outside of the callback.\\\n*   **Important:** A callback can be an `async` function and it runs synchronously during the processing of the changes causing the event. You can easily create a dead-lock by using `await` on a call to another method of the Supabase library.\\\n    *   Avoid using `async` functions as callbacks.\\\n    *   Limit the number of `await` calls in `async` callbacks.\\\n    *   Do not use other Supabase functions in the callback function. If you must, dispatch the functions once the callback has finished executing. Use this as a quick way to achieve this:\\\n        \\\n        `     _10  supabase.auth.onAuthStateChange((event, session) => \\{  _10  setTimeout(async () => \\{  _10  // await on other Supabase function here  _10  // this runs right after the callback has finished  _10  \\}, 0)  _10  \\})      `\\\n        \\\n*   Emitted events:\\\n    *   `INITIAL_SESSION`\\\n        *   Emitted right after the Supabase client is constructed and the initial session from storage is loaded.\\\n    *   `SIGNED_IN`\\\n        *   Emitted each time a user session is confirmed or re-established, including on user sign in and when refocusing a tab.\\\n        *   Avoid making assumptions as to when this event is fired, this may occur even when the user is already signed in. Instead, check the user object attached to the event to see if a new user has signed in and update your application's UI.\\\n        *   This event can fire very frequently depending on the number of tabs open in your application.\\\n    *   `SIGNED_OUT`\\\n        *   Emitted when the user signs out. This can be after:\\\n            *   A call to `supabase.auth.signOut()`.\\\n            *   After the user's session has expired for any reason:\\\n                *   User has signed out on another device.\\\n                *   The session has reached its timebox limit or inactivity timeout.\\\n                *   User has signed in on another device with single session per user enabled.\\\n                *   Check the [User Sessions](/docs/guides/auth/sessions)\\\n                     docs for more information.\\\n        *   Use this to clean up any local storage your application has associated with the user.\\\n    *   `TOKEN_REFRESHED`\\\n        *   Emitted each time a new access and refresh token are fetched for the signed in user.\\\n        *   It's best practice and highly recommended to extract the access token (JWT) and store it in memory for further use in your application.\\\n            *   Avoid frequent calls to `supabase.auth.getSession()` for the same purpose.\\\n        *   There is a background process that keeps track of when the session should be refreshed so you will always receive valid tokens by listening to this event.\\\n        *   The frequency of this event is related to the JWT expiry limit configured on your project.\\\n    *   `USER_UPDATED`\\\n        *   Emitted each time the `supabase.auth.updateUser()` method finishes successfully. Listen to it to update your application's UI based on new profile information.\\\n    *   `PASSWORD_RECOVERY`\\\n        *   Emitted instead of the `SIGNED_IN` event when the user lands on a page that includes a password recovery link in the URL.\\\n        *   Use it to show a UI to the user where they can [reset their password](/docs/guides/auth/passwords#resetting-a-users-password-forgot-password)\\\n            .\\\n\\",
    "summary": "The documentation covers the Supabase authentication API, including methods for signing up with various options (email/password, phone/password, etc.) and listening for auth events such as SIGNED_IN, SIGNED_OUT, TOKEN_REFRESHED, and USER_UPDATED. Key points include avoiding deadlocks when using `await` in callback functions, extracting access tokens for further use, and understanding the frequency and significance of different auth events for maintaining a consistent UI across application tabs."
  },
  {
    "chunk_id": "5af587eb-618c-4fe1-a685-9f0068f17b08",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   callbackRequiredfunction\\\n    \\\n    A callback function to be invoked when an auth event happens.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation describes a callback function that is invoked when an authentication event occurs. This function can be used to listen for sign-in, sign-out, and other auth-related changes, and to store OAuth provider tokens when the user signs in. The function is a required parameter that allows the application to respond to and manage user authentication state."
  },
  {
    "chunk_id": "39d369a3-7ffd-4e43-8aec-911f850bf128",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nobject\\\n\\\nDetails\\\n\\\nListen to auth changesListen to sign outStore OAuth provider tokens on sign inUse React Context for the User's sessionListen to password recovery eventsListen to sign inListen to token refreshListen to user updates\\\n\\\n`     _20  const { data } = supabase.auth.onAuthStateChange((event, session) => {  _20  console.log(event, session)  _20  _20  if (event === 'INITIAL_SESSION') {  _20  // handle initial session  _20  } else if (event === 'SIGNED_IN') {  _20  // handle sign in event  _20  } else if (event === 'SIGNED_OUT') {  _20  // handle sign out event  _20  } else if (event === 'PASSWORD_RECOVERY') {  _20  // handle password recovery event  _20  } else if (event === 'TOKEN_REFRESHED') {  _20  // handle token refreshed event  _20  } else if (event === 'USER_UPDATED') {  _20  // handle user updated event  _20  }  _20  })  _20  _20  // call unsubscribe to remove the callback  _20  data.subscription.unsubscribe()      `\\\n\\\n* * *\\\n\\\nCreate an anonymous user\\\n------------------------\\\n\\\nCreates a new anonymous user.\\\n\\\n*   Returns an anonymous user\\\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\\\n\\",
    "summary": "The summary provides an overview of the Supabase auth functionality, including listening for auth events like sign-in, sign-out, password recovery, token refresh, and user updates. It also covers creating an anonymous user, which is recommended to be set up with a captcha to prevent abuse. The code snippet demonstrates how to subscribe to auth state changes and handle different events accordingly."
  },
  {
    "chunk_id": "faffdd8d-4c64-4d2f-bd65-6dfbf03280ed",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsOptionalSignInAnonymouslyCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the `credentialsOptionalSignInAnonymously` method, which allows creating an anonymous user with custom metadata. This method returns a Promise that resolves to the newly created anonymous user object, enabling authentication flows without requiring the user to sign in explicitly."
  },
  {
    "chunk_id": "89746b4c-4ef0-42d6-9f12-dc99ce65845f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate an anonymous userCreate an anonymous user with custom user metadata\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInAnonymously({  _10  options: {  _10  captchaToken  _10  }  _10  });      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user\\\n--------------\\\n\\\nLog in an existing user with an email and password or phone and password.\\\n\\\n*   Requires either an email and password or a phone number and password.\\\n\\",
    "summary": "The content describes the `signInAnonymously()` method of the Supabase auth API, which creates an anonymous user with custom metadata. It also describes the `signIn()` method, which allows users to log in with an email and password or phone number and password. The summary focuses on the key technical details and functionality of these two auth-related methods."
  },
  {
    "chunk_id": "600841da-a5f2-4b38-baad-c9f9f9deded8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content summarizes the parameters required for creating an anonymous user with custom metadata and signing in with email/password or phone/password. The key technical points are the use of a Promise-based API to handle these actions, with the parameters being part of a union type that can be expanded to see the available options."
  },
  {
    "chunk_id": "43a868f7-4686-42cd-a02f-899dfbc94a90",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with email and passwordSign in with phone and password\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithPassword({  _10  email: 'example@email.com',  _10  password: 'example-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in with ID Token\\\n---------------------\\\n\\\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\\\n\\",
    "summary": "The documentation covers two types of authentication methods: 1) Sign in with email and password, and 2) Sign in with ID token. The first method allows users to authenticate using their email and password, while the second method enables authentication using an OIDC ID token, which requires the authentication provider to be configured and enabled. Both methods return a Promise with either the authentication data or an error."
  },
  {
    "chunk_id": "3ba16272-daa8-4d3f-8a8c-f454ffaffac9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithIdTokenCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters and details for signing in using an ID token with the Supabase authentication API. It includes the return type of the `signInWithIdToken` function, which is a Promise that resolves to a Union type with data and error properties. The key technical points are the use of ID token credentials for authentication and the expected output of the function call."
  },
  {
    "chunk_id": "6a86efe9-430f-4e33-84f2-430df6a6d4ac",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign In using ID Token\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithIdToken({  _10  provider: 'google',  _10  token: 'your-id-token'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user through OTP\\\n--------------------------\\\n\\\nLog in a user using magiclink or a one-time password (OTP).\\\n\\\n*   Requires either an email or phone number.\\\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\\\n*   If the user doesn't exist, `signInWithOtp()` will signup the user instead. To restrict this behavior, you can set `shouldCreateUser` in `SignInWithPasswordlessCredentials.options` to `false`.\\\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\\\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\\\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\\\n    .\\\n*   See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards)\\\n     to add additional redirect URLs to your project.\\\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](/dashboard/project/_/auth/templates)\\\n     to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\\\n*   See our [Twilio Phone Auth Guide](/docs/guides/auth/phone-login?showSmsProvider=Twilio)\\\n     for details about configuring WhatsApp sign in.\\\n\\",
    "summary": "The documentation provides details on two authentication methods in Supabase: signInWithIdToken and signInWithOtp. The signInWithIdToken method allows users to sign in with an ID token, while the signInWithOtp method enables passwordless sign-in using a one-time password sent to the user's email or phone number. The signInWithOtp method can also be used to sign up new users if they don't already exist."
  },
  {
    "chunk_id": "54e259da-a413-45bd-9e73-d3157c475a2c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a method for signing in to an application using various authentication methods, such as ID token, email, SMS OTP, and WhatsApp OTP. The method returns a Promise that resolves to a Union type, which likely includes the signed-in user's data or an error object. This functionality is important for enabling secure user authentication in the application."
  },
  {
    "chunk_id": "3c1203b1-aedd-4bab-af93-cb0bff64ecc1",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithOtp({  _10  email: 'example@email.com',  _10  options: {  _10  emailRedirectTo: 'https://example.com/welcome'  _10  }  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nSign in a user through OAuth\\\n----------------------------\\\n\\\nLog in an existing user via a third-party provider. This method supports the PKCE flow.\\\n\\\n*   This method is used for signing in using a third-party provider.\\\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\\\n    .\\\n\\",
    "summary": "The summary covers the sign-in functionality of the Supabase authentication API. It provides details on the different sign-in options (email, SMS OTP, WhatsApp OTP) and the PKCE flow for third-party OAuth providers. The code snippet demonstrates how to sign in a user using the email option, including the ability to set a redirect URL."
  },
  {
    "chunk_id": "b0023ed8-608b-4bdb-af86-ab15171c172c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithOAuthCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content describes the parameters required for signing in with OAuth credentials, including credentialsRequiredSignInWithOAuthCredentials. This functionality allows users to sign in using third-party providers, providing a convenient authentication method for the application."
  },
  {
    "chunk_id": "40999571-3b56-4e50-9718-6ac04e77f77d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes and access provider tokens\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithOAuth({  _10  provider: 'github'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user through SSO\\\n--------------------------\\\n\\\nAttempts a single-sign on using an enterprise Identity Provider. A successful SSO attempt will redirect the current page to the identity provider authorization page. The redirect URL is implementation and SSO protocol specific.\\\n\\\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\\\n     to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\\\n     to do this.\\\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\\\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `providerId` property. For example:\\\n    *   Mapping specific user email addresses with an identity provider.\\\n    *   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\\\n\\",
    "summary": "The documentation describes how to sign in a user through a third-party OAuth provider or via Single Sign-On (SSO) using an enterprise Identity Provider. It outlines the required parameters, response format, and implementation details for these authentication flows, including how to establish a connection to an identity provider and start the sign-in process using different methods."
  },
  {
    "chunk_id": "40b17112-2fce-4201-9316-fd773af9856c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a method or function that takes a `paramsRequiredUnion` parameter, which is a union of multiple options. The method returns a Promise that resolves to one of the options in the union. This functionality likely enables signing in using a third-party provider or an email domain, and extracting relevant information from the provider's UUID or other data."
  },
  {
    "chunk_id": "394d2fa8-f141-4c24-a258-d852e2cdecee",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with email domainSign in with provider UUID\\\n\\\n`     _11  // You can extract the user's email domain and use it to trigger the  _11  // authentication flow with the correct identity provider.  _11  _11  const { data, error } = await supabase.auth.signInWithSSO({  _11  domain: 'company.com'  _11  })  _11  _11  if (data?.url) {  _11  // redirect the user to the identity provider's authentication flow  _11  window.location.href = data.url  _11  }      `\\\n\\\n* * *\\\n\\\nSign out a user\\\n---------------\\\n\\\nInside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\\\n\\\n*   In order to use the `signOut()` method, the user needs to be signed in first.\\\n*   By default, `signOut()` uses the global scope, which signs out all other sessions that the user is logged into as well.\\\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\\\n\\",
    "summary": "The documentation provides information about two different functions in the Supabase authentication API: `signInWithSSO` and `signOut`. `signInWithSSO` allows signing in with an email domain and triggers the authentication flow with the corresponding identity provider. `signOut` logs the user out of the current browser session, revoking the refresh token and deleting the JWT, but does not revoke the JWT until it expires."
  },
  {
    "chunk_id": "1e3f89e9-baec-40d1-aede-cf3b1bd1af13",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   optionsRequiredSignOut\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on the `signOut()` function from the Supabase authentication API, which is a Promise-based operation that signs the user out and returns an error object if the operation fails. This function is likely used to implement user sign-out functionality in an application."
  },
  {
    "chunk_id": "d6e919ba-5d5d-4783-8ea9-84fbf0aaed47",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<object>\\\n\\\nDetails\\\n\\\nSign out\\\n\\\n`     _10  const { error } = await supabase.auth.signOut()      `\\\n\\\n* * *\\\n\\\nSend a password reset request\\\n-----------------------------\\\n\\\nSends a password reset request to an email address. This method supports the PKCE flow.\\\n\\\n*   The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\\\n*   The `resetPasswordForEmail()` only sends a password reset link to the user's email. To update the user's password, see [`updateUser()`](/docs/reference/javascript/auth-updateuser)\\\n    .\\\n*   A `SIGNED_IN` and `PASSWORD_RECOVERY` event will be emitted when the password recovery link is clicked. You can use [`onAuthStateChange()`](/docs/reference/javascript/auth-onauthstatechange)\\\n     to listen and invoke a callback function on these events.\\\n*   When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards)\\\n     to add additional redirect URLs to your project.\\\n*   After the user has been redirected successfully, prompt them for a new password and call `updateUser()`:\\\n\\\n`     _10  const \\{ data, error \\} = await supabase.auth.updateUser(\\{  _10  password: new_password  _10  \\})      `\\\n\\",
    "summary": "This documentation describes the `supabase.auth.resetPasswordForEmail()` method, which sends a password reset link to the user's email. The password reset flow consists of two steps: (1) allowing the user to log in via the reset link, and (2) updating the user's password using the `supabase.auth.updateUser()` method. The documentation also provides information on handling the `SIGNED_IN` and `PASSWORD_RECOVERY` events, as well as configuring the redirect URLs for the password reset flow."
  },
  {
    "chunk_id": "344a5430-813a-4535-963c-5f9129fede58",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   emailRequiredstring\\\n    \\\n    The email address of the user.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation describes a method to reset a user's password. It takes an email address as a required parameter and an optional options object. The method returns a Promise that resolves to an object containing the result of the password reset operation."
  },
  {
    "chunk_id": "35846b30-ad3d-4499-ac0d-11b958d418fa",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nReset passwordReset password (React)\\\n\\\n`     _10  const { data, error } = await supabase.auth.resetPasswordForEmail(email, {  _10  redirectTo: 'https://example.com/update-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nVerify and log in through OTP\\\n-----------------------------\\\n\\\nLog in a user given a User supplied OTP or TokenHash received through mobile or email.\\\n\\\n*   The `verifyOtp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\\\n*   The verification type used should be determined based on the corresponding auth method called before `verifyOtp` to sign up / sign-in a user.\\\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\\\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\\\n     for more details.\\\n\\",
    "summary": "The documentation describes two related functionality: (1) Resetting a user's password using the `supabase.auth.resetPasswordForEmail()` method, with the ability to specify a redirect URL; and (2) Verifying and logging in a user via a one-time password (OTP) or token hash received through mobile or email, using the `verifyOtp()` method with various verification types. The OTP or token hash can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "44257dcf-2d1a-45d9-b4c5-0b7555c665ca",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary covers the Reset password and Verify Signup One-Time Password (OTP) functionalities. It provides details on the input parameters and return types, which are a Promise containing a Union of possible responses. This information is crucial for integrating these authentication-related features into a software application."
  },
  {
    "chunk_id": "f5f0de41-e561-44fa-845c-dfbb940e9601",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nVerify Signup One-Time Password (OTP)Verify Sms One-Time Password (OTP)Verify Email Auth (Token Hash)\\\n\\\n`     _10  const { data, error } = await supabase.auth.verifyOtp({ email, token, type: 'email'})      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a session\\\n------------------\\\n\\\nReturns the session, refreshing it if necessary.\\\n\\\n*   This method retrieves the current local session (i.e local storage).\\\n*   The session contains a signed JWT and unencoded session data.\\\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`getUser`](/docs/reference/javascript/auth-getuser)\\\n     instead.\\\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\\\n\\",
    "summary": "The documentation describes the `verifyOtp()` function, which verifies a one-time password (OTP) for email or SMS authentication. It returns a Promise that resolves to the session data, which can be used to retrieve the current local session with an unexpired access token. The session data should not be used as a trusted source of user information, and `getUser()` should be called instead for verified user data."
  },
  {
    "chunk_id": "29365792-8bc0-4f61-8bed-23b355b40671",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the session data\\\n\\\n`     _10  const { data, error } = await supabase.auth.getSession()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a new session\\\n----------------------\\\n\\\nReturns a new session, regardless of expiry status. Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession(). If the current session's refresh token is invalid, an error will be thrown.\\\n\\\n*   This method will refresh and return a new session whether the current one is expired or not.\\\n\\",
    "summary": "The summary is as follows:\n\nThis method retrieves a new session, regardless of the expiry status of the current session. It takes an optional current session object, and if not provided, it will attempt to retrieve it from `getSession()`. If the current session's refresh token is invalid, an error will be thrown. This method will always return a new, refreshed session."
  },
  {
    "chunk_id": "9155198f-9957-4350-9c2a-cab984619d20",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   currentSessionOptionalobject\\\n    \\\n    The current session. If passed in, it must contain a refresh token.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides a method to refresh the current session using a refresh token. It takes an optional `currentSession` object that must contain a refresh token. This functionality allows users to maintain their session and authentication state without the need to re-authenticate, improving the overall user experience."
  },
  {
    "chunk_id": "934c679e-7e18-44af-a8cd-7bbe17af2c65",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRefresh session using the current sessionRefresh session using a refresh token\\\n\\\n`     _10  const { data, error } = await supabase.auth.refreshSession()  _10  const { session, user } = data      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a user\\\n---------------\\\n\\\nGets the current user details if there is an existing session. This method performs a network request to the Supabase Auth server, so the returned value is authentic and can be used to base authorization rules on.\\\n\\\n*   This method fetches the user object from the database instead of local session.\\\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\\\n*   Should always be used when checking for user authorization on the server. On the client, you can instead use `getSession().session.user` for faster results. `getSession` is insecure on the server.\\\n\\",
    "summary": "The provided content describes the `refreshSession()` and `getUser()` methods of the Supabase Auth library. `refreshSession()` allows refreshing the current session using a refresh token, while `getUser()` retrieves the current user's details by performing a server-side validation of the user's access token. This server-side validation is recommended for checking user authorization, as it ensures the user's token is authentic and can be used as the basis for authorization rules."
  },
  {
    "chunk_id": "2df8912c-3fb7-4dda-a84e-c16d86f4bfe7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   jwtOptionalstring\\\n    \\\n    Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\\\n    \\\n\\",
    "summary": "The function takes an optional access token JWT as a parameter. If no JWT is provided, the JWT from the current session is used. This allows refreshing the session using either the current session or a refresh token."
  },
  {
    "chunk_id": "ef55ad21-0909-473a-b087-314dcf5bc651",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\\\n\\\n`     _10  const { data: { user } } = await supabase.auth.getUser()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a user\\\n-------------\\\n\\\nUpdates user data for a logged in user.\\\n\\\n*   In order to use the `updateUser()` method, the user needs to be signed in first.\\\n*   By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n\\",
    "summary": "The summary provides details on two main functionalities: 1) Retrieving the logged-in user's information using the current session or a custom JWT, and 2) Updating the logged-in user's data. It emphasizes that the user needs to be signed in to use the `updateUser()` method, and that email updates can be configured to only send a confirmation link to the new email address."
  },
  {
    "chunk_id": "7b109931-3684-42c2-bce6-6e80435b6fbd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   attributesRequiredUserAttributes\\\n    \\\n    Details\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The documentation describes the parameters and options required for a function that updates the user's email and phone number. It specifies that the function takes in user attributes as required parameters and an options object as a required parameter, which likely contains additional configuration details for the update operation."
  },
  {
    "chunk_id": "1f9b568c-4b4a-4c18-96c1-d009c706f2bb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\\\n\\\n`     _10  const { data, error } = await supabase.auth.updateUser({  _10  email: 'new@email.com'  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nRetrieve identities linked to a user\\\n------------------------------------\\\n\\\nGets all the identities linked to a user.\\\n\\\n*   The user needs to be signed in to call `getUserIdentities()`.\\\n\\",
    "summary": "The documentation describes the Supabase `updateUser()` function, which allows authenticated users to update their email, phone number, password, metadata, and password with a nonce. It also covers the `getUserIdentities()` function, which retrieves all identities linked to a signed-in user. The summary highlights the key technical functionality and usage of these Supabase authentication-related features."
  },
  {
    "chunk_id": "c3986c03-4699-437c-8d05-205d1db32679",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nReturns a list of identities linked to the user\\\n\\\n`     _10  const { data, error } = await supabase.auth.getUserIdentities()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLink an identity to a user\\\n--------------------------\\\n\\\nLinks an oauth identity to an existing user. This method supports the PKCE flow.\\\n\\\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth)\\\n    .\\\n*   The user needs to be signed in to call `linkIdentity()`.\\\n*   If the candidate identity is already linked to the existing user or another user, `linkIdentity()` will fail.\\\n*   If `linkIdentity` is run in the browser, the user is automatically redirected to the returned URL. On the server, you should handle the redirect.\\\n\\",
    "summary": "The provided content describes the \"getUserIdentities()\" and \"linkIdentity()\" methods in the Supabase authentication API. The \"getUserIdentities()\" method returns a list of identities linked to the user, while the \"linkIdentity()\" method allows linking an OAuth identity to an existing user account, subject to certain conditions such as the \"Enable Manual Linking\" option being enabled and the user being signed in."
  },
  {
    "chunk_id": "4c14fb6f-35a0-46dc-b3e4-34e271d7ade2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithOAuthCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a method that returns a list of identities linked to the user, and another method that links an identity to a user. Both methods return a Promise with a Union type and require OAuth credentials for authentication."
  },
  {
    "chunk_id": "4d64758c-083c-46fb-9db7-6eb24c9fbe6e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nLink an identity to a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.linkIdentity({  _10  provider: 'github'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUnlink an identity from a user\\\n------------------------------\\\n\\\nUnlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\\\n\\\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth)\\\n    .\\\n*   The user needs to be signed in to call `unlinkIdentity()`.\\\n*   The user must have at least 2 identities in order to unlink an identity.\\\n*   The identity to be unlinked must belong to the user.\\\n\\",
    "summary": "This documentation provides details on linking and unlinking identities (e.g. GitHub) to a user account using the Supabase auth API. Linking an identity allows the user to sign in with that provider, while unlinking removes the association, requiring the user to have at least 2 identities to perform the unlink operation. Key requirements are that the \"Enable Manual Linking\" option is enabled and the user must be signed in to unlink an identity."
  },
  {
    "chunk_id": "bbdfb4e8-0100-4fd9-8730-8e7fdb21b78a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   identityRequiredUserIdentity\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides a method to link an identity to a user's account, which can be useful for authentication or user management purposes. It takes an `identityRequiredUserIdentity` parameter and returns a Promise that resolves with the linked identity data or an error."
  },
  {
    "chunk_id": "8af86d96-7e8f-4da4-8b50-079e32dedc6f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUnlink an identity\\\n\\\n`     _10  // retrieve all identites linked to a user  _10  const identities = await supabase.auth.getUserIdentities()  _10  _10  // find the google identity  _10  const googleIdentity = identities.find(  _10  identity => identity.provider === 'google'  _10  )  _10  _10  // unlink the google identity  _10  const { error } = await supabase.auth.unlinkIdentity(googleIdentity)      `\\\n\\\n* * *\\\n\\\nSend a password reauthentication nonce\\\n--------------------------------------\\\n\\\nSends a reauthentication OTP to the user's email or phone number. Requires the user to be signed-in.\\\n\\\n*   This method is used together with `updateUser()` when a user's password needs to be updated.\\\n*   If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n*   A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\\\n*   This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\\\n\\",
    "summary": "The provided documentation describes two main functionalities:\n\n1. Unlinking an identity from a user account, which involves retrieving all identities linked to the user, finding the specific identity (e.g., Google), and then unlinking it.\n\n2. Sending a password reauthentication nonce, which is a necessary step when a user needs to update their password. This method sends an OTP to the user's email or phone number, and is required if the \"Secure password change\" option is enabled and the user hasn't signed in recently (within the last 24 hours)."
  },
  {
    "chunk_id": "64e70bb2-b152-4cd4-80b4-29241d2f38db",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSend reauthentication nonce\\\n\\\n`     _10  const { error } = await supabase.auth.reauthenticate()      `\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nResend an OTP\\\n-------------\\\n\\\nResends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\\\n\\\n*   Resends a signup confirmation, email change or phone change email to the user.\\\n*   Passwordless sign-ins can be resent by calling the `signInWithOtp()` method again.\\\n*   Password recovery emails can be resent by calling the `resetPasswordForEmail()` method again.\\\n*   This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\\\n*   You can specify a redirect url when you resend an email link using the `emailRedirectTo` option.\\\n\\",
    "summary": "This documentation describes the `reauthenticate()` method in the Supabase authentication API, which sends a reauthentication nonce to the client. It also covers the `resendOtp()` method, which can be used to resend a signup confirmation, email change, or phone change email or OTP to the user. The summary highlights the key functionality of these methods, including the ability to specify a redirect URL when resending an email."
  },
  {
    "chunk_id": "b5d054e9-91dd-408b-a8ce-7439f3ef92b1",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The given content describes a function that sends a reauthentication nonce, which is a security token used to verify the user's identity. The function returns a Promise that resolves with an error object, indicating the success or failure of the reauthentication process. This functionality is essential for maintaining user security and preventing unauthorized access to sensitive data or actions."
  },
  {
    "chunk_id": "4b37646b-219f-4f3d-917e-2917feea50e0",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\\\n\\\n`     _10  const { error } = await supabase.auth.resend({  _10  type: 'signup',  _10  email: 'email@example.com',  _10  options: {  _10  emailRedirectTo: 'https://example.com/welcome'  _10  }  _10  })      `\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nSet the session data\\\n--------------------\\\n\\\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\\\n\\\n*   This method sets the session using an `access_token` and `refresh_token`.\\\n*   If successful, a `SIGNED_IN` event is emitted.\\\n\\",
    "summary": "This section describes the `resend` method of the Supabase authentication API, which allows resending email/phone signup confirmations, email change confirmations, and phone change OTPs. It also explains the `setSession` method, which sets the current session data, handling session refreshes and token invalidation, and emitting a `SIGNED_IN` event upon successful session update."
  },
  {
    "chunk_id": "3241554a-03b4-4c98-82fd-1b1ccdac9cc6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   currentSessionRequiredobject\\\n    \\\n    The current session that minimally contains an access token and refresh token.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters and details for the `supabase.auth.setSession()` function, which allows setting the current session with an access token and refresh token. This function is used to manage user sessions and authentication in a web application."
  },
  {
    "chunk_id": "9fdd0419-af3f-436d-ba86-93124dbf36ad",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSet the session\\\n\\\n`     _10  const { data, error } = await supabase.auth.setSession({  _10  access_token,  _10  refresh_token  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nExchange an auth code for a session\\\n-----------------------------------\\\n\\\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\\\n\\\n*   Used when `flowType` is set to `pkce` in client options.\\\n\\",
    "summary": "The provided content describes two related functions in the Supabase client library:\n\n1. `setSession()`: This function allows setting the current session by providing an access token and refresh token. It returns a Promise with the response data and any errors.\n\n2. `auth.exchangeCodeForSession()`: This function is used to log in an existing user by exchanging an Auth Code obtained during the PKCE (Proof Key for Code Exchange) flow. It is typically used when the `flowType` in the client options is set to `pkce`."
  },
  {
    "chunk_id": "fdaf928a-b8cd-4a9a-b925-323864446fbf",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   authCodeRequiredstring\\\n    \\\n\\",
    "summary": "This function exchanges an auth code for a user session, returning a Promise with the session data or an error. The `authCodeRequired` parameter is a string that represents the auth code to be exchanged. This is a key step in the authentication flow, allowing users to log in and access protected resources."
  },
  {
    "chunk_id": "82309fd7-6384-4d62-b4f7-9c1afbfeede9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nExchange Auth Code\\\n\\\n`     _10  supabase.auth.exchangeCodeForSession('34e770dd-9ff9-416c-87fa-43b31d7ef225')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nStart auto-refresh session (non-browser)\\\n----------------------------------------\\\n\\\nStarts an auto-refresh process in the background. The session is checked every few seconds. Close to the time of expiration a process is started to refresh the session. If refreshing fails it will be retried for as long as necessary.\\\n\\\n*   Only useful in non-browser environments such as React Native or Electron.\\\n*   The Supabase Auth library automatically starts and stops proactively refreshing the session when a tab is focused or not.\\\n*   On non-browser platforms, such as mobile or desktop apps built with web technologies, the library is not able to effectively determine whether the application is _focused_ or not.\\\n*   To give this hint to the application, you should be calling this method when the app is in focus and calling `supabase.auth.stopAutoRefresh()` when it's out of focus.\\\n\\",
    "summary": "The documentation describes the `supabase.auth.exchangeCodeForSession()` method, which exchanges an authorization code for a session. It also explains the `supabase.auth.startAutoRefresh()` and `supabase.auth.stopAutoRefresh()` methods, which are used to automatically refresh the session in non-browser environments like React Native or Electron. The auto-refresh process checks the session's expiration and refreshes it before it expires, retrying if necessary."
  },
  {
    "chunk_id": "10077869-079f-48b7-b5c9-6c30f067438f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<void>\\\n\\\nStart and stop auto refresh in React Native\\\n\\\n`     _10  import { AppState } from 'react-native'  _10  _10  // make sure you register this only once!  _10  AppState.addEventListener('change', (state) => {  _10  if (state === 'active') {  _10  supabase.auth.startAutoRefresh()  _10  } else {  _10  supabase.auth.stopAutoRefresh()  _10  }  _10  })      `\\\n\\\n* * *\\\n\\\nStop auto-refresh session (non-browser)\\\n---------------------------------------\\\n\\\nStops an active auto refresh process running in the background (if any).\\\n\\\n*   Only useful in non-browser environments such as React Native or Electron.\\\n*   The Supabase Auth library automatically starts and stops proactively refreshing the session when a tab is focused or not.\\\n*   On non-browser platforms, such as mobile or desktop apps built with web technologies, the library is not able to effectively determine whether the application is _focused_ or not.\\\n*   When your application goes in the background or out of focus, call this method to stop the proactive refreshing of the session.\\\n\\",
    "summary": "This excerpt provides instructions for starting and stopping automatic session refresh in React Native applications using the Supabase Auth library. It explains that the library automatically handles session refreshing on browser-based platforms, but on non-browser platforms like mobile or desktop apps, the application must manually call `supabase.auth.stopAutoRefresh()` when the app goes out of focus to avoid unnecessary refreshing."
  },
  {
    "chunk_id": "c46731a5-7ef7-4448-82fc-6adec8bc041e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<void>\\\n\\\nStart and stop auto refresh in React Native\\\n\\\n`     _10  import { AppState } from 'react-native'  _10  _10  // make sure you register this only once!  _10  AppState.addEventListener('change', (state) => {  _10  if (state === 'active') {  _10  supabase.auth.startAutoRefresh()  _10  } else {  _10  supabase.auth.stopAutoRefresh()  _10  }  _10  })      `\\\n\\\n* * *\\\n\\\nAuth MFA\\\n--------\\\n\\\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\\\n\\\nCurrently, there is support for time-based one-time password (TOTP) and phone verification code as the 2nd factor. Recovery codes are not supported but users can enroll multiple factors, with an upper limit of 10.\\\n\\\nHaving a 2nd factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup factor.\\\n\\\n* * *\\\n\\\nEnroll a factor\\\n---------------\\\n\\\nStarts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new `unverified` factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it.\\\n\\\n*   Use `totp` or `phone` as the `factorType` and use the returned `id` to create a challenge.\\\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/javascript/auth-mfa-challenge)\\\n    .\\\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n    .\\\n*   To create and verify a TOTP challenge in a single step, see [`mfa.challengeAndVerify()`](/docs/reference/javascript/auth-mfa-challengeandverify)\\\n    .\\\n*   To generate a QR code for the `totp` secret in Next.js, you can do the following:\\\n\\\n`     _10  <Image src=\\{data.totp.qr_code\\} alt=\\{data.totp.uri\\} layout=\"fill\"></Image>      `\\\n\\\n*   The `challenge` and `verify` steps are separated when using Phone factors as the user will need time to receive and input the code obtained from the SMS in challenge.\\\n\\",
    "summary": "The provided code demonstrates how to start and stop auto-refresh in a React Native application using the `AppState` module. The document also covers the Supabase Auth MFA (Multi-Factor Authentication) feature, including methods for enrolling, challenging, and verifying TOTP and phone verification code factors. The MFA functionality allows users to add a second factor for recovery, reducing the attack surface and burden of managing recovery codes."
  },
  {
    "chunk_id": "49d68c42-55d4-4ef2-a716-b9ac3b3612de",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAEnrollParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters required for enrolling a time-based, one-time password (TOTP) factor or a Phone Factor in a system. It specifies the parameter types and details associated with this enrollment process, which is a critical security feature for multi-factor authentication."
  },
  {
    "chunk_id": "196a0964-1057-47a9-ac8e-0488d13d3e43",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nEnroll a time-based, one-time password (TOTP) factorEnroll a Phone Factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.enroll({  _10  factorType: 'totp',  _10  friendlyName: 'your_friendly_name'  _10  })  _10  _10  // Use the id to create a challenge.  _10  // The challenge can be verified by entering the code generated from the authenticator app.  _10  // The code will be generated upon scanning the qr_code or entering the secret into the authenticator app.  _10  const { id, type, totp: { qr_code, secret, uri }, friendly_name } = data  _10  const challenge = await supabase.auth.mfa.challenge({ factorId: id });      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a challenge\\\n------------------\\\n\\\nPrepares a challenge used to verify that a user has access to a MFA factor.\\\n\\\n*   An [enrolled factor](/docs/reference/javascript/auth-mfa-enroll)\\\n     is required before creating a challenge.\\\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n    .\\\n*   A phone factor sends a code to the user upon challenge. The channel defaults to `sms` unless otherwise specified.\\\n\\",
    "summary": "The documentation describes the process of enrolling a time-based, one-time password (TOTP) factor or a phone factor using the Supabase authentication API. It provides sample code to enroll the factor, obtain the necessary details (e.g., QR code, secret, URI), and create a challenge to verify the enrolled factor. This functionality is essential for implementing multi-factor authentication (MFA) in Supabase-based applications."
  },
  {
    "chunk_id": "1d9be0b8-c10a-4005-b8e0-52c1edef46c1",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAChallengeParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a function that creates a challenge for a multi-factor authentication (MFA) factor or a phone factor. The function takes in required parameters of type `MFAChallengeParams` and returns a Promise that resolves to a Union type, likely containing details about the created challenge."
  },
  {
    "chunk_id": "7c742aed-273a-4d62-87f2-882271c1c0de",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate a challenge for a factorCreate a challenge for a phone factorCreate a challenge for a phone factor (WhatsApp)\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.challenge({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nVerify a challenge\\\n------------------\\\n\\\nVerifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app.\\\n\\\n*   To verify a challenge, please [create a challenge](/docs/reference/javascript/auth-mfa-challenge)\\\n     first.\\\n\\",
    "summary": "The documentation describes two API methods: `challenge()` and `verify()` for multi-factor authentication (MFA). The `challenge()` method creates an MFA challenge for various factors (e.g., phone, WhatsApp), returning a promise with the challenge data. The `verify()` method verifies the user-provided code against the challenge, and it requires creating a challenge first."
  },
  {
    "chunk_id": "b4184b69-2498-4dc0-a870-54be7a7b8347",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAVerifyParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content summarizes a function that verifies a challenge for a factor, likely related to multi-factor authentication. It takes a `RequiredMFAVerifyParams` object as input and returns a Promise with a union of possible return types. The function is likely used to validate a user's identity by verifying a challenge, such as a one-time code or biometric data, as part of a secure authentication process."
  },
  {
    "chunk_id": "1656b101-bafb-4f30-8747-c52b0e60bd02",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nVerify a challenge for a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.verify({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  challengeId: '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  code: '123456'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate and verify a challenge\\\n-----------------------------\\\n\\\nHelper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app.\\\n\\\n*   Intended for use with only TOTP factors.\\\n*   An [enrolled factor](/docs/reference/javascript/auth-mfa-enroll)\\\n     is required before invoking `challengeAndVerify()`.\\\n*   Executes [`mfa.challenge()`](/docs/reference/javascript/auth-mfa-challenge)\\\n     and [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n     in a single step.\\\n\\",
    "summary": "The summary provides a concise overview of the functionality described in the documentation. It states that the method `challengeAndVerify()` is a helper function that creates a multi-factor authentication (MFA) challenge and immediately verifies it using a provided code, typically for use with TOTP factors. The method executes the `mfa.challenge()` and `mfa.verify()` functions in a single step, simplifying the process for the developer."
  },
  {
    "chunk_id": "60350388-a376-4ded-b6fb-0d05fbe7d8d3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAChallengeAndVerifyParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes a function that creates and verifies a multi-factor authentication (MFA) challenge. The function takes in `paramsRequiredMFAChallengeAndVerifyParams` as its parameter, which likely contains the necessary information to initiate and validate an MFA challenge. The return type is a Promise that resolves to a union of possible outcomes, allowing the caller to handle both successful and error cases."
  },
  {
    "chunk_id": "8b131ed4-e606-4d66-9efa-e4d7ea0bba84",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate and verify a challenge for a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.challengeAndVerify({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  code: '123456'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUnenroll a factor\\\n-----------------\\\n\\\nUnenroll removes a MFA factor. A user has to have an `aal2` authenticator level in order to unenroll a `verified` factor.\\\n\\",
    "summary": "The provided content describes two API methods related to multi-factor authentication (MFA) in a software system. The first method, `challengeAndVerify`, allows creating and verifying a challenge for an MFA factor. The second method, `unenrollParams`, enables unenrolling an MFA factor, which requires the user to have an `aal2` authenticator level for a `verified` factor."
  },
  {
    "chunk_id": "53aae426-36c4-48cb-a320-da747e6214f8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAUnenrollParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters and details for the `supabase.auth.mfa.unenroll()` function, which is used to unenroll a multi-factor authentication (MFA) factor. This function takes in `paramsRequiredMFAUnenrollParams` as its input and returns a Promise that resolves to a Union type representing the success or error state of the operation."
  },
  {
    "chunk_id": "6dd3482a-489f-47c0-9215-e6705e09ebec",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUnenroll a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.unenroll({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nGet Authenticator Assurance Level\\\n---------------------------------\\\n\\\nReturns the Authenticator Assurance Level (AAL) for the active session.\\\n\\\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\\\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP) or Phone factor.\\\n*   If the user has a verified factor, the `nextLevel` field will return `aal2`, else, it will return `aal1`.\\\n\\",
    "summary": "The documentation describes two main functionalities: 1) Unenrolling a multi-factor authentication (MFA) factor, which is done using the `supabase.auth.mfa.unenroll()` method, and 2) Retrieving the Authenticator Assurance Level (AAL) for the active session, which provides information about the level of authentication strength (aal1 or aal2). The AAL is an important measure of security, with aal2 indicating a higher level of authentication, such as with a time-based one-time password (TOTP) or phone factor."
  },
  {
    "chunk_id": "87bd289e-5a9b-4979-9053-a261f71344d4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the AAL details of a session\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()  _10  const { currentLevel, nextLevel, currentAuthenticationMethods } = data      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nAuth Admin\\\n----------\\\n\\\n*   Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\\\n*   These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\\\n\\\nCreate server-side auth client\\\n\\\n`     _11  import { createClient } from '@supabase/supabase-js'  _11  _11  const supabase = createClient(supabase_url, service_role_key, {  _11  auth: {  _11  autoRefreshToken: false,  _11  persistSession: false  _11  }  _11  })  _11  _11  // Access auth admin api  _11  const adminAuthClient = supabase.auth.admin      `\\\n\\\n* * *\\\n\\\nRetrieve a user\\\n---------------\\\n\\\nGet user by id.\\\n\\\n*   Fetches the user object from the database based on the user's id.\\\n*   The `getUserById()` method requires the user's id which maps to the `auth.users.id` column.\\\n\\",
    "summary": "The content provides an overview of the Supabase authentication API, specifically detailing how to unenroll a multi-factor authentication (MFA) factor, retrieve the current authentication assurance level, and access the admin-level API for managing user accounts. It highlights the importance of using the admin API on a trusted server-side environment and provides sample code for creating a server-side auth client and retrieving a user by their ID."
  },
  {
    "chunk_id": "19c75079-b0db-459d-90d0-82c4f2d0c930",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   uidRequiredstring\\\n    \\\n    The user's unique identifier\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n\\",
    "summary": "This function fetches the AAL (Adaptive Access Level) details of a session given a user's unique identifier (uid). It is designed to be called on a server, as it requires the service_role key which should not be exposed in the browser. The function returns a Promise that resolves to an object containing the requested data or any errors that occurred."
  },
  {
    "chunk_id": "cde00e98-fccd-4688-8c53-f9d40b0ed025",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nFetch the user object using the access\\_token jwt\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.getUserById(1)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all users\\\n--------------\\\n\\\nGet a list of users.\\\n\\\n*   Defaults to return 50 users per page.\\\n\\",
    "summary": "The function returns a Promise that resolves to a user object, fetched using the provided access_token JWT. It also provides a method to list all users, with support for pagination to control the number of users per page."
  },
  {
    "chunk_id": "d9087752-2d0e-4689-9e47-9cf7954cb8ce",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsOptionalPageParams\\\n    \\\n    An object which supports `page` and `perPage` as numbers, to alter the paginated results.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content summarizes the parameters for a function that fetches a paginated list of users. The function accepts an optional `PageParams` object with `page` and `perPage` properties, which can be used to control the pagination of the returned user data."
  },
  {
    "chunk_id": "00f837d9-66d5-43b1-8137-4e16ec07db98",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet a page of usersPaginated list of users\\\n\\\n`     _10  const { data: { users }, error } = await supabase.auth.admin.listUsers()      `\\\n\\\n* * *\\\n\\\nCreate a user\\\n-------------\\\n\\\nCreates a new user. This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n\\\n*   To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\\\n*   `createUser()` will not send a confirmation email to the user. You can use [`inviteUserByEmail()`](/docs/reference/javascript/auth-admin-inviteuserbyemail)\\\n     if you want to send them an email invite instead.\\\n*   If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\\\n\\",
    "summary": "This section covers the admin functionality of the Supabase authentication API. It includes details on how to retrieve a paginated list of users, as well as how to create a new user. The create user function can be used to confirm the user's email or phone number, and it should only be called on the server, not in the browser."
  },
  {
    "chunk_id": "8168a8e3-854f-4d35-abb8-637febe8b855",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   attributesRequiredAdminUserAttributes\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary covers the \"attributesRequiredAdminUserAttributes\" parameter, which is part of a function that retrieves a paginated list of users. This parameter specifies the required user attributes that should be included in the response, allowing for customization of the user data returned."
  },
  {
    "chunk_id": "bd6a6879-a71c-4613-ae7f-63e8fa7f5b92",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.createUser({  _10  email: 'user@email.com',  _10  password: 'password',  _10  user_metadata: { name: 'Yoda' }  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a user\\\n-------------\\\n\\\nDelete a user. Requires a `service_role` key.\\\n\\\n*   The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.\\\n\\",
    "summary": "The documentation describes the `supabase.auth.admin.createUser()` method, which creates a new user with custom metadata and auto-confirms their email and phone number. It also covers the `supabase.auth.admin.deleteUser()` method, which requires the user's ID to delete the user and can only be called with a `service_role` key."
  },
  {
    "chunk_id": "42497493-94c8-4611-af30-9c1861cf03fb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The user id you want to remove.\\\n    \\\n*   shouldSoftDeleteRequiredboolean\\\n    \\\n    If true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n\\",
    "summary": "This code snippet provides a function to remove a user from the Supabase authentication system. The function takes two parameters: `id` (the ID of the user to be removed) and `shouldSoftDelete` (a boolean indicating whether to soft-delete the user, preserving their data but disabling their account). The function returns a Promise that resolves to the result of the user deletion operation. This function should only be called on a server and not exposed to the client, as it uses the Supabase service role key."
  },
  {
    "chunk_id": "683010f5-fd42-4ffb-856f-85515d90d4af",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRemoves a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.deleteUser(  _10  '715ed5db-f090-4b8c-a067-640ecee36aa0'  _10  )      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSend an email invite link\\\n-------------------------\\\n\\\nSends an invite link to an email address.\\\n\\\n*   Sends an invite link to the user's email address.\\\n*   The `inviteUserByEmail()` method is typically used by administrators to invite users to join the application.\\\n*   Note that PKCE is not supported when using `inviteUserByEmail`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\\\n\\",
    "summary": "The documentation describes two key functions in the Supabase auth API: `deleteUser()`, which removes a user by their ID, and `inviteUserByEmail()`, which sends an email invite link to a user. The `deleteUser()` function takes a user ID and a boolean flag to soft-delete the user, while the `inviteUserByEmail()` function sends an invite link to the specified email address, typically used by administrators to invite new users to the application."
  },
  {
    "chunk_id": "0d7b9f35-9345-4397-b9f8-809937bb1141",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   emailRequiredstring\\\n    \\\n    The email address of the user.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Additional options to be included when inviting.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content summarizes the parameters and details for the Supabase authentication API function to invite a user. The function takes an email address and an optional options object as parameters, and returns a promise that resolves to the user invitation data or an error. This functionality allows administrators to invite new users to the Supabase platform programmatically."
  },
  {
    "chunk_id": "802e87f5-e513-47b6-a00c-433abc8b2b71",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nInvite a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.inviteUserByEmail('email@example.com')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nGenerate an email link\\\n----------------------\\\n\\\nGenerates email links and OTPs to be sent via a custom email provider.\\\n\\\n*   The following types can be passed into `generateLink()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\\\n*   `generateLink()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n*   `generateLink()` handles the creation of the user for `signup`, `invite` and `magiclink`.\\\n\\",
    "summary": "The documentation describes the `inviteUserByEmail()` function in the Supabase Auth Admin API, which generates email links and one-time passwords for various authentication flows like signup, password recovery, and email change. It also explains the different types of links that can be generated and the specific behavior for the `email_change_email` type."
  },
  {
    "chunk_id": "49c7373d-e946-4a9d-9f17-22de24ef74a4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredGenerateLinkParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters required for generating various types of links, including signup links, invite links, magic links, and recovery links. The function returns a Promise that resolves to a Union type, likely containing the generated link or an error. This functionality is useful for implementing user authentication and account management flows in a web application."
  },
  {
    "chunk_id": "8a5fe961-cc01-45dd-aad0-6951c9e6c97a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.generateLink({  _10  type: 'signup',  _10  email: 'email@example.com',  _10  password: 'secret'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a user\\\n-------------\\\n\\\nUpdates the user data.\\\n\\",
    "summary": "This section provides methods to generate various types of authentication links, including signup, invite, magic, and recovery links. It also describes the `supabase.auth.admin.generateLink()` function, which takes an object with parameters like `type`, `email`, and `password` to generate the desired link. Additionally, the section covers the `supabase.auth.admin.updateUser()` function, which allows updating a user's data."
  },
  {
    "chunk_id": "88009d72-08ca-46bb-b96a-246d5e1bff79",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   uidRequiredstring\\\n    \\\n*   attributesRequiredAdminUserAttributes\\\n    \\\n    The data you want to update.\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This function updates a user's attributes, such as email, password, and metadata, by taking in a required `uid` parameter and an `attributes` object. It is intended to be used on a server-side implementation, as it should not expose the `service_role` key in the browser. The function returns a Promise that resolves the updated user data."
  },
  {
    "chunk_id": "b54dc6ef-93c3-4790-aab5-6c6660bd0788",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\\\n\\\n`     _10  const { data: user, error } = await supabase.auth.admin.updateUserById(  _10  '11111111-1111-1111-1111-111111111111',  _10  { email: 'new@email.com' }  _10  )      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a factor for a user\\\n--------------------------\\\n\\\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\\\n\\",
    "summary": "The provided content covers two main sections: 1) Updates a user's email, password, metadata, app_metadata, and confirms email/phone number, 2) Deletes a factor for a user, which will log the user out of all active sessions if the deleted factor was verified. The key technical points are the various user data that can be updated, and the ability to delete a user's authentication factor."
  },
  {
    "chunk_id": "fe4139fb-d98a-4c04-bb14-eaa8e2bb7185",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredAuthMFAAdminDeleteFactorParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This API endpoint deletes a multi-factor authentication (MFA) factor for a user. The `paramsRequiredAuthMFAAdminDeleteFactorParams` object is required as a parameter, which likely contains the necessary information to identify the factor to be deleted. This functionality is typically used to manage a user's MFA settings, such as removing an outdated or unused factor."
  },
  {
    "chunk_id": "bcbfdaf7-5f85-46a1-bef0-cbc52cf5ff9a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete a factor for a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.mfa.deleteFactor({  _10  id: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  userId: 'a89baba7-b1b7-440f-b4bb-91026967f66b',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nInvokes a Supabase Edge Function.\\\n---------------------------------\\\n\\\nInvokes a function\\\n\\\nInvoke a Supabase Edge Function.\\\n\\\n*   Requires an Authorization header.\\\n*   Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\\\n     spec.\\\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialize it and attach the `Content-Type` header as `application/json`. You can override this behavior by passing in a `Content-Type` header of your own.\\\n*   Responses are automatically parsed as `json`, `blob` and `form-data` depending on the `Content-Type` header sent by your function. Responses are parsed as `text` by default.\\\n\\",
    "summary": "This documentation describes how to delete a multi-factor authentication (MFA) factor for a user via the Supabase Auth Admin API. It provides an example code snippet demonstrating the API call to delete the factor, and outlines the general functionality of the Supabase Edge Functions, including how they handle requests and responses."
  },
  {
    "chunk_id": "a22571ee-f667-47e1-8431-1cb4452db035",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   functionNameRequiredstring\\\n    \\\n    The name of the Function to invoke.\\\n    \\\n*   optionsRequiredFunctionInvokeOptions\\\n    \\\n    Options for invoking the Function.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This documentation describes the parameters for invoking a Function in a software application. The key parameters are the function name, which is a required string, and the FunctionInvokeOptions, which are the options for invoking the Function. This information is important for developers who need to dynamically call Functions within their application."
  },
  {
    "chunk_id": "89e80f1a-d1ae-4755-8fec-3ca2ec5d2fd3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nBasic invocationError handlingPassing custom headersCalling with DELETE HTTP verbInvoking a Function in the UsEast1 regionCalling with GET HTTP verb\\\n\\\n`     _10  const { data, error } = await supabase.functions.invoke('hello', {  _10  body: { foo: 'bar' }  _10  })      `\\\n\\\n* * *\\\n\\\nSubscribe to channel\\\n--------------------\\\n\\\nCreates an event handler that listens to changes.\\\n\\\n*   By default, Broadcast and Presence are enabled for all projects.\\\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\\\n    .\\\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\\\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\\\n\\",
    "summary": "The documentation describes the parameters and usage of the `supabase.functions.invoke()` method, which allows invoking a serverless function. It also covers subscribing to events using the `subscribe()` method, which enables listening to database changes with configurable options like accessing previous data and handling row-level security."
  },
  {
    "chunk_id": "94807cc5-c71b-4e1d-a0e2-b951efcfeff9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   typeRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n*   filterRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n*   callbackRequiredfunction\\\n    \\\n    Details\\\n    \\\n\\\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\\\n\\\n`     _13  const channel = supabase.channel(\"room1\")  _13  _13  channel.on(\"broadcast\", { event: \"cursor-pos\" }, (payload) => {  _13  console.log(\"Cursor position received!\", payload);  _13  }).subscribe((status) => {  _13  if (status === \"SUBSCRIBED\") {  _13  channel.send({  _13  type: \"broadcast\",  _13  event: \"cursor-pos\",  _13  payload: { x: Math.random(), y: Math.random() },  _13  });  _13  }  _13  });      `\\\n\\\n* * *\\\n\\\nUnsubscribe from a channel\\\n--------------------------\\\n\\\nUnsubscribes and removes Realtime channel from Realtime client.\\\n\\\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\\\n\\",
    "summary": "The provided content describes various Realtime channel parameters, including type, filter, and callback, which are used to listen to different types of database changes, such as broadcasts, presence sync/join/leave, and row-level updates. It also covers how to unsubscribe from a Realtime channel to maintain performance and reduce resource usage on the Supabase service."
  },
  {
    "chunk_id": "f655eb08-d08b-4ac9-a01d-c2f19588c70d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   channelRequired@supabase/realtime-js.RealtimeChannel\\\n    \\\n    The name of the Realtime channel.\\\n    \\\n\\",
    "summary": "The parameters section describes the `channel` parameter, which is a required `RealtimeChannel` object representing the Realtime channel to be removed. This method removes the specified channel from the Realtime connection."
  },
  {
    "chunk_id": "e1196664-bb9e-45f1-b0bb-e8f02bab4d8f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRemoves a channel\\\n\\\n`     _10  supabase.removeChannel(myChannel)      `\\\n\\\n* * *\\\n\\\nUnsubscribe from all channels\\\n-----------------------------\\\n\\\nUnsubscribes and removes all Realtime channels from Realtime client.\\\n\\\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\\\n\\",
    "summary": "The summary provides two key technical points:\n\n1. The `supabase.removeChannel()` method removes a specified Realtime channel, while `supabase.removeAllChannels()` unsubscribes and removes all Realtime channels from the Realtime client. \n\n2. Removing unused Realtime channels is recommended to maintain the performance of the Realtime service and the database, as excessive subscriptions can cause degradation."
  },
  {
    "chunk_id": "9ccf806e-f84e-4219-972d-ed773c969faa",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Array<Union: expand to see options>>\\\n\\\nDetails\\\n\\\nRemove all channels\\\n\\\n`     _10  supabase.removeAllChannels()      `\\\n\\\n* * *\\\n\\\nRetrieve all channels\\\n---------------------\\\n\\\nReturns all Realtime channels.\\\n\\",
    "summary": "The documentation describes two main functions: `removeAllChannels()` which removes all Realtime channels, and `getChannels()` which returns an array of all active Realtime channels. Both functions are part of the Supabase library and return a Promise or an Array, respectively, allowing developers to manage and retrieve the state of their Realtime channels programmatically."
  },
  {
    "chunk_id": "0026d183-bbe8-41be-9a88-4e01218a60f5",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nArray<@supabase/realtime-js.RealtimeChannel>\\\n\\\nGet all channels\\\n\\\n`     _10  const channels = supabase.getChannels()      `\\\n\\\n* * *\\\n\\\nBroadcast a message\\\n-------------------\\\n\\\nSends a message into the channel.\\\n\\\nBroadcast a message to all connected clients to a channel.\\\n\\\n*   When using REST you don't need to subscribe to the channel\\\n*   REST calls are only available from 2.37.0 onwards\\\n\\",
    "summary": "The summary provides information about getting all channels, broadcasting messages to connected clients, and using REST calls to interact with channels. It highlights that REST calls are only available from version 2.37.0 onwards, and that when using REST, there is no need to subscribe to the channel."
  },
  {
    "chunk_id": "9acfab8b-87ea-41b8-9215-4fdbbbb2a6a6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   argsRequiredobject\\\n    \\\n    Arguments to send to channel\\\n    \\\n    Details\\\n    \\\n*   optsRequired{ \\[key: string\\]: any }\\\n    \\\n    Options to be used during the send process\\\n    \\\n\\",
    "summary": "The summary covers the parameters and options for sending a message via a Supabase channel. The `args` parameter is required and contains the arguments to be sent to the channel, while the `opts` parameter is also required and allows for additional options to be specified during the send process."
  },
  {
    "chunk_id": "5c7a8cf4-ff0e-4de8-b229-79e1636c4605",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSend a message via websocketSend a message via REST\\\n\\\n`     _11  supabase  _11  .channel('room1')  _11  .subscribe((status) => {  _11  if (status === 'SUBSCRIBED') {  _11  channel.send({  _11  type: 'broadcast',  _11  event: 'cursor-pos',  _11  payload: { x: Math.random(), y: Math.random() },  _11  })  _11  }  _11  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a bucket\\\n---------------\\\n\\\nCreates a new Storage bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `insert`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "This section describes a WebSocket channel for sending real-time messages, as well as the process for creating a new Storage bucket. The WebSocket channel allows subscribing to a \"room1\" channel and broadcasting cursor position updates. To create a Storage bucket, the required parameters are an ID and an options object, and the user must have the necessary permissions in the `buckets` and `objects` tables."
  },
  {
    "chunk_id": "15ff7c23-d8f8-4949-abc9-4cadb402f683",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    A unique identifier for the bucket you are creating.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on creating a bucket in Supabase storage. It requires a unique identifier string for the bucket, as well as an options object specifying the details of the bucket creation process. This functionality allows users to manage their storage resources within the Supabase platform."
  },
  {
    "chunk_id": "31a220f5-4114-4fd2-8e81-3fec88c55706",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .createBucket('avatars', {  _10  public: false,  _10  allowedMimeTypes: ['image/png'],  _10  fileSizeLimit: 1024  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a bucket\\\n-----------------\\\n\\\nRetrieves the details of an existing Storage bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "This documentation covers the creation and retrieval of Storage buckets in a Supabase application. It provides details on the `createBucket` function, including required parameters and response structure. It also describes how to retrieve an existing bucket, noting the necessary permissions in the `buckets` and `objects` tables. The summary highlights the key technical points, such as the function syntax, the required parameters, and the access control considerations."
  },
  {
    "chunk_id": "b8e909c1-4070-487d-a479-35410868f361",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to retrieve.\\\n    \\\n\\",
    "summary": "The provided content describes the parameters for retrieving a specific bucket using the Supabase storage API. The primary parameter is `id`, which is a required string representing the unique identifier of the bucket to be retrieved. This functionality allows users to access and manage specific storage buckets within the Supabase platform."
  },
  {
    "chunk_id": "e4b831d1-2782-4e7a-a22f-c3fafcbfeb49",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .getBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all buckets\\\n----------------\\\n\\\nRetrieves the details of all Storage buckets within an existing project.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided content describes how to retrieve details of a storage bucket and list all available buckets in a Supabase project. The `getBucket()` method retrieves a specific bucket, while the list operation retrieves details of all buckets within the project. Both operations require appropriate role-based access control (RLS) permissions on the `buckets` and `objects` tables."
  },
  {
    "chunk_id": "c833dc0e-f77d-4c18-8551-091ae26f71cf",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nList buckets\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .listBuckets()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a bucket\\\n---------------\\\n\\\nUpdates a Storage bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select` and `update`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The summary provides details on listing and updating storage buckets in Supabase. It explains the required return type, details for listing buckets, and the process for updating a bucket, including the necessary permissions. The key points are the ability to list and update storage buckets, and the security requirements around access control for these operations."
  },
  {
    "chunk_id": "9cbf8b28-8792-4771-8107-5ac309eb9c0a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    A unique identifier for the bucket you are updating.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This API call updates a storage bucket in Supabase, taking in a required `id` parameter as a unique identifier for the bucket, and an optional `options` object specifying the update details. The return type is a Promise that resolves to a Union type, likely containing the updated bucket data and any potential errors."
  },
  {
    "chunk_id": "98dc8f3d-552c-4907-b362-e687d16fde94",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .updateBucket('avatars', {  _10  public: false,  _10  allowedMimeTypes: ['image/png'],  _10  fileSizeLimit: 1024  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a bucket\\\n---------------\\\n\\\nDeletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select` and `delete`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two related operations for working with Supabase storage buckets: updating a bucket's properties (e.g. public visibility, allowed mime types, file size limit) and deleting a bucket. Deleting a bucket requires the user to have the necessary permissions on the `buckets` and `objects` tables, and the bucket must be empty before it can be deleted."
  },
  {
    "chunk_id": "91d50008-0d75-40e8-8634-cfea8609b180",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to delete.\\\n    \\\n\\",
    "summary": "This function deletes a bucket from the Supabase storage service. It takes a required `id` parameter, which is the unique identifier of the bucket to be deleted. The function returns a Promise that resolves to the result of the delete operation or an error if the operation fails."
  },
  {
    "chunk_id": "c6801390-1d88-4e56-89b1-c995832efcf5",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .deleteBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nEmpty a bucket\\\n--------------\\\n\\\nRemoves all objects inside a single bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: `select` and `delete`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two methods for working with Supabase storage buckets: deleting a bucket and emptying a bucket. Deleting a bucket permanently removes it, while emptying a bucket removes all objects inside it. Both operations require specific permissions, which are detailed in the \"Access Control\" section of the Storage guide."
  },
  {
    "chunk_id": "f6696ed5-dbd5-44b1-a89e-2bf108962ba3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to empty.\\\n    \\\n\\",
    "summary": "The documentation describes a function to empty a bucket in a storage service. It takes a required `id` parameter, which is the unique identifier of the bucket to be emptied. The function returns a Promise that resolves to the result of the operation."
  },
  {
    "chunk_id": "73b044b0-3aae-4713-aab3-b860451592c9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nEmpty bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .emptyBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpload a file\\\n-------------\\\n\\\nUploads a file to an existing bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: only `insert` when you are uploading new files and `select`, `insert` and `update` when you are upserting files\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n*   For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Upload file using `ArrayBuffer` from base64 file data instead, see example below.\\\n\\",
    "summary": "The documentation provides information on how to empty a bucket and upload a file to an existing bucket using the Supabase storage API. It explains the required parameters, the response format, and the necessary access control policies for file uploads. Key points include using the `emptyBucket()` function, and for React Native, uploading files using `ArrayBuffer` from base64 file data rather than `Blob`, `File`, or `FormData`."
  },
  {
    "chunk_id": "65dd9f9b-91f4-4834-ae93-adc169b4a944",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\\\n    \\\n*   fileBodyRequiredFileBody\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary of the provided content is as follows:\n\nThe function uploads a file to a specified path in a Supabase storage bucket, taking in three parameters: `path` (the file path including the name), `fileBody` (the file contents), and optional `fileOptions`. It returns a Promise that resolves with the upload result. This functionality allows users to store files in a Supabase storage bucket programmatically."
  },
  {
    "chunk_id": "63f01258-fbdf-4088-8bfd-d585b8d1752e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpload fileUpload file using \\`ArrayBuffer\\` from base64 file data\\\n\\\n`     _10  const avatarFile = event.target.files[0]  _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .upload('public/avatar1.png', avatarFile, {  _10  cacheControl: '3600',  _10  upsert: false  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDownload a file\\\n---------------\\\n\\\nDownloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided content describes the functionality to upload and download files using the Supabase storage service. The upload process involves uploading an `ArrayBuffer` from base64 file data, while the download process requires the file path and supports private and public buckets with specific access control permissions. The summary highlights the key technical aspects of these file management operations."
  },
  {
    "chunk_id": "307bf249-262c-4e36-8a3b-3082f8ecf33f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The full path and file name of the file to be downloaded. For example `folder/image.png`.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function takes a file path and optional transformation options, and returns a Promise that downloads the file with the specified transformations. The file path is a required string parameter that specifies the full path and filename of the file to be downloaded, while the options parameter is an optional object that can be used to configure the download process."
  },
  {
    "chunk_id": "e9bf9124-8bc8-462a-aa2f-57b0b1e8038f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDownload fileDownload file with transformations\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .download('folder/avatar1.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all files in a bucket\\\n--------------------------\\\n\\\nLists all the files within a bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes the `download` function in the Supabase storage API, which allows downloading a file with optional transformations. It also covers the `list` function, which lists all files in a storage bucket. The key technical points include the required parameters, the Promise-based response, and the necessary permissions for accessing and listing the files."
  },
  {
    "chunk_id": "4dee4098-0d34-495e-8427-0df27538b38e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathOptionalstring\\\n    \\\n    The folder path.\\\n    \\\n*   optionsOptionalSearchOptions\\\n    \\\n    Details\\\n    \\\n*   parametersOptionalFetchParameters\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This API method allows downloading a file with transformations. It takes optional parameters for the folder path, search options, and fetch parameters. The method returns a Promise that resolves to the downloaded file data or an error."
  },
  {
    "chunk_id": "abbdf1d5-29bd-4353-8550-37ede3c3cf8a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nList files in a bucketSearch files in a bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .list('folder', {  _10  limit: 100,  _10  offset: 0,  _10  sortBy: { column: 'name', order: 'asc' },  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nReplace an existing file\\\n------------------------\\\n\\\nReplaces an existing file at the specified path with a new one.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `update` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n*   For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Update file using `ArrayBuffer` from base64 file data instead, see example below.\\\n\\",
    "summary": "Summary:\n\nThe documentation describes the `list()` method for retrieving a list of files in a Supabase storage bucket, as well as the `replace()` method for updating an existing file. It outlines the required permissions for the `replace()` operation and provides guidance on using `ArrayBuffer` for file updates in React Native applications."
  },
  {
    "chunk_id": "12eb5e89-5517-4fc3-ac46-216814d288c8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\\\n    \\\n*   fileBodyRequiredUnion: expand to see options\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n    Details\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This function updates a file in a specified bucket by providing the relative file path and the file content as an `ArrayBuffer` or a base64-encoded string. The file options parameter allows for additional configuration, such as setting metadata or access control. This functionality enables users to efficiently update the contents of files stored in a cloud storage bucket."
  },
  {
    "chunk_id": "669563e3-c8e3-4c81-b1ab-e7a9fb297b05",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate fileUpdate file using \\`ArrayBuffer\\` from base64 file data\\\n\\\n`     _10  const avatarFile = event.target.files[0]  _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .update('public/avatar1.png', avatarFile, {  _10  cacheControl: '3600',  _10  upsert: true  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMove an existing file\\\n---------------------\\\n\\\nMoves an existing file to a new path in the same bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `update` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documented functionality provides a method to update a file using an `ArrayBuffer` from base64 file data, as well as a method to move an existing file to a new path within the same bucket. The move operation requires specific permissions on the `buckets` and `objects` tables, as outlined in the Storage access control guide."
  },
  {
    "chunk_id": "885bd18d-9469-463e-941b-57a9c58e9c29",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromPathRequiredstring\\\n    \\\n    The original file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   toPathRequiredstring\\\n    \\\n    The new file path, including the new file name. For example `folder/image-new.png`.\\\n    \\\n\\",
    "summary": "This method allows moving a file within the Supabase storage by specifying the original file path and the new file path. It returns a Promise that resolves with the updated file information or an error if the operation fails. The key parameters are `fromPath` (the original file path) and `toPath` (the new file path)."
  },
  {
    "chunk_id": "2713803e-e69b-4f1a-80ea-755c6710d0a6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nMove file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .move('public/avatar1.png', 'private/avatar2.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCopy an existing file\\\n---------------------\\\n\\\nCopies an existing file to a new path in the same bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `insert` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes the `move` method in the Supabase storage API, which allows moving an existing file to a new path within the same bucket. It also outlines the required permissions for the `buckets` and `objects` tables, and refers to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "e377c86e-dbe6-4b21-a8a6-cfdc8bef3a95",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromPathRequiredstring\\\n    \\\n    The original file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   toPathRequiredstring\\\n    \\\n    The new file path, including the new file name. For example `folder/image-copy.png`.\\\n    \\\n\\",
    "summary": "This function allows moving a file from one location to another within the Supabase storage. It takes two required parameters: `fromPath` specifying the original file path, and `toPath` specifying the new file path. The function returns a Promise that resolves to the updated file data or an error."
  },
  {
    "chunk_id": "f9116dec-7dac-4bfb-88dc-fa2e2ac6b52d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCopy file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .copy('public/avatar1.png', 'private/avatar2.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete files in a bucket\\\n------------------------\\\n\\\nDeletes files within the same bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `delete` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided content covers two main functionalities:\n\n1. Copying a file within the same Supabase storage bucket, with examples illustrating the use of the `supabase.storage.from('bucket').copy()` method.\n\n2. Deleting files within a Supabase storage bucket, which requires specific permissions on the `buckets` and `objects` tables, as detailed in the Supabase storage access control guide."
  },
  {
    "chunk_id": "c08d829b-2cde-41b3-bbd1-a3c340b37d8d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathsRequiredArray<string>\\\n    \\\n    An array of files to delete, including the path and file name. For example \\[`'folder/image.png'`\\].\\\n    \\\n\\",
    "summary": "This section describes the API to delete one or more files from the Supabase storage. The `pathsRequiredArray` parameter is an array of file paths and names that should be deleted. The function returns a Promise that resolves with the result of the delete operation."
  },
  {
    "chunk_id": "06296094-1900-422d-86d1-ce9a83e73117",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .remove(['folder/avatar1.png'])      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a signed URL\\\n-------------------\\\n\\\nCreates a signed URL. Use a signed URL to share a file for a fixed amount of time.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two main functionalities:\n\n1. Deleting a file by providing an array of file paths using the `supabase.storage.from('avatars').remove()` method.\n2. Creating a signed URL to share a file for a fixed amount of time, which requires specific permissions in the `buckets` and `objects` tables. This is covered in the Storage guide on access control."
  },
  {
    "chunk_id": "d9f2d7af-47c1-4461-83b4-6f8c4051398e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   expiresInRequirednumber\\\n    \\\n    The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary is a detailed description of the parameters required for deleting a file using the Supabase storage API. It includes information about the required `path` parameter, which specifies the file path, the required `expiresIn` parameter, which sets the expiration time for the signed URL, and the optional `options` parameter, which can be used to configure additional settings."
  },
  {
    "chunk_id": "4962b794-a542-4a35-ac7e-413a1342624f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed URLCreate a signed URL for an asset with transformationsCreate a signed URL which triggers the download of the asset\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUrl('folder/avatar1.png', 60)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate signed URLs\\\n------------------\\\n\\\nCreates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The code snippet demonstrates how to create a signed URL for an asset using the Supabase storage API. The signed URL allows for the download of the asset and can be configured with a time-based expiration. The key technical points are the use of the `createSignedUrl()` method and the required permissions for the `objects` table to allow `select` access."
  },
  {
    "chunk_id": "674ed005-d2f3-45d7-9506-4562e3705748",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathsRequiredArray<string>\\\n    \\\n    The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\\\n    \\\n*   expiresInRequirednumber\\\n    \\\n    The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides a method to create signed URLs for file downloads, allowing time-limited access to assets with optional transformations. It takes an array of file paths, an expiration time in seconds, and an optional object for configuration details. This feature enables secure, temporary access to specific files and supports use cases such as content delivery and download protection."
  },
  {
    "chunk_id": "84d71ea1-9548-4b30-b65e-d3e9e90175f2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed URLs\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUrls(['folder/avatar1.png', 'folder/avatar2.png'], 60)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate signed upload URL\\\n------------------------\\\n\\\nCreates a signed upload URL. Signed upload URLs can be used to upload files to the bucket without further authentication. They are valid for 2 hours.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `insert`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes the `createSignedUrls` function from the Supabase storage API, which generates signed URLs for a list of file paths. These signed URLs can be used to upload files to the specified Supabase storage bucket without further authentication, but they are only valid for 2 hours. The function requires the `insert` permission on the `objects` table, as per the Supabase storage access control policy."
  },
  {
    "chunk_id": "e6452a54-1cc4-4ec6-b2b6-ae8ef74c277f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the current file name. For example `folder/image.png`.\\\n    \\\n\\",
    "summary": "The provided content describes the \"createSignedUrl\" function in the Supabase library, which generates a temporary signed URL for uploading files to cloud storage. The function takes a required \"path\" parameter, which specifies the file path and name, and returns a Promise that resolves to the signed URL or an error. This functionality allows secure, authenticated file uploads without exposing the underlying storage credentials."
  },
  {
    "chunk_id": "e2de8d3b-2cbf-4856-a988-81370a7f64c9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed Upload URL\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUploadUrl('folder/cat.jpg')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpload to a signed URL\\\n----------------------\\\n\\\nUpload a file with a token generated from `createSignedUploadUrl`.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation outlines the `createSignedUploadUrl` function, which generates a signed URL to upload a file to the Supabase storage service. The signed URL allows for secure, authorized file uploads without requiring direct control over the underlying storage infrastructure. The summary also notes the required permissions for the RLS (Row Level Security) policy to enable this functionality."
  },
  {
    "chunk_id": "8e6111a3-6f18-4187-bd0a-1183733f0b14",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\\\n    \\\n*   tokenRequiredstring\\\n    \\\n    The token generated from `createSignedUploadUrl`\\\n    \\\n*   fileBodyRequiredFileBody\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section provides details on uploading a file to a signed URL. The required parameters include the file path, the token generated from `createSignedUploadUrl`, and the file body. The file options parameter is optional. This functionality allows users to securely upload files to a specified bucket without directly managing the underlying storage infrastructure."
  },
  {
    "chunk_id": "a012571c-e28b-45f6-96b0-6dc6e18d5b5a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpload to a signed URL\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .uploadToSignedUrl('folder/cat.jpg', 'token-from-createSignedUploadUrl', file)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve public URL\\\n-------------------\\\n\\\nA simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\\\n\\\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket)\\\n     or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\\\n    , clicking the overflow menu on a bucket and choosing \"Make public\"\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "This documentation describes a function to upload files to a signed URL in Supabase storage, and a convenience function to retrieve the public URL of an asset in a public bucket. Key points include: the required parameters for the upload function, the need to make the bucket public, and the access control permissions required. The public URL function allows constructing the URL without verifying if the bucket is public, which could lead to issues if the bucket is not actually public."
  },
  {
    "chunk_id": "aeb012bf-634f-47f5-9674-82e031990c27",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The path and name of the file to generate the public URL for. For example `folder/image.png`.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function generates a public URL for an asset stored in a public bucket. It takes two parameters: `path`, which is the required file path and name, and `options`, an optional object that can be used to apply transformations to the asset. The function returns an object containing the generated public URL."
  },
  {
    "chunk_id": "885cd5f6-3cd0-41df-aac5-787be5d1656a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nobject\\\n\\\nDetails\\\n\\\nReturns the URL for an asset in a public bucketReturns the URL for an asset in a public bucket with transformationsReturns the URL which triggers the download of an asset in a public bucket\\\n\\\n`     _10  const { data } = supabase  _10  .storage  _10  .from('public-bucket')  _10  .getPublicUrl('folder/avatar1.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRelease Notes\\\n-------------\\\n\\\nSupabase.js v2 release notes.\\\n\\\nInstall the latest version of @supabase/supabase-js\\\n\\\nTerminal\\\n\\\n`     _10  npm install @supabase/supabase-js      `\\\n\\",
    "summary": "The `getPublicUrl()` method in the Supabase storage client returns a publicly accessible URL for an asset in a specified public bucket, with optional transformations. It can be used to generate download URLs for assets. To use the latest version of the Supabase.js library, users should install `@supabase/supabase-js` via the npm package manager."
  },
  {
    "chunk_id": "61aed502-57a4-470c-8dee-5aa1729e4a93",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Explicit constructor options[#](#explicit-constructor-options)\\\n\\\nAll client specific options within the constructor are keyed to the library.\\\n\\\nSee [PR](https://github.com/supabase/supabase-js/pull/458)\\\n:\\\n\\\n`     _19  const supabase = createClient(apiURL, apiKey, {  _19  db: {  _19  schema: 'public',  _19  },  _19  auth: {  _19  storage: AsyncStorage,  _19  autoRefreshToken: true,  _19  persistSession: true,  _19  detectSessionInUrl: true,  _19  },  _19  realtime: {  _19  channels,  _19  endpoint,  _19  },  _19  global: {  _19  fetch: customFetch,  _19  headers: DEFAULT_HEADERS,  _19  },  _19  })      `\\\n\\",
    "summary": "The documentation describes how to create a Supabase client with explicit configuration options, including settings for the database schema, authentication, real-time channels, and global options like custom fetch and default headers. This provides fine-grained control over the client's behavior to better suit the application's requirements."
  },
  {
    "chunk_id": "35f8dd68-970b-4a1d-8f44-6396b210b8e2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "TypeScript support[#](#typescript-support)\\\n\\\nThe libraries now support typescript.\\\n\\\nv1.0\\\n\\\n``     _10  // previously definitions were injected in the `from()` method  _10  supabase.from<Definitions['Message']>('messages').select('\\*')      ``\\\n\\\n* * *\\\n\\\nv2.0\\\n\\\n``     _10  import type { Database } from './DatabaseDefinitions'  _10  _10  // definitions are injected in `createClient()`  _10  const supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)  _10  _10  const { data } = await supabase.from('messages').select().match({ id: 1 })      ``\\\n\\\nTypes can be generated via the CLI:\\\n\\\nTerminal\\\n\\\n`     _10  supabase start  _10  supabase gen types typescript --local > DatabaseDefinitions.ts      `\\\n\\",
    "summary": "The libraries now support TypeScript, allowing for improved type safety and better integration with TypeScript projects. The TypeScript support has evolved from injecting definitions in the `from()` method (v1.0) to defining a `Database` type that is used when creating the Supabase client (v2.0). Developers can also generate type definitions for their database schema using the Supabase CLI."
  },
  {
    "chunk_id": "1d663ceb-e21d-483f-9a23-06c655232740",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Data operations return minimal[#](#data-operations-return-minimal)\\\n\\\n`.insert()` / `.upsert()` / `.update()` / `.delete()` don't return rows by default: [PR](https://github.com/supabase/postgrest-js/pull/276)\\\n.\\\n\\\nPreviously, these methods return inserted/updated/deleted rows by default (which caused [some confusion](https://github.com/supabase/supabase/discussions/1548)\\\n), and you can opt to not return it by specifying `returning: 'minimal'`. Now the default behavior is to not return rows. To return inserted/updated/deleted rows, add a `.select()` call at the end, e.g.:\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('my_table')  _10  .delete()  _10  .eq('id', 1)  _10  .select()      `\\\n\\",
    "summary": "The libraries now support TypeScript. The default behavior of `.insert()`, `.upsert()`, `.update()`, and `.delete()` methods has been changed to not return rows by default, reducing confusion. To retrieve the inserted/updated/deleted rows, a separate `.select()` call needs to be added at the end of the chain."
  },
  {
    "chunk_id": "3c214732-8bef-4e31-91a6-715a0d5118e4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "New ordering defaults[#](#new-ordering-defaults)\\\n\\\n`.order()` now defaults to Postgres\u2019s default: [PR](https://github.com/supabase/postgrest-js/pull/283)\\\n.\\\n\\\nPreviously `nullsFirst` defaults to `false` , meaning `null`s are ordered last. This is bad for performance if e.g. the column uses an index with `NULLS FIRST` (which is the default direction for indexes).\\\n\\",
    "summary": "The Supabase PostgREST.js library has changed the default ordering behavior for `.order()` calls to match Postgres's default, which is to order nulls last. This is more performant if the column being ordered has an index with `NULLS FIRST` (the default index direction). Previously, the default was to order nulls first, which could negatively impact performance."
  },
  {
    "chunk_id": "0010f53d-5d89-4628-9507-c91c583e301a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Cookies and localstorage namespace[#](#cookies-and-localstorage-namespace)\\\n\\\nStorage key name in the Auth library has changed to include project reference which means that existing websites that had their JWT expiry set to a longer time could find their users logged out with this upgrade.\\\n\\\n``     _10  const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`      ``\\\n\\",
    "summary": "The storage key name in the Auth library has been changed to include the project reference, which means that existing websites with longer JWT expiry settings may encounter user logouts after the upgrade. The new default storage key format is `sb-{hostname_without_tld}-auth-token`, which is designed to avoid potential conflicts between different projects using the same Auth library."
  },
  {
    "chunk_id": "cda53a60-249c-4f34-8446-49667e12a41b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "New Auth Types[#](#new-auth-types)\\\n\\\nTypescript typings have been reworked. `Session` interface now guarantees that it will always have an `access_token`, `refresh_token` and `user`\\\n\\\n./types.ts\\\n\\\n`     _10  interface Session {  _10  provider_token?: string | null  _10  access_token: string  _10  expires_in?: number  _10  expires_at?: number  _10  refresh_token: string  _10  token_type: string  _10  user: User  _10  }      `\\\n\\",
    "summary": "The Typescript typings for the `Session` interface in the Auth library have been reworked, ensuring that it now consistently includes an `access_token`, `refresh_token`, and `user` property. This change guarantees that the `Session` object will always contain the necessary authentication information, simplifying usage and improving the overall robustness of the library."
  },
  {
    "chunk_id": "1a60d5de-3bd4-47f8-84fa-e634751db93b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "New Auth methods[#](#new-auth-methods)\\\n\\\nWe're removing the `signIn()` method in favor of more explicit function signatures: `signInWithPassword()`, `signInWithOtp()`, and `signInWithOAuth()`.\\\n\\\nv1.0\\\n\\\n`     _10  const { data } = await supabase.auth.signIn({  _10  email: 'hello@example',  _10  password: 'pass',  _10  })      `\\\n\\\n* * *\\\n\\\nv2.0\\\n\\\n`     _10  const { data } = await supabase.auth.signInWithPassword({  _10  email: 'hello@example',  _10  password: 'pass',  _10  })      `\\\n\\",
    "summary": "The documentation describes changes to the Supabase authentication methods. The `signIn()` method is being replaced with more explicit function signatures, such as `signInWithPassword()`, `signInWithOtp()`, and `signInWithOAuth()`. This change simplifies the authentication workflow and provides better type safety for TypeScript users."
  },
  {
    "chunk_id": "3e25131a-6e9b-402a-b9c9-fb57f63e42c3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "New Realtime methods[#](#new-realtime-methods)\\\n\\\nThere is a new `channel()` method in the Realtime library, which will be used for our Multiplayer updates.\\\n\\\nWe will deprecate the `.from().on().subscribe()` method previously used for listening to postgres changes.\\\n\\\n`     _21  supabase  _21  .channel('any_string_you_want')  _21  .on('presence', { event: 'track' }, (payload) => {  _21  console.log(payload)  _21  })  _21  .subscribe()  _21  _21  supabase  _21  .channel('any_string_you_want')  _21  .on(  _21  'postgres_changes',  _21  {  _21  event: 'INSERT',  _21  schema: 'public',  _21  table: 'movies',  _21  },  _21  (payload) => {  _21  console.log(payload)  _21  }  _21  )  _21  .subscribe()      `\\\n\\",
    "summary": "The documentation introduces a new `channel()` method in the Realtime library for Multiplayer updates, which will replace the previous `.from().on().subscribe()` method used for listening to Postgres changes. It provides examples of using the `channel()` method to track presence events and listen for changes in the `movies` table in the `public` schema."
  },
  {
    "chunk_id": "b3061b1f-eaaa-4d01-8ba1-fda531be4363",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "Deprecated setAuth()[#](#deprecated-setauth)\\\n\\\nDeprecated and removed `setAuth()` . To set a custom `access_token` jwt instead, pass the custom header into the `createClient()` method provided: ([PR](https://github.com/supabase/gotrue-js/pull/340)\\\n)\\\n\\",
    "summary": "The `setAuth()` method in the Supabase Realtime library has been deprecated. To set a custom `access_token` JWT, users should instead pass the custom header into the `createClient()` method provided, as outlined in the referenced pull request."
  },
  {
    "chunk_id": "8d64ddbb-23f9-4719-af5e-2e8e26b1a00b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-signup",
    "main_heading": "No Heading",
    "content": "All changes[#](#all-changes)\\\n\\\n*   `supabase-js`\\\n    *   `shouldThrowOnError` has been removed until all the client libraries support this option ([PR](https://github.com/supabase/supabase-js/pull/490)\\\n        ).\\\n*   `postgrest-js`\\\n    *   TypeScript typings have been reworked [PR](https://github.com/supabase/postgrest-js/pull/279)\\\n        \\\n    *   Use `undefined` instead of `null` for function params, types, etc. ([https://github.com/supabase/postgrest-js/pull/278](https://github.com/supabase/postgrest-js/pull/278)\\\n        )\\\n    *   Some features are now obsolete: ([https://github.com/supabase/postgrest-js/pull/275](https://github.com/supabase/postgrest-js/pull/275)\\\n        )\\\n        *   filter shorthands (e.g. `cs` vs. `contains`)\\\n        *   `body` in response (vs. `data`)\\\n        *   `upsert`ing through the `.insert()` method\\\n        *   `auth` method on `PostgrestClient`\\\n        *   client-level `throwOnError`\\\n*   `gotrue-js`\\\n    *   `supabase-js` client allows passing a `storageKey` param which will allow the user to set the key used in local storage for storing the session. By default, this will be namespace-d with the supabase project ref. ([PR](https://github.com/supabase/supabase-js/pull/460)\\\n        )\\\n    *   `signIn` method is now split into `signInWithPassword` , `signInWithOtp` , `signInWithOAuth` ([PR](https://github.com/supabase/gotrue-js/pull/304)\\\n        )\\\n    *   Deprecated and removed `session()` , `user()` in favour of using `getSession()` instead. `getSession()` will always return a valid session if a user is already logged in, meaning no more random logouts. ([PR](https://github.com/supabase/gotrue-js/pull/299)\\\n        )\\\n    *   Deprecated and removed setting for `multitab` support because `getSession()` and gotrue\u2019s reuse interval setting takes care of session management across multiple tabs ([PR](https://github.com/supabase/gotrue-js/pull/366)\\\n        )\\\n    *   No more throwing of random errors, gotrue-js v2 always returns a custom error type: ([PR](https://github.com/supabase/gotrue-js/pull/341)\\\n        )\\\n        *   `AuthSessionMissingError`\\\n            *   Indicates that a session is expected but missing\\\n        *   `AuthNoCookieError`\\\n            *   Indicates that a cookie is expected but missing\\\n        *   `AuthInvalidCredentialsError`\\\n            *   Indicates that the incorrect credentials were passed\\\n    *   Renamed the `api` namespace to `admin` , the `admin` namespace will only contain methods that should only be used in a trusted server-side environment with the service role key\\\n    *   Moved `resetPasswordForEmail` , `getUser` and `updateUser` to the `GoTrueClient` which means they will be accessible from the `supabase.auth` namespace in `supabase-js` instead of having to do `supabase.auth.api` to access them\\\n    *   Removed `sendMobileOTP` , `sendMagicLinkEmail` in favor of `signInWithOtp`\\\n    *   Removed `signInWithEmail`, `signInWithPhone` in favor of `signInWithPassword`\\\n    *   Removed `signUpWithEmail` , `signUpWithPhone` in favor of `signUp`\\\n    *   Replaced `update` with `updateUser`\\\n*   `storage-js`\\\n    *   Return types are more strict. Functions types used to indicate that the data returned could be null even if there was no error. We now make use of union types which only mark the data as null if there is an error and vice versa. ([PR](https://github.com/supabase/storage-js/pull/60)\\\n        )\\\n    *   The `upload` and `update` function returns the path of the object uploaded as the `path` parameter. Previously the returned value had the bucket name prepended to the path which made it harder to pass the value on to other storage-js methods since all methods take the bucket name and path separately. We also chose to call the returned value `path` instead of `Key` ([PR](https://github.com/supabase/storage-js/pull/75)\\\n        )\\\n    *   `getPublicURL` only returns the public URL inside the data object. This keeps it consistent with our other methods of returning only within the data object. No error is returned since this method cannot does not throw an error ([PR](https://github.com/supabase/storage-js/pull/93)\\\n        )\\\n    *   signed urls are returned as `signedUrl` instead of `signedURL` in both `createSignedUrl` and `createSignedUrls` ([PR](https://github.com/supabase/storage-js/pull/94)\\\n        )\\\n    *   Encodes URLs returned by `createSignedUrl`, `createSignedUrls` and `getPublicUrl` ([PR](https://github.com/supabase/storage-js/pull/86)\\\n        )\\\n    *   `createsignedUrl` used to return a url directly and and within the data object. This was inconsistent. Now we always return values only inside the data object across all methods. ([PR](https://github.com/supabase/storage-js/pull/88)\\\n        )\\\n    *   `createBucket` returns a data object instead of the name of the bucket directly. ([PR](https://github.com/supabase/storage-js/pull/89)\\\n        )\\\n    *   Fixed types for metadata ([PR](https://github.com/supabase/storage-js/pull/90)\\\n        )\\\n    *   Better error types make it easier to track down what went wrong quicker.\\\n    *   `SupabaseStorageClient` is no longer exported. Use `StorageClient` instead. ([PR](https://github.com/supabase/storage-js/pull/92)\\\n        ).\\\n*   `realtime-js`\\\n    *   `RealtimeSubscription` class no longer exists and replaced by `RealtimeChannel`.\\\n    *   `RealtimeClient`'s `disconnect` method now returns type of `void` . It used to return type of `Promise<{ error: Error | null; data: boolean }`.\\\n    *   Removed `removeAllSubscriptions` and `removeSubscription` methods from `SupabaseClient` class.\\\n    *   Removed `SupabaseRealtimeClient` class.\\\n    *   Removed `SupabaseQueryBuilder` class.\\\n    *   Removed `SupabaseEventTypes` type.\\\n        *   Thinking about renaming this to something like `RealtimePostgresChangeEvents` and moving it to `realtime-js` v2.\\\n    *   Removed `.from(\u2019table\u2019).on(\u2019INSERT\u2019, () \u21d2 {}).subscribe()` in favor of new Realtime client API.\\\n*   `functions-js`\\\n    *   supabase-js v1 only threw an error if the fetch call itself threw an error (network errors, etc) and not if the function returned HTTP errors like 400s or 500s. We have changed this behaviour to return an error if your function throws an error.\\\n    *   We have introduced new error types to distinguish between different kinds of errors. A `FunctionsHttpError` error is returned if your function throws an error, `FunctionsRelayError` if the Supabase Relay has an error processing your function and `FunctionsFetchError` if there is a network error in calling your function.\\\n    *   The correct content-type headers are automatically attached when sending the request if you don\u2019t pass in a `Content-Type` header and pass in an argument to your function. We automatically attach the content type for `Blob`, `ArrayBuffer`, `File`, `FormData` ,`String` . If it doesn\u2019t match any of these we assume the payload is `json` , we serialise the payload as JSON and attach the content type as `application/json`.\\\n    *   `responseType` does not need to be explicitly passed in. We parse the response based on the `Content-Type` response header sent by the function. We support parsing the responses as `text`, `json`, `blob`, `form-data` and are parsed as `text` by default.\\\n\\\n*   Need some help?\\\n    \\\n    [Contact support](https://supabase.com/support)\\\n    \\\n*   Latest product updates?\\\n    \\\n    [See Changelog](https://supabase.com/changelog)\\\n    \\\n*   Something's not right?\\\n    \\\n    [Check system status](https://status.supabase.com/)\\\n    \\\n\\\n* * *\\\n\\\n[\u00a9 Supabase Inc](https://supabase.com/)\\\n\u2014[Contributing](https://github.com/supabase/supabase/blob/master/apps/docs/DEVELOPERS.md)\\\n[Author Styleguide](https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md)\\\n[Open Source](https://supabase.com/open-source)\\\n[SupaSquad](https://supabase.com/supasquad)\\\nPrivacy Settings\\\n\\\n[GitHub](https://github.com/supabase/supabase)\\\n[Twitter](https://twitter.com/supabase)\\\n[Discord](https://discord.supabase.com/)",
    "summary": "The summary covers major changes across Supabase's client libraries, including the removal of deprecated features, improvements to type definitions, error handling, and API updates. Key changes include the deprecation of `setAuth()` in `supabase-js`, reworked TypeScript typings in `postgrest-js`, and the introduction of new error types in `functions-js`. The summary also highlights updates to the `gotrue-js` library, such as the split of the `signIn` method and the deprecation of several methods in favor of `getSession()`."
  },
  {
    "chunk_id": "130c412e-bbc0-4179-998e-2fa40ced1594",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\n*   [Start](/docs/guides/getting-started)\n    \n*   Products\n*   Build\n*   Reference\n*   Resources\n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\nSearch docs...\n\nK\n\nMain menu\n\nJavaScript\n\nv2.0\n\n*   [Introduction](/docs/reference/javascript/introduction)\n    \n*   [Installing](/docs/reference/javascript/installing)\n    \n*   [Initializing](/docs/reference/javascript/initializing)\n    \n*   [TypeScript support](/docs/reference/javascript/typescript-support)\n    \n*   * * *\n    \n    Database\n    \n    *   [Fetch data](/docs/reference/javascript/select)\n        \n    *   [Insert data](/docs/reference/javascript/insert)\n        \n    *   [Update data](/docs/reference/javascript/update)\n        \n    *   [Upsert data](/docs/reference/javascript/upsert)\n        \n    *   [Delete data](/docs/reference/javascript/delete)\n        \n    *   [Call a Postgres function](/docs/reference/javascript/rpc)\n        \n    *   Using filters\n        \n    *   Using modifiers\n        \n*   * * *\n    \n    Auth\n    \n    *   [Overview](/docs/reference/javascript/auth-api)\n        \n    *   [Error codes](/docs/reference/javascript/auth-error-codes)\n        \n    *   [Create a new user](/docs/reference/javascript/auth-signup)\n        \n    *   [Listen to auth events](/docs/reference/javascript/auth-onauthstatechange)\n        \n    *   [Create an anonymous user](/docs/reference/javascript/auth-signinanonymously)\n        \n    *   [Sign in a user](/docs/reference/javascript/auth-signinwithpassword)\n        \n    *   [Sign in with ID Token](/docs/reference/javascript/auth-signinwithidtoken)\n        \n    *   [Sign in a user through OTP](/docs/reference/javascript/auth-signinwithotp)\n        \n    *   [Sign in a user through OAuth](/docs/reference/javascript/auth-signinwithoauth)\n        \n    *   [Sign in a user through SSO](/docs/reference/javascript/auth-signinwithsso)\n        \n    *   [Sign out a user](/docs/reference/javascript/auth-signout)\n        \n    *   [Send a password reset request](/docs/reference/javascript/auth-resetpasswordforemail)\n        \n    *   [Verify and log in through OTP](/docs/reference/javascript/auth-verifyotp)\n        \n    *   [Retrieve a session](/docs/reference/javascript/auth-getsession)\n        \n    *   [Retrieve a new session](/docs/reference/javascript/auth-refreshsession)\n        \n    *   [Retrieve a user](/docs/reference/javascript/auth-getuser)\n        \n    *   [Update a user](/docs/reference/javascript/auth-updateuser)\n        \n    *   [Retrieve identities linked to a user](/docs/reference/javascript/auth-getuseridentities)\n        \n    *   [Link an identity to a user](/docs/reference/javascript/auth-linkidentity)\n        \n    *   [Unlink an identity from a user](/docs/reference/javascript/auth-unlinkidentity)\n        \n    *   [Send a password reauthentication nonce](/docs/reference/javascript/auth-reauthentication)\n        \n    *   [Resend an OTP](/docs/reference/javascript/auth-resend)\n        \n    *   [Set the session data](/docs/reference/javascript/auth-setsession)\n        \n    *   [Exchange an auth code for a session](/docs/reference/javascript/auth-exchangecodeforsession)\n        \n    *   [Start auto-refresh session (non-browser)](/docs/reference/javascript/auth-startautorefresh)\n        \n    *   [Stop auto-refresh session (non-browser)](/docs/reference/javascript/auth-stopautorefresh)\n        \n    *   Auth MFA\n        \n    *   Auth Admin\n        \n*   * * *\n    \n    Edge Functions\n    \n    *   [Invokes a Supabase Edge Function.](/docs/reference/javascript/functions-invoke)\n        \n*   * * *\n    \n    Realtime\n    \n    *   [Subscribe to channel](/docs/reference/javascript/subscribe)\n        \n    *   [Unsubscribe from a channel](/docs/reference/javascript/removechannel)\n        \n    *   [Unsubscribe from all channels](/docs/reference/javascript/removeallchannels)\n        \n    *   [Retrieve all channels](/docs/reference/javascript/getchannels)\n        \n    *   [Broadcast a message](/docs/reference/javascript/broadcastmessage)\n        \n*   * * *\n    \n    Storage\n    \n    *   [Create a bucket](/docs/reference/javascript/storage-createbucket)\n        \n    *   [Retrieve a bucket](/docs/reference/javascript/storage-getbucket)\n        \n    *   [List all buckets](/docs/reference/javascript/storage-listbuckets)\n        \n    *   [Update a bucket](/docs/reference/javascript/storage-updatebucket)\n        \n    *   [Delete a bucket](/docs/reference/javascript/storage-deletebucket)\n        \n    *   [Empty a bucket](/docs/reference/javascript/storage-emptybucket)\n        \n    *   [Upload a file](/docs/reference/javascript/storage-from-upload)\n        \n    *   [Download a file](/docs/reference/javascript/storage-from-download)\n        \n    *   [List all files in a bucket](/docs/reference/javascript/storage-from-list)\n        \n    *   [Replace an existing file](/docs/reference/javascript/storage-from-update)\n        \n    *   [Move an existing file](/docs/reference/javascript/storage-from-move)\n        \n    *   [Copy an existing file](/docs/reference/javascript/storage-from-copy)\n        \n    *   [Delete files in a bucket](/docs/reference/javascript/storage-from-remove)\n        \n    *   [Create a signed URL](/docs/reference/javascript/storage-from-createsignedurl)\n        \n    *   [Create signed URLs](/docs/reference/javascript/storage-from-createsignedurls)\n        \n    *   [Create signed upload URL](/docs/reference/javascript/storage-from-createsigneduploadurl)\n        \n    *   [Upload to a signed URL](/docs/reference/javascript/storage-from-uploadtosignedurl)\n        \n    *   [Retrieve public URL](/docs/reference/javascript/storage-from-getpublicurl)\n        \n*   * * *\n    \n    Misc\n    \n    *   [Release Notes](/docs/reference/javascript/release-notes)\n        \n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\n*   [Start](/docs/guides/getting-started)\n    \n*   Products\n*   Build\n*   Reference\n*   Resources\n\n[![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-dark.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)![Supabase wordmark](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fsupabase-light.svg&w=256&q=75&dpl=dpl_FamQvESN35BiTrVL2ZnRKQ5butin)DOCS](/docs)\n\nSearch docs...\n\nK\n\nJavascript Reference v2.0\n\nJavaScript Client Library\n=========================\n\n@supabase/supabase-js[View on GitHub](https://github.com/supabase/supabase-js)\n\nThis reference documents every object and method available in Supabase's isomorphic JavaScript library, `supabase-js`. You can use `supabase-js` to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\nInstalling\n----------",
    "summary": "The JavaScript client library `@supabase/supabase-js` can be installed via terminal using npm, yarn, or pnpm. This library provides a comprehensive set of APIs to interact with a Postgres database, manage user authentication, invoke Edge Functions, and handle file storage, all within an isomorphic JavaScript environment."
  },
  {
    "chunk_id": "1247dca3-1c86-4079-bc8e-106095afb409",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Install as package[#](#install-as-package)\n\nYou can install @supabase/supabase-js via the terminal.\n\nnpmYarnpnpm\n\nTerminal\n\n`     _10  npm install @supabase/supabase-js      `",
    "summary": "The document describes how to install the Supabase JavaScript client library (@supabase/supabase-js) via the terminal using npm, yarn, or pnpm package managers. This allows developers to integrate Supabase, an open-source Firebase alternative, into their web applications and access its features and services programmatically."
  },
  {
    "chunk_id": "57b8e27c-1586-4e8a-9e67-e293f88d836e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Install via CDN[#](#install-via-cdn)\n\nYou can install @supabase/supabase-js via CDN links.\n\n`     _10  <script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2\"></script>  _10  //or  _10  <script src=\"https://unpkg.com/@supabase/supabase-js@2\"></script>      `",
    "summary": "The documentation describes how to install the Supabase JavaScript library via CDN links. Users can include the library in their HTML pages by adding a `<script>` tag referencing the CDN URL. This allows developers to quickly integrate the Supabase client-side functionality into their web applications without the need for a package manager."
  },
  {
    "chunk_id": "af031b8a-3311-4e3b-9d9f-969b16f76e8a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Use at runtime in Deno[#](#use-at-runtime-in-deno)\n\nYou can use supabase-js in the Deno runtime via [JSR](https://jsr.io/@supabase/supabase-js)\n:\n\n`     _10  import { createClient } from 'jsr:@supabase/supabase-js@2'      `\n\n* * *\n\nInitializing\n------------\n\nCreate a new client for use in the browser.\n\nYou can initialize a new Supabase client using the `createClient()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.",
    "summary": "The supabase-js library can be used in the Deno runtime via the JSR platform. To initialize a new Supabase client, developers can use the `createClient()` method, which provides an entrypoint to the Supabase functionality and allows easy interaction with the Supabase ecosystem."
  },
  {
    "chunk_id": "9899919c-cf43-47ed-a75a-ccffdfb1bbc6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   supabaseUrlRequiredstring\n    \n    The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n    \n*   supabaseKeyRequiredstring\n    \n    The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n    \n*   optionsOptionalSupabaseClientOptions\n    \n    Details\n    \n\nCreating a clientWith a custom domainWith additional parametersWith custom schemasCustom fetch implementationReact Native options with AsyncStorageReact Native options with Expo SecureStore\n\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  _10  // Create a single supabase client for interacting with your database  _10  const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')      `\n\n* * *\n\nTypeScript support\n------------------\n\n`supabase-js` has TypeScript support for type inference, autocompletion, type-safe queries, and more.\n\nWith TypeScript, `supabase-js` detects things like `not null` constraints and [generated columns](https://www.postgresql.org/docs/current/ddl-generated-columns.html)\n. Nullable columns are typed as `T | null` when you select the column. Generated columns will show a type error when you insert to it.\n\n`supabase-js` also detects relationships between tables. A referenced table with one-to-many relationship is typed as `T[]`. Likewise, a referenced table with many-to-one relationship is typed as `T | null`.\n\nGenerating TypeScript Types[#](#generating-typescript-types)\n\n-------------------------------------------------------------\n\nYou can use the Supabase CLI to [generate the types](/docs/reference/cli/supabase-gen-types)\n. You can also generate the types [from the dashboard](https://supabase.com/dashboard/project/_/api?page=tables-intro)\n.\n\nTerminal\n\n`     _10  supabase gen types typescript --project-id abcdefghijklmnopqrst > database.types.ts      `\n\nThese types are generated from your database schema. Given a table `public.movies`, the generated types will look like:\n\n`     _10  create table public.movies (  _10  id bigint generated always as identity primary key,  _10  name text not null,  _10  data jsonb null  _10  );      `\n\n./database.types.ts\n\n``     _25  export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]  _25  _25  export interface Database {  _25  public: {  _25  Tables: {  _25  movies: {  _25  Row: { // the data expected from .select()  _25  id: number  _25  name: string  _25  data: Json | null  _25  }  _25  Insert: { // the data to be passed to .insert()  _25  id?: never // generated columns must not be supplied  _25  name: string // `not null` columns with no default must be supplied  _25  data?: Json | null // nullable columns can be omitted  _25  }  _25  Update: { // the data to be passed to .update()  _25  id?: never  _25  name?: string // `not null` columns are optional on .update()  _25  data?: Json | null  _25  }  _25  }  _25  }  _25  }  _25  }      ``\n\nUsing TypeScript type definitions[#](#using-typescript-type-definitions)\n\n-------------------------------------------------------------------------\n\nYou can supply the type definitions to `supabase-js` like so:\n\n./index.tsx\n\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  import { Database } from './database.types'  _10  _10  const supabase = createClient<Database>(  _10  process.env.SUPABASE_URL,  _10  process.env.SUPABASE_ANON_KEY  _10  )      `\n\nHelper types for Tables and Joins[#](#helper-types-for-tables-and-joins)\n\n-------------------------------------------------------------------------\n\nYou can use the following helper types to make the generated TypeScript types easier to use.\n\nSometimes the generated types are not what you expect. For example, a view's column may show up as nullable when you expect it to be `not null`. Using [type-fest](https://github.com/sindresorhus/type-fest)\n, you can override the types like so:\n\n./database-generated.types.ts\n\n`     _10  export type Json = // ...  _10  _10  export interface Database {  _10  // ...  _10  }      `\n\n./database.types.ts\n\n``     _20  import { MergeDeep } from 'type-fest'  _20  import { Database as DatabaseGenerated } from './database-generated.types'  _20  export { Json } from './database-generated.types'  _20  _20  // Override the type for a specific column in a view:  _20  export type Database = MergeDeep<  _20  DatabaseGenerated,  _20  {  _20  public: {  _20  Views: {  _20  movies_view: {  _20  Row: {  _20  // id is a primary key in public.movies, so it must be `not null`  _20  id: number  _20  }  _20  }  _20  }  _20  }  _20  }  _20  >      ``\n\nYou can also override the type of an individual successful response if needed:\n\n`     _10  const { data } = await supabase.from('countries').select().returns<MyType>()      `\n\nThe generated types provide shorthands for accessing tables and enums.\n\n./index.ts\n\n`     _10  import { Database, Tables, Enums } from \"./database.types.ts\";  _10  _10  // Before \ud83d\ude15  _10  let movie: Database['public']['Tables']['movies']['Row'] = // ...  _10  _10  // After \ud83d\ude0d  _10  let movie: Tables<'movies'>      `",
    "summary": "The supabase-js library provides a way to use Supabase in the Deno runtime. It offers TypeScript support, including type inference, autocompletion, and type-safe queries. The library can generate TypeScript types from the database schema, which can be used to enhance the development experience and ensure type safety. Additionally, it provides helper types to make the generated TypeScript types more user-friendly, allowing developers to override or extend the types as needed."
  },
  {
    "chunk_id": "2c32c6d6-7ff3-4f71-a82d-381d2f3cf73e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Response types for complex queries[#](#response-types-for-complex-queries)\n\n`supabase-js` always returns a `data` object (for success), and an `error` object (for unsuccessful requests).\n\nThese helper types provide the result types from any query, including nested types for database joins.\n\nGiven the following schema with a relation between cities and countries, we can get the nested `CountriesWithCities` type:\n\n`     _10  create table countries (  _10  \"id\" serial primary key,  _10  \"name\" text  _10  );  _10  _10  create table cities (  _10  \"id\" serial primary key,  _10  \"name\" text,  _10  \"country_id\" int references \"countries\"  _10  );      `\n\n``     _17  import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'  _17  _17  const countriesWithCitiesQuery = supabase  _17  .from(\"countries\")  _17  .select(`  _17  id,  _17  name,  _17  cities (  _17  id,  _17  name  _17  )  _17  `);  _17  type CountriesWithCities = QueryData<typeof countriesWithCitiesQuery>;  _17  _17  const { data, error } = await countriesWithCitiesQuery;  _17  if (error) throw error;  _17  const countriesWithCities: CountriesWithCities = data;      ``\n\n* * *\n\nFetch data\n----------\n\nPerform a SELECT query on the table or view.\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/javascript/using-filters)\n    \n*   `select()` can be combined with [Modifiers](/docs/reference/javascript/using-modifiers)\n    \n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\n     and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n    .",
    "summary": "The documentation describes the response types for complex queries in the `supabase-js` library, including the `QueryData` type for handling nested data structures. It also provides an example of fetching data from a database with a one-to-many relationship between countries and cities, demonstrating how to work with the resulting nested data. Additionally, it outlines the key considerations for performing `SELECT` queries, such as the default row limit, the use of filters and modifiers, and the need to avoid using the reserved keyword \"apikey\" as a column name."
  },
  {
    "chunk_id": "9fc5aea6-415e-4491-99be-249bd9c07bc3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnsOptionalQuery\n    \n    The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()      `\n\nData source\n\nResponse\n\n* * *\n\nInsert data\n-----------\n\nPerform an INSERT into the table or view.",
    "summary": "The summary covers the parameters for the `supabase-js` library's `select()` function. The key parameters are `columnsOptionalQuery` to specify the columns to retrieve, and `optionsRequiredobject` to provide named parameters. The summary also covers various querying capabilities such as selecting specific columns, querying referenced tables, and filtering through referenced tables."
  },
  {
    "chunk_id": "0219047f-1733-4abc-b1b6-ef8d29a3e647",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredUnion: expand to see options\n    \n    The values to insert. Pass an object to insert a single row or an array to insert multiple rows.\n    \n    Details\n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n\nCreate a recordCreate a record and return itBulk create\n\n`     _10  const { error } = await supabase  _10  .from('countries')  _10  .insert({ id: 1, name: 'Denmark' })      `\n\nData source\n\nResponse\n\n* * *\n\nUpdate data\n-----------\n\nPerform an UPDATE on the table or view.\n\n*   `update()` should always be combined with [Filters](/docs/reference/javascript/using-filters)\n     to target the item(s) you wish to update.",
    "summary": "The documentation covers the \"Update data\" section, which describes how to perform an UPDATE operation on a table or view using the Supabase client library. The key points are: 1) the `update()` method should be used in combination with filters to target the specific item(s) to be updated, and 2) examples are provided for updating a single record or performing a bulk update."
  },
  {
    "chunk_id": "aa41ce87-d205-4192-810e-d13300f6f3e4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredRow\n    \n    The values to update with\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nUpdating your dataUpdate a record and return itUpdating JSON data\n\n`     _10  const { error } = await supabase  _10  .from('countries')  _10  .update({ name: 'Australia' })  _10  .eq('id', 1)      `\n\nData source\n\nResponse\n\n* * *\n\nUpsert data\n-----------\n\nPerform an UPSERT on the table or view. Depending on the column(s) passed to `onConflict`, `.upsert()` allows you to perform the equivalent of `.insert()` if a row with the corresponding `onConflict` columns doesn't exist, or if it does exist, perform an alternative action depending on `ignoreDuplicates`.\n\n*   Primary keys must be included in `values` to use upsert.",
    "summary": "The documentation describes an update operation in a database, where you can update a record and return it. It also covers upsert functionality, which allows you to perform an insert if a row doesn't exist, or an alternative action if it does exist. The upsert operation requires primary keys to be included in the values."
  },
  {
    "chunk_id": "7cf94ef8-344b-4be2-94e5-db1f28b5b746",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   valuesRequiredUnion: expand to see options\n    \n    The values to upsert with. Pass an object to upsert a single row or an array to upsert multiple rows.\n    \n    Details\n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .upsert({ id: 1, name: 'Albania' })  _10  .select()      `\n\nData source\n\nResponse\n\n* * *\n\nDelete data\n-----------\n\nPerform a DELETE on the table or view.\n\n*   `delete()` should always be combined with [filters](/docs/reference/javascript/using-filters)\n     to target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\n     enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.",
    "summary": "The documentation covers the Upsert and Delete operations in Supabase. Upsert allows you to insert new records or update existing ones in bulk, specifying the values and options to use. Delete allows you to remove records from the database, with the ability to target specific rows using filters, and consideration for Row-Level Security (RLS) policies."
  },
  {
    "chunk_id": "5ba9b947-1d05-4c44-8454-4f0d664b1024",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nDelete a single recordDelete a record and return itDelete multiple records\n\n`     _10  const response = await supabase  _10  .from('countries')  _10  .delete()  _10  .eq('id', 1)      `\n\nData source\n\nResponse\n\n* * *\n\nCall a Postgres function\n------------------------\n\nPerform a function call.\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `\n\nTo call Postgres functions on [Read Replicas](/docs/guides/platform/read-replicas)\n, use the `get: true` option.",
    "summary": "The documentation covers two main topics: deleting records from a database table and calling Postgres functions. The first section explains how to delete a single record or multiple records from the 'countries' table using the Supabase client library. The second section demonstrates how to call a custom Postgres function named 'hello_world' and highlights the use of Postgres functions for tasks like password resets and updates, especially on read replicas."
  },
  {
    "chunk_id": "7c19d8bc-f1d5-4ca9-9b83-55e6dbcec15c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   fnRequiredFnName\n    \n    The function name to call\n    \n*   argsRequiredFn\\['Args'\\]\n    \n    The arguments to pass to the function call\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  const { data, error } = await supabase.rpc('hello_world')      `\n\nData source\n\nResponse\n\n* * *\n\nUsing filters\n-------------\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional ChainingFilter by values within a JSON columnFilter referenced tables\n\n`     _10  const { data, error } = await supabase  _10  .from('cities')  _10  .select('name, country_id')  _10  .eq('name', 'The Shire') // Correct  _10  _10  const { data, error } = await supabase  _10  .from('cities')  _10  .eq('name', 'The Shire') // Incorrect  _10  .select('name, country_id')      `\n\nNotes\n\n* * *\n\nColumn is equal to a value\n--------------------------\n\nMatch only rows where `column` is equal to `value`.",
    "summary": "The provided content summarizes the usage of Supabase's `rpc()` function to call Postgres functions, including parameters such as `fn`, `args`, and `options`. It also covers the use of filters in Supabase queries, including filtering by column values, applying conditional chaining, and filtering by JSON column values. The key technical points are the ability to call Postgres functions, both with and without arguments, and the flexibility of Supabase's filtering capabilities for various query types."
  },
  {
    "chunk_id": "fe3e4a2a-14a9-4111-a0b5-1c26f137f4d6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredNonNullable\n    \n    The value to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .eq('name', 'Albania')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is not equal to a value\n------------------------------\n\nMatch only rows where `column` is not equal to `value`.",
    "summary": "The documentation describes parameters for filtering data using the `select()` function in Supabase. The `columnRequiredUnion` parameter specifies the column to filter on, while the `valueRequiredNonNullable` parameter sets the value to filter with. The code example demonstrates how to use the `eq()` function to select rows where the column value is not equal to a specified value."
  },
  {
    "chunk_id": "a91af72a-6a6e-4923-983f-37cfd645f040",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .neq('name', 'Albania')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is greater than a value\n------------------------------\n\nMatch only rows where `column` is greater than `value`.",
    "summary": "Summary:\n\nThe documentation covers parameters for filtering data, including `columnRequiredUnion` to specify the column to filter on and `valueRequiredUnion` to provide the value to filter with. It also includes an example of using the `select()` function in Supabase to retrieve data, filtering for rows where the 'name' column is not equal to 'Albania'. The key technical points are the filtering parameters and the Supabase query syntax."
  },
  {
    "chunk_id": "ac60aaa8-888f-49ed-b850-70160b91a417",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .gt('id', 2)      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\nColumn is greater than or equal to a value\n------------------------------------------\n\nMatch only rows where `column` is greater than or equal to `value`.",
    "summary": "The summary covers the following key technical points:\n\nThe documentation describes two parameters for the `select()` function: `columnRequiredUnion` and `valueRequiredUnion`. `columnRequiredUnion` specifies the column to filter on, while `valueRequiredUnion` specifies the value to filter with. The documentation also provides an example usage of the `select()` function to filter rows where the `id` column is greater than 2."
  },
  {
    "chunk_id": "24a9c6d1-71f4-4bf3-8884-4711a4289ddc",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .gte('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is less than a value\n---------------------------\n\nMatch only rows where `column` is less than `value`.",
    "summary": "The provided content describes a set of parameters for filtering data in a database query. The key parameters include `columnRequiredUnion` for specifying the column to filter on, and `valueRequiredUnion` for providing the value to filter with. The summary also includes an example usage of the `select()` function to fetch data from a `countries` table, filtering rows where the `id` column is greater than or equal to 2."
  },
  {
    "chunk_id": "1ebd88f6-edbb-4488-901b-6dd375442b6c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .lt('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is less than or equal to a value\n---------------------------------------\n\nMatch only rows where `column` is less than or equal to `value`.",
    "summary": "The provided content describes the `select()` function in Supabase, which allows filtering data based on column values. Specifically, it explains the `columnRequiredUnion` and `valueRequiredUnion` parameters, which are used to specify the column to filter on and the value to filter with, respectively. The summary also highlights the `lt()` function, which filters rows where the specified column is less than or equal to the provided value."
  },
  {
    "chunk_id": "329c53a8-b915-43fe-887b-749f2c8e4a87",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .lte('id', 2)      `\n\nData source\n\nResponse\n\n* * *\n\nColumn matches a pattern\n------------------------\n\nMatch only rows where `column` matches `pattern` case-sensitively.",
    "summary": "The provided documentation summarizes the parameters for filtering data using the `select()` method in Supabase. The key parameters are `columnRequiredUnion` to specify the column to filter on, and `valueRequiredUnion` to provide the value to filter with. Additionally, it mentions the ability to filter rows where a column matches a specific pattern, using case-sensitive matching."
  },
  {
    "chunk_id": "6f87ad19-5dde-4627-80cf-1096f794c823",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   patternRequiredstring\n    \n    The pattern to match with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .like('name', '%Alba%')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn matches a case-insensitive pattern\n-----------------------------------------\n\nMatch only rows where `column` matches `pattern` case-insensitively.",
    "summary": "The summary of the provided content is as follows:\n\nThe documentation describes the `select()` function in Supabase, which allows filtering rows based on a case-insensitive pattern match on a specified column. The `columnRequiredUnion` parameter specifies the column to filter on, and the `patternRequiredstring` parameter defines the pattern to match. This functionality can be used to retrieve data from a Supabase table, such as filtering the \"countries\" table for rows where the \"name\" column contains \"Alba\"."
  },
  {
    "chunk_id": "afc1461a-1f54-455f-b49d-386569342772",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   patternRequiredstring\n    \n    The pattern to match with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .ilike('name', '%alba%')      `\n\nData source\n\nResponse\n\n* * *\n\nColumn is a value\n-----------------\n\nMatch only rows where `column` IS `value`.",
    "summary": "The summary describes the 'select()' function parameters, including the 'columnRequiredUnion' parameter to specify the column to filter on and the 'patternRequiredString' parameter to provide the pattern to match. It also provides an example of using the 'select()' function with the 'ilike()' filter to retrieve data from the 'countries' table where the 'name' column contains 'alba'. The key technical point is the ability to filter data based on specific column values and patterns."
  },
  {
    "chunk_id": "b3ad275c-4b28-4a50-8113-15bc4bd7f5b9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n\nChecking for nullness, true or false\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .is('name', null)      `\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\nColumn is in an array\n---------------------\n\nMatch only rows where `column` is included in the `values` array.",
    "summary": "The documentation describes two key parameters for filtering data: 'columnRequired' and 'valueRequired'. The 'columnRequired' parameter specifies the column to filter on, while the 'valueRequired' parameter defines the values to filter with. It also demonstrates how to use the 'is' function in Supabase to check for nullness, true or false in the data. Additionally, the documentation mentions that the 'column' parameter can be an array, allowing for filtering where the column value is included in the provided array of values."
  },
  {
    "chunk_id": "77916da8-8022-472a-8f11-e8be3b2ff1c4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n*   valuesRequiredArray<Row\\['ColumnName'\\]>\n    \n    The values array to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .in('name', ['Albania', 'Algeria'])      `\n\nData source\n\nResponse\n\n* * *\n\nColumn contains every element in a value\n----------------------------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.",
    "summary": "The documentation describes two parameters for a filtering operation: `columnRequiredUnion` and `valuesRequiredArray`. `columnRequiredUnion` specifies the column to filter on, which can be a jsonb, array, or range column. `valuesRequiredArray` provides the values to filter with. The summary also explains that the `in()` function can be used to filter the data source, selecting only the rows where the specified column contains every element in the provided values array."
  },
  {
    "chunk_id": "02bf37f2-d36f-49ff-973a-415bbdee8633",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The jsonb, array, or range column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The jsonb, array, or range value to filter with\n    \n    Details\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  const { data, error } = await supabase  _10  .from('issues')  _10  .select()  _10  .contains('tags', ['is:open', 'priority:low'])      `\n\nData source\n\nResponse\n\n* * *\n\nContained by value\n------------------\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.",
    "summary": "The provided content describes the parameters for filtering on jsonb, array, or range columns in a database query. The key parameters are `columnRequiredUnion` to specify the column to filter on, and `valueRequiredUnion` to provide the value to filter with. The summary covers the supported data types (jsonb, array, range) and provides an example usage of the `contains` function to filter on array columns."
  },
  {
    "chunk_id": "9b34d48c-a837-4513-9dfb-036c5a9da59c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The jsonb, array, or range column to filter on\n    \n    Details\n    \n*   valueRequiredUnion: expand to see options\n    \n    The jsonb, array, or range value to filter with\n    \n    Details\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  const { data, error } = await supabase  _10  .from('classes')  _10  .select('name')  _10  .containedBy('days', ['monday', 'tuesday', 'wednesday', 'friday'])      `\n\nData source\n\nResponse\n\n* * *\n\nGreater than a range\n--------------------\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.",
    "summary": "The provided documentation summary covers parameters for filtering data using Jsonb, array, or range columns. Key points include: 1) The `columnRequiredUnion` parameter specifies the column to filter on, which can be Jsonb, array, or range type. 2) The `valueRequiredUnion` parameter specifies the value to filter with, which must match the column type. 3) For range columns, the \"Greater than a range\" option allows filtering where every element in the column is greater than any element in the specified range."
  },
  {
    "chunk_id": "2c91115c-de2c-402b-8bc8-6ae3a23c5ece",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The range column to filter on\n    \n    Details\n    \n*   rangeRequiredstring\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeGt('during', '[2000-01-02 08:00, 2000-01-02 09:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nGreater than or equal to a range\\\n--------------------------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\\\n\\",
    "summary": "The documentation describes the use of the `rangeGt` function in the Supabase library to filter rows in a table based on a range column. The `columnRequiredUnion` parameter specifies the column to filter on, and the `rangeRequiredstring` parameter defines the range to filter with. The summary provides an example usage of the `rangeGt` function to select rows where the `during` column is greater than a specific date range."
  },
  {
    "chunk_id": "d608e820-880d-4b6d-aba2-6361eae9a6dd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeGte('during', '[2000-01-02 08:30, 2000-01-02 09:30)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nLess than a range\\\n-----------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\\\n\\",
    "summary": "The provided content outlines the parameters for the `select()` function in Supabase, specifically the `columnRequiredUnion` and `rangeRequired` parameters. It demonstrates how to use the `rangeGte()` function to filter data based on a date range, and also explains the \"Less than a range\" concept for filtering range columns, where only rows where every element in the column is less than any element in the range are matched."
  },
  {
    "chunk_id": "6616120c-eb79-4a5f-984d-e174472f7679",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeLt('during', '[2000-01-01 15:00, 2000-01-01 16:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nLess than or equal to a range\\\n-----------------------------\\\n\\\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or less than any element in `range`.\\\n\\",
    "summary": "The excerpt describes the `rangeGt` parameter in the Supabase database client, which filters the `reservations` table to only rows where the `during` column is less than or equal to the specified date range. This is useful for querying range-based data, such as date/time intervals, and can be used in conjunction with the `select()` function to retrieve the filtered data."
  },
  {
    "chunk_id": "06add3d4-1c47-45f6-be3c-2ff5ee48e4c3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeLte('during', '[2000-01-01 14:00, 2000-01-01 16:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nMutually exclusive to a range\\\n-----------------------------\\\n\\\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\\\n\\",
    "summary": "The provided content describes the `columnRequiredUnion` and `rangeRequired` parameters used with the `select()` function in the Supabase library. The `columnRequiredUnion` parameter specifies the range column to filter on, while the `rangeRequired` parameter defines the range to filter with. The content also discusses the use of the `rangeLte()` function to filter data based on a date range."
  },
  {
    "chunk_id": "1f1046b4-c03d-47bc-9b09-0f8366c1610c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The range column to filter on\\\n    \\\n    Details\\\n    \\\n*   rangeRequiredstring\\\n    \\\n    The range to filter with\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('reservations')  _10  .select()  _10  .rangeAdjacent('during', '[2000-01-01 12:00, 2000-01-01 13:00)')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nWith a common element\\\n---------------------\\\n\\\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\\\n\\",
    "summary": "This documentation describes the parameters for the `select()` function in a database querying tool. The key parameters are `columnRequired` (the column to filter on) and `rangeRequired` (the range to filter with). It also explains the `rangeAdjacent()` function, which can be used to filter rows where the column and value have a common element, particularly for array and range columns."
  },
  {
    "chunk_id": "654574e3-9a92-4064-a1ea-66725fbcaf75",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The array or range column to filter on\\\n    \\\n    Details\\\n    \\\n*   valueRequiredUnion: expand to see options\\\n    \\\n    The array or range value to filter with\\\n    \\\n    Details\\\n    \\\n\\\nOn array columnsOn range columns\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('issues')  _10  .select('title')  _10  .overlaps('tags', ['is:closed', 'severity:high'])      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch a string\\\n--------------\\\n\\\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\\\n\\\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\\\n    .\\\n\\",
    "summary": "The documentation provides details on the Supabase parameters for filtering data in a column, including `columnRequired` and `valueRequired` options for filtering array or range columns. It also covers matching a string in text or tsvector columns using full-text search, with a reference to the Postgres full-text search guide for more information."
  },
  {
    "chunk_id": "daf3cb5d-5f80-48e5-98a3-b19571689c03",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The text or tsvector column to filter on\\\n    \\\n    Details\\\n    \\\n*   queryRequiredstring\\\n    \\\n    The query text to match with\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nText searchBasic normalizationFull normalizationWebsearch\\\n\\\n``     _10  const result = await supabase  _10  .from(\"texts\")  _10  .select(\"content\")  _10  .textSearch(\"content\", `'eggs' & 'ham'`, {  _10  config: \"english\",  _10  });      ``\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch an associated value\\\n-------------------------\\\n\\\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\\\n\\",
    "summary": "The documentation describes the parameters for the `textSearch` function, which allows filtering a text or tsvector column based on a given query string. It also includes an example usage of the function and a description of the \"Match an associated value\" feature, which allows filtering rows where each column in the `query` object matches its associated value."
  },
  {
    "chunk_id": "f39e0c66-6a9a-4643-8f03-3e662e57257e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   queryRequiredUnion: expand to see options\\\n    \\\n    The object to filter with, with column names as keys mapped to their filter values\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .match({ id: 2, name: 'Albania' })      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDon't match the filter\\\n----------------------\\\n\\\nMatch only rows which doesn't satisfy the filter.\\\n\\\nnot() expects you to use the raw PostgREST syntax for the filter values.\\\n\\\n``     _10  .not('id', 'in', '(5,6,7)') // Use `()` for `in` filter  _10  .not('arraycol', 'cs', '\\{\"a\",\"b\"\\}') // Use `cs` for `contains()`, `\\{\\}` for array values      ``\\\n\\",
    "summary": "The provided content summarizes the `match()` and `not()` functions in the Supabase client library, which allow filtering database queries based on column values. The `match()` function takes an object with column names as keys and their corresponding filter values. The `not()` function is used to filter out rows that don't satisfy the provided criteria, using the raw PostgREST syntax for filter values."
  },
  {
    "chunk_id": "f3f9b2ce-34e0-494e-b4bd-d6d7e96e4df7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to filter on\\\n    \\\n    Details\\\n    \\\n*   operatorRequiredUnion: expand to see options\\\n    \\\n    The operator to be negated to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n*   valueRequiredUnion: expand to see options\\\n    \\\n    The value to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .not('name', 'is', null)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch at least one filter\\\n-------------------------\\\n\\\nMatch only rows which satisfy at least one of the filters.\\\n\\\nor() expects you to use the raw PostgREST syntax for the filter names and values.\\\n\\\n``     _10  .or('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') // Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') // Use `cd` for `containedBy()`      ``\\\n\\",
    "summary": "The provided content describes the parameters and usage of the \"select()\" function in Supabase, a popular open-source database toolkit. The key parameters include \"columnRequiredUnion\" for filtering columns, \"operatorRequiredUnion\" for specifying filter operators, and \"valueRequiredUnion\" for providing filter values. The documentation also covers the \"or()\" function, which allows matching rows that satisfy at least one of the specified filters, using the raw PostgREST syntax."
  },
  {
    "chunk_id": "5263d29f-9ffc-4c21-94b0-d94ef751edb2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   filtersRequiredstring\\\n    \\\n    The filters to use, following PostgREST syntax\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .or('id.eq.2,name.eq.Algeria')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMatch the filter\\\n----------------\\\n\\\nMatch only rows which satisfy the filter. This is an escape hatch - you should use the specific filter methods wherever possible.\\\n\\\nfilter() expects you to use the raw PostgREST syntax for the filter values.\\\n\\\n``     _10  .filter('id', 'in', '(5,6,7)') // Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') // Use `cs` for `contains()`, `\\{\\}` for array values      ``\\\n\\",
    "summary": "The summary covers the usage of the `select()` and `filter()` methods in a Supabase API query. The `select()` method allows specifying filters using PostgREST syntax, including the use of `or` and `and` operators, as well as filtering on referenced tables. The `filter()` method provides a more direct way to apply filters, using the raw PostgREST syntax, which can be useful as an \"escape hatch\" when the specific filter methods are not sufficient."
  },
  {
    "chunk_id": "d8549bfd-4a40-4a46-833f-2aaaee69a888",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to filter on\\\n    \\\n    Details\\\n    \\\n*   operatorRequiredUnion: expand to see options\\\n    \\\n    The operator to filter with, following PostgREST syntax\\\n    \\\n    Details\\\n    \\\n*   valueRequiredunknown\\\n    \\\n    The value to filter with, following PostgREST syntax\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .filter('name', 'in', '(\"Algeria\",\"Japan\")')      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUsing modifiers\\\n---------------\\\n\\\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\\\n\\\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\\\n\\\n* * *\\\n\\\nReturn data after inserting\\\n---------------------------\\\n\\\nPerform a SELECT on the query result.\\\n\\",
    "summary": "The documentation describes the parameters for filtering data in a Supabase database, including the column to filter on, the operator to use, and the value to filter with. It also covers using modifiers to change the format of the response, and how to return data after inserting new records. The key technical points are the use of PostgREST syntax for filtering, and the distinction between filters (which operate on row-level data) and modifiers (which change the response format)."
  },
  {
    "chunk_id": "6e5ccb38-dd2a-42b6-8777-17bbe4cf37cb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnsOptionalQuery\\\n    \\\n    The columns to retrieve, separated by commas\\\n    \\\n\\\nWith \\`upsert()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .upsert({ id: 1, name: 'Algeria' })  _10  .select()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nOrder the results\\\n-----------------\\\n\\\nOrder the query result by `column`.\\\n\\",
    "summary": "The provided content describes parameters for retrieving and ordering database records. The `columnsOptional` parameter specifies the columns to retrieve, while the `columnRequiredUnion` parameter orders the results by a specified column. The example demonstrates how to use the `upsert()` function to insert or update a record in the 'countries' table, and then select the updated data."
  },
  {
    "chunk_id": "f74a5c94-902a-41ac-96ed-ab37fc3852fb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   columnRequiredUnion: expand to see options\\\n    \\\n    The column to order by\\\n    \\\n    Details\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('id', 'name')  _10  .order('id', { ascending: false })      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLimit the number of rows returned\\\n---------------------------------\\\n\\\nLimit the query result by `count`.\\\n\\",
    "summary": "The documentation describes the `select()` method in Supabase, which allows retrieving specific columns from a database table. Key parameters include `column` to specify the column(s) to retrieve, and `options` to configure sorting and limiting the number of rows returned. The summary also covers how to limit the query result using the `count` parameter."
  },
  {
    "chunk_id": "1f2c75ec-82a0-4cc5-9087-0cea4217a94a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   countRequirednumber\\\n    \\\n    The maximum number of rows to return\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`On a referenced table\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .limit(1)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLimit the query to a range\\\n--------------------------\\\n\\\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly. The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\\\n\\",
    "summary": "The documentation describes the `limit()` and `range()` functions in the Supabase client library, which allow limiting the number of rows returned and specifying a range of rows to retrieve, respectively. The `limit()` function takes a required `count` parameter to specify the maximum number of rows, while the `range()` function takes `from` and `to` parameters to define the range of rows to return. Both functions are useful for efficiently retrieving subsets of data from a database table."
  },
  {
    "chunk_id": "c376b050-b68f-44ab-b02f-6be7f27b24ce",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromRequirednumber\\\n    \\\n    The starting index from which to limit the result\\\n    \\\n*   toRequirednumber\\\n    \\\n    The last index to which to limit the result\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .range(0, 1)      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSet an abort signal\\\n-------------------\\\n\\\nSet the AbortSignal for the fetch request.\\\n\\\nYou can use this to set a timeout for the request.\\\n\\",
    "summary": "The provided content describes the parameters for the `select()` function in the Supabase library, including `from`, `to`, and `options` parameters. It also discusses setting an AbortSignal to enable request timeouts. The summary highlights the key functionality of the `select()` function and the ability to set timeouts for fetch requests, which are important features for managing database queries."
  },
  {
    "chunk_id": "19099e82-33aa-44b3-aae1-b2dd07defb1a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   signalRequiredAbortSignal\\\n    \\\n    The AbortSignal to use for the fetch request\\\n    \\\n\\\nAborting requests in-flightSet a timeout\\\n\\\n`     _10  const ac = new AbortController()  _10  ac.abort()  _10  const { data, error } = await supabase  _10  .from('very_big_table')  _10  .select()  _10  .abortSignal(ac.signal)      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nRetrieve one row of data\\\n------------------------\\\n\\\nReturn `data` as a single object instead of an array of objects.\\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select('name')  _10  .limit(1)  _10  .single()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve zero or one row of data\\\n--------------------------------\\\n\\\nReturn `data` as a single object instead of an array of objects.\\\n\\",
    "summary": "The summary covers two main topics:\n\n1. Aborting requests in-flight using an AbortSignal, which allows canceling an ongoing fetch request by providing an AbortController signal.\n\n2. Retrieving a single row of data from a database table using the `select()` method, either as a single object or returning zero or one row. This is useful for efficiently fetching a specific record."
  },
  {
    "chunk_id": "719f7136-23ec-4c4d-abf3-cfe9b4deaf0e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nUnion: expand to see options\\\n\\\nDetails\\\n\\\nWith \\`select()\\`\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .eq('name', 'Singapore')  _10  .maybeSingle()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve as a CSV\\\n-----------------\\\n\\\nReturn `data` as a string in CSV format.\\\n\\",
    "summary": "The documentation describes the return type and data retrieval options for the Supabase library. The `select()` method can be used to retrieve data from a table, with the option to filter the results using various parameters. The data can be returned in CSV format as a string, which is useful for exporting or processing the data programmatically."
  },
  {
    "chunk_id": "08edd96c-e77e-449b-bcac-aa838053c532",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nstring\\\n\\\nReturn data as CSV\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .csv()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nOverride type of successful response\\\n------------------------------------\\\n\\\nOverride the type of the returned `data`.\\\n\\\nOverride type of successful response\\\n\\\n`     _10  const { data } = await supabase  _10  .from('countries')  _10  .select()  _10  .returns<MyType>()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUsing explain\\\n-------------\\\n\\\nReturn `data` as the EXPLAIN plan for the query.\\\n\\\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\\\n of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\\\n\\\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\\\n\\\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\\\n to enable the functionality on your project.\\\n\\",
    "summary": "The documentation describes two ways to override the response format from a Supabase database query: (1) returning data as a CSV string using `.csv()`, and (2) specifying a custom return type using `.returns<MyType>()`. It also covers using the `explain()` method to retrieve the Postgres EXPLAIN plan for a query, which can be useful for debugging slow queries, but notes that it should be used cautiously as it can reveal sensitive information."
  },
  {
    "chunk_id": "ad55c67e-c9bb-4f6f-9a5c-4a8c2b3decfb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   optionsRequiredobject\\\n    \\\n    Named parameters\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters for an unspecified function, including an \"options\" parameter of type \"object\" that contains named parameters. This information is likely relevant for configuring or calling the function, but the specific use case or functionality is not clear from the given context."
  },
  {
    "chunk_id": "99b5125e-62eb-4ef8-967f-1c7ad4f9b52c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nUnion: expand to see options\\\n\\\nDetails\\\n\\\nGet the execution planGet the execution plan with analyze and verbose\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('countries')  _10  .select()  _10  .explain()      `\\\n\\\nData source\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nOverview\\\n--------\\\n\\\n*   The auth methods can be accessed via the `supabase.auth` namespace.\\\n    \\\n*   By default, the supabase client sets `persistSession` to true and attempts to store the session in local storage. When using the supabase client in an environment that doesn't support local storage, you might notice the following warning message being logged:\\\n    \\\n    > No storage option exists to persist the session, which may result in unexpected behavior when using auth. If you want to set `persistSession` to true, please provide a storage option or you may set `persistSession` to false to disable this warning.\\\n    \\\n    This warning message can be safely ignored if you're not using auth on the server-side. If you are using auth and you want to set `persistSession` to true, you will need to provide a custom storage implementation that follows [this interface](https://github.com/supabase/gotrue-js/blob/master/src/lib/types.ts#L1027)\\\n    .\\\n    \\\n*   Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits)\\\n     in place to guard against brute force attacks.\\\n    \\\n*   The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth)\\\n    . A refresh token never expires and can only be used once.\\\n    \\\n\\\nCreate auth clientCreate auth client (server-side)\\\n\\\n`     _10  import { createClient } from '@supabase/supabase-js'  _10  _10  const supabase = createClient(supabase_url, anon_key)      `\\\n\\\n* * *\\\n\\\nError codes\\\n-----------\\\n\\\nSupabase Auth can throw or return various errors when using the API. All errors originating from the `supabase.auth` namespace of the client library will be wrapped by the `AuthError` class.\\\n\\\nError objects are split in a few classes:\\\n\\\n*   `AuthApiError` -- errors which originate from the Supabase Auth API.\\\n    *   Use `isAuthApiError` instead of `instanceof` checks to see if an error you caught is of this type.\\\n*   `CustomAuthError` -- errors which generally originate from state in the client library.\\\n    *   Use the `name` property on the error to identify the class of error received.\\\n\\\nErrors originating from the server API classed as `AuthApiError` always have a `code` property that can be used to identify the error returned by the server. The `status` property is also present, encoding the HTTP status code received in the response.\\\n\\\nIn general the HTTP status codes you will likely receive are:\\\n\\\n*   [403 Forbidden](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)\\\n     is sent out in rare situations where a certain Auth feature is not available for the user, and you as the developer are not checking a precondition whether that API is available for the user.\\\n*   [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)\\\n     is sent out when the API request is accepted, but cannot be processed because the user or Auth server is in a state where it cannot satisfy the request.\\\n*   [429 Too Many Requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429)\\\n     is sent out when rate-limits are breached for an API. You should handle this status code often, especially in functions that authenticate a user.\\\n*   [500 Internal Server Error](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500)\\\n     often means that the Auth server's service is degraded. Most often it points to issues in your database setup such as a misbehaving trigger on a schema, function, view or other database object.\\\n*   [501 Not Implemented](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/501)\\\n     is sent out when a feature is not enabled on the Auth server, and you are trying to use an API which requires it.\\\n\\\nTo supplement HTTP status codes, Supabase Auth returns a string error code which gives you more insight into what went wrong. These codes are stable and can be used to present an internationalized message to your users.\\\n\\\n| Code | Description |\\\n| --- | --- |\\\n| `anonymous_provider_disabled` | Anonymous sign-ins are disabled. |\\\n| `bad_code_verifier` | Returned from the PKCE flow where the provided code verifier does not match the expected one. Indicates a bug in the implementation of the client library. |\\\n| `bad_json` | Usually used when the HTTP body of the request is not valid JSON. |\\\n| `bad_jwt` | JWT sent in the `Authorization` header is not valid. |\\\n| `bad_oauth_callback` | OAuth callback from provider to Auth does not have all the required attributes (state). Indicates an issue with the OAuth provider or client library implementation. |\\\n| `bad_oauth_state` | OAuth state (data echoed back by the OAuth provider to Supabase Auth) is not in the correct format. Indicates an issue with the OAuth provider integration. |\\\n| `captcha_failed` | Captcha challenge could not be verified with the captcha provider. Check your captcha integration. |\\\n| `conflict` | General database conflict, such as concurrent requests on resources that should not be modified concurrently. Can often occur when you have too many session refresh requests firing off at the same time for a user. Check your app for concurrency issues, and if detected, back off exponentially. |\\\n| `email_conflict_identity_not_deletable` | Unlinking this identity causes the user's account to change to an email address which is already used by another user account. Indicates an issue where the user has two different accounts using different primary email addresses. You may need to migrate user data to one of their accounts in this case. |\\\n| `email_exists` | Email address already exists in the system. |\\\n| `email_not_confirmed` | Signing in is not allowed for this user as the email address is not confirmed. |\\\n| `email_provider_disabled` | Signups are disabled for email and password. |\\\n| `flow_state_expired` | PKCE flow state to which the API request relates has expired. Ask the user to sign in again. |\\\n| `flow_state_not_found` | PKCE flow state to which the API request relates no longer exists. Flow states expire after a while and are progressively cleaned up, which can cause this error. Retried requests can cause this error, as the previous request likely destroyed the flow state. Ask the user to sign in again. |\\\n| `hook_payload_over_size_limit` | Payload from Auth exceeds maximum size limit. |\\\n| `hook_timeout` | Unable to reach hook within maximum time allocated. |\\\n| `hook_timeout_after_retry` | Unable to reach hook after maximum number of retries. |\\\n| `identity_already_exists` | The identity to which the API relates is already linked to a user. |\\\n| `identity_not_found` | Identity to which the API call relates does not exist, such as when an identity is unlinked or deleted. |\\\n| `insufficient_aal` | To call this API, the user must have a higher [Authenticator Assurance Level](https://supabase.com/docs/guides/auth/auth-mfa)<br>. To resolve, ask the user to solve an MFA challenge. |\\\n| `invite_not_found` | Invite is expired or already used. |\\\n| `invalid_credentials` | Login credentials or grant type not recognized. |\\\n| `manual_linking_disabled` | Calling the `supabase.auth.linkUser()` and related APIs is not enabled on the Auth server. |\\\n| `mfa_challenge_expired` | Responding to an MFA challenge should happen within a fixed time period. Request a new challenge when encountering this error. |\\\n| `mfa_factor_name_conflict` | MFA factors for a single user should not have the same friendly name. |\\\n| `mfa_factor_not_found` | MFA factor no longer exists. |\\\n| `mfa_ip_address_mismatch` | The enrollment process for MFA factors must begin and end with the same IP address. |\\\n| `mfa_verification_failed` | MFA challenge could not be verified -- wrong TOTP code. |\\\n| `mfa_verification_rejected` | Further MFA verification is rejected. Only returned if the [MFA verification attempt hook](https://supabase.com/docs/guides/auth/auth-hooks?language=add-admin-role#hook-mfa-verification-attempt)<br> returns a reject decision. |\\\n| `mfa_verified_factor_exists` | Verified phone factor already exists for a user. Unenroll existing verified phone factor to continue. |\\\n| `mfa_totp_enroll_disabled` | Enrollment of MFA TOTP factors is disabled. |\\\n| `mfa_totp_verify_disabled` | Login via TOTP factors and verification of new TOTP factors is disabled. |\\\n| `mfa_phone_enroll_disabled` | Enrollment of MFA Phone factors is disabled. |\\\n| `mfa_phone_verify_disabled` | Login via Phone factors and verification of new Phone factors is disabled. |\\\n| `no_authorization` | This HTTP request requires an `Authorization` header, which is not provided. |\\\n| `not_admin` | User accessing the API is not admin, i.e. the JWT does not contain a `role` claim that identifies them as an admin of the Auth server. |\\\n| `oauth_provider_not_supported` | Using an OAuth provider which is disabled on the Auth server. |\\\n| `otp_disabled` | Sign in with OTPs (magic link, email OTP) is disabled. Check your sever's configuration. |\\\n| `otp_expired` | OTP code for this sign-in has expired. Ask the user to sign in again. |\\\n| `over_email_send_rate_limit` | Too many emails have been sent to this email address. Ask the user to wait a while before trying again. |\\\n| `over_request_rate_limit` | Too many requests have been sent by this client (IP address). Ask the user to try again in a few minutes. Sometimes can indicate a bug in your application that mistakenly sends out too many requests (such as a badly written [`useEffect` React hook](https://react.dev/reference/react/useEffect)<br>). |\\\n| `over_sms_send_rate_limit` | Too many SMS messages have been sent to this phone number. Ask the user to wait a while before trying again. |\\\n| `phone_exists` | Phone number already exists in the system. |\\\n| `phone_not_confirmed` | Signing in is not allowed for this user as the phone number is not confirmed. |\\\n| `phone_provider_disabled` | Signups are disabled for phone and password. |\\\n| `provider_disabled` | OAuth provider is disabled for use. Check your server's configuration. |\\\n| `provider_email_needs_verification` | Not all OAuth providers verify their user's email address. Supabase Auth requires emails to be verified, so this error is sent out when a verification email is sent after completing the OAuth flow. |\\\n| `reauthentication_needed` | A user needs to reauthenticate to change their password. Ask the user to reauthenticate by calling the `supabase.auth.reauthenticate()` API. |\\\n| `reauthentication_not_valid` | Verifying a reauthentication failed, the code is incorrect. Ask the user to enter a new code. |\\\n| `request_timeout` | Processing the request took too long. Retry the request. |\\\n| `same_password` | A user that is updating their password must use a different password than the one currently used. |\\\n| `saml_assertion_no_email` | SAML assertion (user information) was received after sign in, but no email address was found in it, which is required. Check the provider's attribute mapping and/or configuration. |\\\n| `saml_assertion_no_user_id` | SAML assertion (user information) was received after sign in, but a user ID (called NameID) was not found in it, which is required. Check the SAML identity provider's configuration. |\\\n| `saml_entity_id_mismatch` | (Admin API.) Updating the SAML metadata for a SAML identity provider is not possible, as the entity ID in the update does not match the entity ID in the database. This is equivalent to creating a new identity provider, and you should do that instead. |\\\n| `saml_idp_already_exists` | (Admin API.) Adding a SAML identity provider that is already added. |\\\n| `saml_idp_not_found` | SAML identity provider not found. Most often returned after IdP-initiated sign-in with an unregistered SAML identity provider in Supabase Auth. |\\\n| `saml_metadata_fetch_failed` | (Admin API.) Adding or updating a SAML provider failed as its metadata could not be fetched from the provided URL. |\\\n| `saml_provider_disabled` | Using [Enterprise SSO with SAML 2.0](https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml)<br> is not enabled on the Auth server. |\\\n| `saml_relay_state_expired` | SAML relay state is an object that tracks the progress of a `supabase.auth.signInWithSSO()` request. The SAML identity provider should respond after a fixed amount of time, after which this error is shown. Ask the user to sign in again. |\\\n| `saml_relay_state_not_found` | SAML relay states are progressively cleaned up after they expire, which can cause this error. Ask the user to sign in again. |\\\n| `session_not_found` | Session to which the API request relates no longer exists. This can occur if the user has signed out, or the session entry in the database was deleted in some other way. |\\\n| `signup_disabled` | Sign ups (new account creation) are disabled on the server. |\\\n| `single_identity_not_deletable` | Every user must have at least one identity attached to it, so deleting (unlinking) an identity is not allowed if it's the only one for the user. |\\\n| `sms_send_failed` | Sending an SMS message failed. Check your SMS provider configuration. |\\\n| `sso_domain_already_exists` | (Admin API.) Only one SSO domain can be registered per SSO identity provider. |\\\n| `sso_provider_not_found` | SSO provider not found. Check the arguments in `supabase.auth.signInWithSSO()`. |\\\n| `too_many_enrolled_mfa_factors` | A user can only have a fixed number of enrolled MFA factors. |\\\n| `unexpected_audience` | (Deprecated feature not available via Supabase client libraries.) The request's `X-JWT-AUD` claim does not match the JWT's audience. |\\\n| `unexpected_failure` | Auth service is degraded or a bug is present, without a specific reason. |\\\n| `user_already_exists` | User with this information (email address, phone number) cannot be created again as it already exists. |\\\n| `user_banned` | User to which the API request relates has a `banned_until` property which is still active. No further API requests should be attempted until this field is cleared. |\\\n| `user_not_found` | User to which the API request relates no longer exists. |\\\n| `user_sso_managed` | When a user comes from SSO, certain fields of the user cannot be updated (like `email`). |\\\n| `validation_failed` | Provided parameters are not in the expected format. |\\\n| `weak_password` | User is signing up or changing their password without meeting the password strength criteria. Use the `AuthWeakPasswordError` class to access more information about what they need to do to make the password pass. |\\\n\\",
    "summary": "The documentation provides an overview of the Supabase Auth client, including details on handling errors, accessing the execution plan, and configuring persistence and rate limits. It also lists and explains various error codes that the Supabase Auth API can return, such as those related to authentication, authorization, and rate limiting, to help developers handle different error scenarios effectively."
  },
  {
    "chunk_id": "c2672967-05ee-4e4d-9792-322ecac0c591",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Tips for better error handling[#](#tips-for-better-error-handling)\\\n\\\n*   Do not use string matching on error messages! Always use the `name` and `code` properties of error objects to identify the situation.\\\n*   Although HTTP status codes generally don't change, they can suddenly change due to bugs, so avoid relying on them unless absolutely necessary.\\\n\\\n* * *\\\n\\\nCreate a new user\\\n-----------------\\\n\\\nCreates a new user.\\\n\\\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](/dashboard/project/_/auth/providers)\\\n    .\\\n*   **Confirm email** determines if users need to confirm their email address after signing up.\\\n    *   If **Confirm email** is enabled, a `user` is returned but `session` is null.\\\n    *   If **Confirm email** is disabled, both a `user` and a `session` are returned.\\\n*   When the user confirms their email address, they are redirected to the [`SITE_URL`](/docs/guides/auth/redirect-urls)\\\n     by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](/dashboard/project/_/auth/url-configuration)\\\n    .\\\n*   If signUp() is called for an existing confirmed user:\\\n    *   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\\\n        , an obfuscated/fake user object is returned.\\\n    *   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\\\n*   To fetch the currently logged-in user, refer to [`getUser()`](/docs/reference/javascript/auth-getuser)\\\n    .\\\n\\",
    "summary": "The summary covers best practices for error handling in software development, emphasizing the importance of using error object properties instead of string matching, and avoiding reliance on HTTP status codes. It then describes the key functionality and behavior of the \"Create a new user\" operation, including details on email verification, the returned user/session data, and handling of existing user accounts."
  },
  {
    "chunk_id": "8d07a8a8-8e97-43ba-9044-3cbe7ac8d981",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content summarizes the parameters and details for a credentialsRequired union type, which likely represents the different authentication methods supported, such as email/password, phone number/password (SMS), and potentially others. This information is crucial for understanding the authentication requirements and options available in the software system."
  },
  {
    "chunk_id": "3138b978-50ce-4e1f-bd28-5c597847fac7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\\\n\\\n`     _10  const { data, error } = await supabase.auth.signUp({  _10  email: 'example@email.com',  _10  password: 'example-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nListen to auth events\\\n---------------------\\\n\\\nReceive a notification every time an auth event happens.\\\n\\\n*   Subscribes to important events occurring on the user's session.\\\n*   Use on the frontend/client. It is less useful on the server.\\\n*   Events are emitted across tabs to keep your application's UI up-to-date. Some events can fire very frequently, based on the number of tabs open. Use a quick and efficient callback function, and defer or debounce as many operations as you can to be performed outside of the callback.\\\n*   **Important:** A callback can be an `async` function and it runs synchronously during the processing of the changes causing the event. You can easily create a dead-lock by using `await` on a call to another method of the Supabase library.\\\n    *   Avoid using `async` functions as callbacks.\\\n    *   Limit the number of `await` calls in `async` callbacks.\\\n    *   Do not use other Supabase functions in the callback function. If you must, dispatch the functions once the callback has finished executing. Use this as a quick way to achieve this:\\\n        \\\n        `     _10  supabase.auth.onAuthStateChange((event, session) => \\{  _10  setTimeout(async () => \\{  _10  // await on other Supabase function here  _10  // this runs right after the callback has finished  _10  \\}, 0)  _10  \\})      `\\\n        \\\n*   Emitted events:\\\n    *   `INITIAL_SESSION`\\\n        *   Emitted right after the Supabase client is constructed and the initial session from storage is loaded.\\\n    *   `SIGNED_IN`\\\n        *   Emitted each time a user session is confirmed or re-established, including on user sign in and when refocusing a tab.\\\n        *   Avoid making assumptions as to when this event is fired, this may occur even when the user is already signed in. Instead, check the user object attached to the event to see if a new user has signed in and update your application's UI.\\\n        *   This event can fire very frequently depending on the number of tabs open in your application.\\\n    *   `SIGNED_OUT`\\\n        *   Emitted when the user signs out. This can be after:\\\n            *   A call to `supabase.auth.signOut()`.\\\n            *   After the user's session has expired for any reason:\\\n                *   User has signed out on another device.\\\n                *   The session has reached its timebox limit or inactivity timeout.\\\n                *   User has signed in on another device with single session per user enabled.\\\n                *   Check the [User Sessions](/docs/guides/auth/sessions)\\\n                     docs for more information.\\\n        *   Use this to clean up any local storage your application has associated with the user.\\\n    *   `TOKEN_REFRESHED`\\\n        *   Emitted each time a new access and refresh token are fetched for the signed in user.\\\n        *   It's best practice and highly recommended to extract the access token (JWT) and store it in memory for further use in your application.\\\n            *   Avoid frequent calls to `supabase.auth.getSession()` for the same purpose.\\\n        *   There is a background process that keeps track of when the session should be refreshed so you will always receive valid tokens by listening to this event.\\\n        *   The frequency of this event is related to the JWT expiry limit configured on your project.\\\n    *   `USER_UPDATED`\\\n        *   Emitted each time the `supabase.auth.updateUser()` method finishes successfully. Listen to it to update your application's UI based on new profile information.\\\n    *   `PASSWORD_RECOVERY`\\\n        *   Emitted instead of the `SIGNED_IN` event when the user lands on a page that includes a password recovery link in the URL.\\\n        *   Use it to show a UI to the user where they can [reset their password](/docs/guides/auth/passwords#resetting-a-users-password-forgot-password)\\\n            .\\\n\\",
    "summary": "The documentation covers the Supabase authentication library's `signUp()` method and the various event listeners available for monitoring authentication-related activities. Key points include the different sign-up options (email/password, phone number/password, etc.), the `onAuthStateChange()` event listener for tracking sign-in, sign-out, token refresh, and user update events, and the importance of using efficient, non-blocking callbacks to avoid potential deadlocks when interacting with other Supabase functions."
  },
  {
    "chunk_id": "ba7fe8f5-5073-4084-a516-2a2192747b1c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   callbackRequiredfunction\\\n    \\\n    A callback function to be invoked when an auth event happens.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content describes an interface that provides a callback function to be invoked when an authentication event occurs. This function can be used to listen for sign-in, sign-out, and other auth-related changes, as well as to store OAuth provider tokens on sign-in and access the user's session data through a React Context."
  },
  {
    "chunk_id": "2d06888e-513b-4e1b-a6eb-d0d20005741d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nobject\\\n\\\nDetails\\\n\\\nListen to auth changesListen to sign outStore OAuth provider tokens on sign inUse React Context for the User's sessionListen to password recovery eventsListen to sign inListen to token refreshListen to user updates\\\n\\\n`     _20  const { data } = supabase.auth.onAuthStateChange((event, session) => {  _20  console.log(event, session)  _20  _20  if (event === 'INITIAL_SESSION') {  _20  // handle initial session  _20  } else if (event === 'SIGNED_IN') {  _20  // handle sign in event  _20  } else if (event === 'SIGNED_OUT') {  _20  // handle sign out event  _20  } else if (event === 'PASSWORD_RECOVERY') {  _20  // handle password recovery event  _20  } else if (event === 'TOKEN_REFRESHED') {  _20  // handle token refreshed event  _20  } else if (event === 'USER_UPDATED') {  _20  // handle user updated event  _20  }  _20  })  _20  _20  // call unsubscribe to remove the callback  _20  data.subscription.unsubscribe()      `\\\n\\\n* * *\\\n\\\nCreate an anonymous user\\\n------------------------\\\n\\\nCreates a new anonymous user.\\\n\\\n*   Returns an anonymous user\\\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\\\n\\",
    "summary": "The excerpt summarizes the functionality of the Supabase authentication library, including listening for various auth events (sign-in, sign-out, password recovery, token refresh, user updates), retrieving the user session, and creating anonymous users. It highlights the ability to subscribe to auth state changes and unsubscribe from the callback, as well as the recommendation to set up captcha for anonymous sign-ins to prevent abuse."
  },
  {
    "chunk_id": "ed5724f2-992f-4cdc-8323-c77f446fa136",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsOptionalSignInAnonymouslyCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the API for signing in an anonymous user with optional custom metadata. It returns a Promise that resolves to the created anonymous user object. This functionality is useful for allowing users to access an application without requiring a full account signup, which can improve user experience and conversion rates."
  },
  {
    "chunk_id": "739a61f4-5ada-449e-8a65-40c1fe84f77b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate an anonymous userCreate an anonymous user with custom user metadata\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInAnonymously({  _10  options: {  _10  captchaToken  _10  }  _10  });      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user\\\n--------------\\\n\\\nLog in an existing user with an email and password or phone and password.\\\n\\\n*   Requires either an email and password or a phone number and password.\\\n\\",
    "summary": "The content describes the `signInAnonymously()` method of the Supabase authentication API, which allows creating an anonymous user with custom metadata. Additionally, the `signIn()` method is explained, allowing login of an existing user with an email and password or phone and password."
  },
  {
    "chunk_id": "15339da6-9acd-4a0a-8ef9-20bdd8f12f86",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary outlines the parameters required for creating an anonymous user with custom user metadata, and signing in with email/password or phone/password. It describes the return type as a Promise that resolves to a Union of possible outcomes, providing a flexible and comprehensive authentication mechanism for the application."
  },
  {
    "chunk_id": "dadc882b-4c69-46d7-9d83-a5848409979c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with email and passwordSign in with phone and password\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithPassword({  _10  email: 'example@email.com',  _10  password: 'example-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in with ID Token\\\n---------------------\\\n\\\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\\\n\\",
    "summary": "The documentation describes two methods for signing in: 1) using an email and password, and 2) using an OIDC ID token. The email/password sign-in method is demonstrated with example code, while the ID token sign-in method is explained conceptually as allowing authentication via an enabled and configured OIDC provider."
  },
  {
    "chunk_id": "0afd3334-f38b-4b76-be9f-75bafb09f196",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithIdTokenCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a method for signing in using an ID token. It takes in `credentialsRequiredSignInWithIdTokenCredentials` as a parameter and returns a Promise that resolves to a Union type indicating the success or failure of the sign-in operation. This functionality allows users to authenticate with the application by providing an ID token, which is a common approach for managing user sessions and access control."
  },
  {
    "chunk_id": "a5fb3390-ae42-4827-be71-d60042ab0278",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign In using ID Token\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithIdToken({  _10  provider: 'google',  _10  token: 'your-id-token'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user through OTP\\\n--------------------------\\\n\\\nLog in a user using magiclink or a one-time password (OTP).\\\n\\\n*   Requires either an email or phone number.\\\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\\\n*   If the user doesn't exist, `signInWithOtp()` will signup the user instead. To restrict this behavior, you can set `shouldCreateUser` in `SignInWithPasswordlessCredentials.options` to `false`.\\\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\\\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\\\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\\\n    .\\\n*   See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards)\\\n     to add additional redirect URLs to your project.\\\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](/dashboard/project/_/auth/templates)\\\n     to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\\\n*   See our [Twilio Phone Auth Guide](/docs/guides/auth/phone-login?showSmsProvider=Twilio)\\\n     for details about configuring WhatsApp sign in.\\\n\\",
    "summary": "The documentation describes two sign-in methods provided by Supabase: sign-in with ID token and sign-in with one-time password (OTP). The sign-in with ID token allows users to authenticate using a Google ID token, while the sign-in with OTP provides a passwordless sign-in option where a code is sent to the user's email or phone number. Both methods are useful for implementing various authentication flows, with the OTP method also supporting user sign-up if the user doesn't already exist."
  },
  {
    "chunk_id": "b30ddd1f-af7b-44a5-8201-4c45315a7ce4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a function that allows signing in using an ID token, email, SMS OTP, or WhatsApp OTP. The function returns a Promise that resolves to a Union type, containing the signed-in user's data or an error. This functionality is crucial for implementing secure authentication in an application."
  },
  {
    "chunk_id": "aa25748e-1e67-4ec2-b8ad-223de214e294",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithOtp({  _10  email: 'example@email.com',  _10  options: {  _10  emailRedirectTo: 'https://example.com/welcome'  _10  }  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nSign in a user through OAuth\\\n----------------------------\\\n\\\nLog in an existing user via a third-party provider. This method supports the PKCE flow.\\\n\\\n*   This method is used for signing in using a third-party provider.\\\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\\\n    .\\\n\\",
    "summary": "The documentation describes two methods for signing in users: 1) Sign in with email, SMS OTP, or WhatsApp OTP using the `supabase.auth.signInWithOtp()` function, and 2) Sign in with a third-party OAuth provider using the `supabase.auth.signInWithOAuth()` function. The latter supports the PKCE flow and can be used to log in existing users via various third-party providers configured in the Supabase platform."
  },
  {
    "chunk_id": "fa6bbdcc-d5b3-463a-9183-5dd145475efd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithOAuthCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters required for signing in with OAuth credentials, which include `credentialsRequiredSignInWithOAuthCredentials`. The details indicate that this method allows users to sign in using a third-party provider, likely through a redirect flow to authenticate with the external service."
  },
  {
    "chunk_id": "5ec4bf2f-e4a1-46be-8869-7e1bef53516c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes and access provider tokens\\\n\\\n`     _10  const { data, error } = await supabase.auth.signInWithOAuth({  _10  provider: 'github'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSign in a user through SSO\\\n--------------------------\\\n\\\nAttempts a single-sign on using an enterprise Identity Provider. A successful SSO attempt will redirect the current page to the identity provider authorization page. The redirect URL is implementation and SSO protocol specific.\\\n\\\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\\\n     to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\\\n     to do this.\\\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\\\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `providerId` property. For example:\\\n    *   Mapping specific user email addresses with an identity provider.\\\n    *   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\\\n\\",
    "summary": "The documentation provides details on signing in with a third-party provider using the Supabase auth API. It describes the `signInWithOAuth()` function, which allows users to sign in via OAuth, and the `signInWithSAML()` function, which enables single sign-on (SSO) using an enterprise identity provider. Key technical points include the ability to specify the provider, scopes, and access tokens, as well as the need to establish a connection to an identity provider before using the SSO functionality."
  },
  {
    "chunk_id": "d4caf003-4650-4a75-ab10-b2db84b5efbd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides information about a function that accepts a required `paramsRequiredUnion` parameter and returns a `Promise` that resolves to a union of possible values. This function appears to be related to signing in using a third-party provider or an email domain, and it may allow extracting additional information from the sign-in process."
  },
  {
    "chunk_id": "20a4c3ac-b3ef-401d-929f-0c5e3473cce6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSign in with email domainSign in with provider UUID\\\n\\\n`     _11  // You can extract the user's email domain and use it to trigger the  _11  // authentication flow with the correct identity provider.  _11  _11  const { data, error } = await supabase.auth.signInWithSSO({  _11  domain: 'company.com'  _11  })  _11  _11  if (data?.url) {  _11  // redirect the user to the identity provider's authentication flow  _11  window.location.href = data.url  _11  }      `\\\n\\\n* * *\\\n\\\nSign out a user\\\n---------------\\\n\\\nInside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\\\n\\\n*   In order to use the `signOut()` method, the user needs to be signed in first.\\\n*   By default, `signOut()` uses the global scope, which signs out all other sessions that the user is logged into as well.\\\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\\\n\\",
    "summary": "The documentation describes two types of parameters for authentication: `paramsRequiredUnion` for signing in with email domain or provider UUID, and `optionsRequiredSignOut` for signing out a user. The `signOut()` method revokes the refresh token and deletes the JWT from the client-side, but the access token JWT remains valid until it expires, allowing other sessions to continue using it."
  },
  {
    "chunk_id": "4eebca9a-79c2-44e7-8746-40a8a55c5971",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   optionsRequiredSignOut\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the `signOut()` function from the Supabase authentication library, which allows the user to sign out of the application. It returns a Promise that resolves to an object containing any errors that occurred during the sign-out process. This function is a key part of the user authentication flow, enabling users to securely disconnect from the application."
  },
  {
    "chunk_id": "0ea2b49d-62d0-4068-92a6-8b707bc15c79",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<object>\\\n\\\nDetails\\\n\\\nSign out\\\n\\\n`     _10  const { error } = await supabase.auth.signOut()      `\\\n\\\n* * *\\\n\\\nSend a password reset request\\\n-----------------------------\\\n\\\nSends a password reset request to an email address. This method supports the PKCE flow.\\\n\\\n*   The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\\\n*   The `resetPasswordForEmail()` only sends a password reset link to the user's email. To update the user's password, see [`updateUser()`](/docs/reference/javascript/auth-updateuser)\\\n    .\\\n*   A `SIGNED_IN` and `PASSWORD_RECOVERY` event will be emitted when the password recovery link is clicked. You can use [`onAuthStateChange()`](/docs/reference/javascript/auth-onauthstatechange)\\\n     to listen and invoke a callback function on these events.\\\n*   When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards)\\\n     to add additional redirect URLs to your project.\\\n*   After the user has been redirected successfully, prompt them for a new password and call `updateUser()`:\\\n\\\n`     _10  const \\{ data, error \\} = await supabase.auth.updateUser(\\{  _10  password: new_password  _10  \\})      `\\\n\\",
    "summary": "The provided documentation outlines the Supabase authentication library's `signOut()` and `resetPasswordForEmail()` methods. The `signOut()` method logs out the current user, while the `resetPasswordForEmail()` method sends a password reset link to the specified email address, enabling the user to update their password through the PKCE flow. The documentation also highlights the two-step password reset process and the related events that can be listened to using the `onAuthStateChange()` method."
  },
  {
    "chunk_id": "8b7297a2-0246-47c0-9b81-7946851ba3fe",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   emailRequiredstring\\\n    \\\n    The email address of the user.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters for the \"Reset password (React)\" function, which takes an email address (required) and an options object (required) as input. This function is likely used to initiate a password reset process, allowing users to securely update their account credentials."
  },
  {
    "chunk_id": "5f44c6b3-55d3-431b-9244-750fa07a81e0",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nReset passwordReset password (React)\\\n\\\n`     _10  const { data, error } = await supabase.auth.resetPasswordForEmail(email, {  _10  redirectTo: 'https://example.com/update-password',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nVerify and log in through OTP\\\n-----------------------------\\\n\\\nLog in a user given a User supplied OTP or TokenHash received through mobile or email.\\\n\\\n*   The `verifyOtp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\\\n*   The verification type used should be determined based on the corresponding auth method called before `verifyOtp` to sign up / sign-in a user.\\\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\\\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\\\n     for more details.\\\n\\",
    "summary": "The documentation describes the `resetPasswordForEmail` function in the Supabase auth API, which allows users to reset their password. It also covers the `verifyOtp` method, which can be used to log in a user using a one-time password or token hash received through mobile or email. The different verification types for `verifyOtp` and their usage are explained, along with guidance on using the token hash for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "a7483a33-b9b1-42f6-b3cc-707fb3355fad",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a function that takes in a set of required parameters, likely to reset a password or verify a one-time password (OTP) for a user signup process. The function returns a Promise that resolves to a Union type, indicating the potential for multiple possible return values. This functionality is likely a critical component of an authentication or user management system."
  },
  {
    "chunk_id": "dc1b410e-cbd3-4071-b4e2-d1454e6616b6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nVerify Signup One-Time Password (OTP)Verify Sms One-Time Password (OTP)Verify Email Auth (Token Hash)\\\n\\\n`     _10  const { data, error } = await supabase.auth.verifyOtp({ email, token, type: 'email'})      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a session\\\n------------------\\\n\\\nReturns the session, refreshing it if necessary.\\\n\\\n*   This method retrieves the current local session (i.e local storage).\\\n*   The session contains a signed JWT and unencoded session data.\\\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`getUser`](/docs/reference/javascript/auth-getuser)\\\n     instead.\\\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\\\n\\",
    "summary": "The documentation describes the `verifyOtp()` function in the Supabase authentication API, which allows verifying email, SMS, or token-based one-time passwords. It also explains the `getSession()` function, which retrieves the current user session, refreshing it if necessary. The session data should not be relied upon as a trusted source, and the `getUser()` function should be used to retrieve verified user data instead."
  },
  {
    "chunk_id": "144f6d5c-4c90-4918-8edd-d51afdfa4cd1",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the session data\\\n\\\n`     _10  const { data, error } = await supabase.auth.getSession()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a new session\\\n----------------------\\\n\\\nReturns a new session, regardless of expiry status. Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession(). If the current session's refresh token is invalid, an error will be thrown.\\\n\\\n*   This method will refresh and return a new session whether the current one is expired or not.\\\n\\",
    "summary": "This method retrieves a new session, regardless of the expiry status of the current session. It takes an optional current session object, and if not provided, it attempts to retrieve it from the `getSession()` method. If the current session's refresh token is invalid, an error will be thrown. The method is useful for refreshing the session and returning a new one, even if the current session has not expired."
  },
  {
    "chunk_id": "cd71b218-6c4a-492b-b9c1-7c4168895f02",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   currentSessionOptionalobject\\\n    \\\n    The current session. If passed in, it must contain a refresh token.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary of the provided content is as follows:\n\nThis method allows refreshing the current session using a provided refresh token. It returns a Promise that resolves to an object containing the refreshed session data and any errors encountered during the process. This is a useful functionality for maintaining user sessions without requiring the user to re-authenticate."
  },
  {
    "chunk_id": "a79b3005-35ff-4983-894b-ab6ca9da7788",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRefresh session using the current sessionRefresh session using a refresh token\\\n\\\n`     _10  const { data, error } = await supabase.auth.refreshSession()  _10  const { session, user } = data      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a user\\\n---------------\\\n\\\nGets the current user details if there is an existing session. This method performs a network request to the Supabase Auth server, so the returned value is authentic and can be used to base authorization rules on.\\\n\\\n*   This method fetches the user object from the database instead of local session.\\\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\\\n*   Should always be used when checking for user authorization on the server. On the client, you can instead use `getSession().session.user` for faster results. `getSession` is insecure on the server.\\\n\\",
    "summary": "This method refreshes the current session using either the existing session object or a provided refresh token. It also provides a way to retrieve the current user details by fetching the user object directly from the Supabase Auth server, which is more secure than relying on the local session for authorization checks."
  },
  {
    "chunk_id": "5f6cc854-378c-4175-a6af-1ba6c10fef36",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   jwtOptionalstring\\\n    \\\n    Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\\\n    \\\n\\",
    "summary": "The content describes an API method that allows refreshing an existing session or retrieving the logged-in user information. It takes an optional JWT parameter, which if not provided, uses the JWT from the current session. The method returns a Promise that resolves to a Union type, providing flexibility in the response data."
  },
  {
    "chunk_id": "450ed144-9a1b-49fc-828f-97d51a96f3bf",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\\\n\\\n`     _10  const { data: { user } } = await supabase.auth.getUser()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a user\\\n-------------\\\n\\\nUpdates user data for a logged in user.\\\n\\\n*   In order to use the `updateUser()` method, the user needs to be signed in first.\\\n*   By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n\\",
    "summary": "The documentation describes the `supabase.auth.getUser()` function, which retrieves the logged-in user's details either from the current session or using a custom access token JWT. It also covers the `supabase.auth.updateUser()` function, which updates the user's data, while providing details on the email change confirmation process."
  },
  {
    "chunk_id": "25f591e2-bd7d-488e-b264-033f5531b004",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   attributesRequiredUserAttributes\\\n    \\\n    Details\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters required for updating a user's attributes, including the `attributesRequired` and `options` parameters. The `attributesRequired` parameter specifies the user attributes that must be provided, while the `options` parameter is an object containing the details of the update operation. This functionality is likely used to allow authenticated users to update their email, phone number, or other profile information."
  },
  {
    "chunk_id": "bd71b6e0-dca4-420a-8c3c-0f737fb0023c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\\\n\\\n`     _10  const { data, error } = await supabase.auth.updateUser({  _10  email: 'new@email.com'  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nRetrieve identities linked to a user\\\n------------------------------------\\\n\\\nGets all the identities linked to a user.\\\n\\\n*   The user needs to be signed in to call `getUserIdentities()`.\\\n\\",
    "summary": "The summary covers two key technical points:\n\n1. The `updateUser()` method allows authenticated users to update their email, phone number, password, metadata, and password with a nonce. This provides users with the ability to manage their account information.\n\n2. The `getUserIdentities()` method retrieves all identities linked to a signed-in user, enabling the application to access and manage a user's linked accounts."
  },
  {
    "chunk_id": "3c481e50-1fff-4d24-b606-52462526711f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nReturns a list of identities linked to the user\\\n\\\n`     _10  const { data, error } = await supabase.auth.getUserIdentities()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nLink an identity to a user\\\n--------------------------\\\n\\\nLinks an oauth identity to an existing user. This method supports the PKCE flow.\\\n\\\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth)\\\n    .\\\n*   The user needs to be signed in to call `linkIdentity()`.\\\n*   If the candidate identity is already linked to the existing user or another user, `linkIdentity()` will fail.\\\n*   If `linkIdentity` is run in the browser, the user is automatically redirected to the returned URL. On the server, you should handle the redirect.\\\n\\",
    "summary": "The provided content describes the `getUserIdentities()` and `linkIdentity()` methods of the Supabase authentication API. `getUserIdentities()` returns a list of identities linked to the authenticated user, while `linkIdentity()` allows linking an OAuth identity to an existing user account, provided the \"Enable Manual Linking\" option is enabled and the user is currently signed in."
  },
  {
    "chunk_id": "1153bf5e-d7f2-4fc3-964a-113000f61377",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredSignInWithOAuthCredentials\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content summarizes the parameters and details for a function that returns a list of identities linked to a user, and another function that links an identity to a user. The functions return a Promise that resolves to a Union type, indicating they can return different data structures based on the operation's outcome."
  },
  {
    "chunk_id": "355baccc-b570-47bb-8f05-b7a526a401ba",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nLink an identity to a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.linkIdentity({  _10  provider: 'github'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUnlink an identity from a user\\\n------------------------------\\\n\\\nUnlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\\\n\\\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth)\\\n    .\\\n*   The user needs to be signed in to call `unlinkIdentity()`.\\\n*   The user must have at least 2 identities in order to unlink an identity.\\\n*   The identity to be unlinked must belong to the user.\\\n\\",
    "summary": "This documentation describes functions for linking and unlinking user identities, such as a GitHub account, to a user's account. Linking an identity allows users to sign in with that identity, while unlinking removes the ability to sign in with that identity. Key requirements for unlinking include having at least 2 identities linked and enabling the \"Enable Manual Linking\" option in the project's authentication settings."
  },
  {
    "chunk_id": "f00307aa-f8b1-4a50-acfc-01bfda413408",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   identityRequiredUserIdentity\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a function to link an identity to a user, which returns a Promise with a Union type. The key parameters include the identity to be linked to the user. This functionality allows users to associate their accounts with external identities, enabling features such as single sign-on or social login."
  },
  {
    "chunk_id": "0891da9e-c4a6-478e-8d98-5fd24c219b72",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUnlink an identity\\\n\\\n`     _10  // retrieve all identites linked to a user  _10  const identities = await supabase.auth.getUserIdentities()  _10  _10  // find the google identity  _10  const googleIdentity = identities.find(  _10  identity => identity.provider === 'google'  _10  )  _10  _10  // unlink the google identity  _10  const { error } = await supabase.auth.unlinkIdentity(googleIdentity)      `\\\n\\\n* * *\\\n\\\nSend a password reauthentication nonce\\\n--------------------------------------\\\n\\\nSends a reauthentication OTP to the user's email or phone number. Requires the user to be signed-in.\\\n\\\n*   This method is used together with `updateUser()` when a user's password needs to be updated.\\\n*   If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n*   A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\\\n*   This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\\\n\\",
    "summary": "The documentation provides details on unlinking an identity and sending a password reauthentication nonce. It describes how to retrieve all identities linked to a user, find the specific identity (e.g., Google), and unlink it using the `supabase.auth.unlinkIdentity()` method. It also explains the process of sending a reauthentication OTP to the user's email or phone number, which is required when updating a user's password, particularly when the \"Secure password change\" option is enabled and the user hasn't recently signed in."
  },
  {
    "chunk_id": "f19ae393-dedd-42fb-8a52-f66580b6fbab",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSend reauthentication nonce\\\n\\\n`     _10  const { error } = await supabase.auth.reauthenticate()      `\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nResend an OTP\\\n-------------\\\n\\\nResends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\\\n\\\n*   Resends a signup confirmation, email change or phone change email to the user.\\\n*   Passwordless sign-ins can be resent by calling the `signInWithOtp()` method again.\\\n*   Password recovery emails can be resent by calling the `resetPasswordForEmail()` method again.\\\n*   This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\\\n*   You can specify a redirect url when you resend an email link using the `emailRedirectTo` option.\\\n\\",
    "summary": "The provided documentation describes the `reauthenticate()` method of the Supabase authentication API, which allows users to send a reauthentication nonce to verify their identity. Additionally, it covers the `resendOTP()` method, which can be used to resend signup confirmation emails, email change emails, SMS OTPs, or phone change OTPs, allowing users to complete pending authentication procedures."
  },
  {
    "chunk_id": "1313ff31-656a-4a7a-a23a-91011b03eada",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   credentialsRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on the `credentialsRequired` parameter, which is a union type that can be used to reauthenticate users, resend email/phone signup confirmations, or resend email confirmations. This functionality is likely used to handle user authentication and onboarding flows in the application."
  },
  {
    "chunk_id": "519f0ceb-8a11-4d5a-b10c-bd42aa68a8a8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\\\n\\\n`     _10  const { error } = await supabase.auth.resend({  _10  type: 'signup',  _10  email: 'email@example.com',  _10  options: {  _10  emailRedirectTo: 'https://example.com/welcome'  _10  }  _10  })      `\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nSet the session data\\\n--------------------\\\n\\\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\\\n\\\n*   This method sets the session using an `access_token` and `refresh_token`.\\\n*   If successful, a `SIGNED_IN` event is emitted.\\\n\\",
    "summary": "The summary provides details on the `supabase.auth.resend()` method, which can be used to resend various types of signup and email change confirmations. It also explains the `supabase.auth.setSession()` method, which sets the current session data by refreshing the access token if necessary, and emits a `SIGNED_IN` event on success."
  },
  {
    "chunk_id": "cf2a46e4-09b8-4851-a612-04d39ddf0445",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   currentSessionRequiredobject\\\n    \\\n    The current session that minimally contains an access token and refresh token.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the \"setSessions\" function in the Supabase library, which allows setting the current session with an access token and refresh token. This function is used to manage user authentication sessions programmatically, which is a key aspect of building secure and stateful web applications with Supabase."
  },
  {
    "chunk_id": "dcbcbb42-e653-452d-9d42-d5107ecd1403",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSet the session\\\n\\\n`     _10  const { data, error } = await supabase.auth.setSession({  _10  access_token,  _10  refresh_token  _10  })      `\\\n\\\nResponse\\\n\\\nNotes\\\n\\\n* * *\\\n\\\nExchange an auth code for a session\\\n-----------------------------------\\\n\\\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\\\n\\\n*   Used when `flowType` is set to `pkce` in client options.\\\n\\",
    "summary": "The documentation describes two sets of parameters for the Supabase authentication API: 1) `setSession`, which takes an object with `access_token` and `refresh_token` properties to set the current session, and 2) `authCodeRequired`, which is used when the `flowType` is set to `pkce` to log in an existing user by exchanging an Auth Code issued during the PKCE flow."
  },
  {
    "chunk_id": "9d9ac3a8-f920-4c53-b957-db44f5ee9c69",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   authCodeRequiredstring\\\n    \\\n\\",
    "summary": "The provided content describes a function that exchanges an auth code for a session. The function takes an `authCodeRequired` parameter of type `string` as input and returns a Promise that resolves to a Union type. This functionality is likely used to authenticate users and establish a session, which is a critical aspect of many software applications."
  },
  {
    "chunk_id": "70d3da89-d664-4f71-b2ac-3a89e2ecdfae",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nExchange Auth Code\\\n\\\n`     _10  supabase.auth.exchangeCodeForSession('34e770dd-9ff9-416c-87fa-43b31d7ef225')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nStart auto-refresh session (non-browser)\\\n----------------------------------------\\\n\\\nStarts an auto-refresh process in the background. The session is checked every few seconds. Close to the time of expiration a process is started to refresh the session. If refreshing fails it will be retried for as long as necessary.\\\n\\\n*   Only useful in non-browser environments such as React Native or Electron.\\\n*   The Supabase Auth library automatically starts and stops proactively refreshing the session when a tab is focused or not.\\\n*   On non-browser platforms, such as mobile or desktop apps built with web technologies, the library is not able to effectively determine whether the application is _focused_ or not.\\\n*   To give this hint to the application, you should be calling this method when the app is in focus and calling `supabase.auth.stopAutoRefresh()` when it's out of focus.\\\n\\",
    "summary": "The content describes the `supabase.auth.exchangeCodeForSession()` method, which exchanges an authorization code for a Supabase session. It also explains the `supabase.auth.startAutoRefresh()` and `supabase.auth.stopAutoRefresh()` methods, which start and stop an automatic session refresh process in non-browser environments like React Native or Electron, ensuring the session remains valid without user intervention."
  },
  {
    "chunk_id": "e2926e9d-a13c-409f-af33-82b026e0c433",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<void>\\\n\\\nStart and stop auto refresh in React Native\\\n\\\n`     _10  import { AppState } from 'react-native'  _10  _10  // make sure you register this only once!  _10  AppState.addEventListener('change', (state) => {  _10  if (state === 'active') {  _10  supabase.auth.startAutoRefresh()  _10  } else {  _10  supabase.auth.stopAutoRefresh()  _10  }  _10  })      `\\\n\\\n* * *\\\n\\\nStop auto-refresh session (non-browser)\\\n---------------------------------------\\\n\\\nStops an active auto refresh process running in the background (if any).\\\n\\\n*   Only useful in non-browser environments such as React Native or Electron.\\\n*   The Supabase Auth library automatically starts and stops proactively refreshing the session when a tab is focused or not.\\\n*   On non-browser platforms, such as mobile or desktop apps built with web technologies, the library is not able to effectively determine whether the application is _focused_ or not.\\\n*   When your application goes in the background or out of focus, call this method to stop the proactive refreshing of the session.\\\n\\",
    "summary": "The provided content describes how to start and stop auto-refresh of the Supabase auth session in a React Native application. It explains that the Supabase auth library automatically handles this task on browser-based platforms, but requires manual control on non-browser environments like mobile or desktop apps. The key points are the need to manually call `supabase.auth.startAutoRefresh()` when the app is active and `supabase.auth.stopAutoRefresh()` when the app goes into the background to ensure the session remains valid."
  },
  {
    "chunk_id": "8c210d30-3c72-4b2a-aebe-f104ed70d6c8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<void>\\\n\\\nStart and stop auto refresh in React Native\\\n\\\n`     _10  import { AppState } from 'react-native'  _10  _10  // make sure you register this only once!  _10  AppState.addEventListener('change', (state) => {  _10  if (state === 'active') {  _10  supabase.auth.startAutoRefresh()  _10  } else {  _10  supabase.auth.stopAutoRefresh()  _10  }  _10  })      `\\\n\\\n* * *\\\n\\\nAuth MFA\\\n--------\\\n\\\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\\\n\\\nCurrently, there is support for time-based one-time password (TOTP) and phone verification code as the 2nd factor. Recovery codes are not supported but users can enroll multiple factors, with an upper limit of 10.\\\n\\\nHaving a 2nd factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup factor.\\\n\\\n* * *\\\n\\\nEnroll a factor\\\n---------------\\\n\\\nStarts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new `unverified` factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it.\\\n\\\n*   Use `totp` or `phone` as the `factorType` and use the returned `id` to create a challenge.\\\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/javascript/auth-mfa-challenge)\\\n    .\\\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n    .\\\n*   To create and verify a TOTP challenge in a single step, see [`mfa.challengeAndVerify()`](/docs/reference/javascript/auth-mfa-challengeandverify)\\\n    .\\\n*   To generate a QR code for the `totp` secret in Next.js, you can do the following:\\\n\\\n`     _10  <Image src=\\{data.totp.qr_code\\} alt=\\{data.totp.uri\\} layout=\"fill\"></Image>      `\\\n\\\n*   The `challenge` and `verify` steps are separated when using Phone factors as the user will need time to receive and input the code obtained from the SMS in challenge.\\\n\\",
    "summary": "The provided code demonstrates how to start and stop auto-refresh for React Native's AppState, which is useful for maintaining Supabase authentication sessions. The documentation also covers Supabase's Multi-Factor Authentication (MFA) features, including enrolling and verifying TOTP (Time-based One-Time Password) and phone verification factors. MFA helps secure user accounts by requiring a second authentication step, and the separation of the challenge and verification steps allows for phone-based factors."
  },
  {
    "chunk_id": "9fa61a75-a567-492b-b864-8a3adfcdd46c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAEnrollParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The content summarizes the parameters required for enrolling a time-based, one-time password (TOTP) factor or a phone factor in the application. The summary includes details on the required parameters and their purpose, which is crucial for implementing multi-factor authentication mechanisms in the software."
  },
  {
    "chunk_id": "0812c5f4-e69c-4718-abe4-e4c4788d6db8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nEnroll a time-based, one-time password (TOTP) factorEnroll a Phone Factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.enroll({  _10  factorType: 'totp',  _10  friendlyName: 'your_friendly_name'  _10  })  _10  _10  // Use the id to create a challenge.  _10  // The challenge can be verified by entering the code generated from the authenticator app.  _10  // The code will be generated upon scanning the qr_code or entering the secret into the authenticator app.  _10  const { id, type, totp: { qr_code, secret, uri }, friendly_name } = data  _10  const challenge = await supabase.auth.mfa.challenge({ factorId: id });      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a challenge\\\n------------------\\\n\\\nPrepares a challenge used to verify that a user has access to a MFA factor.\\\n\\\n*   An [enrolled factor](/docs/reference/javascript/auth-mfa-enroll)\\\n     is required before creating a challenge.\\\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n    .\\\n*   A phone factor sends a code to the user upon challenge. The channel defaults to `sms` unless otherwise specified.\\\n\\",
    "summary": "The content describes the process of enrolling a time-based, one-time password (TOTP) or phone factor for multi-factor authentication (MFA) in Supabase. After enrolling a factor, a challenge can be created to verify the user's access to that factor. The challenge can be verified by entering the code generated from the authenticator app or by receiving a code through the specified channel (e.g., SMS)."
  },
  {
    "chunk_id": "7ad271af-37fd-4551-a35a-9ef5d3dafd40",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAChallengeParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters required for a multi-factor authentication (MFA) challenge, which is a critical security feature for user authentication. The summary outlines that this endpoint allows for the creation of MFA challenges, including those for phone factors, to enhance the security of user access to the system."
  },
  {
    "chunk_id": "5a417ca3-6022-4357-baf3-0a1c5bc043de",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate a challenge for a factorCreate a challenge for a phone factorCreate a challenge for a phone factor (WhatsApp)\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.challenge({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nVerify a challenge\\\n------------------\\\n\\\nVerifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app.\\\n\\\n*   To verify a challenge, please [create a challenge](/docs/reference/javascript/auth-mfa-challenge)\\\n     first.\\\n\\",
    "summary": "This section describes two related API functions for multi-factor authentication (MFA) in Supabase. The first function, `supabase.auth.mfa.challenge()`, creates a challenge for a phone, WhatsApp, or other MFA factor. The second function, `supabase.auth.mfa.verify()`, verifies a user-provided code against the previously created challenge, completing the authentication process."
  },
  {
    "chunk_id": "bacdf382-0070-492d-92d9-57935c87ba57",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAVerifyParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary covers the technical details for the `paramsRequiredMFAVerifyParams` parameter, which is likely used to verify a challenge for a multi-factor authentication (MFA) factor. This operation likely returns a `Promise` with a `Union` type, containing data and error information related to the MFA verification process."
  },
  {
    "chunk_id": "c7a94e77-4965-4c10-8f66-17a43ddf482b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nVerify a challenge for a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.verify({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  challengeId: '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  code: '123456'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate and verify a challenge\\\n-----------------------------\\\n\\\nHelper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app.\\\n\\\n*   Intended for use with only TOTP factors.\\\n*   An [enrolled factor](/docs/reference/javascript/auth-mfa-enroll)\\\n     is required before invoking `challengeAndVerify()`.\\\n*   Executes [`mfa.challenge()`](/docs/reference/javascript/auth-mfa-challenge)\\\n     and [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify)\\\n     in a single step.\\\n\\",
    "summary": "The provided code snippet demonstrates how to verify a challenge for a multi-factor authentication (MFA) factor. It outlines a helper method called `challengeAndVerify()` that creates a challenge and immediately verifies it using a provided code, intended for use with TOTP factors that have been previously enrolled. This functionality allows for a streamlined MFA verification process in a single step."
  },
  {
    "chunk_id": "1e34a2a7-ac70-456c-976b-1e6b2a05b016",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAChallengeAndVerifyParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes parameters for a function that creates and verifies a multi-factor authentication (MFA) challenge. The function takes in a `paramsRequiredMFAChallengeAndVerifyParams` object, which likely contains details needed to generate and validate an MFA challenge, such as user information and challenge parameters. This functionality is likely critical for implementing secure multi-factor authentication in an application."
  },
  {
    "chunk_id": "9e26ca36-19e1-4948-908c-16877f769ce7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate and verify a challenge for a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.challengeAndVerify({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  code: '123456'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUnenroll a factor\\\n-----------------\\\n\\\nUnenroll removes a MFA factor. A user has to have an `aal2` authenticator level in order to unenroll a `verified` factor.\\\n\\",
    "summary": "The documentation covers two related methods: 'challengeAndVerify' and 'unenrollMFA'. 'challengeAndVerify' creates and verifies a challenge for a multi-factor authentication (MFA) factor, returning a Promise with the result. 'unenrollMFA' removes an MFA factor, but requires the user to have an 'aal2' authenticator level if the factor is 'verified'."
  },
  {
    "chunk_id": "8c5d02b1-a91b-4127-bb06-fdf7ffb906ec",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredMFAUnenrollParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters required for unenrolling a multi-factor authentication (MFA) factor from a user's account. The `paramsRequiredMFAUnenrollParams` parameter is used to provide the necessary information to unenroll the MFA factor, such as the factor ID or the authentication method."
  },
  {
    "chunk_id": "4030a354-998c-4ecc-a16d-35bc0cc8eea2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUnenroll a factor\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.unenroll({  _10  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nGet Authenticator Assurance Level\\\n---------------------------------\\\n\\\nReturns the Authenticator Assurance Level (AAL) for the active session.\\\n\\\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\\\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP) or Phone factor.\\\n*   If the user has a verified factor, the `nextLevel` field will return `aal2`, else, it will return `aal1`.\\\n\\",
    "summary": "The documentation describes how to unenroll a multi-factor authentication (MFA) factor and how to retrieve the Authenticator Assurance Level (AAL) for the active session. The AAL indicates the strength of the authentication mechanism, with `aal1` representing a single factor (e.g., email and password) and `aal2` representing a second factor (e.g., time-based one-time password). The `nextLevel` field indicates the AAL that would be required for the user if they were to add a second factor."
  },
  {
    "chunk_id": "b898d7dd-e996-4e49-be56-0fa97daa7a9b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet the AAL details of a session\\\n\\\n`     _10  const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()  _10  const { currentLevel, nextLevel, currentAuthenticationMethods } = data      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nAuth Admin\\\n----------\\\n\\\n*   Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\\\n*   These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\\\n\\\nCreate server-side auth client\\\n\\\n`     _11  import { createClient } from '@supabase/supabase-js'  _11  _11  const supabase = createClient(supabase_url, service_role_key, {  _11  auth: {  _11  autoRefreshToken: false,  _11  persistSession: false  _11  }  _11  })  _11  _11  // Access auth admin api  _11  const adminAuthClient = supabase.auth.admin      `\\\n\\\n* * *\\\n\\\nRetrieve a user\\\n---------------\\\n\\\nGet user by id.\\\n\\\n*   Fetches the user object from the database based on the user's id.\\\n*   The `getUserById()` method requires the user's id which maps to the `auth.users.id` column.\\\n\\",
    "summary": "The documentation discusses the Supabase Auth API, including how to unenroll a factor, retrieve the Authentication Assurance Level (AAL) of a session, and perform administrative tasks like retrieving a user by their unique identifier. It emphasizes the need to use the `service_role` key for admin methods and to avoid exposing it in the browser. The key technical points are the use of the `supabase.auth.mfa` and `supabase.auth.admin` namespaces, and the `getUserById()` method for retrieving user information."
  },
  {
    "chunk_id": "43c35f35-ff36-4f20-b30f-2c5fe38021da",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   uidRequiredstring\\\n    \\\n    The user's unique identifier\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n\\",
    "summary": "This function fetches the AAL (Access, Authorization, and Logging) details of a user session, taking the user's unique identifier as a required parameter. The function should only be called on a server, as it should not expose the service_role key in the browser, which could compromise the application's security."
  },
  {
    "chunk_id": "a3d663f9-3148-4528-841e-4fe008c611c8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nFetch the user object using the access\\_token jwt\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.getUserById(1)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all users\\\n--------------\\\n\\\nGet a list of users.\\\n\\\n*   Defaults to return 50 users per page.\\\n\\",
    "summary": "The provided content describes a function to fetch a user object using a user's unique identifier and an access token. It also includes details on listing all users, with the ability to paginate the results by specifying the page and items per page. The function returns a Promise that resolves to the user data or an error."
  },
  {
    "chunk_id": "2386f42c-8b46-4408-a71f-a28b03a92a91",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsOptionalPageParams\\\n    \\\n    An object which supports `page` and `perPage` as numbers, to alter the paginated results.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on the parameters for the API endpoint, which allows fetching a paginated list of users. The `params` parameter is an optional object that supports `page` and `perPage` properties, enabling the caller to control the pagination of the user list returned by the API."
  },
  {
    "chunk_id": "fa4c109d-44df-42f8-aaa7-32cf8465bfb4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet a page of usersPaginated list of users\\\n\\\n`     _10  const { data: { users }, error } = await supabase.auth.admin.listUsers()      `\\\n\\\n* * *\\\n\\\nCreate a user\\\n-------------\\\n\\\nCreates a new user. This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n\\\n*   To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\\\n*   `createUser()` will not send a confirmation email to the user. You can use [`inviteUserByEmail()`](/docs/reference/javascript/auth-admin-inviteuserbyemail)\\\n     if you want to send them an email invite instead.\\\n*   If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\\\n\\",
    "summary": "This documentation provides details on the Supabase Authentication API, specifically the `listUsers()` and `createUser()` functions. `listUsers()` allows fetching a paginated list of users, while `createUser()` creates a new user, providing options to confirm the user's email or phone number. It is important to note that `createUser()` should only be called on a server, and not exposed in the browser, as it uses the `service_role` key."
  },
  {
    "chunk_id": "738267ae-e65e-4c7c-9a39-adcb99936b95",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   attributesRequiredAdminUserAttributes\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes input parameters required for an administrative user attributes function. It includes a list of required attributes, such as auto-confirming the user's email and phone, and managing custom user metadata. This functionality is likely used to create and manage user accounts with specific administrative privileges and settings."
  },
  {
    "chunk_id": "d721c5c4-6e47-4f8b-97ca-7ad3e76a57f7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.createUser({  _10  email: 'user@email.com',  _10  password: 'password',  _10  user_metadata: { name: 'Yoda' }  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a user\\\n-------------\\\n\\\nDelete a user. Requires a `service_role` key.\\\n\\\n*   The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.\\\n\\",
    "summary": "The documentation describes a method to create a new user in Supabase, with the ability to set custom user metadata and auto-confirm the user's email and phone number. It also explains how to delete a user, which requires the user's ID and a `service_role` key."
  },
  {
    "chunk_id": "3eafcbf2-f067-4bb9-8147-271f802d538e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The user id you want to remove.\\\n    \\\n*   shouldSoftDeleteRequiredboolean\\\n    \\\n    If true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n\\",
    "summary": "This function, `supabase.auth.admin.deleteUser()`, removes a user from the Supabase authentication schema. It takes two parameters: `id` (the user ID to be removed) and `shouldSoftDelete` (a boolean indicating whether to soft-delete the user by disabling their account while preserving their data). This function should only be used on a server and not exposed in the browser, as it requires the `service_role` key for authentication."
  },
  {
    "chunk_id": "74e3deaf-b086-45dd-a8c9-9ea55ee0039b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRemoves a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.deleteUser(  _10  '715ed5db-f090-4b8c-a067-640ecee36aa0'  _10  )      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nSend an email invite link\\\n-------------------------\\\n\\\nSends an invite link to an email address.\\\n\\\n*   Sends an invite link to the user's email address.\\\n*   The `inviteUserByEmail()` method is typically used by administrators to invite users to join the application.\\\n*   Note that PKCE is not supported when using `inviteUserByEmail`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\\\n\\",
    "summary": "The documentation describes two related API methods: 1) `deleteUser()` which removes a user account, and 2) `inviteUserByEmail()` which sends an email invite link to a user. The `deleteUser()` method takes a user ID and a flag to determine if the deletion should be a \"soft\" delete. The `inviteUserByEmail()` method is used by administrators to invite new users, but does not support the more secure PKCE authentication flow."
  },
  {
    "chunk_id": "cd09b5ee-964b-4bfd-b02c-f28a74370b1c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   emailRequiredstring\\\n    \\\n    The email address of the user.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Additional options to be included when inviting.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function invites a user by taking an email address and an optional options object as parameters. The details section suggests that the options object can be used to include additional details when inviting the user."
  },
  {
    "chunk_id": "2c3852f4-d0f4-4237-941f-26de8ba4ecc2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nInvite a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.inviteUserByEmail('email@example.com')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nGenerate an email link\\\n----------------------\\\n\\\nGenerates email links and OTPs to be sent via a custom email provider.\\\n\\\n*   The following types can be passed into `generateLink()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\\\n*   `generateLink()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers)\\\n    .\\\n*   `generateLink()` handles the creation of the user for `signup`, `invite` and `magiclink`.\\\n\\",
    "summary": "The documentation describes the `inviteUserByEmail()` function, which allows inviting a user by email address, and the `generateLink()` function, which generates email links and OTPs for various authentication scenarios like signup, magic link, password recovery, and email change. The `generateLink()` function handles the creation of the user for certain flows, and the available link types are specified."
  },
  {
    "chunk_id": "8842c892-ab17-4917-9a71-2f9f7e08065c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredGenerateLinkParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a set of methods for generating various types of links, including signup links, invite links, magic links, and recovery links. These links are used for user authentication and account management purposes, and the methods return a Promise that resolves with the generated link details."
  },
  {
    "chunk_id": "efc500f1-82f5-49ca-a3e5-c491b637035f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.generateLink({  _10  type: 'signup',  _10  email: 'email@example.com',  _10  password: 'secret'  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a user\\\n-------------\\\n\\\nUpdates the user data.\\\n\\",
    "summary": "This section describes the `generateLink` function, which can be used to generate various types of links such as signup, invite, magic, recovery, and email change links. The function takes in parameters like `email` and `password` and returns a `Promise` with the generated link data. Additionally, the documentation covers the `updateUser` function, which allows updating a user's data."
  },
  {
    "chunk_id": "f34fe318-10ab-4628-85e1-c7e85b04d9ea",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   uidRequiredstring\\\n    \\\n*   attributesRequiredAdminUserAttributes\\\n    \\\n    The data you want to update.\\\n    \\\n    This function should only be called on a server. Never expose your `service_role` key in the browser.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This function updates a user's account attributes, such as email, password, and metadata, using the provided `uid` and `attributes` parameters. It is intended to be called on a server-side environment, as it should not expose the `service_role` key in the browser. This function is part of a broader user management system and provides a way to programmatically update user information."
  },
  {
    "chunk_id": "b8ac1e3b-7b74-4a9d-947d-2805edbeb081",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\\\n\\\n`     _10  const { data: user, error } = await supabase.auth.admin.updateUserById(  _10  '11111111-1111-1111-1111-111111111111',  _10  { email: 'new@email.com' }  _10  )      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a factor for a user\\\n--------------------------\\\n\\\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\\\n\\",
    "summary": "This section of the documentation describes the `updateUserById` and `deleteFactorById` functions in the Supabase Auth Admin API. The `updateUserById` function allows updating a user's email, password, metadata, and app metadata, as well as confirming their email and phone number. The `deleteFactorById` function deletes a factor (e.g., 2FA) from a user's account, which will log the user out of all active sessions if the deleted factor was verified."
  },
  {
    "chunk_id": "a89f3e4f-8d0b-4a31-9b13-b96ef1f4b80a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   paramsRequiredAuthMFAAdminDeleteFactorParams\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters for deleting a multi-factor authentication (MFA) factor for a user. It includes a `paramsRequiredAuthMFAAdminDeleteFactorParams` object that specifies the required parameters for this operation. This functionality allows administrators to manage MFA settings for user accounts."
  },
  {
    "chunk_id": "114f88a3-3228-444c-a5b2-d69001b6f626",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete a factor for a user\\\n\\\n`     _10  const { data, error } = await supabase.auth.admin.mfa.deleteFactor({  _10  id: '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  userId: 'a89baba7-b1b7-440f-b4bb-91026967f66b',  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nInvokes a Supabase Edge Function.\\\n---------------------------------\\\n\\\nInvokes a function\\\n\\\nInvoke a Supabase Edge Function.\\\n\\\n*   Requires an Authorization header.\\\n*   Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\\\n     spec.\\\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialize it and attach the `Content-Type` header as `application/json`. You can override this behavior by passing in a `Content-Type` header of your own.\\\n*   Responses are automatically parsed as `json`, `blob` and `form-data` depending on the `Content-Type` header sent by your function. Responses are parsed as `text` by default.\\\n\\",
    "summary": "This documentation describes how to delete a multi-factor authentication (MFA) factor for a user using the Supabase Auth Admin API. It provides an example of the API call, which takes a user ID and a factor ID as parameters. The documentation also explains the general functionality of the Supabase Edge Functions API, including details about request and response handling, authentication requirements, and response parsing."
  },
  {
    "chunk_id": "56cf2f45-b5fc-4b2a-ab7b-953eadf3fc35",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   functionNameRequiredstring\\\n    \\\n    The name of the Function to invoke.\\\n    \\\n*   optionsRequiredFunctionInvokeOptions\\\n    \\\n    Options for invoking the Function.\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary covers the parameters required for invoking a function in the software documentation. It includes the function name, which is a required string parameter, and the FunctionInvokeOptions, which are the required options for invoking the function. The key technical points are the input parameters and their significance in the function invocation process."
  },
  {
    "chunk_id": "81bd0852-3b59-48cd-90e0-62881ffafc97",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nBasic invocationError handlingPassing custom headersCalling with DELETE HTTP verbInvoking a Function in the UsEast1 regionCalling with GET HTTP verb\\\n\\\n`     _10  const { data, error } = await supabase.functions.invoke('hello', {  _10  body: { foo: 'bar' }  _10  })      `\\\n\\\n* * *\\\n\\\nSubscribe to channel\\\n--------------------\\\n\\\nCreates an event handler that listens to changes.\\\n\\\n*   By default, Broadcast and Presence are enabled for all projects.\\\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview)\\\n    .\\\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\\\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\\\n\\",
    "summary": "The provided content describes the parameters and usage of the Supabase functions invoke API, including details on error handling, passing custom headers, and invoking functions in different regions. It also covers the Supabase Realtime API, explaining how to subscribe to channel updates and the implications of database replication and row-level security."
  },
  {
    "chunk_id": "c37f6585-2efb-4e4f-b777-95af76fa741e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   typeRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n*   filterRequiredUnion: expand to see options\\\n    \\\n    Details\\\n    \\\n*   callbackRequiredfunction\\\n    \\\n    Details\\\n    \\\n\\\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\\\n\\\n`     _13  const channel = supabase.channel(\"room1\")  _13  _13  channel.on(\"broadcast\", { event: \"cursor-pos\" }, (payload) => {  _13  console.log(\"Cursor position received!\", payload);  _13  }).subscribe((status) => {  _13  if (status === \"SUBSCRIBED\") {  _13  channel.send({  _13  type: \"broadcast\",  _13  event: \"cursor-pos\",  _13  payload: { x: Math.random(), y: Math.random() },  _13  });  _13  }  _13  });      `\\\n\\\n* * *\\\n\\\nUnsubscribe from a channel\\\n--------------------------\\\n\\\nUnsubscribes and removes Realtime channel from Realtime client.\\\n\\\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\\\n\\",
    "summary": "The provided content covers the Realtime client API for Supabase, including details on subscribing to various events such as broadcast messages, presence sync, and database changes. It also explains how to unsubscribe from a Realtime channel, which is important for maintaining performance and managing resources on the Supabase platform."
  },
  {
    "chunk_id": "64378e16-bb22-468f-b851-421670eabd2c",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   channelRequired@supabase/realtime-js.RealtimeChannel\\\n    \\\n    The name of the Realtime channel.\\\n    \\\n\\",
    "summary": "The section describes the `removeChannel()` method in the `@supabase/realtime-js` library, which takes a required `RealtimeChannel` parameter to remove a specified Realtime channel. The method returns a `Promise` that resolves when the channel is successfully removed."
  },
  {
    "chunk_id": "c31b74e0-8cf2-4b11-b52c-f86ec384964e",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nRemoves a channel\\\n\\\n`     _10  supabase.removeChannel(myChannel)      `\\\n\\\n* * *\\\n\\\nUnsubscribe from all channels\\\n-----------------------------\\\n\\\nUnsubscribes and removes all Realtime channels from Realtime client.\\\n\\\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\\\n\\",
    "summary": "The summary covers the following key points:\n\n1. The `supabase.removeChannel()` method removes a specified Realtime channel.\n2. The `supabase.removeAllChannels()` method unsubscribes and removes all Realtime channels from the Realtime client, which helps maintain the performance of the Realtime service and the database by removing unused channels that could cause degradation as more clients subscribe."
  },
  {
    "chunk_id": "ff9e5f71-752f-47b4-955b-600b6da9d4f6",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Array<Union: expand to see options>>\\\n\\\nDetails\\\n\\\nRemove all channels\\\n\\\n`     _10  supabase.removeAllChannels()      `\\\n\\\n* * *\\\n\\\nRetrieve all channels\\\n---------------------\\\n\\\nReturns all Realtime channels.\\\n\\",
    "summary": "The provided content covers two key methods in the Supabase Realtime library: `removeAllChannels()` which removes all active channels, and `getChannels()` which returns an array of all Realtime channels. The return types are a Promise for `removeAllChannels()` and an array of Realtime Channel objects for `getChannels()`, allowing developers to manage and retrieve the active channels in their Supabase-powered applications."
  },
  {
    "chunk_id": "caa04628-daee-4470-a3c1-b4cd6c5bc3aa",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nArray<@supabase/realtime-js.RealtimeChannel>\\\n\\\nGet all channels\\\n\\\n`     _10  const channels = supabase.getChannels()      `\\\n\\\n* * *\\\n\\\nBroadcast a message\\\n-------------------\\\n\\\nSends a message into the channel.\\\n\\\nBroadcast a message to all connected clients to a channel.\\\n\\\n*   When using REST you don't need to subscribe to the channel\\\n*   REST calls are only available from 2.37.0 onwards\\\n\\",
    "summary": "The provided content describes the `supabase.getChannels()` method, which returns an array of all active channels, and the `supabase.broadcast()` method, which sends a message to all connected clients in a specified channel. Key points include that REST calls are only available from version 2.37.0 onwards, and that no subscription is required for REST-based broadcasting."
  },
  {
    "chunk_id": "73fd25ea-2b58-4d14-85ae-af01fc698361",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   argsRequiredobject\\\n    \\\n    Arguments to send to channel\\\n    \\\n    Details\\\n    \\\n*   optsRequired{ \\[key: string\\]: any }\\\n    \\\n    Options to be used during the send process\\\n    \\\n\\",
    "summary": "The provided content describes the parameters and options required for sending messages via the supabase.sendMessage() method. The parameters object contains the arguments to be sent to the channel, while the options object specifies additional settings for the send process. This functionality is crucial for real-time communication and collaboration features in an application built with the Supabase Realtime JS library."
  },
  {
    "chunk_id": "c405c64b-e1a7-4a1f-8f0f-1d8aacc7f43d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nSend a message via websocketSend a message via REST\\\n\\\n`     _11  supabase  _11  .channel('room1')  _11  .subscribe((status) => {  _11  if (status === 'SUBSCRIBED') {  _11  channel.send({  _11  type: 'broadcast',  _11  event: 'cursor-pos',  _11  payload: { x: Math.random(), y: Math.random() },  _11  })  _11  }  _11  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a bucket\\\n---------------\\\n\\\nCreates a new Storage bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `insert`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "This section describes how to send messages via a websocket channel using the Supabase library. It provides an example of subscribing to a channel, detecting when the subscription is established, and then sending a message with a random cursor position. Additionally, it outlines the process of creating a new Storage bucket, including the necessary RLS policy permissions and a reference to the Storage security guide."
  },
  {
    "chunk_id": "f5a7fa84-6cb6-425b-8a23-cf0ab454d5c8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    A unique identifier for the bucket you are creating.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This section describes the parameters for creating a new storage bucket in the Supabase platform. The required `id` parameter specifies a unique identifier for the bucket being created. The `options` parameter is an object that provides additional details for the bucket creation operation. This functionality allows developers to programmatically manage storage resources within the Supabase ecosystem."
  },
  {
    "chunk_id": "3a44142c-d6f6-4b30-90b4-5bc13e5d0bb4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .createBucket('avatars', {  _10  public: false,  _10  allowedMimeTypes: ['image/png'],  _10  fileSizeLimit: 1024  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve a bucket\\\n-----------------\\\n\\\nRetrieves the details of an existing Storage bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided content describes two related Storage API operations: creating a new storage bucket and retrieving the details of an existing bucket. The create bucket operation allows setting various parameters like the bucket ID, access permissions, and allowed file types. The retrieve bucket operation retrieves the details of an existing bucket, with the required permissions being `select` on the `buckets` table."
  },
  {
    "chunk_id": "0929b1aa-a33a-4431-a784-a7a01e92e003",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to retrieve.\\\n    \\\n\\",
    "summary": "The provided content describes how to retrieve a specific bucket using the Supabase storage service. The key parameter is `id`, a required string that represents the unique identifier of the bucket to be retrieved. This operation is performed asynchronously and returns a Promise with a Union type, providing both the retrieved data and any potential errors."
  },
  {
    "chunk_id": "8035e41f-e97a-496c-abc9-9f9d213655e5",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nGet bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .getBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all buckets\\\n----------------\\\n\\\nRetrieves the details of all Storage buckets within an existing project.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation outlines the API for retrieving a specific storage bucket and listing all available buckets within a Supabase project. It specifies the return type as a Promise that resolves to a Union type, and provides an example of retrieving the 'avatars' bucket. The summary also notes that listing all buckets requires specific Row Level Security (RLS) policy permissions on the 'buckets' and 'objects' tables."
  },
  {
    "chunk_id": "86590720-903d-4f25-ba99-3d037988d5af",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nList buckets\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .listBuckets()      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpdate a bucket\\\n---------------\\\n\\\nUpdates a Storage bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select` and `update`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The content summarizes how to list and update Storage buckets using the Supabase client. It provides the return type, a code example for listing buckets, and details on updating a bucket, including the required permissions and a reference to the Storage access control guide."
  },
  {
    "chunk_id": "c66e535e-c829-4988-8af7-5000d95849fc",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    A unique identifier for the bucket you are updating.\\\n    \\\n*   optionsRequiredobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided excerpt describes the update bucket functionality of the Supabase storage API. It requires two parameters: an `id` (a unique identifier for the bucket) and `options` (an object containing the details to update the bucket). This operation allows modifying the properties of an existing storage bucket, which is a key functionality for managing cloud storage resources."
  },
  {
    "chunk_id": "9e1246d7-9d42-4397-be4c-8b7625ab27a2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .updateBucket('avatars', {  _10  public: false,  _10  allowedMimeTypes: ['image/png'],  _10  fileSizeLimit: 1024  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete a bucket\\\n---------------\\\n\\\nDeletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select` and `delete`\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation covers two main operations for managing a storage bucket: updating a bucket's properties (e.g., making it private, setting allowed MIME types, and file size limit) and deleting a bucket. To delete a bucket, it must first be emptied, and the user requires the necessary permissions on the `buckets` and `objects` tables. The documentation also references the Storage guide for more details on access control."
  },
  {
    "chunk_id": "09dbb50e-72da-4fb9-8815-ff92da4190f5",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to delete.\\\n    \\\n\\",
    "summary": "This function deletes a specified bucket from the Supabase storage service. It takes a required `id` parameter, which is the unique identifier of the bucket to be deleted. The function returns a Promise that resolves with the data or error from the Supabase API call."
  },
  {
    "chunk_id": "82234948-267c-4da2-b647-dece2343aad7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .deleteBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nEmpty a bucket\\\n--------------\\\n\\\nRemoves all objects inside a single bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: `select`\\\n    *   `objects` table permissions: `select` and `delete`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation covers two different operations on Supabase storage buckets: deleting a bucket and emptying a bucket. Deleting a bucket removes the entire bucket, while emptying a bucket removes all objects inside a single bucket. Both operations require specific permissions in the `buckets` and `objects` tables, as described in the Supabase Storage security guide."
  },
  {
    "chunk_id": "4dd54e33-048d-4680-ac90-b84c452ee261",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   idRequiredstring\\\n    \\\n    The unique identifier of the bucket you would like to empty.\\\n    \\\n\\",
    "summary": "This function empties the specified Supabase storage bucket. It takes a single required parameter, `id`, which is the unique identifier of the bucket to be emptied. The function returns a Promise that resolves with the bucket emptying operation's result."
  },
  {
    "chunk_id": "69d1fb93-f2d9-4b85-92f9-d3ae8c795f78",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nEmpty bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .emptyBucket('avatars')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpload a file\\\n-------------\\\n\\\nUploads a file to an existing bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: only `insert` when you are uploading new files and `select`, `insert` and `update` when you are upserting files\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n*   For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Upload file using `ArrayBuffer` from base64 file data instead, see example below.\\\n\\",
    "summary": "The documentation covers two main operations related to Supabase storage:\n\n1. Emptying a storage bucket using the `supabase.storage.emptyBucket()` method, which requires the `id` of the bucket to be emptied.\n2. Uploading files to an existing storage bucket, which requires specific permissions on the `buckets` and `objects` tables. For React Native, it's recommended to use `ArrayBuffer` from base64 file data instead of `Blob`, `File` or `FormData`."
  },
  {
    "chunk_id": "c0e21e02-c0e1-43df-98be-9411a8840d4a",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\\\n    \\\n*   fileBodyRequiredFileBody\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This method uploads a file to a Supabase storage bucket using an ArrayBuffer representation of the file data. It requires a file path, including the file name, and the file body to be stored. Additionally, optional file options can be provided to configure the upload. The method returns a Promise with the upload operation's result."
  },
  {
    "chunk_id": "5c38f345-3497-44fe-8554-b44eff1930ed",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpload fileUpload file using \\`ArrayBuffer\\` from base64 file data\\\n\\\n`     _10  const avatarFile = event.target.files[0]  _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .upload('public/avatar1.png', avatarFile, {  _10  cacheControl: '3600',  _10  upsert: false  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDownload a file\\\n---------------\\\n\\\nDownloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes two main functionalities: file upload using `ArrayBuffer` from base64 file data, and file download from a private bucket. The file upload process is demonstrated with example code, while the file download feature requires specific permissions in the `buckets` and `objects` tables, as outlined in the Storage guide."
  },
  {
    "chunk_id": "2f3bc784-cd45-48b2-a43a-76907044fad4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The full path and file name of the file to be downloaded. For example `folder/image.png`.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes a function that allows downloading a file with optional transformations. The function takes two parameters: `path` (required, string) which specifies the full path and file name of the file to be downloaded, and `options` (optional, object) which provides details for the download operation. The function returns a Promise that resolves with the downloaded file data."
  },
  {
    "chunk_id": "b10ea52a-757e-43d6-bc56-9d6fc9600201",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDownload fileDownload file with transformations\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .download('folder/avatar1.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nList all files in a bucket\\\n--------------------------\\\n\\\nLists all the files within a bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided documentation describes the `download` function of the Supabase storage API, which allows downloading a file with optional transformations. It also covers the `list` function, which lists all files in a storage bucket, along with the required permissions. The summary highlights the key technical details and functionality of these storage API methods."
  },
  {
    "chunk_id": "b80736e1-8ffb-4fb1-8bfa-c880574ddb29",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathOptionalstring\\\n    \\\n    The folder path.\\\n    \\\n*   optionsOptionalSearchOptions\\\n    \\\n    Details\\\n    \\\n*   parametersOptionalFetchParameters\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on the parameters for the \"Download file\" and \"List files in a bucket\" methods. The \"pathOptional\" parameter specifies the folder path, the \"optionsOptionalSearchOptions\" parameter contains details on the search options, and the \"parametersOptionalFetchParameters\" parameter includes details on the fetch parameters. These methods likely allow users to download files and list files in a cloud storage bucket, which are common operations in cloud-based applications."
  },
  {
    "chunk_id": "f2afbf3f-ef06-4f50-a15d-05a9d0286b31",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nList files in a bucketSearch files in a bucket\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .list('folder', {  _10  limit: 100,  _10  offset: 0,  _10  sortBy: { column: 'name', order: 'asc' },  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nReplace an existing file\\\n------------------------\\\n\\\nReplaces an existing file at the specified path with a new one.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `update` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n*   For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Update file using `ArrayBuffer` from base64 file data instead, see example below.\\\n\\",
    "summary": "The documentation describes a function to list files in a Supabase storage bucket, with options to limit, offset, and sort the results. It also details how to replace an existing file in the bucket, noting that certain RLS policy permissions are required and that for React Native, ArrayBuffer should be used instead of Blob, File, or FormData."
  },
  {
    "chunk_id": "d09af160-49b8-4e6b-8ba1-17921c45b6c2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\\\n    \\\n*   fileBodyRequiredUnion: expand to see options\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n    Details\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This function updates a file in a cloud storage bucket by uploading an `ArrayBuffer` containing the file data. It takes a required `path` parameter that specifies the relative file path, and a required `fileBody` parameter that holds the file contents. Optional `fileOptions` can also be provided to configure the upload. This functionality allows developers to programmatically update files stored in cloud-based file storage systems."
  },
  {
    "chunk_id": "c11e56d8-d762-4974-a3ff-49f6239ec7aa",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpdate fileUpdate file using \\`ArrayBuffer\\` from base64 file data\\\n\\\n`     _10  const avatarFile = event.target.files[0]  _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .update('public/avatar1.png', avatarFile, {  _10  cacheControl: '3600',  _10  upsert: true  _10  })      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nMove an existing file\\\n---------------------\\\n\\\nMoves an existing file to a new path in the same bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `update` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The summary covers two key features of the Supabase storage API:\n\n1. Updating a file using an ArrayBuffer of base64 encoded file data, which can be used to update an existing file in the storage bucket.\n\n2. Moving an existing file to a new path within the same storage bucket, which requires specific permissions on the `objects` table (`update` and `select`) and is subject to the bucket's Row Level Security (RLS) policy."
  },
  {
    "chunk_id": "defb7bab-1418-457d-9d1d-441a6e7b7bfb",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromPathRequiredstring\\\n    \\\n    The original file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   toPathRequiredstring\\\n    \\\n    The new file path, including the new file name. For example `folder/image-new.png`.\\\n    \\\n\\",
    "summary": "The summary describes the parameters for moving a file using the `move file` function. The `fromPath` parameter specifies the original file path, including the current file name, while the `toPath` parameter specifies the new file path, including the new file name. This functionality allows users to relocate files within the storage system."
  },
  {
    "chunk_id": "b57d965e-e99c-421a-a11d-7a8dddc10d44",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nMove file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .move('public/avatar1.png', 'private/avatar2.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCopy an existing file\\\n---------------------\\\n\\\nCopies an existing file to a new path in the same bucket.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `insert` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation describes the `move` function of the Supabase Storage API, which allows moving a file to a new path within the same bucket. The function returns a Promise that resolves with the new file path or an error. The documentation also covers the required permissions for the `buckets` and `objects` tables, and refers to the Storage guide for more details on access control."
  },
  {
    "chunk_id": "219feb10-284c-47ae-b627-787adc23a60f",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   fromPathRequiredstring\\\n    \\\n    The original file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   toPathRequiredstring\\\n    \\\n    The new file path, including the new file name. For example `folder/image-copy.png`.\\\n    \\\n\\",
    "summary": "The function moves a file from one location to another within the Supabase storage service. The `fromPath` parameter specifies the original file path, while the `toPath` parameter defines the new file path and name. This operation is performed asynchronously and returns a Promise with the resulting data or error."
  },
  {
    "chunk_id": "8a106ed1-93b9-4194-b740-be1d4ed65fc9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCopy file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .copy('public/avatar1.png', 'private/avatar2.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nDelete files in a bucket\\\n------------------------\\\n\\\nDeletes files within the same bucket\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `delete` and `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "This documentation covers two main functionalities:\n1. Copying a file within the same Supabase storage bucket, providing a `Promise` response with the copied file details or any errors.\n2. Deleting files within a Supabase storage bucket, which requires specific permissions on the `buckets` and `objects` tables, as described in the Storage access control guide."
  },
  {
    "chunk_id": "c6bb72f4-9939-4597-800e-97fb61cb781b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathsRequiredArray<string>\\\n    \\\n    An array of files to delete, including the path and file name. For example \\[`'folder/image.png'`\\].\\\n    \\\n\\",
    "summary": "The provided content summarizes the parameters for a function that deletes one or more files from a cloud storage service. The function takes an array of file paths as input, allowing the user to delete multiple files in a single operation. This functionality is likely useful for managing and maintaining content stored in the cloud."
  },
  {
    "chunk_id": "3aa327f5-d61a-4946-b713-5d4f9a51eaf8",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nDelete file\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .remove(['folder/avatar1.png'])      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate a signed URL\\\n-------------------\\\n\\\nCreates a signed URL. Use a signed URL to share a file for a fixed amount of time.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The documentation covers two main functionalities:\n\n1. Deleting a file by providing an array of file paths, using the `supabase.storage.from('avatars').remove(['folder/avatar1.png'])` method.\n\n2. Creating a signed URL, which allows sharing a file for a fixed amount of time. This requires the `select` permission on the `objects` table and follows the Storage guide's access control policies."
  },
  {
    "chunk_id": "4bbf439d-d51f-40d5-9f77-ab11b3f082c9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the current file name. For example `folder/image.png`.\\\n    \\\n*   expiresInRequirednumber\\\n    \\\n    The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The provided content describes the parameters for the `deleteFile` function in a software library. The function takes a required `path` parameter (the file path including the filename), a required `expiresIn` parameter (the number of seconds until the signed URL expires), and an optional `options` object. This function allows deleting a file by creating a signed URL for the file with optional transformations."
  },
  {
    "chunk_id": "bd5fa00e-1243-409b-bab9-d3baba4a6cd1",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed URLCreate a signed URL for an asset with transformationsCreate a signed URL which triggers the download of the asset\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUrl('folder/avatar1.png', 60)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate signed URLs\\\n------------------\\\n\\\nCreates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `select`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The provided content describes the `createSignedUrl` function in the Supabase Storage API, which generates a signed URL for an asset that can be used to share the file for a fixed amount of time. The function takes a file path as input and returns a Promise that resolves to the signed URL. The signed URL allows access control and is governed by the \"objects\" table permissions in the Supabase RLS policy."
  },
  {
    "chunk_id": "4f95875a-a22d-49af-ad84-319656cc3955",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathsRequiredArray<string>\\\n    \\\n    The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\\\n    \\\n*   expiresInRequirednumber\\\n    \\\n    The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The summary provides details on creating signed URLs for asset downloads in a software application. It outlines the required parameters, including the file paths to be downloaded, the expiration time for the URLs (in seconds), and optional additional parameters. This functionality allows secure, time-limited access to assets for authenticated users or external parties."
  },
  {
    "chunk_id": "94981107-d442-42ad-8da5-974a97d665a2",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed URLs\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUrls(['folder/avatar1.png', 'folder/avatar2.png'], 60)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nCreate signed upload URL\\\n------------------------\\\n\\\nCreates a signed upload URL. Signed upload URLs can be used to upload files to the bucket without further authentication. They are valid for 2 hours.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: `insert`\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The summary creates a signed upload URL for files in a Supabase storage bucket, which can be used to upload files without further authentication. It requires `insert` permissions on the `objects` table and adheres to the storage access control policies. The signed URL is valid for 2 hours and can be used to upload files to the specified paths."
  },
  {
    "chunk_id": "40067b54-0b1c-42f5-b1c4-63c63dd69ca1",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the current file name. For example `folder/image.png`.\\\n    \\\n\\",
    "summary": "The function creates a signed URL for uploading a file to a specified path in the Supabase storage. The signed URL can be used to securely upload the file without exposing the storage credentials. The `path` parameter specifies the file path, including the file name, for the upload."
  },
  {
    "chunk_id": "ab4c27d9-01b7-4102-9b15-3770055dd977",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nCreate Signed Upload URL\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .createSignedUploadUrl('folder/cat.jpg')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nUpload to a signed URL\\\n----------------------\\\n\\\nUpload a file with a token generated from `createSignedUploadUrl`.\\\n\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "The summary provides a concise overview of the functionality to create a signed upload URL for a file in Supabase Storage. It explains that the `createSignedUploadUrl` function returns a Promise that resolves to a data object containing the signed URL, which can then be used to upload the file. The summary also notes that no specific permissions are required in the RLS policy for this operation, and provides a reference to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "4ec5b841-3364-4579-99bd-73c9af614215",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\\\n    \\\n*   tokenRequiredstring\\\n    \\\n    The token generated from `createSignedUploadUrl`\\\n    \\\n*   fileBodyRequiredFileBody\\\n    \\\n    The body of the file to be stored in the bucket.\\\n    \\\n*   fileOptionsOptionalFileOptions\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "This documentation describes how to upload a file to a signed URL in Supabase. It outlines the required parameters, including the file path, token from `createSignedUploadUrl`, file body, and optional file options. The key steps are generating a signed URL, then using that token to upload the file content to the specified file path within a Supabase bucket."
  },
  {
    "chunk_id": "46c4060c-3d65-460c-aae2-aa70ab33540d",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nPromise<Union: expand to see options>\\\n\\\nDetails\\\n\\\nUpload to a signed URL\\\n\\\n`     _10  const { data, error } = await supabase  _10  .storage  _10  .from('avatars')  _10  .uploadToSignedUrl('folder/cat.jpg', 'token-from-createSignedUploadUrl', file)      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRetrieve public URL\\\n-------------------\\\n\\\nA simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\\\n\\\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket)\\\n     or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard)\\\n    , clicking the overflow menu on a bucket and choosing \"Make public\"\\\n*   RLS policy permissions required:\\\n    *   `buckets` table permissions: none\\\n    *   `objects` table permissions: none\\\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control)\\\n     on how access control works\\\n\\",
    "summary": "This document provides details on uploading files to a signed URL and retrieving their public URL using the Supabase Storage API. It explains how to upload a file to a signed URL, and how to generate a public URL for a file in a public bucket. The key technical points include the required parameters, the code example for uploading to a signed URL, and the necessary permissions and configurations to make a bucket public."
  },
  {
    "chunk_id": "720f84de-230c-4763-80e4-c150e39578ca",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Parameters\\\n\\\n*   pathRequiredstring\\\n    \\\n    The path and name of the file to generate the public URL for. For example `folder/image.png`.\\\n    \\\n*   optionsOptionalobject\\\n    \\\n    Details\\\n    \\\n\\",
    "summary": "The function generates a public URL for an asset stored in a public bucket, with optional transformation parameters to modify the asset's appearance. The path parameter specifies the location and name of the file, while the optional options parameter allows for custom transformations such as resizing, cropping, or applying filters."
  },
  {
    "chunk_id": "7453df6f-6591-4ec7-b9ac-b9e1bcd332d4",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Return Type\\\n\\\nobject\\\n\\\nDetails\\\n\\\nReturns the URL for an asset in a public bucketReturns the URL for an asset in a public bucket with transformationsReturns the URL which triggers the download of an asset in a public bucket\\\n\\\n`     _10  const { data } = supabase  _10  .storage  _10  .from('public-bucket')  _10  .getPublicUrl('folder/avatar1.png')      `\\\n\\\nResponse\\\n\\\n* * *\\\n\\\nRelease Notes\\\n-------------\\\n\\\nSupabase.js v2 release notes.\\\n\\\nInstall the latest version of @supabase/supabase-js\\\n\\\nTerminal\\\n\\\n`     _10  npm install @supabase/supabase-js      `\\\n\\",
    "summary": "The `getPublicUrl` function returns a URL for an asset stored in a public bucket, with optional transformations. It can be used to generate URLs for downloading assets. The documentation also includes information about installing the latest version of the Supabase.js library, which is required to use this functionality."
  },
  {
    "chunk_id": "0a5c9eae-e4e2-4a91-8997-dca6f38001cd",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Explicit constructor options[#](#explicit-constructor-options)\\\n\\\nAll client specific options within the constructor are keyed to the library.\\\n\\\nSee [PR](https://github.com/supabase/supabase-js/pull/458)\\\n:\\\n\\\n`     _19  const supabase = createClient(apiURL, apiKey, {  _19  db: {  _19  schema: 'public',  _19  },  _19  auth: {  _19  storage: AsyncStorage,  _19  autoRefreshToken: true,  _19  persistSession: true,  _19  detectSessionInUrl: true,  _19  },  _19  realtime: {  _19  channels,  _19  endpoint,  _19  },  _19  global: {  _19  fetch: customFetch,  _19  headers: DEFAULT_HEADERS,  _19  },  _19  })      `\\\n\\",
    "summary": "The documentation explains how to create a Supabase client with explicit constructor options, allowing users to configure various aspects of the client's behavior, such as the database schema, authentication settings, real-time channels and endpoints, and global fetch and header options. This provides users with a high degree of control and customization over the client's functionality."
  },
  {
    "chunk_id": "a7bbfdff-efc7-486a-9748-803b999c17d9",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "TypeScript support[#](#typescript-support)\\\n\\\nThe libraries now support typescript.\\\n\\\nv1.0\\\n\\\n``     _10  // previously definitions were injected in the `from()` method  _10  supabase.from<Definitions['Message']>('messages').select('\\*')      ``\\\n\\\n* * *\\\n\\\nv2.0\\\n\\\n``     _10  import type { Database } from './DatabaseDefinitions'  _10  _10  // definitions are injected in `createClient()`  _10  const supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)  _10  _10  const { data } = await supabase.from('messages').select().match({ id: 1 })      ``\\\n\\\nTypes can be generated via the CLI:\\\n\\\nTerminal\\\n\\\n`     _10  supabase start  _10  supabase gen types typescript --local > DatabaseDefinitions.ts      `\\\n\\",
    "summary": "The libraries now support TypeScript, allowing users to import type definitions and utilize type checking. The TypeScript support has evolved from injecting definitions in the `from()` method (v1.0) to defining types in the `createClient()` function (v2.0). Additionally, a CLI tool is available to generate database type definitions locally."
  },
  {
    "chunk_id": "255178a7-72dc-45ac-bd0f-462d6b0c0bc7",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Data operations return minimal[#](#data-operations-return-minimal)\\\n\\\n`.insert()` / `.upsert()` / `.update()` / `.delete()` don't return rows by default: [PR](https://github.com/supabase/postgrest-js/pull/276)\\\n.\\\n\\\nPreviously, these methods return inserted/updated/deleted rows by default (which caused [some confusion](https://github.com/supabase/supabase/discussions/1548)\\\n), and you can opt to not return it by specifying `returning: 'minimal'`. Now the default behavior is to not return rows. To return inserted/updated/deleted rows, add a `.select()` call at the end, e.g.:\\\n\\\n`     _10  const { data, error } = await supabase  _10  .from('my_table')  _10  .delete()  _10  .eq('id', 1)  _10  .select()      `\\\n\\",
    "summary": "The libraries now support TypeScript. Data operations like `.insert()`, `.upsert()`, `.update()`, and `.delete()` no longer return rows by default to avoid confusion, but users can opt to retrieve the inserted/updated/deleted rows by adding a `.select()` call at the end of the operation."
  },
  {
    "chunk_id": "6583034e-d2b0-4d20-b983-9469e9a5e9d3",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "New ordering defaults[#](#new-ordering-defaults)\\\n\\\n`.order()` now defaults to Postgres\u2019s default: [PR](https://github.com/supabase/postgrest-js/pull/283)\\\n.\\\n\\\nPreviously `nullsFirst` defaults to `false` , meaning `null`s are ordered last. This is bad for performance if e.g. the column uses an index with `NULLS FIRST` (which is the default direction for indexes).\\\n\\",
    "summary": "The summary is as follows:\n\nThe `.order()` method in the Supabase client library now defaults to Postgres's default ordering behavior, where `null` values are ordered last. This change addresses a performance issue where the default `nullsFirst = false` setting did not match the default index ordering, leading to inefficient queries."
  },
  {
    "chunk_id": "35a9dee6-84a9-481c-b27d-81d8c8db3928",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Cookies and localstorage namespace[#](#cookies-and-localstorage-namespace)\\\n\\\nStorage key name in the Auth library has changed to include project reference which means that existing websites that had their JWT expiry set to a longer time could find their users logged out with this upgrade.\\\n\\\n``     _10  const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`      ``\\\n\\",
    "summary": "The storage key name in the Supabase Auth library has changed to include the project reference, which means that existing websites with longer JWT expiry settings may find their users logged out after upgrading. The new default storage key format is `sb-<hostname_without_tld>-auth-token`, which allows for better isolation of user sessions across different Supabase projects."
  },
  {
    "chunk_id": "b75360f5-292d-4523-92f0-76150fd61c22",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "New Auth Types[#](#new-auth-types)\\\n\\\nTypescript typings have been reworked. `Session` interface now guarantees that it will always have an `access_token`, `refresh_token` and `user`\\\n\\\n./types.ts\\\n\\\n`     _10  interface Session {  _10  provider_token?: string | null  _10  access_token: string  _10  expires_in?: number  _10  expires_at?: number  _10  refresh_token: string  _10  token_type: string  _10  user: User  _10  }      `\\\n\\",
    "summary": "The TypeScript typings for the `Session` interface in the Auth library have been reworked, now guaranteeing that it will always contain an `access_token`, `refresh_token`, and `user` property. This provides more explicit and reliable session information for developers working with the library."
  },
  {
    "chunk_id": "645887da-a4b2-4eca-a030-1c5ab6269182",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "New Auth methods[#](#new-auth-methods)\\\n\\\nWe're removing the `signIn()` method in favor of more explicit function signatures: `signInWithPassword()`, `signInWithOtp()`, and `signInWithOAuth()`.\\\n\\\nv1.0\\\n\\\n`     _10  const { data } = await supabase.auth.signIn({  _10  email: 'hello@example',  _10  password: 'pass',  _10  })      `\\\n\\\n* * *\\\n\\\nv2.0\\\n\\\n`     _10  const { data } = await supabase.auth.signInWithPassword({  _10  email: 'hello@example',  _10  password: 'pass',  _10  })      `\\\n\\",
    "summary": "The documentation describes changes to the Supabase authentication methods. The `signIn()` method has been removed, and more explicit function signatures have been introduced, such as `signInWithPassword()`, `signInWithOtp()`, and `signInWithOAuth()`. The examples show the migration from the previous `signIn()` method to the new `signInWithPassword()` method."
  },
  {
    "chunk_id": "a5fa5082-d4d2-45a7-a80a-be7081013463",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "New Realtime methods[#](#new-realtime-methods)\\\n\\\nThere is a new `channel()` method in the Realtime library, which will be used for our Multiplayer updates.\\\n\\\nWe will deprecate the `.from().on().subscribe()` method previously used for listening to postgres changes.\\\n\\\n`     _21  supabase  _21  .channel('any_string_you_want')  _21  .on('presence', { event: 'track' }, (payload) => {  _21  console.log(payload)  _21  })  _21  .subscribe()  _21  _21  supabase  _21  .channel('any_string_you_want')  _21  .on(  _21  'postgres_changes',  _21  {  _21  event: 'INSERT',  _21  schema: 'public',  _21  table: 'movies',  _21  },  _21  (payload) => {  _21  console.log(payload)  _21  }  _21  )  _21  .subscribe()      `\\\n\\",
    "summary": "The documentation introduces new methods in the Supabase Realtime library, including `channel()` for Multiplayer updates, and deprecates the previous `.from().on().subscribe()` method for listening to Postgres changes. The new `channel()` method allows subscribing to specific events such as 'presence' and 'postgres_changes' on designated tables and schemas, providing a more explicit and flexible way to handle real-time updates."
  },
  {
    "chunk_id": "95b83939-db7c-499d-aead-264a230842da",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "Deprecated setAuth()[#](#deprecated-setauth)\\\n\\\nDeprecated and removed `setAuth()` . To set a custom `access_token` jwt instead, pass the custom header into the `createClient()` method provided: ([PR](https://github.com/supabase/gotrue-js/pull/340)\\\n)\\\n\\",
    "summary": "The Supabase library has deprecated the `setAuth()` method. Instead, developers should now pass a custom `access_token` JWT directly into the `createClient()` method to set a custom authentication token. This change is part of the ongoing effort to remove the `shouldThrowOnError` option until all client libraries support it."
  },
  {
    "chunk_id": "5b8d9806-e753-46a0-a049-708890adfe9b",
    "source_url": "https://supabase.com/docs/reference/javascript/auth-onauthstatechange",
    "main_heading": "No Heading",
    "content": "All changes[#](#all-changes)\\\n\\\n*   `supabase-js`\\\n    *   `shouldThrowOnError` has been removed until all the client libraries support this option ([PR](https://github.com/supabase/supabase-js/pull/490)\\\n        ).\\\n*   `postgrest-js`\\\n    *   TypeScript typings have been reworked [PR](https://github.com/supabase/postgrest-js/pull/279)\\\n        \\\n    *   Use `undefined` instead of `null` for function params, types, etc. ([https://github.com/supabase/postgrest-js/pull/278](https://github.com/supabase/postgrest-js/pull/278)\\\n        )\\\n    *   Some features are now obsolete: ([https://github.com/supabase/postgrest-js/pull/275](https://github.com/supabase/postgrest-js/pull/275)\\\n        )\\\n        *   filter shorthands (e.g. `cs` vs. `contains`)\\\n        *   `body` in response (vs. `data`)\\\n        *   `upsert`ing through the `.insert()` method\\\n        *   `auth` method on `PostgrestClient`\\\n        *   client-level `throwOnError`\\\n*   `gotrue-js`\\\n    *   `supabase-js` client allows passing a `storageKey` param which will allow the user to set the key used in local storage for storing the session. By default, this will be namespace-d with the supabase project ref. ([PR](https://github.com/supabase/supabase-js/pull/460)\\\n        )\\\n    *   `signIn` method is now split into `signInWithPassword` , `signInWithOtp` , `signInWithOAuth` ([PR](https://github.com/supabase/gotrue-js/pull/304)\\\n        )\\\n    *   Deprecated and removed `session()` , `user()` in favour of using `getSession()` instead. `getSession()` will always return a valid session if a user is already logged in, meaning no more random logouts. ([PR](https://github.com/supabase/gotrue-js/pull/299)\\\n        )\\\n    *   Deprecated and removed setting for `multitab` support because `getSession()` and gotrue\u2019s reuse interval setting takes care of session management across multiple tabs ([PR](https://github.com/supabase/gotrue-js/pull/366)\\\n        )\\\n    *   No more throwing of random errors, gotrue-js v2 always returns a custom error type: ([PR](https://github.com/supabase/gotrue-js/pull/341)\\\n        )\\\n        *   `AuthSessionMissingError`\\\n            *   Indicates that a session is expected but missing\\\n        *   `AuthNoCookieError`\\\n            *   Indicates that a cookie is expected but missing\\\n        *   `AuthInvalidCredentialsError`\\\n            *   Indicates that the incorrect credentials were passed\\\n    *   Renamed the `api` namespace to `admin` , the `admin` namespace will only contain methods that should only be used in a trusted server-side environment with the service role key\\\n    *   Moved `resetPasswordForEmail` , `getUser` and `updateUser` to the `GoTrueClient` which means they will be accessible from the `supabase.auth` namespace in `supabase-js` instead of having to do `supabase.auth.api` to access them\\\n    *   Removed `sendMobileOTP` , `sendMagicLinkEmail` in favor of `signInWithOtp`\\\n    *   Removed `signInWithEmail`, `signInWithPhone` in favor of `signInWithPassword`\\\n    *   Removed `signUpWithEmail` , `signUpWithPhone` in favor of `signUp`\\\n    *   Replaced `update` with `updateUser`\\\n*   `storage-js`\\\n    *   Return types are more strict. Functions types used to indicate that the data returned could be null even if there was no error. We now make use of union types which only mark the data as null if there is an error and vice versa. ([PR](https://github.com/supabase/storage-js/pull/60)\\\n        )\\\n    *   The `upload` and `update` function returns the path of the object uploaded as the `path` parameter. Previously the returned value had the bucket name prepended to the path which made it harder to pass the value on to other storage-js methods since all methods take the bucket name and path separately. We also chose to call the returned value `path` instead of `Key` ([PR](https://github.com/supabase/storage-js/pull/75)\\\n        )\\\n    *   `getPublicURL` only returns the public URL inside the data object. This keeps it consistent with our other methods of returning only within the data object. No error is returned since this method cannot does not throw an error ([PR](https://github.com/supabase/storage-js/pull/93)\\\n        )\\\n    *   signed urls are returned as `signedUrl` instead of `signedURL` in both `createSignedUrl` and `createSignedUrls` ([PR](https://github.com/supabase/storage-js/pull/94)\\\n        )\\\n    *   Encodes URLs returned by `createSignedUrl`, `createSignedUrls` and `getPublicUrl` ([PR](https://github.com/supabase/storage-js/pull/86)\\\n        )\\\n    *   `createsignedUrl` used to return a url directly and and within the data object. This was inconsistent. Now we always return values only inside the data object across all methods. ([PR](https://github.com/supabase/storage-js/pull/88)\\\n        )\\\n    *   `createBucket` returns a data object instead of the name of the bucket directly. ([PR](https://github.com/supabase/storage-js/pull/89)\\\n        )\\\n    *   Fixed types for metadata ([PR](https://github.com/supabase/storage-js/pull/90)\\\n        )\\\n    *   Better error types make it easier to track down what went wrong quicker.\\\n    *   `SupabaseStorageClient` is no longer exported. Use `StorageClient` instead. ([PR](https://github.com/supabase/storage-js/pull/92)\\\n        ).\\\n*   `realtime-js`\\\n    *   `RealtimeSubscription` class no longer exists and replaced by `RealtimeChannel`.\\\n    *   `RealtimeClient`'s `disconnect` method now returns type of `void` . It used to return type of `Promise<{ error: Error | null; data: boolean }`.\\\n    *   Removed `removeAllSubscriptions` and `removeSubscription` methods from `SupabaseClient` class.\\\n    *   Removed `SupabaseRealtimeClient` class.\\\n    *   Removed `SupabaseQueryBuilder` class.\\\n    *   Removed `SupabaseEventTypes` type.\\\n        *   Thinking about renaming this to something like `RealtimePostgresChangeEvents` and moving it to `realtime-js` v2.\\\n    *   Removed `.from(\u2019table\u2019).on(\u2019INSERT\u2019, () \u21d2 {}).subscribe()` in favor of new Realtime client API.\\\n*   `functions-js`\\\n    *   supabase-js v1 only threw an error if the fetch call itself threw an error (network errors, etc) and not if the function returned HTTP errors like 400s or 500s. We have changed this behaviour to return an error if your function throws an error.\\\n    *   We have introduced new error types to distinguish between different kinds of errors. A `FunctionsHttpError` error is returned if your function throws an error, `FunctionsRelayError` if the Supabase Relay has an error processing your function and `FunctionsFetchError` if there is a network error in calling your function.\\\n    *   The correct content-type headers are automatically attached when sending the request if you don\u2019t pass in a `Content-Type` header and pass in an argument to your function. We automatically attach the content type for `Blob`, `ArrayBuffer`, `File`, `FormData` ,`String` . If it doesn\u2019t match any of these we assume the payload is `json` , we serialise the payload as JSON and attach the content type as `application/json`.\\\n    *   `responseType` does not need to be explicitly passed in. We parse the response based on the `Content-Type` response header sent by the function. We support parsing the responses as `text`, `json`, `blob`, `form-data` and are parsed as `text` by default.\\\n\\\n*   Need some help?\\\n    \\\n    [Contact support](https://supabase.com/support)\\\n    \\\n*   Latest product updates?\\\n    \\\n    [See Changelog](https://supabase.com/changelog)\\\n    \\\n*   Something's not right?\\\n    \\\n    [Check system status](https://status.supabase.com/)\\\n    \\\n\\\n* * *\\\n\\\n[\u00a9 Supabase Inc](https://supabase.com/)\\\n\u2014[Contributing](https://github.com/supabase/supabase/blob/master/apps/docs/DEVELOPERS.md)\\\n[Author Styleguide](https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md)\\\n[Open Source](https://supabase.com/open-source)\\\n[SupaSquad](https://supabase.com/supasquad)\\\nPrivacy Settings\\\n\\\n[GitHub](https://github.com/supabase/supabase)\\\n[Twitter](https://twitter.com/supabase)\\\n[Discord](https://discord.supabase.com/)",
    "summary": "The summary covers the major changes and deprecations across various Supabase client libraries, including `supabase-js`, `postgrest-js`, `gotrue-js`, `storage-js`, `realtime-js`, and `functions-js`. Key updates include the removal of `setAuth()` and `shouldThrowOnError`, reworked TypeScript typings, deprecated methods, and the introduction of new error types for better error handling."
  }
]