{
  "input_url": "https://supabase.com/docs/guides/auth",
  "total_pages": 50,
  "unique_links": [
    "https://supabase.com/docs/guides/auth/native-mobile-deep-linking",
    "https://supabase.com/docs/guides/auth/auth-captcha",
    "https://supabase.com/docs/guides/auth/users",
    "https://supabase.com/docs/guides/auth/architecture",
    "https://supabase.com/docs/guides/auth",
    "https://supabase.com/docs/guides/auth/quickstarts/nextjs",
    "https://supabase.com/docs/guides/auth/social-login/auth-apple",
    "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
    "https://supabase.com/docs/guides/auth/auth-hooks/send-sms-hook",
    "https://supabase.com/docs/guides/auth/managing-user-data",
    "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
    "https://supabase.com/docs/guides/auth/server-side-rendering",
    "https://supabase.com/docs/guides/auth/sessions",
    "https://supabase.com/docs/guides/auth/signout",
    "https://supabase.com/docs/guides/auth/social-login/auth-azure",
    "https://supabase.com/docs/guides/auth/auth-identity-linking",
    "https://supabase.com/docs/guides/auth/auth-mfa",
    "https://supabase.com/docs/guides/auth/auth-hooks",
    "https://supabase.com/docs/guides/auth/server-side",
    "https://supabase.com/docs/guides/auth/phone-login",
    "https://supabase.com/docs/guides/auth/server-side/nextjs",
    "https://supabase.com/docs/guides/auth/rate-limits",
    "https://supabase.com/docs/guides/auth/third-party/auth0",
    "https://supabase.com/docs/guides/auth/auth-helpers/nextjs",
    "https://supabase.com/docs/guides/auth/third-party/aws-cognito",
    "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
    "https://supabase.com/docs/guides/auth/auth-anonymous",
    "https://supabase.com/docs/guides/auth/third-party/firebase-auth",
    "https://supabase.com/docs/guides/auth/auth-email-passwordless",
    "https://supabase.com/docs/guides/auth/general-configuration",
    "https://supabase.com/docs/guides/auth/identities",
    "https://supabase.com/docs/guides/auth/auth-hooks/password-verification-hook",
    "https://supabase.com/docs/guides/auth/sessions/implicit-flow",
    "https://supabase.com/docs/guides/auth/sso/auth-sso-saml",
    "https://supabase.com/docs/guides/auth/auth-hooks/custom-access-token-hook",
    "https://supabase.com/docs/guides/auth/enterprise-sso",
    "https://supabase.com/docs/guides/auth/sessions/pkce-flow",
    "https://supabase.com/docs/guides/auth/auth-email-templates",
    "https://supabase.com/docs/guides/auth/auth-hooks/mfa-verification-hook",
    "https://supabase.com/docs/guides/auth/debugging/error-codes",
    "https://supabase.com/docs/guides/auth/auth-smtp",
    "https://supabase.com/docs/guides/auth/social-login",
    "https://supabase.com/docs/guides/auth/auth-hooks/send-email-hook",
    "https://supabase.com/docs/guides/auth/passwords",
    "https://supabase.com/docs/guides/auth/redirect-urls",
    "https://supabase.com/docs/guides/auth/quickstarts/react-native",
    "https://supabase.com/docs/guides/auth/jwts",
    "https://supabase.com/docs/guides/auth/quickstarts/react",
    "https://supabase.com/docs/guides/auth/password-security",
    "https://supabase.com/docs/guides/auth/third-party/overview"
  ],
  "data": [
    {
      "markdown": "Auth\n\n# Login with Apple\n\n* * *\n\nSupabase Auth supports using [Sign in with Apple](https://developer.apple.com/sign-in-with-apple/) on the web and in native apps for iOS, macOS, watchOS or tvOS.\n\n## Overview [\\#](\\#overview)\n\nTo support Sign in with Apple, you need to configure the [Apple provider in the Supabase dashboard](https://supabase.com/dashboard/project/_/auth/providers) for your project.\n\nThere are three general ways to use Sign in with Apple, depending on the application you're trying to build:\n\n- Sign in on the web or in web-based apps\n  - Using an OAuth flow initiated by Supabase Auth using the [Sign in with Apple REST API](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api).\n  - Using [Sign in with Apple JS](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_js) directly in the browser, usually suitable for websites.\n- Sign in natively inside iOS, macOS, watchOS or tvOS apps using [Apple's Authentication Services](https://developer.apple.com/documentation/authenticationservices)\n\nIn some cases you're able to use the OAuth flow within web-based native apps such as with [React Native](https://reactnative.dev), [Expo](https://expo.dev) or other similar frameworks. It is best practice to use native Sign in with Apple capabilities on those platforms instead.\n\nWhen developing with Expo, you can test Sign in with Apple via the Expo Go app, in all other cases you will need to obtain an [Apple Developer](https://developer.apple.com) account to enable the capability.\n\nWebExpo React NativeFlutterSwiftKotlin\n\n## Using the OAuth flow for web [\\#](\\#using-the-oauth-flow-for-web)\n\nSign in with Apple's OAuth flow is designed for web or browser based sign in methods. It can be used on web-based apps as well as websites, though some users can benefit by using Sign in with Apple JS directly.\n\nBehind the scenes, Supabase Auth uses the [REST APIs](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api) provided by Apple.\n\nMake sure you're using the right `supabase` client in the following code.\n\nIf you're not using Server-Side Rendering or cookie-based Auth, you can directly use the `createClient` from `@supabase/supabase-js`. If you're using Server-Side Rendering, see the [Server-Side Auth guide](/docs/guides/auth/server-side/creating-a-client) for instructions on creating your Supabase client.\n\nTo initiate sign in, you can use the `signInWithOAuth()` method from the Supabase JavaScript library:\n\n`\n_10\nsupabase.auth.signInWithOAuth({\n_10\nprovider: 'apple',\n_10\n})\n`\n\nThis call takes the user to Apple's consent screen. Once the flow ends, the user's profile information is exchanged and validated with Supabase Auth before it redirects back to your web application with an access and refresh token representing the user's session.\n\nFor a PKCE flow, for example in Server-Side Auth, you need an extra step to handle the code exchange. When calling `signInWithOAuth`, provide a `redirectTo` URL which points to a callback route. This redirect URL should be added to your [redirect allow list](/docs/guides/auth/redirect-urls).\n\nClientServer\n\nIn the browser, `signInWithOAuth` automatically redirects to the OAuth provider's authentication endpoint, which then redirects to your endpoint.\n\n``\n_10\nawait supabase.auth.signInWithOAuth({\n_10\nprovider,\n_10\noptions: {\n_10\n    redirectTo: `http://example.com/auth/callback`,\n_10\n},\n_10\n})\n``\n\nAt the callback endpoint, handle the code exchange to save the user session.\n\nNext.jsSvelteKitAstroRemixExpress\n\nCreate a new file at `app/auth/callback/route.ts` and populate with the following:\n\napp/auth/callback/route.ts\n\n``\n_30\nimport { NextResponse } from 'next/server'\n_30\n// The client you created from the Server-Side Auth instructions\n_30\nimport { createClient } from '@/utils/supabase/server'\n_30\n_30\nexport async function GET(request: Request) {\n_30\nconst { searchParams, origin } = new URL(request.url)\n_30\nconst code = searchParams.get('code')\n_30\n// if \"next\" is in param, use it as the redirect URL\n_30\nconst next = searchParams.get('next') ?? '/'\n_30\n_30\nif (code) {\n_30\n    const supabase = createClient()\n_30\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\n_30\n    if (!error) {\n_30\n      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer\n_30\n      const isLocalEnv = process.env.NODE_ENV === 'development'\n_30\n      if (isLocalEnv) {\n_30\n        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host\n_30\n        return NextResponse.redirect(`${origin}${next}`)\n_30\n      } else if (forwardedHost) {\n_30\n        return NextResponse.redirect(`https://${forwardedHost}${next}`)\n_30\n      } else {\n_30\n        return NextResponse.redirect(`${origin}${next}`)\n_30\n      }\n_30\n    }\n_30\n}\n_30\n_30\n// return the user to an error page with instructions\n_30\nreturn NextResponse.redirect(`${origin}/auth/auth-code-error`)\n_30\n}\n``\n\n### Configuration [\\#](\\#configuration-web)\n\nYou will require the following information:\n\n1. Your Apple Developer account's **Team ID**, which is an alphanumeric string of 10 characters that uniquely identifies the developer of the app. It's often easily accessible in the upper right-side menu on the Apple Developer Console.\n2. Register email sources for _Sign in with Apple for Email Communication_ which can be found in the [Services](https://developer.apple.com/account/resources/services/list) section of the Apple Developer Console.\n3. An **App ID** which uniquely identifies the app you are building. You can create a new App ID from the [Identifiers](https://developer.apple.com/account/resources/identifiers/list/bundleId) section in the Apple Developer Console (use the filter menu in the upper right side to see all App IDs). These usually are a reverse domain name string, for example `com.example.app`. Make sure you configure Sign in with Apple once you create an App ID in the Capabilities list. At this time Supabase Auth does not support Server-to-Server notification endpoints, so you should leave that setting blank. (In the past App IDs were referred to as _bundle IDs._)\n4. A **Services ID** which uniquely identifies the web services provided by the app you registered in the previous step. You can create a new Services ID from the [Identifiers](https://developer.apple.com/account/resources/identifiers/list/serviceId) section in the Apple Developer Console (use the filter menu in the upper right side to see all Services IDs). These usually are a reverse domain name string, for example `com.example.app.web`.\n5. Configure Website URLs for the newly created **Services ID**. The web domain you should use is the domain your Supabase project is hosted on. This is usually `<project-id>.supabase.co` while the redirect URL is `https://<project-id>.supabase.co/auth/v1/callback`.\n6. Create a signing **Key** in the [Keys](https://developer.apple.com/account/resources/authkeys/list) section of the Apple Developer Console. You can use this key to generate a secret key using the tool below, which is added to your Supabase project's Auth configuration. Make sure you safely store the `AuthKey_XXXXXXXXXX.p8` file. If you ever lose access to it, or make it public accidentally please revoke it from the Apple Developer Console and create a new one immediately. You will have to generate a new secret key using this file every 6 months, so make sure you schedule a recurring meeting in your calendar!\n7. Finally, add the information you configured above to the [Apple provider configuration in the Supabase dashboard](https://supabase.com/dashboard/project/_/auth/providers).\n\nUse this tool to generate a new Apple client secret. No keys leave your browser! Be aware that this tool does not currently work in Safari, so please use Firefox or a Chrome-based browser instead.\n\n## Using sign in with Apple JS [\\#](\\#using-sign-in-with-apple-js)\n\n[Sign in with Apple JS](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_js) is an official Apple framework for authenticating Apple users on websites. Although it can be used in web-based apps, those use cases will benefit more with the OAuth flow described above. We recommend using this method on classic websites only.\n\nYou can use the `signInWithIdToken()` method from the Supabase JavaScript library on the website to obtain an access and refresh token once the user has given consent using Sign in with Apple JS:\n\n`\n_10\nfunction signIn() {\n_10\nconst data = await AppleID.auth.signIn()\n_10\n_10\nawait supabase.auth.signInWithIdToken({\n_10\n    provider: 'apple',\n_10\n    token: data.id_token,\n_10\n    nonce: '<nonce used in AppleID.auth.init>',\n_10\n})\n_10\n}\n`\n\nAlternatively, you can use the `AppleIDSignInOnSuccess` event with the `usePopup` option:\n\n`\n_10\n// Listen for authorization success.\n_10\ndocument.addEventListener('AppleIDSignInOnSuccess', async (event) => {\n_10\nawait supabase.auth.signInWithIdToken({\n_10\n    provider: 'apple',\n_10\n    token: event.data.id_token,\n_10\n    nonce: '<value used in appleid-signin-nonce meta tag>',\n_10\n})\n_10\n})\n`\n\nPlease make sure you request for the scope `name email` when initializing the library.\n\n### Configuration [\\#](\\#configuration-apple-js)\n\nTo use Sign in with Apple JS you need to configure these options:\n\n1. Have an **App ID** which uniquely identifies the app you are building. You can create a new App ID from the [Identifiers](https://developer.apple.com/account/resources/identifiers/list/bundleId) section in the Apple Developer Console (use the filter menu in the upper right side to see all App IDs). These usually are a reverse domain name string, for example `com.example.app`. Make sure you configure Sign in with Apple for the App ID you created or already have, in the Capabilities list. At this time Supabase Auth does not support Server-to-Server notification endpoints, so you should leave that setting blank. (In the past App IDs were referred to as _bundle IDs._)\n2. Obtain a **Services ID** attached to the App ID that uniquely identifies the website. Use this value as the client ID when initializing Sign in with Apple JS. You can create a new Services ID from the [Identifiers](https://developer.apple.com/account/resources/identifiers/list/serviceId) section in the Apple Developer Console (use the filter menu in the upper right side to see all Services IDs). These usually are a reverse domain name string, for example `com.example.app.website`.\n3. Configure Website URLs for the newly created **Services ID**. The web domain you should use is the domain your website is hosted on. The redirect URL must also point to a page on your website that will receive the callback from Apple.\n4. Register the Services ID you created to your project's [Apple provider configuration in the Supabase dashboard](https://supabase.com/dashboard/project/_/auth/providers) under _Authorized Client IDs_.\n\nIf you're using Sign in with Apple JS you do not need to configure the OAuth settings.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/social-login/auth-apple",
        "title": "Login with Apple | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Login%20with%20Apple&description=Use%20Sign%20in%20with%20Apple%20with%20Supabase",
        "ogTitle": "Login with Apple | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/social-login/auth-apple",
        "description": "Use Sign in with Apple with Supabase",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Use Sign in with Apple with Supabase",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Configure a Custom SMTP\n\n* * *\n\n## Auth SMTP [\\#](\\#auth-smtp)\n\nAt present, you can trial the Supabase platform by sending up to **3** emails per hour via the built-in service. The default email service as a whole is offered on a best effort basis: we will do our best to maintain it and will review usage of the service on a regular basis to see if the email service should be continued.\n\nAs you progress toward production, you may find yourself wanting for a custom SMTP service in order to increase your limits. A custom SMTP server will allow you to set your own cap on the number of emails sent per hour.\n\nBeyond rate limits, an SMTP server might also help with:\n\n- Deliverability and Reputation Management\n- Scalability\n- Analytics and Tracking\n- Compliance and Anti Spam measures\n\n## How to set up SMTP [\\#](\\#how-to-set-up-smtp)\n\nHead over to [Auth Settings Page](https://supabase.com/dashboard/project/_/settings/auth) and hit \"Enable Custom SMTP\" under the SMTP Provider section.\n\nFill in fields below with the relevant details obtained from your custom SMTP provider:\n\n![SMTP settings](https://supabase.com/docs/img/guides/auth-smtp/smtp.png)\n\n## How to update email rate limits [\\#](\\#how-to-update-email-rate-limits)\n\nAfter adding a custom SMTP provider, you can head over to [Auth > Rate Limits](https://supabase.com/dashboard/project/_/auth/rate-limits) to configure the rate limits for sending emails.\n\n### SMTP providers [\\#](\\#smtp-providers)\n\nYou can use Supabase Auth with any major SMTP provider of your choosing. Some SMTP providers you could consider using are:\n\n- [Twilio SendGrid](https://docs.sendgrid.com/for-developers/sending-email/integrating-with-the-smtp-api)\n- [AWS SES](https://docs.aws.amazon.com/ses/latest/dg/send-email-smtp.html)\n- [Resend](https://resend.com/docs/dashboard/emails/introduction)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-smtp",
        "title": "Configure a Custom SMTP | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Configure%20a%20Custom%20SMTP&description=Moving%20towards%20production%3A%20Configuring%20a%20custom%20SMTP%20provider",
        "ogTitle": "Configure a Custom SMTP | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-smtp",
        "description": "Moving towards production: Configuring a custom SMTP provider",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "ogDescription": "Moving towards production: Configuring a custom SMTP provider",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Setting up Server-Side Auth for Next.js\n\n* * *\n\nNext.js comes in two flavors: the [App Router](https://nextjs.org/docs/app) and the [Pages Router](https://nextjs.org/docs/pages). You can set up Server-Side Auth with either strategy. You can even use both in the same application.\n\nApp RouterPages RouterHybrid router strategies\n\n1\n\n### Install Supabase packages\n\nInstall the `@supabase/supabase-js` package and the helper `@supabase/ssr` package.\n\n`\n_10\nnpm install @supabase/supabase-js @supabase/ssr\n`\n\n2\n\n### Set up environment variables\n\nCreate a `.env.local` file in your project root directory.\n\nFill in your `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY`:\n\n###### Project URL\n\nLoading...\n\n###### Anon key\n\nLoading...\n\n.env.local\n\n`\n_10\nNEXT_PUBLIC_SUPABASE_URL=<your_supabase_project_url>\n_10\nNEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>\n`\n\n3\n\n### Write utility functions to create Supabase clients\n\nTo access Supabase from your Next.js app, you need 2 types of Supabase clients:\n\n1. **Client Component client** \\- To access Supabase from Client Components, which run in the browser.\n2. **Server Component client** \\- To access Supabase from Server Components, Server Actions, and Route Handlers, which run only on the server.\n\nCreate a `utils/supabase` folder with a file for each type of client. Then copy the utility functions for each client type.\n\nWhat does the \\`cookies\\` object do?\n\nDo I need to create a new client for every route?\n\nutils/supabase/client.ts\n\nutils/supabase/server.ts\n\n`\n_10\nimport { createBrowserClient } from '@supabase/ssr'\n_10\n_10\nexport function createClient() {\n_10\nreturn createBrowserClient(\n_10\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n_10\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n_10\n)\n_10\n}\n`\n\n4\n\n### Hook up middleware\n\nCreate a `middleware.ts` file at the root of your project.\n\nSince Server Components can't write cookies, you need middleware to refresh expired Auth tokens and store them.\n\nThe middleware is responsible for:\n\n1. Refreshing the Auth token (by calling `supabase.auth.getUser`).\n2. Passing the refreshed Auth token to Server Components, so they don't attempt to refresh the same token themselves. This is accomplished with `request.cookies.set`.\n3. Passing the refreshed Auth token to the browser, so it replaces the old token. This is accomplished with `response.cookies.set`.\n\nCopy the middleware code for your app.\n\nAdd a [matcher](https://nextjs.org/docs/app/building-your-application/routing/middleware#matching-paths) so the middleware doesn't run on routes that don't access Supabase.\n\nBe careful when protecting pages. The server gets the user session from the cookies, which can be spoofed by anyone.\n\nAlways use `supabase.auth.getUser()` to protect pages and user data.\n\n_Never_ trust `supabase.auth.getSession()` inside server code such as middleware. It isn't guaranteed to revalidate the Auth token.\n\nIt's safe to trust `getUser()` because it sends a request to the Supabase Auth server every time to revalidate the Auth token.\n\nmiddleware.ts\n\nutils/supabase/middleware.ts\n\n`\n_19\nimport { type NextRequest } from 'next/server'\n_19\nimport { updateSession } from '@/utils/supabase/middleware'\n_19\n_19\nexport async function middleware(request: NextRequest) {\n_19\nreturn await updateSession(request)\n_19\n}\n_19\n_19\nexport const config = {\n_19\nmatcher: [\\\n_19\\\n    /*\\\n_19\\\n     * Match all request paths except for the ones starting with:\\\n_19\\\n     * - _next/static (static files)\\\n_19\\\n     * - _next/image (image optimization files)\\\n_19\\\n     * - favicon.ico (favicon file)\\\n_19\\\n     * Feel free to modify this pattern to include more paths.\\\n_19\\\n     */\\\n_19\\\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\\\n_19\\\n],\n_19\n}\n`\n\n5\n\n### Create a login page\n\nCreate a login page for your app. Use a Server Action to call the Supabase signup function.\n\nSince Supabase is being called from an Action, use the client defined in `@/utils/supabase/server.ts`.\n\nNote that `cookies` is called before any calls to Supabase, which opts fetch calls out of Next.js's caching. This is important for authenticated data fetches, to ensure that users get access only to their own data.\n\nSee the Next.js docs to learn more about [opting out of data caching](https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#opting-out-of-data-caching).\n\napp/login/page.tsx\n\napp/login/actions.ts\n\napp/error/page.tsx\n\n`\n_14\nimport { login, signup } from './actions'\n_14\n_14\nexport default function LoginPage() {\n_14\nreturn (\n_14\n    <form>\n_14\n      <label htmlFor=\"email\">Email:</label>\n_14\n      <input id=\"email\" name=\"email\" type=\"email\" required />\n_14\n      <label htmlFor=\"password\">Password:</label>\n_14\n      <input id=\"password\" name=\"password\" type=\"password\" required />\n_14\n      <button formAction={login}>Log in</button>\n_14\n      <button formAction={signup}>Sign up</button>\n_14\n    </form>\n_14\n)\n_14\n}\n`\n\n6\n\n### Change the Auth confirmation path\n\nIf you have email confirmation turned on (the default), a new user will receive an email confirmation after signing up.\n\nChange the email template to support a server-side authentication flow.\n\nGo to the [Auth templates](https://supabase.com/dashboard/project/_/auth/templates) page in your dashboard. In the `Confirm signup` template, change `{{ .ConfirmationURL }}` to `{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=signup`.\n\n7\n\n### Create a route handler for Auth confirmation\n\nCreate a Route Handler for `auth/confirm`. When a user clicks their confirmation email link, exchange their secure code for an Auth token.\n\nSince this is a Router Handler, use the Supabase client from `@/utils/supabase/server.ts`.\n\napp/auth/confirm/route.ts\n\n`\n_28\nimport { type EmailOtpType } from '@supabase/supabase-js'\n_28\nimport { type NextRequest } from 'next/server'\n_28\n_28\nimport { createClient } from '@/utils/supabase/server'\n_28\nimport { redirect } from 'next/navigation'\n_28\n_28\nexport async function GET(request: NextRequest) {\n_28\nconst { searchParams } = new URL(request.url)\n_28\nconst token_hash = searchParams.get('token_hash')\n_28\nconst type = searchParams.get('type') as EmailOtpType | null\n_28\nconst next = searchParams.get('next') ?? '/'\n_28\n_28\nif (token_hash && type) {\n_28\n    const supabase = createClient()\n_28\n_28\n    const { error } = await supabase.auth.verifyOtp({\n_28\n      type,\n_28\n      token_hash,\n_28\n    })\n_28\n    if (!error) {\n_28\n      // redirect user to specified redirect URL or root of app\n_28\n      redirect(next)\n_28\n    }\n_28\n}\n_28\n_28\n// redirect the user to an error page with some instructions\n_28\nredirect('/error')\n_28\n}\n`\n\n8\n\n### Access user info from Server Component\n\nServer Components can read cookies, so you can get the Auth status and user info.\n\nSince you're calling Supabase from a Server Component, use the client created in `@/utils/supabase/server.ts`.\n\nCreate a `private` page that users can only access if they're logged in. The page displays their email.\n\nBe careful when protecting pages. The server gets the user session from the cookies, which can be spoofed by anyone.\n\nAlways use `supabase.auth.getUser()` to protect pages and user data.\n\n_Never_ trust `supabase.auth.getSession()` inside Server Components. It isn't guaranteed to revalidate the Auth token.\n\nIt's safe to trust `getUser()` because it sends a request to the Supabase Auth server every time to revalidate the Auth token.\n\napp/private/page.tsx\n\n`\n_14\nimport { redirect } from 'next/navigation'\n_14\n_14\nimport { createClient } from '@/utils/supabase/server'\n_14\n_14\nexport default async function PrivatePage() {\n_14\nconst supabase = createClient()\n_14\n_14\nconst { data, error } = await supabase.auth.getUser()\n_14\nif (error || !data?.user) {\n_14\n    redirect('/login')\n_14\n}\n_14\n_14\nreturn <p>Hello {data.user.email}</p>\n_14\n}\n`\n\n## Congratulations [\\#](\\#congratulations)\n\nYou're done! To recap, you've successfully:\n\n- Called Supabase from a Server Action.\n- Called Supabase from a Server Component.\n- Set up a Supabase client utility to call Supabase from a Client Component. You can use this if you need to call Supabase from a Client Component, for example to set up a realtime subscription.\n- Set up middleware to automatically refresh the Supabase Auth session.\n\nYou can now use any Supabase features from your client or server code!",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/server-side/nextjs",
        "title": "Setting up Server-Side Auth for Next.js | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Setting%20up%20Server-Side%20Auth%20for%20Next.js&description=undefined",
        "ogTitle": "Setting up Server-Side Auth for Next.js | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/server-side/nextjs",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Custom Access Token Hook\n\n## Customize the access token issued by Supabase Auth\n\n* * *\n\nThe custom access token hook runs before a token is issued and allows you to add additional claims based on the authentication method used.\n\nClaims returned must conform to our specification. Supabase Auth will check for these claims after the hook is run and return an error if they are not present.\n\nThese are the fields currently available on an access token:\n\nRequired Claims: `aud`, `exp`, `iat`, `sub`, `email`, `phone`, `role`, `aal`, `session_id`\nOptional Claims: `jti`, `iss`, `nbf`, `app_metadata`, `user_metadata`, `amr`\n\n**Inputs**\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `user_id` | `string` | Unique identifier for the user attempting to sign in. |\n| `claims` | `object` | Claims which are included in the access token. |\n| `authentication_method` | `string` | The authentication method used to request the access token. Possible values include: `oauth`, `password`, `otp`, `totp`, `recovery`, `invite`, `sso/saml`, `magiclink`, `email/signup`, `email_change`, `token_refresh`, `anonymous`. |\n\nJSONJSON Schema\n\n`\n_19\n{\n_19\n\"user_id\": \"8ccaa7af-909f-44e7-84cb-67cdccb56be6\",\n_19\n\"claims\": {\n_19\n    \"aud\": \"authenticated\",\n_19\n    \"exp\": 1715690221,\n_19\n    \"iat\": 1715686621,\n_19\n    \"sub\": \"8ccaa7af-909f-44e7-84cb-67cdccb56be6\",\n_19\n    \"email\": \"\",\n_19\n    \"phone\": \"\",\n_19\n    \"app_metadata\": {},\n_19\n    \"user_metadata\": {},\n_19\n    \"role\": \"authenticated\",\n_19\n    \"aal\": \"aal1\",\n_19\n    \"amr\": [ { \"method\": \"anonymous\", \"timestamp\": 1715686621 } ],\n_19\n    \"session_id\": \"4b938a09-5372-4177-a314-cfa292099ea2\",\n_19\n    \"is_anonymous\": true\n_19\n},\n_19\n\"authentication_method\": \"anonymous\"\n_19\n}\n`\n\n**Outputs**\n\nReturn these only if your hook processed the input without errors.\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `claims` | `object` | The updated claims after the hook has been run. |\n\nSQLHTTP\n\nAdd admin roleAdd claim via plv8Restrict access to SSO users\n\nYou can allow registered admin users to perform restricted actions by granting an `admin` claim to their token.\n\nCreate a profiles table with an `is_admin` flag:\n\n`\n_10\ncreate table profiles (\n_10\nuser_id uuid not null primary key references auth.users (id),\n_10\nis_admin boolean not null default false\n_10\n);\n`\n\nCreate a hook:\n\n`\n_40\ncreate or replace function public.custom_access_token_hook(event jsonb)\n_40\nreturns jsonb\n_40\nlanguage plpgsql\n_40\nas $$\n_40\ndeclare\n_40\n    claims jsonb;\n_40\n    is_admin boolean;\n_40\nbegin\n_40\n    -- Check if the user is marked as admin in the profiles table\n_40\n    select is_admin into is_admin from profiles where user_id = (event->>'user_id')::uuid;\n_40\n_40\n    -- Proceed only if the user is an admin\n_40\n    if is_admin then\n_40\n      claims := event->'claims';\n_40\n_40\n      -- Check if 'app_metadata' exists in claims\n_40\n      if jsonb_typeof(claims->'app_metadata') is null then\n_40\n        -- If 'app_metadata' does not exist, create an empty object\n_40\n        claims := jsonb_set(claims, '{app_metadata}', '{}');\n_40\n      end if;\n_40\n_40\n      -- Set a claim of 'admin'\n_40\n      claims := jsonb_set(claims, '{app_metadata, admin}', 'true');\n_40\n_40\n      -- Update the 'claims' object in the original event\n_40\n      event := jsonb_set(event, '{claims}', claims);\n_40\n    end if;\n_40\n_40\n    -- Return the modified or original event\n_40\n    return event;\n_40\nend;\n_40\n$$;\n_40\n_40\ngrant all\n_40\non table public.profiles\n_40\nto supabase_auth_admin;\n_40\n_40\nrevoke all\n_40\non table public.profiles\n_40\nfrom authenticated, anon, public;\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-hooks/custom-access-token-hook",
        "title": "Custom Access Token Hook | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Custom%20Access%20Token%20Hook&description=undefined",
        "ogTitle": "Custom Access Token Hook | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-hooks/custom-access-token-hook",
        "description": "Customize the access token issued by Supabase Auth",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Customize the access token issued by Supabase Auth",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Login with Azure (Microsoft)\n\n* * *\n\nTo enable Azure (Microsoft) Auth for your project, you need to set up an Azure OAuth application and add the application credentials to your Supabase Dashboard.\n\n## Overview [\\#](\\#overview)\n\nSetting up OAuth with Azure consists of four broad steps:\n\n- Create an OAuth application under Azure Entra ID.\n- Add a secret to the application.\n- Add the Supabase Auth callback URL to the allowlist in the OAuth application in Azure.\n- Configure the client ID and secret of the OAuth application within the Supabase Auth dashboard.\n\n## Access your Azure Developer account [\\#](\\#access-your-azure-developer-account)\n\n- Go to [portal.azure.com](https://portal.azure.com/#home).\n- Login and select Microsoft Entra ID under the list of Azure Services.\n\n## Register an application [\\#](\\#register-an-application)\n\n- Under Microsoft Entra ID, select _App registrations_ in the side panel and select _New registration._\n- Choose a name and select your preferred option for the supported account types.\n- Specify a _Web_ _Redirect URI_. It should should look like this: `https://<project-ref>.supabase.co/auth/v1/callback`\n- Finally, select _Register_ at the bottom of the screen.\n\n![Register an application.](https://supabase.com/docs/img/guides/auth-azure/azure-register-app.png)\n\n## Obtain a client ID and secret [\\#](\\#obtain-a-client-id-and-secret)\n\n- Once your app has been registered, the client ID can be found under the [list of app registrations](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps) under the column titled _Application (client) ID_.\n- You can also find it in the app overview screen.\n- Place the Client ID in the Azure configuration screen in the Supabase Auth dashboard.\n\n![Obtain the client ID](https://supabase.com/docs/img/guides/auth-azure/azure-client-id.png)\n\n- Select _Add a certificate or secret_ in the app overview screen and open the _Client secrets_ tab.\n- Select _New client secret_ to create a new client secret.\n- Choose a preferred expiry time of the secret. Make sure you record this in your calendar days in advance so you have enough time to create a new one without suffering from any downtime.\n- Once the secret is generated place the _Value_ column (not _Secret ID_) in the Azure configuration screen in the Supabase Auth dashboard.\n\n![Obtain the client secret](https://supabase.com/docs/img/guides/auth-azure/azure-client-secret.png)\n\n## Guarding against unverified email domains [\\#](\\#guarding-against-unverified-email-domains)\n\nMicrosoft Entra ID can send out unverified email domains in certain cases. This may open up your project to a vulnerability where a malicious user can impersonate already existing accounts on your project.\n\nThis only applies in at least one of these cases:\n\n- You have configured the `authenticationBehaviors` setting of your OAuth application to allow unverified email domains\n- You are using an OAuth app configured as single-tenant in the supported account types\n- Your OAuth app was created before June 20th 2023 after Microsoft announced this vulnerability, and the app had used unverified emails prior\n\nThis means that most OAuth apps _are not susceptible_ to this vulnerability.\n\nDespite this, we recommend configuring the [optional `xms_edov` claim](https://learn.microsoft.com/en-us/azure/active-directory/develop/migrate-off-email-claim-authorization#using-the-xms_edov-optional-claim-to-determine-email-verification-status-and-migrate-users) on the OAuth app. This claim allows Supabase Auth to identify with certainty whether the email address sent over by Microsoft Entra ID is verified or not.\n\nConfigure this in the following way:\n\n- Select the _App registrations_ menu in Microsoft Entra ID on the Azure portal.\n- Select the OAuth app.\n- Select the _Manifest_ menu in the sidebar.\n- Make a backup of the JSON just in case.\n- Identify the `optionalClaims` key.\n- Edit it by specifying the following object:\n\n\n`\n_25\n\"optionalClaims\": {\n_25\n        \"idToken\": [\\\n_25\\\n            {\\\n_25\\\n                \"name\": \"xms_edov\",\\\n_25\\\n                \"source\": null,\\\n_25\\\n                \"essential\": false,\\\n_25\\\n                \"additionalProperties\": []\\\n_25\\\n            },\\\n_25\\\n            {\\\n_25\\\n                \"name\": \"email\",\\\n_25\\\n                \"source\": null,\\\n_25\\\n                \"essential\": false,\\\n_25\\\n                \"additionalProperties\": []\\\n_25\\\n            }\\\n_25\\\n        ],\n_25\n        \"accessToken\": [\\\n_25\\\n            {\\\n_25\\\n                \"name\": \"xms_edov\",\\\n_25\\\n                \"source\": null,\\\n_25\\\n                \"essential\": false,\\\n_25\\\n                \"additionalProperties\": []\\\n_25\\\n            }\\\n_25\\\n        ],\n_25\n        \"saml2Token\": []\n_25\n},\n`\n\n- Select _Save_ to apply the new configuration.\n\n## Configure a tenant URL (optional) [\\#](\\#configure-a-tenant-url-optional)\n\nA Microsoft Entra tenant is the directory of users who are allowed to access your project. This section depends on what your OAuth registration uses for _Supported account types._\n\nBy default, Supabase Auth uses the _common_ Microsoft tenant ( `https://login.microsoftonline.com/common`) which generally allows any Microsoft account to sign in to your project. Microsoft Entra further limits what accounts can access your project depending on the type of OAuth application you registered.\n\nIf your app is registered as _Personal Microsoft accounts only_ for the _Supported account types_ set Microsoft tenant to _consumers_ ( `https://login.microsoftonline.com/consumers`).\n\nIf your app is registered as _My organization only_ for the _Supported account types_ you may want to configure Supabase Auth with the organization's tenant URL. This will use the tenant's authorization flows instead, and will limit access at the Supabase Auth level to Microsoft accounts arising from only the specified tenant.\n\nConfigure this by storing a value under _Azure Tenant URL_ in the Supabase Auth provider configuration page for Azure that has the following format `https://login.microsoftonline.com/<tenant-id>`.\n\n## Add login code to your client app [\\#](\\#add-login-code-to-your-client-app)\n\nSupabase Auth requires that Azure returns a valid email address. Therefore you must request the `email` scope in the `signInWithOAuth` method.\n\nJavaScriptFlutterKotlin\n\nMake sure you're using the right `supabase` client in the following code.\n\nIf you're not using Server-Side Rendering or cookie-based Auth, you can directly use the `createClient` from `@supabase/supabase-js`. If you're using Server-Side Rendering, see the [Server-Side Auth guide](/docs/guides/auth/server-side/creating-a-client) for instructions on creating your Supabase client.\n\nWhen your user signs in, call [signInWithOAuth()](/docs/reference/javascript/auth-signinwithoauth) with `azure` as the `provider`:\n\n`\n_10\nasync function signInWithAzure() {\n_10\nconst { data, error } = await supabase.auth.signInWithOAuth({\n_10\n    provider: 'azure',\n_10\n    options: {\n_10\n      scopes: 'email',\n_10\n    },\n_10\n})\n_10\n}\n`\n\nFor a PKCE flow, for example in Server-Side Auth, you need an extra step to handle the code exchange. When calling `signInWithOAuth`, provide a `redirectTo` URL which points to a callback route. This redirect URL should be added to your [redirect allow list](/docs/guides/auth/redirect-urls).\n\nClientServer\n\nIn the browser, `signInWithOAuth` automatically redirects to the OAuth provider's authentication endpoint, which then redirects to your endpoint.\n\n``\n_10\nawait supabase.auth.signInWithOAuth({\n_10\nprovider,\n_10\noptions: {\n_10\n    redirectTo: `http://example.com/auth/callback`,\n_10\n},\n_10\n})\n``\n\nAt the callback endpoint, handle the code exchange to save the user session.\n\nNext.jsSvelteKitAstroRemixExpress\n\nCreate a new file at `app/auth/callback/route.ts` and populate with the following:\n\napp/auth/callback/route.ts\n\n``\n_30\nimport { NextResponse } from 'next/server'\n_30\n// The client you created from the Server-Side Auth instructions\n_30\nimport { createClient } from '@/utils/supabase/server'\n_30\n_30\nexport async function GET(request: Request) {\n_30\nconst { searchParams, origin } = new URL(request.url)\n_30\nconst code = searchParams.get('code')\n_30\n// if \"next\" is in param, use it as the redirect URL\n_30\nconst next = searchParams.get('next') ?? '/'\n_30\n_30\nif (code) {\n_30\n    const supabase = createClient()\n_30\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\n_30\n    if (!error) {\n_30\n      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer\n_30\n      const isLocalEnv = process.env.NODE_ENV === 'development'\n_30\n      if (isLocalEnv) {\n_30\n        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host\n_30\n        return NextResponse.redirect(`${origin}${next}`)\n_30\n      } else if (forwardedHost) {\n_30\n        return NextResponse.redirect(`https://${forwardedHost}${next}`)\n_30\n      } else {\n_30\n        return NextResponse.redirect(`${origin}${next}`)\n_30\n      }\n_30\n    }\n_30\n}\n_30\n_30\n// return the user to an error page with instructions\n_30\nreturn NextResponse.redirect(`${origin}/auth/auth-code-error`)\n_30\n}\n``\n\nJavaScriptFlutterKotlin\n\nWhen your user signs out, call [signOut()](/docs/reference/javascript/auth-signout) to remove them from the browser session and any objects from localStorage:\n\n`\n_10\nasync function signOut() {\n_10\nconst { error } = await supabase.auth.signOut()\n_10\n}\n`\n\n## Obtain the provider refresh token [\\#](\\#obtain-the-provider-refresh-token)\n\nAzure OAuth2.0 doesn't return the `provider_refresh_token` by default. If you need the `provider_refresh_token` returned, you will need to include the following scope:\n\nJavaScriptFlutterKotlin\n\n`\n_10\nasync function signInWithAzure() {\n_10\nconst { data, error } = await supabase.auth.signInWithOAuth({\n_10\n    provider: 'azure',\n_10\n    options: {\n_10\n      scopes: 'offline_access',\n_10\n    },\n_10\n})\n_10\n}\n`\n\n## Resources [\\#](\\#resources)\n\n- [Azure Developer Account](https://portal.azure.com)\n- [GitHub Discussion](https://github.com/supabase/gotrue/pull/54#issuecomment-757043573)\n- [Potential Risk of Privilege Escalation in Azure AD Applications](https://msrc.microsoft.com/blog/2023/06/potential-risk-of-privilege-escalation-in-azure-ad-applications/)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/social-login/auth-azure",
        "title": "Login with Azure (Microsoft) | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Login%20with%20Azure%20(Microsoft)&description=Add%20Azure%20(Microsoft)%20OAuth%20to%20your%20Supabase%20project",
        "ogTitle": "Login with Azure (Microsoft) | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/social-login/auth-azure",
        "description": "Add Azure (Microsoft) OAuth to your Supabase project",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Add Azure (Microsoft) OAuth to your Supabase project",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Password Verification Hook\n\n* * *\n\nYour company wishes to increase security beyond the requirements of the default password implementation in order to fulfill security or compliance requirements. You plan to track the status of a password sign-in attempt and take action via an email or a restriction on logins where necessary.\n\nAs this hook runs on unauthenticated requests, malicious users can abuse the hook by calling it multiple times. Pay extra care when using the hook as you can unintentionally block legitimate users from accessing your application.\n\nCheck if a password is valid prior to taking any additional action to ensure the user is legitimate. Where possible, send an email or notification instead of blocking the user.\n\n**Inputs**\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `user_id` | `string` | Unique identifier for the user attempting to sign in. Correlate this to the `auth.users` table. |\n| `valid` | `boolean` | Whether the password verification attempt was valid. |\n\nJSONJSON Schema\n\n`\n_10\n{\n_10\n\"user_id\": \"3919cb6e-4215-4478-a960-6d3454326cec\",\n_10\n\"valid\": true\n_10\n}\n`\n\n**Outputs**\n\nReturn these only if your hook processed the input without errors.\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `decision` | `string` | The decision on whether to allow authentication to move forward. Use `reject` to deny the verification attempt and log the user out of all active sessions. Use `continue` to use the default Supabase Auth behavior. |\n| `message` | `string` | The message to show the user if the decision was `reject`. |\n| `should_logout_user` | `boolean` | Whether to log out the user if a `reject` decision is issued. Has no effect when a `continue` decision is issued. |\n\n`\n_10\n{\n_10\n\"decision\": \"reject\",\n_10\n\"message\": \"You have exceeded maximum number of password sign-in attempts.\",\n_10\n\"should_logout_user\": \"false\"\n_10\n}\n`\n\nSQL\n\nLimit failed password verification attemptsSend email notification on failed password attempts\n\nAs part of new security measures within the company, users can only input an incorrect password every 10 seconds and not more than that. You want to write a hook to enforce this.\n\nCreate a table to record each user's last incorrect password verification attempt.\n\n`\n_10\ncreate table public.password_failed_verification_attempts (\n_10\nuser_id uuid not null,\n_10\nlast_failed_at timestamp not null default now(),\n_10\nprimary key (user_id)\n_10\n);\n`\n\nCreate a hook to read and write information to this table. For example:\n\n`\n_54\ncreate function public.hook_password_verification_attempt(event jsonb)\n_54\nreturns jsonb\n_54\nlanguage plpgsql\n_54\nas $$\n_54\ndeclare\n_54\n    last_failed_at timestamp;\n_54\nbegin\n_54\n    if event->'valid' is true then\n_54\n      -- password is valid, accept it\n_54\n      return jsonb_build_object('decision', 'continue');\n_54\n    end if;\n_54\n_54\n    select last_failed_at into last_failed_at\n_54\n      from public.password_failed_verification_attempts\n_54\n      where\n_54\n        user_id = event->'user_id';\n_54\n_54\n    if last_failed_at is not null and now() - last_failed_at < interval '10 seconds' then\n_54\n      -- last attempt was done too quickly\n_54\n      return jsonb_build_object(\n_54\n        'error', jsonb_build_object(\n_54\n          'http_code', 429,\n_54\n          'message',   'Please wait a moment before trying again.'\n_54\n        )\n_54\n      );\n_54\n    end if;\n_54\n_54\n    -- record this failed attempt\n_54\n    insert into public.password_failed_verification_attempts\n_54\n      (\n_54\n        user_id,\n_54\n        last_failed_at\n_54\n      )\n_54\n      values\n_54\n      (\n_54\n        event->'user_id',\n_54\n        now()\n_54\n      )\n_54\n      on conflict do update\n_54\n        set last_failed_at = now();\n_54\n_54\n    -- finally let Supabase Auth do the default behavior for a failed attempt\n_54\n    return jsonb_build_object('decision', 'continue');\n_54\nend;\n_54\n$$;\n_54\n_54\n-- Assign appropriate permissions\n_54\ngrant all\n_54\non table public.password_failed_verification_attempts\n_54\nto supabase_auth_admin;\n_54\n_54\nrevoke all\n_54\non table public.password_failed_verification_attempts\n_54\nfrom authenticated, anon, public;\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-hooks/password-verification-hook",
        "title": "Password Verification Hook | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Password%20Verification%20Hook&description=undefined",
        "ogTitle": "Password Verification Hook | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-hooks/password-verification-hook",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Send SMS Hook\n\n## Use a custom SMS provider to send authentication messages\n\n* * *\n\nRuns before a message is sent. Use the hook to:\n\n- Use a regional SMS Provider\n- Use alternate messaging channels such as WhatsApp\n- Adjust the message body to include platform specific fields such as the [AppHash](https://developers.google.com/identity/sms-retriever/overview)\n\n**Inputs**\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `user` | [`User`](/docs/guides/auth/users#the-user-object) | The user attempting to sign in. |\n| `sms` | `object` | Metadata specific to the SMS sending process. Includes the OTP. |\n\nJSONJSON Schema\n\n`\n_42\n{\n_42\n\"user\": {\n_42\n    \"id\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\",\n_42\n    \"aud\": \"authenticated\",\n_42\n    \"role\": \"authenticated\",\n_42\n    \"email\": \"\",\n_42\n    \"phone\": \"+1333363128\",\n_42\n    \"phone_confirmed_at\": \"2024-05-13T11:52:48.157306Z\",\n_42\n    \"confirmation_sent_at\": \"2024-05-14T12:31:52.824573Z\",\n_42\n    \"confirmed_at\": \"2024-05-13T11:52:48.157306Z\",\n_42\n    \"phone_change_sent_at\": \"2024-05-13T11:47:02.183064Z\",\n_42\n    \"last_sign_in_at\": \"2024-05-13T11:52:48.162518Z\",\n_42\n    \"app_metadata\": {\n_42\n      \"provider\": \"phone\",\n_42\n      \"providers\": [\"phone\"]\n_42\n    },\n_42\n    \"user_metadata\": {},\n_42\n    \"identities\": [\\\n_42\\\n      {\\\n_42\\\n        \"identity_id\": \"3be5e552-65aa-41d9-9db9-2a502f845459\",\\\n_42\\\n        \"id\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\",\\\n_42\\\n        \"user_id\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\",\\\n_42\\\n        \"identity_data\": {\\\n_42\\\n          \"email_verified\": false,\\\n_42\\\n          \"phone\": \"+1612341244428\",\\\n_42\\\n          \"phone_verified\": true,\\\n_42\\\n          \"sub\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\"\\\n_42\\\n        },\\\n_42\\\n        \"provider\": \"phone\",\\\n_42\\\n        \"last_sign_in_at\": \"2024-05-13T11:52:48.155562Z\",\\\n_42\\\n        \"created_at\": \"2024-05-13T11:52:48.155599Z\",\\\n_42\\\n        \"updated_at\": \"2024-05-13T11:52:48.159391Z\"\\\n_42\\\n      }\\\n_42\\\n    ],\n_42\n    \"created_at\": \"2024-05-13T11:45:33.7738Z\",\n_42\n    \"updated_at\": \"2024-05-14T12:31:52.82475Z\",\n_42\n    \"is_anonymous\": false\n_42\n},\n_42\n\"sms\": {\n_42\n    \"otp\": \"561166\"\n_42\n}\n_42\n}\n`\n\n**Outputs**\n\n- No outputs are required. An empty response with a status code of 200 is taken as a successful response.\n\nSQLHTTP\n\nQueue SMS Messages\n\nYour company uses a worker to manage all messaging related jobs. For performance reasons, the messaging system sends messages in intervals via a job queue. Instead of sending a message immediately, messages are queued and sent in periodic intervals via `pg_cron`.\n\nCreate a table to store jobs\n\n`\n_10\ncreate table job_queue (\n_10\njob_id uuid primary key default gen_random_uuid(),\n_10\njob_data jsonb not null,\n_10\ncreated_at timestamp default now(),\n_10\nstatus text default 'pending',\n_10\npriority int default 0,\n_10\nretry_count int default 0,\n_10\nmax_retries int default 2,\n_10\nscheduled_at timestamp default now()\n_10\n);\n`\n\nCreate the hook:\n\n`\n_31\ncreate or replace function send_sms(event jsonb) returns void as $$\n_31\ndeclare\n_31\n    job_data jsonb;\n_31\n    scheduled_time timestamp;\n_31\n    priority int;\n_31\nbegin\n_31\n    -- extract phone and otp from the event json\n_31\n    job_data := jsonb_build_object(\n_31\n        'phone', event->'user'->>'phone',\n_31\n        'otp', event->'sms'->>'otp'\n_31\n    );\n_31\n_31\n    -- calculate the nearest 5-minute window for scheduled_time\n_31\n    scheduled_time := date_trunc('minute', now()) + interval '5 minute' * floor(extract('epoch' from (now() - date_trunc('minute', now())) / 60) / 5);\n_31\n_31\n    -- assign priority dynamically (example logic: higher priority for earlier scheduled time)\n_31\n    priority := extract('epoch' from (scheduled_time - now()))::int;\n_31\n_31\n    -- insert the job into the job_queue table\n_31\n    insert into job_queue (job_data, priority, scheduled_at, max_retries)\n_31\n    values (job_data, priority, scheduled_time, 2);\n_31\nend;\n_31\n$$ language plpgsql;\n_31\n_31\ngrant all\n_31\non table public.job_queue\n_31\nto supabase_auth_admin;\n_31\n_31\nrevoke all\n_31\non table public.job_queue\n_31\nfrom authenticated, anon;\n`\n\nCreate a function to periodically run and dequeue all jobs\n\n`\n_42\ncreate or replace function dequeue_and_run_jobs() returns void as $$\n_42\ndeclare\n_42\n    job record;\n_42\nbegin\n_42\n    for job in\n_42\n        select * from job_queue\n_42\n        where status = 'pending'\n_42\n          and scheduled_at <= now()\n_42\n        order by priority desc, created_at\n_42\n        for update skip locked\n_42\n    loop\n_42\n        begin\n_42\n            -- add job processing logic here.\n_42\n            -- for demonstration, we'll just update the job status to 'completed'.\n_42\n            update job_queue\n_42\n            set status = 'completed'\n_42\n            where job_id = job.job_id;\n_42\n_42\n        exception when others then\n_42\n            -- handle job failure and retry logic\n_42\n            if job.retry_count < job.max_retries then\n_42\n                update job_queue\n_42\n                set retry_count = retry_count + 1,\n_42\n                    scheduled_at = now() + interval '1 minute'  -- delay retry by 1 minute\n_42\n                where job_id = job.job_id;\n_42\n            else\n_42\n                update job_queue\n_42\n                set status = 'failed'\n_42\n                where job_id = job.job_id;\n_42\n            end if;\n_42\n        end;\n_42\n    end loop;\n_42\nend;\n_42\n$$ language plpgsql;\n_42\n_42\ngrant execute\n_42\non function public.dequeue_and_run_jobs\n_42\nto supabase_auth_admin;\n_42\n_42\nrevoke execute\n_42\non function public.dequeue_and_run_jobs\n_42\nfrom authenticated, anon;\n`\n\nConfigure `pg_cron` to run the job on an interval. You can use a tool like [crontab.guru](https://crontab.guru/) to check that your job is running on an appropriate schedule. Ensure that `pg_cron` is enabled under `Database > Extensions`\n\n`\n_10\nselect\n_10\ncron.schedule(\n_10\n    '* * * * *', -- this cron expression means every minute.\n_10\n    'select dequeue_and_run_jobs();'\n_10\n);\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-hooks/send-sms-hook",
        "title": "Send SMS Hook | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Send%20SMS%20Hook&description=undefined",
        "ogTitle": "Send SMS Hook | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-hooks/send-sms-hook",
        "description": "Use a custom SMS provider to send authentication messages",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Use a custom SMS provider to send authentication messages",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Send Email Hook\n\n## Use a custom email provider to send authentication messages\n\n* * *\n\nThe Send Email Hook runs before an email is sent and allows for flexibility around email sending. You can use this hook to configure a back-up email provider or add internationalization to your emails.\n\n**Inputs**\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `user` | [`User`](/docs/guides/auth/users#the-user-object) | The user attempting to sign in. |\n| `email` | `object` | Metadata specific to the email sending process. Includes the OTP and `token_hash`. |\n\nJSONJSON Schema\n\n`\n_49\n{\n_49\n\"user\": {\n_49\n    \"id\": \"8484b834-f29e-4af2-bf42-80644d154f76\",\n_49\n    \"aud\": \"authenticated\",\n_49\n    \"role\": \"authenticated\",\n_49\n    \"email\": \"john@soupbase.io\",\n_49\n    \"phone\": \"\",\n_49\n    \"app_metadata\": {\n_49\n      \"provider\": \"email\",\n_49\n      \"providers\": [\"email\"]\n_49\n    },\n_49\n    \"user_metadata\": {\n_49\n      \"email\": \"john@soupbase.io\",\n_49\n      \"email_verified\": false,\n_49\n      \"phone_verified\": false,\n_49\n      \"sub\": \"8484b834-f29e-4af2-bf42-80644d154f76\"\n_49\n    },\n_49\n    \"identities\": [\\\n_49\\\n      {\\\n_49\\\n        \"identity_id\": \"bc26d70b-517d-4826-bce4-413a5ff257e7\",\\\n_49\\\n        \"id\": \"8484b834-f29e-4af2-bf42-80644d154f76\",\\\n_49\\\n        \"user_id\": \"8484b834-f29e-4af2-bf42-80644d154f76\",\\\n_49\\\n        \"identity_data\": {\\\n_49\\\n          \"email\": \"john@soupbase.io\",\\\n_49\\\n          \"email_verified\": false,\\\n_49\\\n          \"phone_verified\": false,\\\n_49\\\n          \"sub\": \"8484b834-f29e-4af2-bf42-80644d154f76\"\\\n_49\\\n        },\\\n_49\\\n        \"provider\": \"email\",\\\n_49\\\n        \"last_sign_in_at\": \"2024-05-14T12:56:33.824231484Z\",\\\n_49\\\n        \"created_at\": \"2024-05-14T12:56:33.824261Z\",\\\n_49\\\n        \"updated_at\": \"2024-05-14T12:56:33.824261Z\",\\\n_49\\\n        \"email\": \"john@soupbase.io\"\\\n_49\\\n      }\\\n_49\\\n    ],\n_49\n    \"created_at\": \"2024-05-14T12:56:33.821567Z\",\n_49\n    \"updated_at\": \"2024-05-14T12:56:33.825595Z\",\n_49\n    \"is_anonymous\": false\n_49\n},\n_49\n\"email_data\": {\n_49\n    \"token\": \"305805\",\n_49\n    \"token_hash\": \"7d5b7b1964cf5d388340a7f04f1dbb5eeb6c7b52ef8270e1737a58d0\",\n_49\n    \"redirect_to\": \"http://localhost:3000/\",\n_49\n    \"email_action_type\": \"signup\",\n_49\n    \"site_url\": \"http://localhost:9999\",\n_49\n    \"token_new\": \"\",\n_49\n    \"token_hash_new\": \"\"\n_49\n}\n_49\n}\n`\n\n**Outputs**\n\n- No outputs are required. An empty response with a status code of 200 is taken as a successful response.\n\nSQLHTTP\n\nUse Resend as an email providerAdd Internationalization for Email Templates\n\nYou can configure [Resend](https://resend.com/) as the custom email provider through the \"Send Email\" hook. This allows you to take advantage of Resend's developer-friendly APIs to send emails and leverage [React Email](https://react.email/) for managing your email templates. For a more advanced React Email tutorial, refer to [this guide](/docs/guides/functions/examples/auth-send-email-hook-react-email-resend).\n\nIf you want to send emails through the Supabase Resend integration, which uses Resend's SMTP server, check out [this integration](/partners/integrations/resend) instead.\n\nCreate a `.env` file with the following environment variables:\n\n`\n_10\nRESEND_API_KEY=your_resend_api_key\n_10\nSEND_EMAIL_HOOK_SECRET=<base64_secret>\n`\n\nYou can generate the secret in the [Auth Hooks](/dashboard/project/_/auth/hooks) section of the Supabase dashboard. Make sure to remove the `v1,whsec_` prefix!\n\nSet the secrets in your Supabase project:\n\n`\n_10\nsupabase secrets set --env-file .env\n`\n\nCreate a new edge function:\n\n`\n_10\nsupabase functions new send-email\n`\n\nAdd the following code to your edge function:\n\n``\n_61\nimport { Webhook } from \"https://esm.sh/standardwebhooks@1.0.0\";\n_61\nimport { Resend } from \"npm:resend\";\n_61\n_61\nconst resend = new Resend(Deno.env.get(\"RESEND_API_KEY\") as string);\n_61\nconst hookSecret = Deno.env.get(\"SEND_EMAIL_HOOK_SECRET\") as string;\n_61\n_61\nDeno.serve(async (req) => {\n_61\nif (req.method !== \"POST\") {\n_61\n    return new Response(\"not allowed\", { status: 400 });\n_61\n}\n_61\n_61\nconst payload = await req.text();\n_61\nconst headers = Object.fromEntries(req.headers);\n_61\nconst wh = new Webhook(hookSecret);\n_61\ntry {\n_61\n    const { user, email_data } = wh.verify(payload, headers) as {\n_61\n      user: {\n_61\n        email: string;\n_61\n      };\n_61\n      email_data: {\n_61\n        token: string;\n_61\n        token_hash: string;\n_61\n        redirect_to: string;\n_61\n        email_action_type: string;\n_61\n        site_url: string;\n_61\n        token_new: string;\n_61\n        token_hash_new: string;\n_61\n      };\n_61\n    };\n_61\n_61\n    const { error } = await resend.emails.send({\n_61\n      from: \"welcome <onboarding@example.com>\",\n_61\n      to: [user.email],\n_61\n      subject: \"Welcome to my site!\",\n_61\n      text: `Confirm you signup with this code: ${email_data.token}`,\n_61\n    });\n_61\n    if (error) {\n_61\n      throw error;\n_61\n    }\n_61\n} catch (error) {\n_61\n    return new Response(\n_61\n      JSON.stringify({\n_61\n        error: {\n_61\n          http_code: error.code,\n_61\n          message: error.message,\n_61\n        },\n_61\n      }),\n_61\n      {\n_61\n        status: 401,\n_61\n        headers: { \"Content-Type\": \"application/json\" },\n_61\n      },\n_61\n    );\n_61\n}\n_61\n_61\nconst responseHeaders = new Headers();\n_61\nresponseHeaders.set(\"Content-Type\", \"application/json\");\n_61\nreturn new Response(JSON.stringify({}), {\n_61\n    status: 200,\n_61\n    headers: responseHeaders,\n_61\n});\n_61\n});\n``\n\nDeploy your edge function and [configure it as a hook](/dashboard/project/_/auth/hooks):\n\n`\n_10\nsupabase functions deploy send-email --no-verify-jwt\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-hooks/send-email-hook",
        "title": "Send Email Hook | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Send%20Email%20Hook&description=undefined",
        "ogTitle": "Send Email Hook | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-hooks/send-email-hook",
        "description": "Use a custom email provider to send authentication messages",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "ogDescription": "Use a custom email provider to send authentication messages",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Single Sign-On with SAML 2.0 for Projects\n\n* * *\n\nLooking for guides on how to use Single Sign-On with the Supabase dashboard? Head on over to [Enable SSO for Your Organization](/docs/guides/platform/sso).\n\nSupabase Auth supports enterprise-level Single Sign-On (SSO) for any identity providers compatible with the SAML 2.0 protocol. This is a non-exclusive list of supported identity providers:\n\n- Google Workspaces (formerly known as GSuite)\n- Okta, Auth0\n- Microsoft Active Directory, Azure Active Directory, Microsoft Entra\n- PingIdentity\n- OneLogin\n\nIf you're having issues with identity provider software not on this list, please [open a support ticket](https://supabase.com/dashboard/support/new).\n\n## Prerequisites [\\#](\\#prerequisites)\n\nThis guide requires the use of the [Supabase CLI](/docs/guides/cli). Please make sure you're using version v1.46.4 or higher. You can use `supabase -v` to see the currently installed version.\n\nYou can use the `supabase sso` [subcommands](/docs/reference/cli/supabase-sso) to manage your project's configuration.\n\nSAML 2.0 support is disabled by default on Supabase projects. You can configure this on the [Auth Providers](https://supabase.com/dashboard/project/_/auth/providers) page on your project.\n\nPlease note that SAML 2.0 support is offered on plans Pro and above. Check the [Pricing](https://supabase.com/pricing) page for more information.\n\n## Terminology [\\#](\\#terminology)\n\nThe number of SAML and SSO acronyms can often be overwhelming. Here's a glossary which you can refer back to at any time:\n\n- **Identity Provider**, **IdP**, or **IDP**\nAn identity provider is a service that manages user accounts at a company or organization. It can verify the identity of a user and exchange that information with your Supabase project and other applications. It acts as a single source of truth for user identities and access rights. Commonly used identity providers are: Microsoft Active Directory (Azure AD, Microsoft Entra), Okta, Google Workspaces (GSuite), PingIdentity, OneLogin, and many others. There are also self-hosted and on-prem versions of identity providers, and sometimes they are accessible only by having access to a company VPN or being in a specific building.\n- **Service Provider**, **SP**\nThis is the software that is asking for user information from an identity provider. In Supabase, this is your project's Auth server.\n- **Assertion**\nAn assertion is a statement issued by an identity provider that contains information about a user.\n- **EntityID**\nA globally unique ID (usually a URL) that identifies an Identity Provider or Service Provider across the world.\n- **NameID**\nA unique ID (usually an email address) that identifies a user at an Identity Provider.\n- **Metadata**\nAn XML document that describes the features and configuration of an Identity Provider or Service Provider. It can be as a standalone document or as a URL. Usually (but not always) the `EntityID` is the URL at which you can access the Metadata.\n- **Certificate**\nSupabase Auth (the Service Provider) trusts assertions from an Identity Provider based on the signature attached to the assertion. The signature is verified according to the certificate present in the Metadata.\n- **Assertion Consumer Service (ACS) URL**\nThis is one of the most important SAML URLs. It is the URL where Supabase Auth will accept assertions from an identity provider. Basically, once the identity provider verifies the user's identity it will redirect to this URL and the redirect request will contain the assertion.\n- **Binding (Redirect, POST, or Artifact)**\nThis is a description of the way an identity provider communicates with Supabase Auth. When using the Redirect binding, the communication occurs using HTTP 301 redirects. When it's `POST`, it's using `POST` requests sent with `<form>` elements on a page. When using Artifact, it's using a more secure exchange over a Redirect or `POST`.\n- **RelayState**\nState used by Supabase Auth to hold information about a request to verify the identity of a user.\n\n## Important SAML 2.0 information [\\#](\\#important-saml-20-information)\n\nBelow is information about your project's SAML 2.0 configuration which you can share with the company or organization that you're trying to on-board.\n\n| Name | Value |\n| --- | --- |\n| EntityID | `https://<project>.supabase.co/auth/v1/sso/saml/metadata` |\n| Metadata URL | `https://<project>.supabase.co/auth/v1/sso/saml/metadata` |\n| Metadata URL<br>(download) | `https://<project>.supabase.co/auth/v1/sso/saml/metadata?download=true` |\n| ACS URL | `https://<project>.supabase.co/auth/v1/sso/saml/acs` |\n| SLO URL | `https://<project>.supabase.co/auth/v1/sso/slo` |\n| NameID | Required `emailAddress` or `persistent` |\n\nNote that SLO (Single Logout) is not supported at this time with Supabase Auth as it is a rarely supported feature by identity providers. However, the URL is registered and advertised for when this does become available.\n\nAppend `?download=true` to the Metadata URL to download the Metadata XML file. This is useful in cases where the identity provider requires a file.\n\nAlternatively, you can use the `supabase sso info --project-ref <your-project>` [command](/docs/reference/cli/supabase-sso-info) to get setup information for your project.\n\n### User accounts and identities [\\#](\\#user-accounts-and-identities)\n\nUser accounts and identities created via SSO differ from regular (email, phone, password, social login...) accounts in these ways:\n\n- **No automatic linking.**\nEach user account verified using a SSO identity provider will not be automatically linked to existing user accounts in the system. That is, if a user `jane.doe@company.com` had signed up with a password, and then uses their company SSO login with your project, there will be two `jane.doe@company.com` user accounts in the system.\n- **Emails are not necessarily unique.**\nGiven the behavior with no automatic linking, email addresses are no longer a unique identifier for a user account. Please always use the user's UUID to correctly reference user accounts.\n- **Sessions may have a maximum duration.**\nDepending on the configuration of the identity provider, a login session established with SSO may forcibly log out a user after a certain period of time.\n\n### Row Level Security [\\#](\\#row-level-security)\n\nYou can use information about the SSO identity provider in Row Level Security policies.\n\nHere are some commonly used statements to extract SSO related information from the user's JWT:\n\n- `auth.jwt()#>>'{amr,0,method}'`\nReturns the name of the last method used to verify the identity of this user. With SAML SSO this is `sso/saml`.\n- `auth.jwt()#>>'{amr,0,provider}'`\nReturns the UUID of the SSO identity provider used by the user to sign-in.\n- `auth.jwt()#>>'{user_metadata,iss}'`\nReturns the identity provider's SAML 2.0 `EntityID`\n\nIf you use [Multi-Factor Authentication](/docs/guides/auth/auth-mfa) with SSO, the `amr` array may have a different method at index `0`!\n\nA common use case with SSO is to use the UUID of the identity provider as the identifier for the organization the user belongs to -- frequently known as a tenant. By associating the identity provider's UUID with your tenants, you can use restrictive RLS policies to scope down actions and data that a user is able to access.\n\nFor example, let's say you have a table like:\n\n`\n_10\ncreate table organization_settings (\n_10\n  -- the organization's unique ID\n_10\nid uuid not null primary key,\n_10\n  -- the organization's SSO identity provider\n_10\nsso_provider_id uuid unique,\n_10\n  -- name of the organization\n_10\nname text,\n_10\n  -- billing plan (paid, Free, Enterprise)\n_10\nbilling_plan text\n_10\n);\n`\n\nYou can use the information present in the user's JWT to scope down which rows from this table the user can see, without doing any additional user management:\n\n`\n_10\nCREATE POLICY \"View organization settings.\"\n_10\nON organization_settings\n_10\nAS RESTRICTIVE\n_10\nUSING (\n_10\n    sso_provider_id = (select auth.jwt()#>>'{amr,0,provider}')\n_10\n);\n`\n\n## Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\nOnce you've enabled SAML 2.0 support on your project via the [Auth Providers](https://supabase.com/dashboard/project/_/auth/providers) page in the dashboard, you can use the [Supabase CLI](/docs/reference/cli/supabase-sso) to add, update, remove and view information about identity providers.\n\n### Add a connection [\\#](\\#add-a-connection)\n\nTo establish a connection to a SAML 2.0 Identity Provider (IdP) you will need:\n\n- A SAML 2.0 Metadata XML file, or a SAML 2.0 Metadata URL pointing to an XML file\n- (Optional) Email domains that the organization's IdP uses\n- (Optional) Attribute mappings between the user properties of the IdP and the claims stored by Supabase Auth\n\nYou should obtain the SAML 2.0 Metadata XML file or URL from the organization whose IdP you wish to connect. Most SAML 2.0 Identity Providers support the Metadata URL standard, and we recommend using a URL if this is available.\n\nCommonly used SAML 2.0 Identity Providers that support Metadata URLs:\n\n- Okta\n- Azure AD (Microsoft Entra)\n- PingIdentity\n\nCommonly used SAML 2.0 Identity Providers that only support Metadata XML files:\n\n- Google Workspaces (GSuite)\n- Any self-hosted or on-prem identity provider behind a VPN\n\nOnce you've obtained the SAML 2.0 Metadata XML file or URL you can [establish a connection](/docs/reference/cli/supabase-sso-add) with your project's Supabase Auth server by running:\n\n`\n_10\nsupabase sso add --type saml --project-ref <your-project> \\\n_10\n  --metadata-url 'https://company.com/idp/saml/metadata' \\\n_10\n  --domains company.com\n`\n\nIf you wish to use a Metadata XML file instead, you can use:\n\n`\n_10\nsupabase sso add --type saml --project-ref <your-project> \\\n_10\n  --metadata-file /path/to/saml/metadata.xml \\\n_10\n  --domains company.com\n`\n\nThis command will register a new identity provider with your project's Auth server. When successful, you will see the details of the provider such as it's SAML information and registered domains.\n\nPlease note that only persons with write access to the project can register, update or remove identity providers.\n\nOnce you've added an identity provider, users who have access to it can sign in to your application. With SAML 2.0 there are two ways that users can sign in to your project:\n\n- By signing-in from your application's user interface, commonly known as **SP (Service Provider) Initiated Flow**\n- By clicking on an icon in the application menu on the company intranet or identity provider page, commonly known as **Identity Provider Initiated (IdP) Flow**\n\nTo initiate a sign-in request from your application's user interface (i.e. the SP Initiated Flow), you can use:\n\nJavaScriptDartSwiftKotlin\n\n`\n_10\nsupabase.auth.signInWithSSO({\n_10\ndomain: 'company.com',\n_10\n})\n`\n\nCalling [`signInWithSSO`](/docs/reference/javascript/auth-signinwithsso) starts the sign-in process using the identity provider registered for the `company.com` domain name. It is not required that identity providers be assigned one or multiple domain names, in which case you can use the provider's unique ID instead.\n\n### Understanding attribute mappings [\\#](\\#understanding-attribute-mappings)\n\nWhen a user signs in using the SAML 2.0 Single Sign-On protocol, an XML document called the SAML Assertion is exchanged between the identity provider and Supabase Auth.\n\nThis assertion contains information about the user's identity and other authentication information, such as:\n\n- Unique ID of the user (called `NameID` in SAML)\n- Email address\n- Name of the user\n- Department or organization\n- Other attributes present in the users directory managed by the identity provider\n\nWith exception of the unique user ID, SAML does not require any other attributes in the assertion. Identity providers can be configured so that only select user information is shared with your project.\n\nYour project can be configured to recognize these attributes and map them into your project's database using a JSON structure. This process is called attribute mapping, and varies according to the configuration of the identity provider.\n\nFor example, the following JSON structure configures attribute mapping for the `email` and `first_name` user identity properties.\n\n`\n_10\n{\n_10\n\"keys\": {\n_10\n    \"email\": {\n_10\n      \"name\": \"mail\"\n_10\n    },\n_10\n    \"first_name\": {\n_10\n      \"name\": \"givenName\"\n_10\n    }\n_10\n}\n_10\n}\n`\n\nWhen creating or updating an identity provider with the [Supabase CLI](/docs/guides/cli) you can include this JSON as a file with the `--attribute-mapping-file /path/to/attribute/mapping.json` flag.\n\nFor example, to change the attribute mappings to an existing provider you can use:\n\n`\n_10\nsupabase sso update <provider-uuid> --project-ref <your-project> \\\n_10\n  --attribute-mapping-file /path/to/attribute/mapping.json\n`\n\nGiven a SAML 2.0 assertion that includes these attributes:\n\n`\n_21\n<saml:AttributeStatement>\n_21\n<!-- will be mapped to the email key -->\n_21\n<saml:Attribute\n_21\n    Name=\"mail\"\n_21\n    NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n_21\n    >\n_21\n    <saml:AttributeValue xsi:type=\"xs:string\">\n_21\n      jane.doe@company.com\n_21\n    </saml:AttributeValue>\n_21\n</saml:Attribute>\n_21\n_21\n<!-- will be mapped to the first_name key -->\n_21\n<saml:Attribute\n_21\n    Name=\"givenName\"\n_21\n    NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n_21\n    >\n_21\n    <saml:AttributeValue xsi:type=\"xs:string\">\n_21\n      Jane Doe\n_21\n    </saml:AttributeValue>\n_21\n</saml:Attribute>\n_21\n</saml:AttributeStatement>\n`\n\nWill result in the following claims in the user's identity in the database and JWT:\n\n`\n_10\n{\n_10\n\"email\": \"jane.doe@company.com\",\n_10\n\"custom_claims\": {\n_10\n    \"first_name\": \"Jane Doe\"\n_10\n}\n_10\n}\n`\n\nSupabase Auth does not require specifying attribute mappings if you only need access to the user's email. It will attempt to find an email attribute specified in the assertion. All other properties will not be automatically included, and it is those you need to map.\n\nAt this time it is not possible to have users without an email address, so SAML assertions without one will be rejected.\n\nMost SAML 2.0 identity providers use Lightweight Directory Access Protocol (LDAP) attribute names. However, due to their variability and complexity operators of identity providers are able to customize both the `Name` and attribute value that is sent to Supabase Auth in an assertion. Please refer to the identity provider's documentation and contact the operator for details on what attributes are mapped for your project.\n\n**Accessing the stored attributes**\n\nThe stored attributes, once mapped, show up in the access token (a JWT) of the user. If you need to look these values up in the database, you can find them in the `auth.identities` table under the `identity_data` JSON column. Identities created for SSO providers have `sso:<uuid-of-provider>` in the `provider` column, while `id` contains the unique NameID of the user account.\n\nFurthermore, you can find the same identity data under `raw_app_meta_data` inside `auth.users`.\n\n### Remove a connection [\\#](\\#remove-a-connection)\n\nOnce a connection to an identity provider is established, you can [remove it](/docs/reference/cli/supabase-sso-remove) by running:\n\n`\n_10\nsupabase sso remove <provider-id> --project-ref <your-project>\n`\n\nIf successful, the details of the removed identity provider will be shown. All user accounts from that identity provider will be immediately logged out. User information will remain in the system, but it will no longer be possible for any of those accounts to be accessed in the future, even if you add the connection again.\n\nIf you need to reassign those user accounts to another identity provider, please [open a support ticket](https://supabase.com/dashboard/support/new).\n\nA [list of all](/docs/reference/cli/supabase-sso-list) registered identity providers can be displayed by running:\n\n`\n_10\nsupabase sso list --project-ref <your-project>\n`\n\n### Update a connection [\\#](\\#update-a-connection)\n\nYou may wish to update settings about a connection to a SAML 2.0 identity provider.\n\nCommonly this is necessary when:\n\n- Cryptographic keys are rotated or have expired\n- Metadata URL has changed, but is the same identity provider\n- Other SAML 2.0 Metadata attributes have changed, but it is still the same identity provider\n- You are updating the domains or attribute mapping\n\nYou can use this command to [update](/docs/reference/cli/supabase-sso-update) the configuration of an identity provider:\n\n`\n_10\nsupabase sso update <provider-id> --project-ref <your-project>\n`\n\nPlease use `--help` to see all available flags.\n\nIt is not possible to change the unique SAML identifier of the identity provider, known as `EntityID`. Everything else can be updated. If the SAML `EntityID` of your identity provider has changed, it is regarded as a new identity provider and you will have to register it like a new connection.\n\n### Retrieving information about a connection [\\#](\\#retrieving-information-about-a-connection)\n\nYou can always obtain a [list](/docs/reference/cli/supabase-sso-list) of all registered providers using:\n\n`\n_10\nsupabase sso list --project-ref <your-project>\n`\n\nThis list will only include basic information about each provider. To see [all of the information](/docs/reference/cli/supabase-sso-show) about a provider you can use:\n\n`\n_10\nsupabase sso show <provider-id> --project-ref <your-project>\n`\n\nYou can use the `-o json` flag to output the information as JSON, should you need to. Other formats may be supported, please use `--help` to see all available options.\n\n## Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n### How do I publish my application to an identity provider's marketplace? [\\#](\\#how-do-i-publish-my-application-to-an-identity-providers-marketplace)\n\nMany cloud-based identity providers offer a marketplace where you can register your application for easy on-boarding with customers. When you use Supabase Auth's SAML 2.0 support you can register your project in any one of these marketplaces.\n\nPlease refer to the relevant documentation for each cloud-based identity provider on how you can do this. Some common marketplaces are:\n\n- [Okta Integration Network](https://developer.okta.com/docs/guides/build-sso-integration/saml2/main/)\n- [Azure Active Directory App Gallery](https://learn.microsoft.com/en-us/azure/active-directory-b2c/publish-app-to-azure-ad-app-gallery)\n- [Google Workspaces Pre-integrated SAML apps catalog](https://support.google.com/a/table/9217027)\n\n### Why do some users get: SAML assertion does not contain email address? [\\#](\\#why-do-some-users-get-saml-assertion-does-not-contain-email-address)\n\nIdentity providers do not have to send back and email address for the user, though they often do. Supabase Auth requires that an email address is present.\n\nThe following list of commonly used SAML attribute names is inspected, in order of appearance, to discover the email address in the assertion:\n\n- `urn:oid:0.9.2342.19200300.100.1.3`\n- `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress`\n- `http://schemas.xmlsoap.org/claims/EmailAddress`\n- `mail`\n- `email`\n\nFinally if there is no such attribute, it will use the SAML `NameID` value but only if the format is advertised as `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress`.\n\nShould you run into this problem, it is most likely a misconfiguration issue **on the identity provider side.** Please instruct your contact at the company to map the user's email address to one of the above listed attribute names, typically `email`.\n\n### How do I access the private key used for SAML in my project? [\\#](\\#how-do-i-access-the-private-key-used-for-saml-in-my-project)\n\nAt this time it is not possible to extract the RSA private key used by your project's Supabase Auth server. This is done to keep the private key as secure as possible, given that SAML does not offer an easy way to rotate keys without disrupting service. (Please use a SAML 2.0 Metadata URL whenever possible for this reason!)\n\nIf you really need access to the key, please [open a support ticket](https://supabase.com/dashboard/support/new) and we'll try to support you as best as possible.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
        "title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Single%20Sign-On%20with%20SAML%202.0%20for%20Projects&description=Use%20Single%20Sign-On%20(SSO)%20authentication%20on%20your%20project%20with%20SAML%202.0",
        "ogTitle": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/sso/auth-sso-saml",
        "description": "Use Single Sign-On (SSO) authentication on your project with SAML 2.0",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Use Single Sign-On (SSO) authentication on your project with SAML 2.0",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Multi-Factor Authentication\n\n* * *\n\nMulti-factor authentication (MFA), sometimes called two-factor authentication (2FA), adds an additional layer of security to your application by verifying their identity through additional verification steps.\n\nIt is considered a best practice to use MFA for your applications.\n\nUsers with weak passwords or compromised social login accounts are prone to malicious account takeovers. These can be prevented with MFA because they require the user to provide proof of both of these:\n\n- Something they know.\nPassword, or access to a social-login account.\n- Something they have.\nAccess to an authenticator app (a.k.a. TOTP) or a mobile phone.\n\n## Overview [\\#](\\#overview)\n\nSupabase Auth implements MFA via two methods: App Authenticator, which makes use of a Time based-one Time Password, and phone messaging, which makes use of a code generated by Supabase Auth.\n\nApplications using MFA require two important flows:\n\n1. **Enrollment flow.**\nThis lets users set up and control MFA in your app.\n2. **Authentication flow.**\nThis lets users sign in using any factors after the conventional login step.\n\nSupabase Auth provides:\n\n- **Enrollment API** \\- build rich user interfaces for adding and removing factors.\n- **Challenge and Verify APIs** \\- securely verify that the user has access to a factor.\n- **List Factors API** \\- build rich user interfaces for signing in with additional factors.\n\nYou can control access to the Enrollment API as well as the Challenge and Verify APIs via the Supabase Dashboard. A setting of `Verification Disabled` will disable both the challenge API and the verification API.\n\nThese sets of APIs let you control the MFA experience that works for you. You can create flows where MFA is optional, mandatory for all, or only specific groups of users.\n\nOnce users have enrolled or signed-in with a factor, Supabase Auth adds additional metadata to the user's access token (JWT) that your application can use to allow or deny access.\n\nThis information is represented by an [Authenticator Assurance Level](https://pages.nist.gov/800-63-3-Implementation-Resources/63B/AAL/), a standard measure about the assurance of the user's identity Supabase Auth has for that particular session. There are two levels recognized today:\n\n1. **Assurance Level 1: `aal1`**\nMeans that the user's identity was verified using a conventional login method\nsuch as email+password, magic link, one-time password, phone auth or social\nlogin.\n2. **Assurance Level 2: `aal2`**\nMeans that the user's identity was additionally verified using at least one\nsecond factor, such as a TOTP code or One-Time Password code.\n\nThis assurance level is encoded in the `aal` claim in the JWT associated with the user. By decoding this value you can create custom authorization rules in your frontend, backend, and database that will enforce the MFA policy that works for your application. JWTs without an `aal` claim are at the `aal1` level.\n\n## Adding to your app [\\#](\\#adding-to-your-app)\n\nAdding MFA to your app involves these four steps:\n\n1. **Add enrollment flow.**\nYou need to provide a UI within your app that your users will be able to set-up\nMFA in. You can add this right after sign-up, or as part of a separate flow in\nthe settings portion of your app.\n2. **Add unenroll flow.**\nYou need to support a UI through which users can see existing devices and unenroll\ndevices which are no longer relevant.\n3. **Add challenge step to login.**\nIf a user has set-up MFA, your app's login flow needs to present a challenge\nscreen to the user asking them to prove they have access to the additional\nfactor.\n4. **Enforce rules for MFA logins.**\nOnce your users have a way to enroll and log in with MFA, you need to enforce\nauthorization rules across your app: on the frontend, backend, API servers or\nRow-Level Security policies.\n\nThe enrollment flow and the challenge steps differ by factor and are covered on a separate page. Visit the [Phone](/docs/guides/auth/auth-mfa/phone) or [App Authenticator](/docs/guides/auth/auth-mfa/totp) pages to see how to add the flows for the respective factors. You can combine both flows and allow for use of both Phone and App Authenticator Factors.\n\n### Add unenroll flow [\\#](\\#add-unenroll-flow)\n\nThe unenroll process is the same for both Phone and TOTP factors.\n\nAn unenroll flow provides a UI for users to manage and unenroll factors linked to their accounts. Most applications do so via a factor management page where users can view and unlink selected factors.\n\nWhen a user unenrolls a factor, call `supabase.auth.mfa.unenroll()` with the ID of the factor. For example, call:\n\n`\n_10\nsupabase.auth.mfa.unenroll({factorId: \"d30fd651-184e-4748-a928-0a4b9be1d429\"})\n`\n\nto unenroll a factor with ID `d30fd651-184e-4748-a928-0a4b9be1d429`.\n\n### Enforce rules for MFA logins [\\#](\\#enforce-rules-for-mfa-logins)\n\nAdding MFA to your app's UI does not in-and-of-itself offer a higher level of security to your users. You also need to enforce the MFA rules in your application's database, APIs, and server-side rendering.\n\nDepending on your application's needs, there are three ways you can choose to enforce MFA.\n\n1. **Enforce for all users (new and existing).**\nAny user account will have to enroll MFA to continue using your app.\nThe application will not allow access without going through MFA first.\n2. **Enforce for new users only.**\nOnly new users will be forced to enroll MFA, while old users will be encouraged\nto do so.\nThe application will not allow access for new users without going through MFA\nfirst.\n3. **Enforce only for users that have opted-in.**\nUsers that want MFA can enroll in it and the application will not allow access\nwithout going through MFA first.\n\n#### Example: React [\\#](\\#example-react)\n\nBelow is an example that creates a new `UnenrollMFA` component that illustrates the important pieces of the MFA enrollment flow. Note that users can only unenroll a factor after completing the enrollment flow and obtaining an `aal2` JWT claim. Here are some points of note:\n\n- When the component appears on screen, the `supabase.auth.mfa.listFactors()` endpoint\nfetches all existing factors together with their details.\n- The existing factors for a user are displayed in a table.\n- Once the user has selected a factor to unenroll, they can type in the factorId and click **Unenroll**\nwhich creates a confirmation modal.\n\nUnenrolling a factor will downgrade the assurance level from `aal2` to `aal1` only after the refresh interval has lapsed. For an immediate downgrade from `aal2` to `aal1` after enrolling one will need to manually call `refreshSession()`\n\n`\n_46\n/**\n_46\n* UnenrollMFA shows a simple table with the list of factors together with a button to unenroll.\n_46\n* When a user types in the factorId of the factor that they wish to unenroll and clicks unenroll\n_46\n* the corresponding factor will be unenrolled.\n_46\n*/\n_46\nexport function UnenrollMFA() {\n_46\nconst [factorId, setFactorId] = useState('')\n_46\nconst [factors, setFactors] = useState([])\n_46\nconst [error, setError] = useState('') // holds an error message\n_46\n_46\nuseEffect(() => {\n_46\n    ;(async () => {\n_46\n      const { data, error } = await supabase.auth.mfa.listFactors()\n_46\n      if (error) {\n_46\n        throw error\n_46\n      }\n_46\n_46\n      setFactors([...data.totp, ...data.phone])\n_46\n    })()\n_46\n}, [])\n_46\n_46\nreturn (\n_46\n    <>\n_46\n      {error && <div className=\"error\">{error}</div>}\n_46\n      <tbody>\n_46\n        <tr>\n_46\n          <td>Factor ID</td>\n_46\n          <td>Friendly Name</td>\n_46\n          <td>Factor Status</td>\n_46\n          <td>Phone Number</td>\n_46\n        </tr>\n_46\n        {factors.map((factor) => (\n_46\n          <tr>\n_46\n            <td>{factor.id}</td>\n_46\n            <td>{factor.friendly_name}</td>\n_46\n            <td>{factor.factor_type}</td>\n_46\n            <td>{factor.status}</td>\n_46\n            <td>{factor.phone}</td>\n_46\n          </tr>\n_46\n        ))}\n_46\n      </tbody>\n_46\n      <input type=\"text\" value={verifyCode} onChange={(e) => setFactorId(e.target.value.trim())} />\n_46\n      <button onClick={() => supabase.auth.mfa.unenroll({ factorId })}>Unenroll</button>\n_46\n    </>\n_46\n)\n_46\n}\n`\n\n#### Database [\\#](\\#database)\n\nYour app should sufficiently deny or allow access to tables or rows based on the user's current and possible authenticator levels.\n\nPostgreSQL has two types of policies: permissive and restrictive. This guide uses restrictive policies. Make sure you don't omit the `as restrictive` clause.\n\n##### Enforce for all users (new and existing)\n\nIf your app falls under this case, this is a template Row Level Security policy you can apply to all your tables:\n\n`\n_10\ncreate policy \"Policy name.\"\n_10\non table_name\n_10\nas restrictive\n_10\nto authenticated\n_10\nusing ((select auth.jwt()->>'aal') = 'aal2');\n`\n\n- Here the policy will not accept any JWTs with an `aal` claim other than\n`aal2`, which is the highest authenticator assurance level.\n- **Using `as restrictive` ensures this policy will restrict all commands on the**\n**table regardless of other policies!**\n\n##### Enforce for new users only\n\nIf your app falls under this case, the rules get more complex. User accounts created past a certain timestamp must have a `aal2` level to access the database.\n\n`\n_13\ncreate policy \"Policy name.\"\n_13\non table_name\n_13\nas restrictive -- very important!\n_13\nto authenticated\n_13\nusing\n_13\n    (array[(select auth.jwt()->>'aal')] <@ (\n_13\n       select\n_13\n         case\n_13\n           when created_at >= '2022-12-12T00:00:00Z' then array['aal2']\n_13\n           else array['aal1', 'aal2']\n_13\n         end as aal\n_13\n       from auth.users\n_13\n       where (select auth.uid()) = id));\n`\n\n- The policy will accept both `aal1` and `aal2` for users with a `created_at`\ntimestamp prior to 12th December 2022 at 00:00 UTC, but will only accept\n`aal2` for all other timestamps.\n- The `<@` operator is PostgreSQL's [\"contained in\"\\\\\noperator.](https://www.postgresql.org/docs/current/functions-array.html)\n- **Using `as restrictive` ensures this policy will restrict all commands on the**\n**table regardless of other policies!**\n\n##### Enforce only for users that have opted-in\n\nUsers that have enrolled MFA on their account are expecting that your\napplication only works for them if they've gone through MFA.\n\n`\n_14\ncreate policy \"Policy name.\"\n_14\non table_name\n_14\nas restrictive -- very important!\n_14\nto authenticated\n_14\nusing (\n_14\n    array[(select auth.jwt()->>'aal')] <@ (\n_14\n      select\n_14\n          case\n_14\n            when count(id) > 0 then array['aal2']\n_14\n            else array['aal1', 'aal2']\n_14\n          end as aal\n_14\n        from auth.mfa_factors\n_14\n        where ((select auth.uid()) = user_id) and status = 'verified'\n_14\n    ));\n`\n\n- The policy will only accept only `aal2` when the user has at least one MFA\nfactor verified.\n- Otherwise, it will accept both `aal1` and `aal2`.\n- The `<@` operator is PostgreSQL's [\"contained in\"\\\\\noperator.](https://www.postgresql.org/docs/current/functions-array.html)\n- **Using `as restrictive` ensures this policy will restrict all commands on the**\n**table regardless of other policies!**\n\n### Server-Side Rendering [\\#](\\#server-side-rendering)\n\nWhen using the Supabase JavaScript library in a server-side rendering context, make sure you always create a new object for each request! This will prevent you from accidentally rendering and serving content belonging to different users.\n\nIt is possible to enforce MFA on the Server-Side Rendering level. However, this can be tricky do to well.\n\nYou can use the `supabase.auth.mfa.getAuthenticatorAssuranceLevel()` and `supabase.auth.mfa.listFactors()` APIs to identify the AAL level of the session and any factors that are enabled for a user, similar to how you would use these on the browser.\n\nHowever, encountering a different AAL level on the server may not actually be a security problem. Consider these likely scenarios:\n\n1. User signed-in with a conventional method but closed their tab on the MFA\nflow.\n2. User forgot a tab open for a very long time. (This happens more often than\nyou might imagine.)\n3. User has lost their authenticator device and is confused about the next\nsteps.\n\nWe thus recommend you redirect users to a page where they can authenticate using their additional factor, instead of rendering a HTTP 401 Unauthorized or HTTP 403 Forbidden content.\n\n### APIs [\\#](\\#apis)\n\nIf your application uses the Supabase Database, Storage or Edge Functions, just using Row Level Security policies will give you sufficient protection. In the event that you have other APIs that you wish to protect, follow these general guidelines:\n\n1. **Use a good JWT verification and parsing library for your language.**\nThis will let you securely parse JWTs and extract their claims.\n2. **Retrieve the `aal` claim from the JWT and compare its value according to**\n**your needs.**\nIf you've encountered an AAL level that can be increased, ask the user to\ncontinue the login process instead of logging them out.\n3. **Use the `https://<project-ref>.supabase.co/rest/v1/auth/factors` REST**\n**endpoint to identify if the user has enrolled any MFA factors.**\nOnly `verified` factors should be acted upon.\n\n## Frequently asked questions [\\#](\\#frequently-asked-questions)\n\nHow do I check when a user went through MFA?",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-mfa",
        "title": "Multi-Factor Authentication | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Multi-Factor%20Authentication&description=Add%20an%20additional%20layer%20of%20security%20to%20your%20apps%20with%20Supabase%20Auth%20multi-factor%20authentication.",
        "ogTitle": "Multi-Factor Authentication | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-mfa",
        "description": "Add an additional layer of security to your apps with Supabase Auth multi-factor authentication.",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Add an additional layer of security to your apps with Supabase Auth multi-factor authentication.",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Password security\n\n## Help your users to protect their password security\n\n* * *\n\nA password is more secure if it is harder to guess or brute-force. In theory, a password is harder to guess if it is longer. It is also harder to guess if it uses a larger set of characters (for example, digits, lowercase and uppercase letters, and symbols).\n\nThis table shows the _minimum_ number of guesses that need to be tried to access a user's account:\n\n| Required characters | Length | Guesses |\n| --- | --- | --- |\n| Digits only | 8 | ~ 227 |\n| Digits and letters | 8 | ~ 241 |\n| Digits, lower and uppercase letters | 8 | ~ 248 |\n| Digits, lower and uppercase letters, symbols | 8 | ~ 252 |\n\nIn reality though, passwords are not always generated at random. They often contain variations of names, words, dates, and common phrases. Malicious actors can use these properties to guess a password in fewer attempts.\n\nThere are hundreds of millions (and growing!) known passwords out there. Malicious actors can use these lists of leaked passwords to automate login attempts (known as credential stuffing) and steal or access sensitive user data.\n\n## Password strength and leaked password protection [\\#](\\#password-strength-and-leaked-password-protection)\n\nTo help protect your users, Supabase Auth allows you fine-grained control over the strength of the passwords used on your project. You can configure these in your project's [Auth settings](/dashboard/project/_/settings/auth):\n\n- Set a large minimum password length. Anything less than 8 characters is not recommended.\n- Set the required characters that must appear at least once in a user's password. Use the strongest option of requiring digits, lowercase and uppercase letters, and symbols.\n- Prevent the use of leaked passwords. Supabase Auth uses the open-source [HaveIBeenPwned.org Pwned Passwords API](https://haveibeenpwned.com/Passwords) to reject passwords that have been leaked and are known by malicious actors.\n\n## Additional recommendations [\\#](\\#additional-recommendations)\n\nIn addition to choosing suitable password strength settings and preventing the use of leaked passwords, consider asking your users to:\n\n- Use a password manager to store and generate passwords.\n- Avoid password reuse across websites and apps.\n- Avoid using personal information in passwords.\n- Use [Multi-Factor Authentication](/docs/guides/auth/auth-mfa).\n\n## Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n### How are passwords stored? [\\#](\\#how-are-passwords-stored)\n\nSupabase Auth uses [bcrypt](https://en.wikipedia.org/wiki/Bcrypt), a strong password hashing function, to store hashes of users' passwords. Only hashed passwords are stored. You cannot impersonate a user with the password hash. Each hash is accompanied by a randomly generated salt parameter for extra security.\n\nThe hash is stored in the `encrypted_password` column of the `auth.users` table. The column's name is a misnomer (cryptographic hashing is not encryption), but is kept for backward compatibility.\n\n### How will strengthened password requirements affect current users? [\\#](\\#how-will-strengthened-password-requirements-affect-current-users)\n\nExisting users can still sign in with their current password even if it doesn't meet the new, strengthened password requirements. However, if their password falls short of these updated standards, they will encounter a `WeakPasswordError` during the `signInWithPassword` process, explaining why it's considered weak. This change is also applicable to new users and existing users changing their passwords, ensuring everyone adheres to the enhanced security standards.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/password-security",
        "title": "Password security | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Password%20security&description=undefined",
        "ogTitle": "Password security | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/password-security",
        "description": "Help your users to protect their password security",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Help your users to protect their password security",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# MFA Verification Hook\n\n* * *\n\nYou can add additional checks to the [Supabase MFA implementation](/docs/guides/auth/auth-mfa) with hooks. For example, you can:\n\n- Limit the number of verification attempts performed over a period of time.\n- Sign out users who have too many invalid verification attempts.\n- Count, rate limit, or ban sign-ins.\n\n**Inputs**\n\nSupabase Auth will send a payload containing these fields to your hook:\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `factor_id` | `string` | Unique identifier for the MFA factor being verified |\n| `factor_type` | `string` | `totp` or `phone` |\n| `user_id` | `string` | Unique identifier for the user |\n| `valid` | `boolean` | Whether the verification attempt was valid. For TOTP, this means that the six digit code was correct (true) or incorrect (false). |\n\nJSONJSON Schema\n\n`\n_10\n{\n_10\n\"factor_id\": \"6eab6a69-7766-48bf-95d8-bd8f606894db\",\n_10\n\"user_id\": \"3919cb6e-4215-4478-a960-6d3454326cec\",\n_10\n\"valid\": true\n_10\n}\n`\n\n**Outputs**\n\nReturn this if your hook processed the input without errors.\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `decision` | `string` | The decision on whether to allow authentication to move forward. Use `reject` to deny the verification attempt and log the user out of all active sessions. Use `continue` to use the default Supabase Auth behavior. |\n| `message` | `string` | The message to show the user if the decision was `reject`. |\n\n`\n_10\n{\n_10\n\"decision\": \"reject\",\n_10\n\"message\": \"You have exceeded maximum number of MFA attempts.\"\n_10\n}\n`\n\nSQL\n\nLimit failed MFA verification attempts\n\nYour company requires that a user can input an incorrect MFA Verification code no more than once every 2 seconds.\n\nCreate a table to record the last time a user had an incorrect MFA verification attempt for a factor.\n\n`\n_10\ncreate table public.mfa_failed_verification_attempts (\n_10\nuser_id uuid not null,\n_10\nfactor_id uuid not null,\n_10\nlast_failed_at timestamp not null default now(),\n_10\nprimary key (user_id, factor_id)\n_10\n);\n`\n\nCreate a hook to read and write information to this table. For example:\n\n`\n_58\ncreate function public.hook_mfa_verification_attempt(event jsonb)\n_58\nreturns jsonb\n_58\nlanguage plpgsql\n_58\nas $$\n_58\ndeclare\n_58\n    last_failed_at timestamp;\n_58\nbegin\n_58\n    if event->'valid' is true then\n_58\n      -- code is valid, accept it\n_58\n      return jsonb_build_object('decision', 'continue');\n_58\n    end if;\n_58\n_58\n    select last_failed_at into last_failed_at\n_58\n      from public.mfa_failed_verification_attempts\n_58\n      where\n_58\n        user_id = event->'user_id'\n_58\n          and\n_58\n        factor_id = event->'factor_id';\n_58\n_58\n    if last_failed_at is not null and now() - last_failed_at < interval '2 seconds' then\n_58\n      -- last attempt was done too quickly\n_58\n      return jsonb_build_object(\n_58\n        'error', jsonb_build_object(\n_58\n          'http_code', 429,\n_58\n          'message',   'Please wait a moment before trying again.'\n_58\n        )\n_58\n      );\n_58\n    end if;\n_58\n_58\n    -- record this failed attempt\n_58\n    insert into public.mfa_failed_verification_attempts\n_58\n      (\n_58\n        user_id,\n_58\n        factor_id,\n_58\n        last_refreshed_at\n_58\n      )\n_58\n      values\n_58\n      (\n_58\n        event->'user_id',\n_58\n        event->'factor_id',\n_58\n        now()\n_58\n      )\n_58\n      on conflict do update\n_58\n        set last_refreshed_at = now();\n_58\n_58\n    -- finally let Supabase Auth do the default behavior for a failed attempt\n_58\n    return jsonb_build_object('decision', 'continue');\n_58\nend;\n_58\n$$;\n_58\n_58\n-- Assign appropriate permissions and revoke access\n_58\ngrant all\n_58\non table public.mfa_failed_verification_attempts\n_58\nto supabase_auth_admin;\n_58\n_58\nrevoke all\n_58\non table public.mfa_failed_verification_attempts\n_58\nfrom authenticated, anon, public;\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-hooks/mfa-verification-hook",
        "title": "MFA Verification Hook | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=MFA%20Verification%20Hook&description=undefined",
        "ogTitle": "MFA Verification Hook | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-hooks/mfa-verification-hook",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Social Login\n\n* * *\n\nSocial Login (OAuth) is an open standard for authentication that allows users to log in to one website or application using their credentials from another website or application. OAuth allows users to grant third-party applications access to their online accounts without sharing their passwords.\nOAuth is commonly used for things like logging in to a social media account from a third-party app. It is a secure and convenient way to authenticate users and share information between applications.\n\n## Benefits [\\#](\\#benefits)\n\nThere are several reasons why you might want to add social login to your applications:\n\n- **Improved user experience**: Users can register and log in to your application using their existing social media accounts, which can be faster and more convenient than creating a new account from scratch. This makes it easier for users to access your application, improving their overall experience.\n\n- **Better user engagement**: You can access additional data and insights about your users, such as their interests, demographics, and social connections. This can help you tailor your content and marketing efforts to better engage with your users and provide a more personalized experience.\n\n- **Increased security**: Social login can improve the security of your application by leveraging the security measures and authentication protocols of the social media platforms that your users are logging in with. This can help protect against unauthorized access and account takeovers.\n\n\n## Set up a social provider with Supabase Auth [\\#](\\#set-up-a-social-provider-with-supabase-auth)\n\nSupabase supports a suite of social providers. Follow these guides to configure a social provider for your platform.\n\n[![Google Icon](https://supabase.com/docs/img/icons/google-icon.svg)\\\\\n\\\\\n**Google**](/docs/guides/auth/social-login/auth-google) [![Facebook Icon](https://supabase.com/docs/img/icons/facebook-icon.svg)\\\\\n\\\\\n**Facebook**](/docs/guides/auth/social-login/auth-facebook) [![Apple Icon](https://supabase.com/docs/img/icons/apple-icon.svg)\\\\\n\\\\\n**Apple**](/docs/guides/auth/social-login/auth-apple) [![Azure (Microsoft) Icon](https://supabase.com/docs/guides/auth/Microsoft)\\\\\n\\\\\n**Azure (Microsoft)**](/docs/guides/auth/social-login/auth-azure) [![Twitter Icon](https://supabase.com/docs/img/icons/twitter-icon-light.svg)\\\\\n\\\\\n**Twitter**](/docs/guides/auth/social-login/auth-twitter) [![GitHub Icon](https://supabase.com/docs/img/icons/github-icon-light.svg)\\\\\n\\\\\n**GitHub**](/docs/guides/auth/social-login/auth-github) [![Gitlab Icon](https://supabase.com/docs/img/icons/gitlab-icon.svg)\\\\\n\\\\\n**Gitlab**](/docs/guides/auth/social-login/auth-gitlab) [![Bitbucket Icon](https://supabase.com/docs/img/icons/bitbucket-icon.svg)\\\\\n\\\\\n**Bitbucket**](/docs/guides/auth/social-login/auth-bitbucket) [![Discord Icon](https://supabase.com/docs/img/icons/discord-icon.svg)\\\\\n\\\\\n**Discord**](/docs/guides/auth/social-login/auth-discord) [![Figma Icon](https://supabase.com/docs/img/icons/figma-icon.svg)\\\\\n\\\\\n**Figma**](/docs/guides/auth/social-login/auth-figma) [![Kakao Icon](https://supabase.com/docs/img/icons/kakao-icon.svg)\\\\\n\\\\\n**Kakao**](/docs/guides/auth/social-login/auth-kakao) [![Keycloak Icon](https://supabase.com/docs/img/icons/keycloak-icon.svg)\\\\\n\\\\\n**Keycloak**](/docs/guides/auth/social-login/auth-keycloak) [![LinkedIn Icon](https://supabase.com/docs/img/icons/linkedin-icon.svg)\\\\\n\\\\\n**LinkedIn**](/docs/guides/auth/social-login/auth-linkedin) [![Notion Icon](https://supabase.com/docs/img/icons/notion-icon.svg)\\\\\n\\\\\n**Notion**](/docs/guides/auth/social-login/auth-notion) [![Slack Icon](https://supabase.com/docs/img/icons/slack-icon.svg)\\\\\n\\\\\n**Slack**](/docs/guides/auth/social-login/auth-slack) [![Spotify Icon](https://supabase.com/docs/img/icons/spotify-icon.svg)\\\\\n\\\\\n**Spotify**](/docs/guides/auth/social-login/auth-spotify) [![Twitch Icon](https://supabase.com/docs/img/icons/twitch-icon.svg)\\\\\n\\\\\n**Twitch**](/docs/guides/auth/social-login/auth-twitch) [![WorkOS Icon](https://supabase.com/docs/img/icons/workos-icon.svg)\\\\\n\\\\\n**WorkOS**](/docs/guides/auth/social-login/auth-workos) [![Zoom Icon](https://supabase.com/docs/img/icons/zoom-icon.svg)\\\\\n\\\\\n**Zoom**](/docs/guides/auth/social-login/auth-zoom)\n\n## Provider tokens [\\#](\\#provider-tokens)\n\nYou can use the provider token and provider refresh token returned to make API calls to the OAuth provider. For example, you can use the Google provider token to access Google APIs on behalf of your user.\n\nSupabase Auth does not manage refreshing the provider token for the user. Your application will need to use the provider refresh token to obtain a new provider token. If no provider refresh token is returned, then it could mean one of the following:\n\n- The OAuth provider does not return a refresh token\n- Additional scopes need to be specified in order for the OAuth provider to return a refresh token.\n\nProvider tokens are intentionally not stored in your project's database. This is because provider tokens give access to potentially sensitive user data in third-party systems. Different applications have different needs, and one application's OAuth scopes may be significantly more permissive than another. If you want to use the provider token outside of the browser that completed the OAuth flow, it is recommended to send it to a trusted and secure server you control.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/social-login",
        "title": "Social Login | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Social%20Login&description=Logging%20in%20with%20social%20accounts",
        "ogTitle": "Social Login | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/social-login",
        "description": "Logging in with social accounts",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Logging in with social accounts",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# JWTs\n\n## JSON Web Tokens\n\n* * *\n\nA [JSON Web Token](https://jwt.io/introduction) is a type of data structure, represented as a string, that usually contains identity and authorization information about a user. It encodes information about its lifetime and is signed with a cryptographic key to make it tamper-resistant.\n\nSupabase Access Tokens are JWTs. The JWT is sent along with every request to Supabase services. By verifying the token and inspecting the included claims, you can allow or deny access to resources. [Row Level Security](/docs/guides/database/postgres/row-level-security) policies are based on the information present in JWTs.\n\n## Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)\n\nJWTs are encoded and signed as follows.\n\nThe JSON object starts out looking something like this:\n\n`\n_10\n{\n_10\n\"sub\": \"0001\",\n_10\n\"name\": \"Sam Vimes\",\n_10\n\"iat\": 1516239022,\n_10\n\"exp\": 1518239022\n_10\n}\n`\n\n`sub` is the \"subject\", which is usually the UUID of the user. `name` is self-explanatory, and `iat` is the Unix timestamp at which the token was created. Many JWTs will also have an `exp`, which is the date at which the token is set to expire and can no longer be used. These are some of the standard fields you may find in a JWT, but you can pretty much store whatever you want in there, for example:\n\n`\n_10\n{\n_10\n\"sub\": \"0002\",\n_10\n\"name\": \"V\u011bra Hrab\u00e1nkov\u00e1\",\n_10\n\"iat\": 1516239022,\n_10\n\"exp\": 1518239022,\n_10\n\"theme\": {\n_10\n      \"primary\" : \"#D80C14\",\n_10\n      \"secondary\" : \"#FFFFFF\"\n_10\n}\n_10\n}\n`\n\nJust note that the more data you store in your token, the longer the encoded string will be.\n\nWhen we want to send the JWT to the user, we first encode the data using an algorithm such as `HS256`. There are many libraries (and several different algorithms) that can be used to do this encoding/decoding, such as [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken). The signing is as simple as:\n\n`\n_10\n// from https://replit.com/@awalias/jsonwebtokens#index.js\n_10\nlet token = jwt.sign({ name: 'Sam Vimes' }, 'some-secret')\n`\n\nAnd the resulting string will look like this:\n\n`\n_10\neyJhbGciOiJIUzI1NiJ9\n_10\n.eyJzdWIiOiIwMDAxIiwibmFtZSI6IlNhbSBWaW1lcyIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE4MjM5MDIyfQ\n_10\n.zMcHjKlkGhuVsiPIkyAkB2rjXzyzJsMMgpvEGvGtjvA\n`\n\nYou will notice that the string is actually made up of three components:\n\nThe first segment `eyJhbGciOiJIUzI1NiJ9` is known as the \"header\", and when decoded just tells us which algorithm was used to do the encoding:\n\n`\n_10\n{\n_10\n\"alg\": \"HS256\"\n_10\n}\n`\n\nThe second segment `eyJzdWIiOiIwMDAxIiwibmFtZSI6IlNhbSBWaW1lcyIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE4MjM5MDIyfQ` contains our original payload:\n\n`\n_10\n{\n_10\n\"sub\": \"0001\",\n_10\n\"name\": \"Sam Vimes\",\n_10\n\"iat\": 1516239022,\n_10\n\"exp\": 1518239022\n_10\n}\n`\n\nThe last segment `zMcHjKlkGhuVsiPIkyAkB2rjXzyzJsMMgpvEGvGtjvA` is the signature itself, which is the part used by the website or service provider to verify that a token sent by some user is legitimate. It is produced in the first instance by running the cryptographic function HS256 on the following input:\n\n`\n_10\nHMACSHA256(\n_10\nbase64UrlEncode(header) + \".\" +\n_10\nbase64UrlEncode(payload)\n_10\n<jwt_secret>\n_10\n)\n`\n\nYou can test out minting your own tokens on [https://jwt.io](https://jwt.io).\n\nIt is important to note that anyone who possesses the `jwt_secret` here can create new tokens, and also verify existing ones. More advanced JWT algorithms use two secrets: one for the creation of tokens, and a separate one to verify the validity of signed tokens.\n\nYou might wonder why JWTs are so popular all of a sudden. The answer is that with the mass adoption of microservice architecture, we were in a situation where several distinct microservices (APIs, websites, servers, etc.) want to easily validate that a user is who they say they are, or are in other words a \"logged-in\" user. Traditional session tokens are no use here, since they would require each microservice to either maintain a record of currently valid session tokens or to query a central database each time a user wants to access a resource in order to check the validity of the session token \u2013 very inefficient indeed. JWT-based auth in this sense is decentralized, since anyone with the `jwt_secret` can verify a token without needing access to a centralized database.\n\nNote: One downside of JWTs is that they are not easily voidable, like session tokens. If a JWT is leaked to a malicious actor, they will be able to redeem it anywhere until the expiry date is reached \u2013 unless of course the system owner updates the `jwt_secret` (which will of course invalidate _everyone's_ existing tokens).\n\n## JWTs in Supabase [\\#](\\#jwts-in-supabase)\n\nIn Supabase we issue JWTs for three different purposes:\n\n1. `anon key`: This key is used to bypass the Supabase API gateway and can be used in your client-side code.\n2. `service role key`: This key has super admin rights and can bypass your Row Level Security. Do not put it in your client-side code. Keep it private.\n3. `user specific jwts`: These are tokens we issue to users who log into your project/service/website. It's the modern equivalent of a session token, and can be used by a user to access content or permissions specific to them.\n\nThe first token here, the `anon key` token, is for developers to send along with their API requests whenever they want to interact with their Supabase database.\n\nLet's say you want to read the names of all the rows in a table `colors`. We would make a request like:\n\n`\n_10\ncurl 'https://xscduanzzfseqszwzhcy.supabase.co/rest/v1/colors?select=name' \\\n_10\n-H \"apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxNDIwNTE3NCwiZXhwIjoxOTI5NzgxMTc0fQ.-NBR1WnZyQGpRLdXJfgfpszoZ0EeE6KHatJsDPLIX8c\"\n`\n\nIf we put this token into [https://jwt.io](https://jwt.io), we see it decodes to:\n\n`\n_10\n{\n_10\n\"role\": \"anon\",\n_10\n\"iss\": \"supabase\",\n_10\n\"iat\": 1614205174,\n_10\n\"exp\": 1929781174\n_10\n}\n`\n\nThis JWT is signed by a `jwt_secret` specific to the developer's Supabase token (you can find this secret alongside this encoded \"anon key\" on your Dashboard under Settings > API page) and is required to get past the Supabase API gateway and access the developer's project.\n\nThe idea with this particular key is that it's safe to put into your client, meaning it's okay if your end users see this key \u2013 but _only_ if you first enable Row Level Security.\n\nThe second key, `service role key`, should only ever be used on one of your own servers or environments, and should never be shared with end users. You might use this token to do things like make batch inserts of data.\n\nThe `user access token` is the JWT issued when you call for example:\n\n`\n_10\nsupabase.auth.signIn({\n_10\nemail: 'lao.gimmie@gov.sg',\n_10\npassword: 'They_Live_1988!',\n_10\n})\n`\n\nThis token should be passed in addition to the `apikey` header as an `Authorization Bearer` header like:\n\n`\n_10\ncurl 'https://xscduanzzfseqszwzhcy.supabase.co/rest/v1/colors?select=name' \\\n_10\n-H \"apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxNDIwNTE3NCwiZXhwIjoxOTI5NzgxMTc0fQ.-NBR1WnZyQGpRLdXJfgfpszoZ0EeE6KHatJsDPLIX8c\" \\\n_10\n-H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjE1ODI0Mzg4LCJzdWIiOiIwMzM0NzQ0YS1mMmEyLTRhYmEtOGM4YS02ZTc0OGY2MmExNzIiLCJlbWFpbCI6InNvbWVvbmVAZW1haWwuY29tIiwiYXBwX21ldGFkYXRhIjp7InByb3ZpZGVyIjoiZW1haWwifSwidXNlcl9tZXRhZGF0YSI6bnVsbCwicm9sZSI6ImF1dGhlbnRpY2F0ZWQifQ.I-_oSsJamtinGxniPETBf-ezAUwDW2sY9bJIThvdX9s\"\n`\n\nYou'll notice that this token is quite a bit longer, since it contains information specific to the user such as:\n\n`\n_11\n{\n_11\n\"aud\": \"authenticated\",\n_11\n\"exp\": 1615824388,\n_11\n\"sub\": \"0334744a-f2a2-4aba-8c8a-6e748f62a172\",\n_11\n\"email\": \"d.l.solove@gmail.com\",\n_11\n\"app_metadata\": {\n_11\n    \"provider\": \"email\"\n_11\n},\n_11\n\"user_metadata\": null,\n_11\n\"role\": \"authenticated\"\n_11\n}\n`\n\nNow that you understand what JWTs are and where they're used in Supabase, you can explore how to use them in combination with Row Level Security to start restricting access to certain tables, rows, and columns in your Postgres database.\n\n## Resources [\\#](\\#resources)\n\n- JWT debugger: [https://jwt.io/](https://jwt.io/)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/jwts",
        "title": "JWTs | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=JWTs&description=undefined",
        "ogTitle": "JWTs | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/jwts",
        "description": "JSON Web Tokens",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "JSON Web Tokens",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Single Sign-On with SAML 2.0 for Projects\n\n* * *\n\nLooking for guides on how to use Single Sign-On with the Supabase dashboard? Head on over to [Enable SSO for Your Organization](/docs/guides/platform/sso).\n\nSupabase Auth supports enterprise-level Single Sign-On (SSO) for any identity providers compatible with the SAML 2.0 protocol. This is a non-exclusive list of supported identity providers:\n\n- Google Workspaces (formerly known as GSuite)\n- Okta, Auth0\n- Microsoft Active Directory, Azure Active Directory, Microsoft Entra\n- PingIdentity\n- OneLogin\n\nIf you're having issues with identity provider software not on this list, please [open a support ticket](https://supabase.com/dashboard/support/new).\n\n## Prerequisites [\\#](\\#prerequisites)\n\nThis guide requires the use of the [Supabase CLI](/docs/guides/cli). Please make sure you're using version v1.46.4 or higher. You can use `supabase -v` to see the currently installed version.\n\nYou can use the `supabase sso` [subcommands](/docs/reference/cli/supabase-sso) to manage your project's configuration.\n\nSAML 2.0 support is disabled by default on Supabase projects. You can configure this on the [Auth Providers](https://supabase.com/dashboard/project/_/auth/providers) page on your project.\n\nPlease note that SAML 2.0 support is offered on plans Pro and above. Check the [Pricing](https://supabase.com/pricing) page for more information.\n\n## Terminology [\\#](\\#terminology)\n\nThe number of SAML and SSO acronyms can often be overwhelming. Here's a glossary which you can refer back to at any time:\n\n- **Identity Provider**, **IdP**, or **IDP**\nAn identity provider is a service that manages user accounts at a company or organization. It can verify the identity of a user and exchange that information with your Supabase project and other applications. It acts as a single source of truth for user identities and access rights. Commonly used identity providers are: Microsoft Active Directory (Azure AD, Microsoft Entra), Okta, Google Workspaces (GSuite), PingIdentity, OneLogin, and many others. There are also self-hosted and on-prem versions of identity providers, and sometimes they are accessible only by having access to a company VPN or being in a specific building.\n- **Service Provider**, **SP**\nThis is the software that is asking for user information from an identity provider. In Supabase, this is your project's Auth server.\n- **Assertion**\nAn assertion is a statement issued by an identity provider that contains information about a user.\n- **EntityID**\nA globally unique ID (usually a URL) that identifies an Identity Provider or Service Provider across the world.\n- **NameID**\nA unique ID (usually an email address) that identifies a user at an Identity Provider.\n- **Metadata**\nAn XML document that describes the features and configuration of an Identity Provider or Service Provider. It can be as a standalone document or as a URL. Usually (but not always) the `EntityID` is the URL at which you can access the Metadata.\n- **Certificate**\nSupabase Auth (the Service Provider) trusts assertions from an Identity Provider based on the signature attached to the assertion. The signature is verified according to the certificate present in the Metadata.\n- **Assertion Consumer Service (ACS) URL**\nThis is one of the most important SAML URLs. It is the URL where Supabase Auth will accept assertions from an identity provider. Basically, once the identity provider verifies the user's identity it will redirect to this URL and the redirect request will contain the assertion.\n- **Binding (Redirect, POST, or Artifact)**\nThis is a description of the way an identity provider communicates with Supabase Auth. When using the Redirect binding, the communication occurs using HTTP 301 redirects. When it's `POST`, it's using `POST` requests sent with `<form>` elements on a page. When using Artifact, it's using a more secure exchange over a Redirect or `POST`.\n- **RelayState**\nState used by Supabase Auth to hold information about a request to verify the identity of a user.\n\n## Important SAML 2.0 information [\\#](\\#important-saml-20-information)\n\nBelow is information about your project's SAML 2.0 configuration which you can share with the company or organization that you're trying to on-board.\n\n| Name | Value |\n| --- | --- |\n| EntityID | `https://<project>.supabase.co/auth/v1/sso/saml/metadata` |\n| Metadata URL | `https://<project>.supabase.co/auth/v1/sso/saml/metadata` |\n| Metadata URL<br>(download) | `https://<project>.supabase.co/auth/v1/sso/saml/metadata?download=true` |\n| ACS URL | `https://<project>.supabase.co/auth/v1/sso/saml/acs` |\n| SLO URL | `https://<project>.supabase.co/auth/v1/sso/slo` |\n| NameID | Required `emailAddress` or `persistent` |\n\nNote that SLO (Single Logout) is not supported at this time with Supabase Auth as it is a rarely supported feature by identity providers. However, the URL is registered and advertised for when this does become available.\n\nAppend `?download=true` to the Metadata URL to download the Metadata XML file. This is useful in cases where the identity provider requires a file.\n\nAlternatively, you can use the `supabase sso info --project-ref <your-project>` [command](/docs/reference/cli/supabase-sso-info) to get setup information for your project.\n\n### User accounts and identities [\\#](\\#user-accounts-and-identities)\n\nUser accounts and identities created via SSO differ from regular (email, phone, password, social login...) accounts in these ways:\n\n- **No automatic linking.**\nEach user account verified using a SSO identity provider will not be automatically linked to existing user accounts in the system. That is, if a user `jane.doe@company.com` had signed up with a password, and then uses their company SSO login with your project, there will be two `jane.doe@company.com` user accounts in the system.\n- **Emails are not necessarily unique.**\nGiven the behavior with no automatic linking, email addresses are no longer a unique identifier for a user account. Please always use the user's UUID to correctly reference user accounts.\n- **Sessions may have a maximum duration.**\nDepending on the configuration of the identity provider, a login session established with SSO may forcibly log out a user after a certain period of time.\n\n### Row Level Security [\\#](\\#row-level-security)\n\nYou can use information about the SSO identity provider in Row Level Security policies.\n\nHere are some commonly used statements to extract SSO related information from the user's JWT:\n\n- `auth.jwt()#>>'{amr,0,method}'`\nReturns the name of the last method used to verify the identity of this user. With SAML SSO this is `sso/saml`.\n- `auth.jwt()#>>'{amr,0,provider}'`\nReturns the UUID of the SSO identity provider used by the user to sign-in.\n- `auth.jwt()#>>'{user_metadata,iss}'`\nReturns the identity provider's SAML 2.0 `EntityID`\n\nIf you use [Multi-Factor Authentication](/docs/guides/auth/auth-mfa) with SSO, the `amr` array may have a different method at index `0`!\n\nA common use case with SSO is to use the UUID of the identity provider as the identifier for the organization the user belongs to -- frequently known as a tenant. By associating the identity provider's UUID with your tenants, you can use restrictive RLS policies to scope down actions and data that a user is able to access.\n\nFor example, let's say you have a table like:\n\n`\n_10\ncreate table organization_settings (\n_10\n  -- the organization's unique ID\n_10\nid uuid not null primary key,\n_10\n  -- the organization's SSO identity provider\n_10\nsso_provider_id uuid unique,\n_10\n  -- name of the organization\n_10\nname text,\n_10\n  -- billing plan (paid, Free, Enterprise)\n_10\nbilling_plan text\n_10\n);\n`\n\nYou can use the information present in the user's JWT to scope down which rows from this table the user can see, without doing any additional user management:\n\n`\n_10\nCREATE POLICY \"View organization settings.\"\n_10\nON organization_settings\n_10\nAS RESTRICTIVE\n_10\nUSING (\n_10\n    sso_provider_id = (select auth.jwt()#>>'{amr,0,provider}')\n_10\n);\n`\n\n## Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\nOnce you've enabled SAML 2.0 support on your project via the [Auth Providers](https://supabase.com/dashboard/project/_/auth/providers) page in the dashboard, you can use the [Supabase CLI](/docs/reference/cli/supabase-sso) to add, update, remove and view information about identity providers.\n\n### Add a connection [\\#](\\#add-a-connection)\n\nTo establish a connection to a SAML 2.0 Identity Provider (IdP) you will need:\n\n- A SAML 2.0 Metadata XML file, or a SAML 2.0 Metadata URL pointing to an XML file\n- (Optional) Email domains that the organization's IdP uses\n- (Optional) Attribute mappings between the user properties of the IdP and the claims stored by Supabase Auth\n\nYou should obtain the SAML 2.0 Metadata XML file or URL from the organization whose IdP you wish to connect. Most SAML 2.0 Identity Providers support the Metadata URL standard, and we recommend using a URL if this is available.\n\nCommonly used SAML 2.0 Identity Providers that support Metadata URLs:\n\n- Okta\n- Azure AD (Microsoft Entra)\n- PingIdentity\n\nCommonly used SAML 2.0 Identity Providers that only support Metadata XML files:\n\n- Google Workspaces (GSuite)\n- Any self-hosted or on-prem identity provider behind a VPN\n\nOnce you've obtained the SAML 2.0 Metadata XML file or URL you can [establish a connection](/docs/reference/cli/supabase-sso-add) with your project's Supabase Auth server by running:\n\n`\n_10\nsupabase sso add --type saml --project-ref <your-project> \\\n_10\n  --metadata-url 'https://company.com/idp/saml/metadata' \\\n_10\n  --domains company.com\n`\n\nIf you wish to use a Metadata XML file instead, you can use:\n\n`\n_10\nsupabase sso add --type saml --project-ref <your-project> \\\n_10\n  --metadata-file /path/to/saml/metadata.xml \\\n_10\n  --domains company.com\n`\n\nThis command will register a new identity provider with your project's Auth server. When successful, you will see the details of the provider such as it's SAML information and registered domains.\n\nPlease note that only persons with write access to the project can register, update or remove identity providers.\n\nOnce you've added an identity provider, users who have access to it can sign in to your application. With SAML 2.0 there are two ways that users can sign in to your project:\n\n- By signing-in from your application's user interface, commonly known as **SP (Service Provider) Initiated Flow**\n- By clicking on an icon in the application menu on the company intranet or identity provider page, commonly known as **Identity Provider Initiated (IdP) Flow**\n\nTo initiate a sign-in request from your application's user interface (i.e. the SP Initiated Flow), you can use:\n\nJavaScriptDartSwiftKotlin\n\n`\n_10\nsupabase.auth.signInWithSSO({\n_10\ndomain: 'company.com',\n_10\n})\n`\n\nCalling [`signInWithSSO`](/docs/reference/javascript/auth-signinwithsso) starts the sign-in process using the identity provider registered for the `company.com` domain name. It is not required that identity providers be assigned one or multiple domain names, in which case you can use the provider's unique ID instead.\n\n### Understanding attribute mappings [\\#](\\#understanding-attribute-mappings)\n\nWhen a user signs in using the SAML 2.0 Single Sign-On protocol, an XML document called the SAML Assertion is exchanged between the identity provider and Supabase Auth.\n\nThis assertion contains information about the user's identity and other authentication information, such as:\n\n- Unique ID of the user (called `NameID` in SAML)\n- Email address\n- Name of the user\n- Department or organization\n- Other attributes present in the users directory managed by the identity provider\n\nWith exception of the unique user ID, SAML does not require any other attributes in the assertion. Identity providers can be configured so that only select user information is shared with your project.\n\nYour project can be configured to recognize these attributes and map them into your project's database using a JSON structure. This process is called attribute mapping, and varies according to the configuration of the identity provider.\n\nFor example, the following JSON structure configures attribute mapping for the `email` and `first_name` user identity properties.\n\n`\n_10\n{\n_10\n\"keys\": {\n_10\n    \"email\": {\n_10\n      \"name\": \"mail\"\n_10\n    },\n_10\n    \"first_name\": {\n_10\n      \"name\": \"givenName\"\n_10\n    }\n_10\n}\n_10\n}\n`\n\nWhen creating or updating an identity provider with the [Supabase CLI](/docs/guides/cli) you can include this JSON as a file with the `--attribute-mapping-file /path/to/attribute/mapping.json` flag.\n\nFor example, to change the attribute mappings to an existing provider you can use:\n\n`\n_10\nsupabase sso update <provider-uuid> --project-ref <your-project> \\\n_10\n  --attribute-mapping-file /path/to/attribute/mapping.json\n`\n\nGiven a SAML 2.0 assertion that includes these attributes:\n\n`\n_21\n<saml:AttributeStatement>\n_21\n<!-- will be mapped to the email key -->\n_21\n<saml:Attribute\n_21\n    Name=\"mail\"\n_21\n    NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n_21\n    >\n_21\n    <saml:AttributeValue xsi:type=\"xs:string\">\n_21\n      jane.doe@company.com\n_21\n    </saml:AttributeValue>\n_21\n</saml:Attribute>\n_21\n_21\n<!-- will be mapped to the first_name key -->\n_21\n<saml:Attribute\n_21\n    Name=\"givenName\"\n_21\n    NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n_21\n    >\n_21\n    <saml:AttributeValue xsi:type=\"xs:string\">\n_21\n      Jane Doe\n_21\n    </saml:AttributeValue>\n_21\n</saml:Attribute>\n_21\n</saml:AttributeStatement>\n`\n\nWill result in the following claims in the user's identity in the database and JWT:\n\n`\n_10\n{\n_10\n\"email\": \"jane.doe@company.com\",\n_10\n\"custom_claims\": {\n_10\n    \"first_name\": \"Jane Doe\"\n_10\n}\n_10\n}\n`\n\nSupabase Auth does not require specifying attribute mappings if you only need access to the user's email. It will attempt to find an email attribute specified in the assertion. All other properties will not be automatically included, and it is those you need to map.\n\nAt this time it is not possible to have users without an email address, so SAML assertions without one will be rejected.\n\nMost SAML 2.0 identity providers use Lightweight Directory Access Protocol (LDAP) attribute names. However, due to their variability and complexity operators of identity providers are able to customize both the `Name` and attribute value that is sent to Supabase Auth in an assertion. Please refer to the identity provider's documentation and contact the operator for details on what attributes are mapped for your project.\n\n**Accessing the stored attributes**\n\nThe stored attributes, once mapped, show up in the access token (a JWT) of the user. If you need to look these values up in the database, you can find them in the `auth.identities` table under the `identity_data` JSON column. Identities created for SSO providers have `sso:<uuid-of-provider>` in the `provider` column, while `id` contains the unique NameID of the user account.\n\nFurthermore, you can find the same identity data under `raw_app_meta_data` inside `auth.users`.\n\n### Remove a connection [\\#](\\#remove-a-connection)\n\nOnce a connection to an identity provider is established, you can [remove it](/docs/reference/cli/supabase-sso-remove) by running:\n\n`\n_10\nsupabase sso remove <provider-id> --project-ref <your-project>\n`\n\nIf successful, the details of the removed identity provider will be shown. All user accounts from that identity provider will be immediately logged out. User information will remain in the system, but it will no longer be possible for any of those accounts to be accessed in the future, even if you add the connection again.\n\nIf you need to reassign those user accounts to another identity provider, please [open a support ticket](https://supabase.com/dashboard/support/new).\n\nA [list of all](/docs/reference/cli/supabase-sso-list) registered identity providers can be displayed by running:\n\n`\n_10\nsupabase sso list --project-ref <your-project>\n`\n\n### Update a connection [\\#](\\#update-a-connection)\n\nYou may wish to update settings about a connection to a SAML 2.0 identity provider.\n\nCommonly this is necessary when:\n\n- Cryptographic keys are rotated or have expired\n- Metadata URL has changed, but is the same identity provider\n- Other SAML 2.0 Metadata attributes have changed, but it is still the same identity provider\n- You are updating the domains or attribute mapping\n\nYou can use this command to [update](/docs/reference/cli/supabase-sso-update) the configuration of an identity provider:\n\n`\n_10\nsupabase sso update <provider-id> --project-ref <your-project>\n`\n\nPlease use `--help` to see all available flags.\n\nIt is not possible to change the unique SAML identifier of the identity provider, known as `EntityID`. Everything else can be updated. If the SAML `EntityID` of your identity provider has changed, it is regarded as a new identity provider and you will have to register it like a new connection.\n\n### Retrieving information about a connection [\\#](\\#retrieving-information-about-a-connection)\n\nYou can always obtain a [list](/docs/reference/cli/supabase-sso-list) of all registered providers using:\n\n`\n_10\nsupabase sso list --project-ref <your-project>\n`\n\nThis list will only include basic information about each provider. To see [all of the information](/docs/reference/cli/supabase-sso-show) about a provider you can use:\n\n`\n_10\nsupabase sso show <provider-id> --project-ref <your-project>\n`\n\nYou can use the `-o json` flag to output the information as JSON, should you need to. Other formats may be supported, please use `--help` to see all available options.\n\n## Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n### How do I publish my application to an identity provider's marketplace? [\\#](\\#how-do-i-publish-my-application-to-an-identity-providers-marketplace)\n\nMany cloud-based identity providers offer a marketplace where you can register your application for easy on-boarding with customers. When you use Supabase Auth's SAML 2.0 support you can register your project in any one of these marketplaces.\n\nPlease refer to the relevant documentation for each cloud-based identity provider on how you can do this. Some common marketplaces are:\n\n- [Okta Integration Network](https://developer.okta.com/docs/guides/build-sso-integration/saml2/main/)\n- [Azure Active Directory App Gallery](https://learn.microsoft.com/en-us/azure/active-directory-b2c/publish-app-to-azure-ad-app-gallery)\n- [Google Workspaces Pre-integrated SAML apps catalog](https://support.google.com/a/table/9217027)\n\n### Why do some users get: SAML assertion does not contain email address? [\\#](\\#why-do-some-users-get-saml-assertion-does-not-contain-email-address)\n\nIdentity providers do not have to send back and email address for the user, though they often do. Supabase Auth requires that an email address is present.\n\nThe following list of commonly used SAML attribute names is inspected, in order of appearance, to discover the email address in the assertion:\n\n- `urn:oid:0.9.2342.19200300.100.1.3`\n- `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress`\n- `http://schemas.xmlsoap.org/claims/EmailAddress`\n- `mail`\n- `email`\n\nFinally if there is no such attribute, it will use the SAML `NameID` value but only if the format is advertised as `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress`.\n\nShould you run into this problem, it is most likely a misconfiguration issue **on the identity provider side.** Please instruct your contact at the company to map the user's email address to one of the above listed attribute names, typically `email`.\n\n### How do I access the private key used for SAML in my project? [\\#](\\#how-do-i-access-the-private-key-used-for-saml-in-my-project)\n\nAt this time it is not possible to extract the RSA private key used by your project's Supabase Auth server. This is done to keep the private key as secure as possible, given that SAML does not offer an easy way to rotate keys without disrupting service. (Please use a SAML 2.0 Metadata URL whenever possible for this reason!)\n\nIf you really need access to the key, please [open a support ticket](https://supabase.com/dashboard/support/new) and we'll try to support you as best as possible.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
        "title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Single%20Sign-On%20with%20SAML%202.0%20for%20Projects&description=Use%20Single%20Sign-On%20(SSO)%20authentication%20on%20your%20project%20with%20SAML%202.0",
        "ogTitle": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
        "description": "Use Single Sign-On (SSO) authentication on your project with SAML 2.0",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Use Single Sign-On (SSO) authentication on your project with SAML 2.0",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Server-Side Rendering\n\n## How SSR works with Supabase Auth.\n\n* * *\n\nSSR frameworks move rendering and data fetches to the server, to reduce client bundle size and execution time.\n\nSupabase Auth is fully compatible with SSR. You need to make a few changes to the configuration of your Supabase client, to store the user session in cookies instead of local storage. After setting up your Supabase client, follow the instructions for any flow in the How-To guides.\n\nMake sure to use the PKCE flow instructions where those differ from the implicit flow instructions. If no difference is mentioned, don't worry about this.\n\n## `@supabase/ssr` [\\#](\\#supabasessr)\n\nWe have developed an [`@supabase/ssr`](https://www.npmjs.com/package/@supabase/ssr) package to make setting up the Supabase client as simple as possible. This package is currently in beta. Adoption is recommended but be aware that the API is still unstable and may have breaking changes in the future.\n\nIf you're currently using the [Auth Helpers package](https://github.com/supabase/auth-helpers), the [docs are still available](/docs/guides/auth/auth-helpers), however we recommend migrating to the new `@supabase/ssr` package as this will be the recommended path moving forward.\n\n## Framework quickstarts [\\#](\\#framework-quickstarts)\n\n[![Next.js](https://supabase.com/docs/img/icons/nextjs-icon.svg)\\\\\n\\\\\nNext.js\\\\\n\\\\\nAutomatically configure Supabase in Next.js to use cookies, making your user and their session available on the client and server.](/docs/guides/auth/server-side/nextjs) [![SvelteKit](https://supabase.com/docs/img/icons/svelte-icon.svg)\\\\\n\\\\\nSvelteKit\\\\\n\\\\\nAutomatically configure Supabase in SvelteKit to use cookies, making your user and their session available on the client and server.](/docs/guides/auth/server-side/sveltekit)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/server-side",
        "title": "Server-Side Rendering | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Server-Side%20Rendering&description=undefined",
        "ogTitle": "Server-Side Rendering | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/server-side-rendering",
        "description": "How SSR works with Supabase Auth.",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "How SSR works with Supabase Auth.",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# PKCE flow\n\n## About authenticating with PKCE flow.\n\n* * *\n\nThe Proof Key for Code Exchange (PKCE) flow is one of two ways that a user can authenticate and your app can receive the necessary access and refresh tokens.\n\nThe flow is an implementation detail handled for you by Supabase Auth, but understanding the difference between PKCE and [implicit flow](/docs/guides/auth/sessions/implicit-flow) is important for understanding the difference between client-only and server-side auth.\n\n## How it works [\\#](\\#how-it-works)\n\nAfter a successful verification, the user is redirected to your app with a URL that looks like this:\n\n`\n_10\nhttps://yourapp.com/...?code=<...>\n`\n\nThe `code` parameter is commonly known as the Auth Code and can be exchanged for an access token by calling `exchangeCodeForSession(code)`.\n\nFor security purposes, the code has a validity of 5 minutes and can only be exchanged for an access token once. You will need to restart the authentication flow from scratch if you wish to obtain a new access token.\n\nAs the flow is run server side, `localStorage` may not be available. You may configure the client library to use a custom storage adapter and an alternate backing storage such as cookies by setting the `storage` option to an object with the following methods:\n\n`\n_23\nconst customStorageAdapter: SupportedStorage = {\n_23\n    getItem: (key) => {\n_23\n    if (!supportsLocalStorage()) {\n_23\n        // Configure alternate storage\n_23\n        return null\n_23\n    }\n_23\n    return globalThis.localStorage.getItem(key)\n_23\n    },\n_23\n    setItem: (key, value) => {\n_23\n    if (!supportsLocalStorage()) {\n_23\n        // Configure alternate storage here\n_23\n        return\n_23\n    }\n_23\n    globalThis.localStorage.setItem(key, value)\n_23\n    },\n_23\n    removeItem: (key) => {\n_23\n    if (!supportsLocalStorage()) {\n_23\n        // Configure alternate storage here\n_23\n        return\n_23\n    }\n_23\n    globalThis.localStorage.removeItem(key)\n_23\n    },\n_23\n}\n`\n\nYou may also configure the client library to automatically exchange it for a session after a successful redirect. This can be done by setting the `detectSessionInUrl` option to `true`.\n\nPutting it all together, your client library initialization may look like this:\n\n`\n_14\nconst supabase = createClient(\n_14\n        'https://xyzcompany.supabase.co',\n_14\n        'public-anon-key',\n_14\n        {\n_14\n        ...\n_14\n        auth: {\n_14\n            ...\n_14\n            detectSessionInUrl: true,\n_14\n            flowType: 'pkce',\n_14\n            storage: customStorageAdapter,\n_14\n        }\n_14\n        ...\n_14\n        }\n_14\n)\n`\n\n## Limitations [\\#](\\#limitations)\n\nBehind the scenes, the code exchange requires a code verifier. Both the code in the URL and the code verifier are sent back to the Auth server for a successful exchange.\n\nThe code verifier is created and stored locally when the Auth flow is first initiated. That means the code exchange must be initiated on the same browser and device where the flow was started.\n\n## Resources [\\#](\\#resources)\n\n- [OAuth 2.0 guide](https://oauth.net/2/pkce/) to PKCE flow",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/sessions/pkce-flow",
        "title": "PKCE flow | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=PKCE%20flow&description=undefined",
        "ogTitle": "PKCE flow | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/sessions/pkce-flow",
        "description": "About authenticating with PKCE flow.",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "About authenticating with PKCE flow.",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Amazon Cognito (Amplify)\n\n## Use Amazon Cognito via Amplify or standalone with your Supabase project\n\n* * *\n\nAmazon Cognito User Pools (via AWS Amplify or on its own) can be used as a third-party authentication provider alongside Supabase Auth, or standalone, with your Supabase project.\n\n## Getting started [\\#](\\#getting-started)\n\n1. First you need to add an integration to connect your Supabase project with your Amazon Cognito User Pool. You will need the pool's ID and region.\n2. Add a new Third-party Auth integration in your project's [Authentication settings](/dashboard/project/_/settings/auth) or configure it in the CLI.\n3. Assign the `role: 'authenticated'` custom claim to all JWTs by using a Pre-Token Generation Trigger.\n4. Finally setup the Supabase client in your application.\n\n## Setup the Supabase client library [\\#](\\#setup-the-supabase-client-library)\n\nTypeScript (Amplify)Swift (iOS)FlutterKotlin\n\n`\n_15\nimport { fetchAuthSession, Hub } from 'aws-amplify/auth'\n_15\n_15\nconst supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {\n_15\naccessToken: async () => {\n_15\n    const tokens = await fetchAuthSession()\n_15\n_15\n    // Alternatively you can use tokens?.idToken instead.\n_15\n    return tokens?.accessToken\n_15\n},\n_15\n})\n_15\n_15\n// if you're using Realtime you also need to set up a listener for Cognito auth changes\n_15\nHub.listen('auth', () => {\n_15\nfetchAuthSession().then((tokens) => supabase.realtime.setAuth(tokens?.accessToken))\n_15\n})\n`\n\n## Add a new Third-Party Auth integration to your project [\\#](\\#add-a-new-third-party-auth-integration-to-your-project)\n\nIn the dashboard navigate to your project's [Authentication settings](/dashboard/project/_/settings/auth) and find the Third-Party Auth section to add a new integration.\n\nIn the CLI add the following config to your `supabase/config.toml` file:\n\n`\n_10\n[auth.third_party.aws_cognito]\n_10\nenabled = true\n_10\nuser_pool_id = \"<id>\"\n_10\nuser_pool_region = \"<region>\"\n`\n\n## Use a Pre-Token Generation Trigger to assign the authenticated role [\\#](\\#use-a-pre-token-generation-trigger-to-assign-the-authenticated-role)\n\nYour Supabase project inspects the `role` claim present in all JWTs sent to it, to assign the correct Postgres role when using the Data API, Storage or Realtime authorization.\n\nBy default, Amazon Cognito JWTs (both ID token and access tokens) do not contain a `role` claim in them. If you were to send such a JWT to your Supabase project, the `anon` role would be assigned when executing the Postgres query. Most of your app's logic will be accessible by the `authenticated` role.\n\nA recommended approach to do this is to configure a [Pre-Token Generation Trigger](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-pre-token-generation.html) either `V1_0` (ID token only) or `V2_0` (both access and ID token). To do this you will need to create a new Lambda function (in any language and runtime) and assign it to the [Amazon Cognito User Pool's Lambda Triggers configuration](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html). For example, the Lambda function should look similar to this:\n\nNode.js\n\n`\n_11\nexport const handler = async (event) => {\n_11\nevent.response = {\n_11\n    claimsOverrideDetails: {\n_11\n      claimsToAddOrOverride: {\n_11\n        role: 'authenticated',\n_11\n      },\n_11\n    },\n_11\n}\n_11\n_11\nreturn event\n_11\n}\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/third-party/aws-cognito",
        "title": "Amazon Cognito (Amplify) | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Amazon%20Cognito%20(Amplify)&description=undefined",
        "ogTitle": "Amazon Cognito (Amplify) | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/third-party/aws-cognito",
        "description": "Use Amazon Cognito via Amplify or standalone with your Supabase project",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Use Amazon Cognito via Amplify or standalone with your Supabase project",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Auth0\n\n## Use Auth0 with your Supabase project\n\n* * *\n\nAuth0 can be used as a third-party authentication provider alongside Supabase Auth, or standalone, with your Supabase project.\n\n## Getting started [\\#](\\#getting-started)\n\n1. First you need to add an integration to connect your Supabase project with your Auth0 tenant. You will need your tenant ID (and in some cases region ID).\n2. Add a new Third-party Auth integration in your project's [Authentication settings](/dashboard/project/_/settings/auth).\n3. Assign the `role: 'authenticated'` custom claim to all JWTs by using an Auth0 Action.\n4. Finally setup the Supabase client in your application.\n\n## Setup the Supabase client library [\\#](\\#setup-the-supabase-client-library)\n\nTypeScriptSwift (iOS)FlutterKotlin\n\n`\n_12\nimport { createClient } from '@supabase/supabase-js'\n_12\n_12\nconst supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {\n_12\naccessToken: async () => {\n_12\n    const accessToken = await auth0.getTokenSilently()\n_12\n_12\n    // Alternatively you can use (await auth0.getIdTokenClaims()).__raw to\n_12\n    // use an ID token instead.\n_12\n_12\n    return accessToken\n_12\n},\n_12\n})\n`\n\n## Add a new Third-Party Auth integration to your project [\\#](\\#add-a-new-third-party-auth-integration-to-your-project)\n\nIn the dashboard navigate to your project's [Authentication settings](/dashboard/project/_/settings/auth) and find the Third-Party Auth section to add a new integration.\n\nIn the CLI add the following config to your `supabase/config.toml` file:\n\n`\n_10\n[auth.third_party.auth0]\n_10\nenabled = true\n_10\ntenant = \"<id>\"\n_10\ntenant_region = \"<region>\" # if your tenant has a region\n`\n\n## Use an Auth0 Action to assign the authenticated role [\\#](\\#use-an-auth0-action-to-assign-the-authenticated-role)\n\nYour Supabase project inspects the `role` claim present in all JWTs sent to it, to assign the correct Postgres role when using the Data API, Storage or Realtime authorization.\n\nBy default, Auth0 JWTs (both access token and ID token) do not contain a `role` claim in them. If you were to send such a JWT to your Supabase project, the `anon` role would be assigned when executing the Postgres query. Most of your app's logic will be accessible by the `authenticated` role.\n\nA recommended approach to do this is to configure the [`onExecutePostLogin` Auth0 Action](https://auth0.com/docs/secure/tokens/json-web-tokens/create-custom-claims#create-custom-claims) which will add the custom claim:\n\n`\n_10\nexports.onExecutePostLogin = async (event, api) => {\n_10\napi.accessToken.setCustomClaim('role', 'authenticated')\n_10\n}\n`\n\n## Limitations [\\#](\\#limitations)\n\nAt this time, Auth0 tenants with the following [signing algorithms](https://auth0.com/docs/get-started/applications/signing-algorithms) are not supported:\n\n- HS256 (HMAC with SHA-256) -- also known as symmetric JWTs\n- PS256 (RSA-PSS with SHA-256)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/third-party/auth0",
        "title": "Auth0 | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Auth0&description=undefined",
        "ogTitle": "Auth0 | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/third-party/auth0",
        "description": "Use Auth0 with your Supabase project",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Use Auth0 with your Supabase project",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Auth UI\n\n* * *\n\nAs of 7th Feb 2024, [this repository](https://github.com/supabase-community/auth-ui) is no longer maintained by the Supabase Team. At the moment, the team does not have capacity to give the expected level of care to this repository. We may revisit Auth UI in the future but regrettably have to leave it on hold for now as we focus on other priorities such as improving the Server-Side Rendering (SSR) package and advanced Auth primitives.\n\nAuth UI is a pre-built React component for authenticating users.\nIt supports custom themes and extensible styles to match your brand and aesthetic.\n\n## Set up Auth UI [\\#](\\#set-up-auth-ui)\n\nInstall the latest version of [supabase-js](/docs/reference/javascript) and the Auth UI package:\n\n`\n_10\nnpm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared\n`\n\n### Import the Auth component [\\#](\\#import-the-auth-component)\n\nPass `supabaseClient` from `@supabase/supabase-js` as a prop to the component.\n\n/src/index.js\n\n`\n_10\nimport { createClient } from '@supabase/supabase-js'\n_10\nimport { Auth } from '@supabase/auth-ui-react'\n_10\n_10\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_10\n_10\nconst App = () => <Auth supabaseClient={supabase} />\n`\n\nThis renders the Auth component without any styling.\nWe recommend using one of the predefined themes to style the UI.\nImport the theme you want to use and pass it to the `appearance.theme` prop.\n\n`\n_18\nimport { Auth } from '@supabase/auth-ui-react'\n_18\nimport {\n_18\n// Import predefined theme\n_18\nThemeSupa,\n_18\n} from '@supabase/auth-ui-shared'\n_18\n_18\nconst supabase = createClient(\n_18\n'<INSERT PROJECT URL>',\n_18\n'<INSERT PROJECT ANON API KEY>'\n_18\n)\n_18\n_18\nconst App = () => (\n_18\n<Auth\n_18\n    supabaseClient={supabase}\n_18\n    {/* Apply predefined theme */}\n_18\n    appearance={{ theme: ThemeSupa }}\n_18\n/>\n_18\n)\n`\n\n### Social providers [\\#](\\#social-providers)\n\nThe Auth component also supports login with [official social providers](../../auth#providers).\n\n`\n_13\nimport { createClient } from '@supabase/supabase-js'\n_13\nimport { Auth } from '@supabase/auth-ui-react'\n_13\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n_13\n_13\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_13\n_13\nconst App = () => (\n_13\n<Auth\n_13\n    supabaseClient={supabase}\n_13\n    appearance={{ theme: ThemeSupa }}\n_13\n    providers={['google', 'facebook', 'twitter']}\n_13\n/>\n_13\n)\n`\n\n### Options [\\#](\\#options)\n\nOptions are available via `queryParams`:\n\n`\n_10\n<Auth\n_10\nsupabaseClient={supabase}\n_10\nproviders={['google']}\n_10\nqueryParams={{\n_10\n    access_type: 'offline',\n_10\n    prompt: 'consent',\n_10\n    hd: 'domain.com',\n_10\n}}\n_10\nonlyThirdPartyProviders\n_10\n/>\n`\n\n### Provider scopes [\\#](\\#provider-scopes)\n\nProvider Scopes can be requested through `providerScope`;\n\n`\n_12\n<Auth\n_12\nsupabaseClient={supabase}\n_12\nproviders={['google']}\n_12\nqueryParams={{\n_12\n    access_type: 'offline',\n_12\n    prompt: 'consent',\n_12\n    hd: 'domain.com',\n_12\n}}\n_12\nproviderScopes={{\n_12\n    google: 'https://www.googleapis.com/auth/calendar.readonly',\n_12\n}}\n_12\n/>\n`\n\n### Supported views [\\#](\\#supported-views)\n\nThe Auth component is currently shipped with the following views:\n\n- [Email Login](../auth-email)\n- [Magic Link login](../auth-magic-link)\n- [Social Login](../social-login)\n- Update password\n- Forgotten password\n\nWe are planning on adding more views in the future. Follow along on that [repo](https://github.com/supabase/auth-ui).\n\n## Customization [\\#](\\#customization)\n\nThere are several ways to customize Auth UI:\n\n- Use one of the [predefined themes](#predefined-themes) that comes with Auth UI\n- Extend a theme by [overriding the variable tokens](#override-themes) in a theme\n- [Create your own theme](#create-theme)\n- [Use your own CSS classes](#custom-css-classes)\n- [Use inline styles](#custom-inline-styles)\n- [Use your own labels](#custom-labels)\n\n### Predefined themes [\\#](\\#predefined-themes)\n\nAuth UI comes with several themes to customize the appearance. Each predefined theme comes with at least two variations, a `default` variation, and a `dark` variation. You can switch between these themes using the `theme` prop. Import the theme you want to use and pass it to the `appearance.theme` prop.\n\n`\n_16\nimport { createClient } from '@supabase/supabase-js'\n_16\nimport { Auth } from '@supabase/auth-ui-react'\n_16\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n_16\n_16\nconst supabase = createClient(\n_16\n'<INSERT PROJECT URL>',\n_16\n'<INSERT PROJECT ANON API KEY>'\n_16\n)\n_16\n_16\nconst App = () => (\n_16\n<Auth\n_16\n    supabaseClient={supabase}\n_16\n    {/* Apply predefined theme */}\n_16\n    appearance={{ theme: ThemeSupa }}\n_16\n/>\n_16\n)\n`\n\nCurrently there is only one predefined theme available, but we plan to add more.\n\n### Switch theme variations [\\#](\\#switch-theme-variations)\n\nAuth UI comes with two theme variations: `default` and `dark`. You can switch between these themes with the `theme` prop.\n\n`\n_17\nimport { createClient } from '@supabase/supabase-js'\n_17\nimport { Auth } from '@supabase/auth-ui-react'\n_17\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n_17\n_17\nconst supabase = createClient(\n_17\n'<INSERT PROJECT URL>',\n_17\n'<INSERT PROJECT ANON API KEY>'\n_17\n)\n_17\n_17\nconst App = () => (\n_17\n<Auth\n_17\n    supabaseClient={supabase}\n_17\n    appearance={{ theme: ThemeSupa }}\n_17\n    {/* Set theme to dark */}\n_17\n    theme=\"dark\"\n_17\n/>\n_17\n)\n`\n\nIf you don't pass a value to `theme` it uses the `\"default\"` theme. You can pass `\"dark\"` to the theme prop to switch to the `dark` theme. If your theme has other variations, use the name of the variation in this prop.\n\n### Override themes [\\#](\\#override-themes)\n\nAuth UI themes can be overridden using variable tokens. See the [list of variable tokens](https://github.com/supabase/auth-ui/blob/main/packages/shared/src/theming/Themes.ts).\n\n`\n_22\nimport { createClient } from '@supabase/supabase-js'\n_22\nimport { Auth } from '@supabase/auth-ui-react'\n_22\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n_22\n_22\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_22\n_22\nconst App = () => (\n_22\n<Auth\n_22\n    supabaseClient={supabase}\n_22\n    appearance={{\n_22\n      theme: ThemeSupa,\n_22\n      variables: {\n_22\n        default: {\n_22\n          colors: {\n_22\n            brand: 'red',\n_22\n            brandAccent: 'darkred',\n_22\n          },\n_22\n        },\n_22\n      },\n_22\n    }}\n_22\n/>\n_22\n)\n`\n\nIf you created your own theme, you may not need to override any of them.\n\n### Create your own theme [\\#](\\#create-theme)\n\nYou can create your own theme by following the same structure within a `appearance.theme` property.\nSee the list of [tokens within a theme](https://github.com/supabase/auth-ui/blob/main/packages/shared/src/theming/Themes.ts).\n\n/src/index.js\n\n`\n_40\nimport { createClient } from '@supabase/supabase-js'\n_40\nimport { Auth } from '@supabase/auth-ui-react'\n_40\n_40\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_40\n_40\nconst customTheme = {\n_40\ndefault: {\n_40\n    colors: {\n_40\n      brand: 'hsl(153 60.0% 53.0%)',\n_40\n      brandAccent: 'hsl(154 54.8% 45.1%)',\n_40\n      brandButtonText: 'white',\n_40\n      // ..\n_40\n    },\n_40\n},\n_40\ndark: {\n_40\n    colors: {\n_40\n      brandButtonText: 'white',\n_40\n      defaultButtonBackground: '#2e2e2e',\n_40\n      defaultButtonBackgroundHover: '#3e3e3e',\n_40\n      //..\n_40\n    },\n_40\n},\n_40\n// You can also add more theme variations with different names.\n_40\nevenDarker: {\n_40\n    colors: {\n_40\n      brandButtonText: 'white',\n_40\n      defaultButtonBackground: '#1e1e1e',\n_40\n      defaultButtonBackgroundHover: '#2e2e2e',\n_40\n      //..\n_40\n    },\n_40\n},\n_40\n}\n_40\n_40\nconst App = () => (\n_40\n<Auth\n_40\n    supabaseClient={supabase}\n_40\n    theme=\"default\" // can also be \"dark\" or \"evenDarker\"\n_40\n    appearance={{ theme: customTheme }}\n_40\n/>\n_40\n)\n`\n\nYou can switch between different variations of your theme with the [\"theme\" prop](#switch-theme-variations).\n\n### Custom CSS classes [\\#](\\#custom-css-classes)\n\nYou can use custom CSS classes for the following elements:\n`\"button\"`, `\"container\"`, `\"anchor\"`, `\"divider\"`, `\"label\"`, `\"input\"`, `\"loader\"`, `\"message\"`.\n\n/src/index.js\n\n`\n_20\nimport { createClient } from '@supabase/supabase-js'\n_20\nimport { Auth } from '@supabase/auth-ui-react'\n_20\n_20\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_20\n_20\nconst App = () => (\n_20\n<Auth\n_20\n    supabaseClient={supabase}\n_20\n    appearance={{\n_20\n      // If you want to extend the default styles instead of overriding it, set this to true\n_20\n      extend: false,\n_20\n      // Your custom classes\n_20\n      className: {\n_20\n        anchor: 'my-awesome-anchor',\n_20\n        button: 'my-awesome-button',\n_20\n        //..\n_20\n      },\n_20\n    }}\n_20\n/>\n_20\n)\n`\n\n### Custom inline CSS [\\#](\\#custom-inline-styles)\n\nYou can use custom CSS inline styles for the following elements:\n`\"button\"`, `\"container\"`, `\"anchor\"`, `\"divider\"`, `\"label\"`, `\"input\"`, `\"loader\"`, `\"message\"`.\n\n/src/index.js\n\n`\n_17\nimport { createClient } from '@supabase/supabase-js'\n_17\nimport { Auth } from '@supabase/auth-ui-react'\n_17\n_17\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_17\n_17\nconst App = () => (\n_17\n<Auth\n_17\n    supabaseClient={supabase}\n_17\n    appearance={{\n_17\n      style: {\n_17\n        button: { background: 'red', color: 'white' },\n_17\n        anchor: { color: 'blue' },\n_17\n        //..\n_17\n      },\n_17\n    }}\n_17\n/>\n_17\n)\n`\n\n### Custom labels [\\#](\\#custom-labels)\n\nYou can use custom labels with `localization.variables` like so:\n\n`\n_18\nimport { createClient } from '@supabase/supabase-js'\n_18\nimport { Auth } from '@supabase/auth-ui-react'\n_18\n_18\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_18\n_18\nconst App = () => (\n_18\n<Auth\n_18\n    supabaseClient={supabase}\n_18\n    localization={{\n_18\n      variables: {\n_18\n        sign_in: {\n_18\n          email_label: 'Your email address',\n_18\n          password_label: 'Your strong password',\n_18\n        },\n_18\n      },\n_18\n    }}\n_18\n/>\n_18\n)\n`\n\nA full list of the available variables is below:\n\nSign UpSign InMagic LinkForgotten PasswordUpdate PasswordVerify OTP\n\n| Label Tag | Default Label |\n| --- | --- |\n| `email_label` | Email address |\n| `password_label` | Create a Password |\n| `email_input_placeholder` | Your email address |\n| `password_input_placeholder` | Your password |\n| `button_label` | Sign up |\n| `loading_button_label` | Signing up ... |\n| `social_provider_text` | Sign in with `{{provider}}` |\n| `link_text` | Don't have an account? Sign up |\n| `confirmation_text` | Check your email for the confirmation link |\n\nCurrently, translating error messages (e.g. \"Invalid credentials\") is not supported. Check [related issue.](https://github.com/supabase/auth-ui/issues/86)\n\n### Hiding links [\\#](\\#hiding-links)\n\nYou can hide links by setting the `showLinks` prop to `false`\n\n`\n_10\nimport { createClient } from '@supabase/supabase-js'\n_10\nimport { Auth } from '@supabase/auth-ui-react'\n_10\n_10\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_10\n_10\nconst App = () => <Auth supabaseClient={supabase} showLinks={false} />\n`\n\nSetting `showLinks` to `false` will hide the following links:\n\n- Don't have an account? Sign up\n- Already have an account? Sign in\n- Send a magic link email\n- Forgot your password?\n\n### Sign in and Sign up views [\\#](\\#sign-in-and-sign-up-views)\n\nAdd `sign_in` or `sign_up` views with the `view` prop:\n\n`\n_10\n<Auth\n_10\nsupabaseClient={supabase}\n_10\nview=\"sign_up\"\n_10\n/>\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
        "title": "Auth UI | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Auth%20UI&description=A%20prebuilt%2C%20customizable%20React%20component%20for%20authenticating%20users.",
        "ogTitle": "Auth UI | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
        "description": "A prebuilt, customizable React component for authenticating users.",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "A prebuilt, customizable React component for authenticating users.",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Native Mobile Deep Linking\n\n## Set up Deep Linking for mobile applications.\n\n* * *\n\nMany Auth methods involve a redirect to your app. For example:\n\n- Signup confirmation emails, Magic Link signins, and password reset emails contain a link that redirects to your app.\n- In OAuth signins, an automatic redirect occurs to your app.\n\nWith Deep Linking, you can configure this redirect to open a specific page. This is necessary if, for example, you need to display a form for password reset, or to manually exchange a token hash.\n\n## Setting up Deep Linking [\\#](\\#setting-up-deep-linking)\n\nExpo React NativeFlutterSwiftAndroid Kotlin\n\nTo link to your development build or standalone app, you need to specify a custom URL scheme for your app. You can register a scheme in your app config (app.json, app.config.js) by adding a string under the `scheme` key:\n\n`\n_10\n{\n_10\n\"expo\": {\n_10\n    \"scheme\": \"com.supabase\"\n_10\n}\n_10\n}\n`\n\nIn your project's [auth settings](https://supabase.com/dashboard/project/_/auth/url-configuration) add the redirect URL, e.g. `com.supabase://**`.\n\nFinally, implement the OAuth and linking handlers. See the [supabase-js reference](/docs/reference/javascript/initializing?example=react-native-options-async-storage) for instructions on initializing the supabase-js client in React Native.\n\n./components/Auth.tsx\n\n`\n_71\nimport { Button } from \"react-native\";\n_71\nimport { makeRedirectUri } from \"expo-auth-session\";\n_71\nimport * as QueryParams from \"expo-auth-session/build/QueryParams\";\n_71\nimport * as WebBrowser from \"expo-web-browser\";\n_71\nimport * as Linking from \"expo-linking\";\n_71\nimport { supabase } from \"app/utils/supabase\";\n_71\n_71\nWebBrowser.maybeCompleteAuthSession(); // required for web only\n_71\nconst redirectTo = makeRedirectUri();\n_71\n_71\nconst createSessionFromUrl = async (url: string) => {\n_71\nconst { params, errorCode } = QueryParams.getQueryParams(url);\n_71\n_71\nif (errorCode) throw new Error(errorCode);\n_71\nconst { access_token, refresh_token } = params;\n_71\n_71\nif (!access_token) return;\n_71\n_71\nconst { data, error } = await supabase.auth.setSession({\n_71\n    access_token,\n_71\n    refresh_token,\n_71\n});\n_71\nif (error) throw error;\n_71\nreturn data.session;\n_71\n};\n_71\n_71\nconst performOAuth = async () => {\n_71\nconst { data, error } = await supabase.auth.signInWithOAuth({\n_71\n    provider: \"github\",\n_71\n    options: {\n_71\n      redirectTo,\n_71\n      skipBrowserRedirect: true,\n_71\n    },\n_71\n});\n_71\nif (error) throw error;\n_71\n_71\nconst res = await WebBrowser.openAuthSessionAsync(\n_71\n    data?.url ?? \"\",\n_71\n    redirectTo\n_71\n);\n_71\n_71\nif (res.type === \"success\") {\n_71\n    const { url } = res;\n_71\n    await createSessionFromUrl(url);\n_71\n}\n_71\n};\n_71\n_71\nconst sendMagicLink = async () => {\n_71\nconst { error } = await supabase.auth.signInWithOtp({\n_71\n    email: \"example@email.com\",\n_71\n    options: {\n_71\n      emailRedirectTo: redirectTo,\n_71\n    },\n_71\n});\n_71\n_71\nif (error) throw error;\n_71\n// Email sent.\n_71\n};\n_71\n_71\nexport default function Auth() {\n_71\n// Handle linking into app from email app.\n_71\nconst url = Linking.useURL();\n_71\nif (url) createSessionFromUrl(url);\n_71\n_71\nreturn (\n_71\n    <>\n_71\n      <Button onPress={performOAuth} title=\"Sign in with Github\" />\n_71\n      <Button onPress={sendMagicLink} title=\"Send Magic Link\" />\n_71\n    </>\n_71\n);\n_71\n}\n`\n\nFor the best user experience it is recommended to use universal links which require a more elaborate setup. You can find the detailed setup instructions in the [Expo docs](https://docs.expo.dev/guides/deep-linking/).",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/native-mobile-deep-linking",
        "title": "Native Mobile Deep Linking | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Native%20Mobile%20Deep%20Linking&description=undefined",
        "ogTitle": "Native Mobile Deep Linking | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/native-mobile-deep-linking",
        "description": "Set up Deep Linking for mobile applications.",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "ogDescription": "Set up Deep Linking for mobile applications.",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# General configuration\n\n## General configuration options for Supabase Auth\n\n* * *\n\nThis section covers the [general configuration options](/dashboard/project/_/settings/auth) for Supabase Auth. If you are looking for another type of configuration, you may be interested in one of the following sections:\n\n- [Provider-specific configuration](/dashboard/project/_/auth/providers)\n- [Rate limits](/dashboard/project/_/auth/rate-limits)\n- [Email Templates](/dashboard/project/_/auth/templates)\n- [Redirect URLs](/dashboard/project/_/auth/url-configuration)\n- [Auth Hooks](/dashboard/project/_/auth/hooks)\n\nSupabase Auth provides these [general configuration options](/dashboard/project/_/settings/auth) to control user access to your application:\n\n- **Allow new users to sign up**: Users will be able to sign up. If this config is disabled, only existing users can sign in.\n\n- **Confirm Email**: Users will need to confirm their email address before signing in for the first time.\n  - Having **Confirm Email** disabled assumes that the user's email does not need to be verified in order to login and implicitly confirms the user's email in the database.\n  - This option can be found in the email provider under the provider-specific configuration.\n- **Allow anonymous sign-ins**: Allow anonymous users to be created.\n\n- **Allow manual linking**: Allow users to link their accounts manually.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/general-configuration",
        "title": "General configuration | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=General%20configuration&description=undefined",
        "ogTitle": "General configuration | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/general-configuration",
        "description": "General configuration options for Supabase Auth",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "General configuration options for Supabase Auth",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Implicit flow\n\n## About authenticating with implicit flow.\n\n* * *\n\nThe implicit flow is one of two ways that a user can authenticate and your app can receive the necessary access and refresh tokens.\n\nThe flow is an implementation detail handled for you by Supabase Auth, but understanding the difference between implicit and [PKCE flow](/docs/guides/auth/sessions/pkce-flow) is important for understanding the difference between client-only and server-side auth.\n\n## How it works [\\#](\\#how-it-works)\n\nAfter a successful signin, the user is redirected to your app with a URL that looks like this:\n\n`\n_10\nhttps://yourapp.com/...#access_token=<...>&refresh_token=<...>&...\n`\n\nThe access and refresh tokens are contained in the URL fragment.\n\nThe client libraries:\n\n- Detect this type of URL\n- Extract the access token, refresh token, and some extra information\n- Persist this information to local storage for further use by the library and your app\n\n## Limitations [\\#](\\#limitations)\n\nThe implicit flow only works on the client. Web browsers do not send the URL fragment to the server by design. This is a security feature:\n\n- You may be hosting your single-page app on a third-party server. The third-party service shouldn't get access to your user's credentials.\n- Even if the server is under your direct control, `GET` requests and their full URLs are often logged. This approach avoids leaking credentials in request or access logs.\n\nIf you wish to obtain the access token and refresh token on a server, use the [PKCE flow](/docs/guides/auth/sessions/pkce-flow).",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/sessions/implicit-flow",
        "title": "Implicit flow | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Implicit%20flow&description=undefined",
        "ogTitle": "Implicit flow | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/sessions/implicit-flow",
        "description": "About authenticating with implicit flow.",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "ogDescription": "About authenticating with implicit flow.",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Supabase Auth with the Next.js App Router\n\n* * *\n\nThe `auth-helpers` package has been replaced with the `@supabase/ssr` package. We recommend setting up Auth for your Next.js app with `@supabase/ssr` instead. See the [Next.js Server-Side Auth guide](/docs/guides/auth/server-side/nextjs) to learn how.\n\nSee legacy docs",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-helpers/nextjs",
        "title": "Supabase Auth with the Next.js App Router | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Supabase%20Auth%20with%20the%20Next.js%20App%20Router&description=Authentication%20and%20Authorization%20helpers%20for%20creating%20an%20authenticated%20Supabase%20client%20with%20the%20Next.js%2013%20App%20Router.",
        "ogTitle": "Supabase Auth with the Next.js App Router | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-helpers/nextjs",
        "description": "Authentication and Authorization helpers for creating an authenticated Supabase client with the Next.js 13 App Router.",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Authentication and Authorization helpers for creating an authenticated Supabase client with the Next.js 13 App Router.",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Password-based Auth\n\n## Allow users to sign in with a password connected to their email or phone number.\n\n* * *\n\nUsers often expect to sign in to your site with a password. Supabase Auth helps you implement password-based auth safely, using secure configuration options and best practices for storing and verifying passwords.\n\nUsers can associate a password with their identity using their [email address](#with-email) or a [phone number](#with-phone).\n\n## With email [\\#](\\#with-email)\n\n### Enabling email and password-based authentication [\\#](\\#enabling-email-and-password-based-authentication)\n\nEmail authentication is enabled by default.\n\nYou can configure whether users need to verify their email to sign in. On hosted Supabase projects, this is true by default. On self-hosted projects or in local development, this is false by default.\n\nChange this setting on the [Auth Providers page](/dashboard/project/_/auth/providers) for hosted projects, or in the [configuration file](/docs/guides/cli/config#auth.email.enable_confirmations) for self-hosted projects.\n\n### Signing up with an email and password [\\#](\\#signing-up-with-an-email-and-password)\n\nThere are two possible flows for email signup: [implicit flow](/docs/guides/auth/sessions#implicit-flow) and [PKCE flow](/docs/guides/auth/sessions#pkce-flow). If you're using SSR, you're using the PKCE flow. If you're using client-only code, the default flow depends upon the client library. The implicit flow is the default in JavaScript and Dart, and the PKCE flow is the default in Swift.\n\nThe instructions in this section assume that email confirmations are enabled.\n\nImplicit flowPKCE flow\n\nThe implicit flow only works for client-only apps. Your site directly receives the access token after the user confirms their email.\n\nJavaScriptDartSwiftKotlinPython\n\nTo sign up the user, call [signUp()](/docs/reference/javascript/auth-signup) with their email address and password.\n\nYou can optionally specify a URL to redirect to after the user clicks the confirmation link. This URL must be configured as a [Redirect URL](/docs/guides/auth/redirect-urls), which you can do in the [dashboard](/dashboard/project/_/auth/url-configuration) for hosted projects, or in the [configuration file](/docs/guides/cli/config#auth.additional_redirect_urls) for self-hosted projects.\n\nIf you don't specify a redirect URL, the user is automatically redirected to your site URL. This defaults to `localhost:3000`, but you can also configure this.\n\n`\n_10\nasync function signUpNewUser() {\n_10\nconst { data, error } = await supabase.auth.signUp({\n_10\n    email: 'example@email.com',\n_10\n    password: 'example-password',\n_10\n    options: {\n_10\n      emailRedirectTo: 'https://example.com/welcome',\n_10\n    },\n_10\n})\n_10\n}\n`\n\n### Signing in with an email and password [\\#](\\#signing-in-with-an-email-and-password)\n\nJavaScriptDartSwiftKotlinPython\n\nWhen your user signs in, call [signInWithPassword()](/docs/reference/javascript/auth-signinwithpassword) with their email address and password:\n\n`\n_10\nasync function signInWithEmail() {\n_10\nconst { data, error } = await supabase.auth.signInWithPassword({\n_10\n    email: 'example@email.com',\n_10\n    password: 'example-password',\n_10\n})\n_10\n}\n`\n\n### Resetting a password [\\#](\\#resetting-a-password)\n\nImplicit flowPKCE flow\n\n#### Step 1: Create a reset password page [\\#](\\#step-1-create-a-reset-password-page)\n\nCreate a **reset password** page. This page should be publicly accessible.\n\nCollect the user's email address and request a password reset email. Specify the redirect URL, which should point to the URL of a **change password** page. This URL needs to be configured in your [redirect URLs](/docs/guides/auth/redirect-urls).\n\nJavaScriptSwiftKotlinPython\n\n`\n_10\nawait supabase.auth.resetPasswordForEmail('hello@example.com', {\n_10\nredirectTo: 'http://example.com/account/update-password',\n_10\n})\n`\n\n#### Step 2: Create a change password page [\\#](\\#step-2-create-a-change-password-page)\n\nCreate a **change password** page at the URL you specified in the previous step. This page should be accessible only to authenticated users.\n\nCollect the user's new password and call `updateUser` to update their password.\n\nJavaScriptSwiftKotlinPython\n\n`\n_10\nawait supabase.auth.updateUser({ password: new_password })\n`\n\n### Email sending [\\#](\\#email-sending)\n\nThe signup confirmation and password reset flows require an SMTP server to send emails.\n\nThe Supabase platform comes with a default email-sending service for you to try out. The service has a rate limit of 2 emails per hour, and availability is on a best-effort basis. For production use, you should consider configuring a custom SMTP server.\n\nConsider configuring a custom SMTP server for production.\n\nSee the [Custom SMTP guide](/docs/guides/auth/auth-smtp) for instructions.\n\n#### Local development with Inbucket [\\#](\\#local-development-with-inbucket)\n\nYou can test email flows on your local machine. The Supabase CLI automatically captures emails sent locally by using [Inbucket](https://github.com/inbucket/inbucket).\n\nIn your terminal, run `supabase status` to get the Inbucket URL. Go to this URL in your browser, and follow the instructions to find your emails.\n\n## With phone [\\#](\\#with-phone)\n\nYou can use a user's mobile phone number as an identifier, instead of an email address, when they sign up with a password.\n\nThis practice is usually discouraged because phone networks recycle mobile phone numbers. Anyone receiving a recycled phone number gets access to the original user's account. To mitigate this risk, [implement MFA](/docs/guides/auth/auth-mfa).\n\nProtect users who use a phone number as a password-based auth identifier by enabling MFA.\n\n### Enabling phone and password-based authentication [\\#](\\#enabling-phone-and-password-based-authentication)\n\nEnable phone authentication on the [Auth Providers page](/dashboard/project/_/auth/providers) for hosted Supabase projects.\n\nFor self-hosted projects or local development, use the [configuration file](/docs/guides/cli/config#auth.sms.enable_signup). See the configuration variables namespaced under `auth.sms`.\n\nIf you want users to confirm their phone number on signup, you need to set up an SMS provider. Each provider has its own configuration. Supported providers include MessageBird, Twilio, Vonage, and TextLocal (community-supported).\n\n### Configuring SMS Providers\n\n![MessageBird Icon](https://supabase.com/docs/img/icons/messagebird-icon.svg)\n\n##### MessageBird\n\n![Twilio Icon](https://supabase.com/docs/img/icons/twilio-icon.svg)\n\n##### Twilio\n\n![Vonage Icon](https://supabase.com/docs/img/icons/vonage-icon-light.svg)\n\n##### Vonage\n\n![Textlocal (Community Supported) Icon](https://supabase.com/docs/guides/auth/Community%20Supported)\n\n##### Textlocal (Community Supported)\n\n### Signing up with a phone number and password [\\#](\\#signing-up-with-a-phone-number-and-password)\n\nTo sign up the user, call [`signUp()`](/docs/reference/javascript/auth-signup) with their phone number and password:\n\nJavaScriptSwiftKotlinPythonHTTP\n\n`\n_10\nconst { data, error } = await supabase.auth.signUp({\n_10\nphone: '+13334445555',\n_10\npassword: 'some-password',\n_10\n})\n`\n\nIf you have phone verification turned on, the user receives an SMS with a 6-digit pin that you must verify within 60 seconds:\n\nJavaScriptSwiftKotlinPythonHTTP\n\nYou should present a form to the user so they can input the 6 digit pin, then send it along with the phone number to `verifyOtp`:\n\n`\n_10\nconst {\n_10\ndata: { session },\n_10\nerror,\n_10\n} = await supabase.auth.verifyOtp({\n_10\nphone: '+13334445555',\n_10\ntoken: '123456',\n_10\ntype: 'sms',\n_10\n})\n`\n\n### Signing in a with a phone number and password [\\#](\\#signing-in-a-with-a-phone-number-and-password)\n\nCall the function to sign in with the user's phone number and password:\n\nJavaScriptSwiftKotlinPythonHTTP\n\n`\n_10\nconst { user, error } = await supabase.auth.signInWithPassword({\n_10\nphone: '+13334445555',\n_10\npassword: 'some-password',\n_10\n})\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/passwords",
        "title": "Password-based Auth | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Password-based%20Auth&description=undefined",
        "ogTitle": "Password-based Auth | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/passwords",
        "description": "Allow users to sign in with a password connected to their email or phone number.",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Allow users to sign in with a password connected to their email or phone number.",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Enable Captcha Protection\n\n* * *\n\nSupabase provides you with the option of adding captcha to your sign-in, sign-up, and password reset forms. This keeps your website safe from bots and malicious scripts. Supabase authentication has support for [hCaptcha](https://www.hcaptcha.com/) and [Cloudflare Turnstile](https://www.cloudflare.com/products/turnstile/).\n\n## Sign up for Captcha [\\#](\\#sign-up-for-captcha)\n\nHCaptchaTurnstile\n\nGo to the [hCaptcha](https://www.hcaptcha.com/) website and sign up for an account. On the Welcome page, copy the **Sitekey** and **Secret key**.\n\nIf you have already signed up and didn't copy this information from the Welcome page, you can get the **Secret key** from the Settings page.\n\n![site_secret_settings.png](https://supabase.com/docs/img/guides/auth-captcha/site_secret_settings.png)\n\nThe **Sitekey** can be found in the **Settings** of the active site you created.\n\n![sites_dashboard.png](https://supabase.com/docs/img/guides/auth-captcha/sites_dashboard.png)\n\nIn the Settings page, look for the **Sitekey** section and copy the key.\n\n![sitekey_settings.png](https://supabase.com/docs/img/guides/auth-captcha/sitekey_settings.png)\n\n## Enable Captcha protection for your Supabase project [\\#](\\#enable-captcha-protection-for-your-supabase-project)\n\nNavigate to the **[Auth](https://supabase.com/dashboard/project/_/settings/auth)** section of your Project Settings in the Supabase Dashboard and find the **Enable Captcha protection** toggle under Settings > Authentication > Bot and Abuse Protection > Enable Captcha protection.\n\nSelect your CAPTCHA provider from the dropdown, enter your Captcha **Secret key**, and click **Save**.\n\n## Add the Captcha frontend component [\\#](\\#add-the-captcha-frontend-component)\n\nThe frontend requires some changes to provide the captcha on-screen for the user. This example uses React and the corresponding Captcha React component, but both Captcha providers can be used with any JavaScript framework.\n\nHCaptchaTurnstile\n\nInstall `@hcaptcha/react-hcaptcha` in your project as a dependency.\n\n`\n_10\nnpm install @hcaptcha/react-hcaptcha\n`\n\nNow import the `HCaptcha` component from the `@hcaptcha/react-hcaptcha` library.\n\n`\n_10\nimport HCaptcha from '@hcaptcha/react-hcaptcha'\n`\n\nLet's create a empty state to store our `captchaToken`\n\n`\n_10\nconst [captchaToken, setCaptchaToken] = useState()\n`\n\nNow lets add the HCaptcha component to the JSX section of our code\n\n`\n_10\n<HCaptcha />\n`\n\nWe will pass it the sitekey we copied from the hCaptcha website as a property along with a onVerify property which takes a callback function. This callback function will have a token as one of its properties. Let's set the token in the state using `setCaptchaToken`\n\n`\n_10\n<HCaptcha\n_10\nsitekey=\"your-sitekey\"\n_10\nonVerify={(token) => {\n_10\n    setCaptchaToken(token)\n_10\n}}\n_10\n/>\n`\n\nNow lets use the captcha token we receive in our Supabase signUp function.\n\n`\n_10\nawait supabase.auth.signUp({\n_10\nemail,\n_10\npassword,\n_10\noptions: { captchaToken },\n_10\n})\n`\n\nWe will also need to reset the captcha challenge after we have made a call to the function above.\n\nCreate a ref to use on our HCaptcha component.\n\n`\n_10\nconst captcha = useRef()\n`\n\nLet's add a ref attribute on the `HCaptcha` component and assign the `captcha` constant to it.\n\n`\n_10\n<HCaptcha\n_10\nref={captcha}\n_10\nsitekey=\"your-sitekey\"\n_10\nonVerify={(token) => {\n_10\n    setCaptchaToken(token)\n_10\n}}\n_10\n/>\n`\n\nReset the `captcha` after the signUp function is called using the following code:\n\n`\n_10\ncaptcha.current.resetCaptcha()\n`\n\nIn order to test that this works locally we will need to use something like [ngrok](https://ngrok.com/) or add an entry to your hosts file. You can read more about this in the [hCaptcha docs](https://docs.hcaptcha.com/#local-development).\n\nRun the application and you should now be provided with a captcha challenge.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-captcha",
        "title": "Enable Captcha Protection | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Enable%20Captcha%20Protection&description=Add%20Captcha%20Protection%20to%20your%20Supabase%20project",
        "ogTitle": "Enable Captcha Protection | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-captcha",
        "description": "Add Captcha Protection to your Supabase project",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Add Captcha Protection to your Supabase project",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Identity Linking\n\n## Manage the identities associated with your user\n\n* * *\n\n## Identity linking strategies [\\#](\\#identity-linking-strategies)\n\nCurrently, Supabase Auth supports 2 strategies to link an identity to a user:\n\n1. [Automatic Linking](#automatic-linking)\n2. [Manual Linking](#manual-linking-beta)\n\n### Automatic linking [\\#](\\#automatic-linking)\n\nSupabase Auth automatically links identities with the same email address to a single user. This helps to improve the user experience when multiple OAuth login options are presented since the user does not need to remember which OAuth account they used to sign up with. When a new user signs in with OAuth, Supabase Auth will attempt to look for an existing user that uses the same email address. If a match is found, the new identity is linked to the user.\n\nIn order for automatic linking to correctly identify the user for linking, Supabase Auth needs to ensure that all user emails are unique. It would also be an insecure practice to automatically link an identity to a user with an unverified email address since that could lead to pre-account takeover attacks. To prevent this from happening, when a new identity can be linked to an existing user, Supabase Auth will remove any other unconfirmed identities linked to an existing user.\n\nUsers that signed up with [SAML SSO](/docs/guides/auth/sso/auth-sso-saml) will not be considered as targets for automatic linking.\n\n### Manual linking (beta) [\\#](\\#manual-linking-beta)\n\nJavaScriptDartSwiftKotlinPython\n\nSupabase Auth allows a user to initiate identity linking with a different email address when they are logged in. To link an OAuth identity to the user, call [`linkIdentity()`](/docs/reference/javascript/auth-linkidentity):\n\n`\n_10\nconst { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })\n`\n\nIn the example above, the user will be redirected to Google to complete the OAuth2.0 flow. Once the OAuth2.0 flow has completed successfully, the user will be redirected back to the application and the Google identity will be linked to the user. You can enable manual linking from your project's authentication [configuration options](/dashboard/project/_/settings/auth) or by setting the environment variable `GOTRUE_SECURITY_MANUAL_LINKING_ENABLED: true` when self-hosting.\n\n## Unlink an identity [\\#](\\#unlink-an-identity)\n\nJavaScriptDartSwiftKotlinPython\n\nYou can use [`getUserIdentities()`](/docs/reference/javascript/auth-getuseridentities) to fetch all the identities linked to a user. Then, call [`unlinkIdentity()`](/docs/reference/javascript/auth-unlinkidentity) to unlink the identity. The user needs to be logged in and have at least 2 linked identities in order to unlink an existing identity.\n\n`\n_10\n// retrieve all identities linked to a user\n_10\nconst {\n_10\ndata: { identities },\n_10\n} = await supabase.auth.getUserIdentities()\n_10\n_10\n// find the google identity linked to the user\n_10\nconst googleIdentity = identities.find((identity) => identity.provider === 'google')\n_10\n_10\n// unlink the google identity from the user\n_10\nconst { data, error } = await supabase.auth.unlinkIdentity(googleIdentity)\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-identity-linking",
        "title": "Identity Linking | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Identity%20Linking&description=Manage%20the%20identities%20associated%20with%20your%20user",
        "ogTitle": "Identity Linking | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-identity-linking",
        "description": "Manage the identities associated with your user",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Manage the identities associated with your user",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Firebase Auth\n\n## Use Firebase Auth with your Supabase project\n\n* * *\n\nCreating a Firebase Auth third-party integration with your Supabase project is currently limited to a private alpha release. We are still trying to improve the developer experience around securing your project. [Register your interest in Third-Party Auth with Firebase](https://forms.supabase.com/third-party-auth-with-firebase) and the team will reach out to you.\n\nFirebase Auth can be used as a third-party authentication provider alongside Supabase Auth, or standalone, with your Supabase project.\n\n## Getting started [\\#](\\#getting-started)\n\n1. First you need to add an integration to connect your Supabase project with your Firebase project. You will need to get the Project ID in the [Firebase Console](https://console.firebase.google.com/u/0/project/_/settings/general).\n2. Add a new Third-party Auth integration in your project's [Authentication settings](/dashboard/project/_/settings/auth).\n3. If you are using Third Party Auth in local development, create and attach restrictive RLS policies to all tables in your public schema, Storage and Realtime to prevent unauthorized access from unrelated Firebase projects.\n4. Assign the `role: 'authenticated'` [custom user claim](https://firebase.google.com/docs/auth/admin/custom-claims) to all your users.\n5. Finally set up the Supabase client in your application.\n\n## Setup the Supabase client library [\\#](\\#setup-the-supabase-client-library)\n\nTypeScriptSwift (iOS)Kotlin (Android)Kotlin (Multiplatform)\n\nCreating a client for the Web is as easy as passing the `accessToken` async function. This function should [return the Firebase Auth JWT of the current user](https://firebase.google.com/docs/auth/admin/verify-id-tokens#web) (or null if no such user) is found.\n\n`\n_10\nimport { createClient } from '@supabase/supabase-js'\n_10\n_10\nconst supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {\n_10\naccessToken: async () => {\n_10\n    ;(await firebase.auth().currentUser?.getIdToken(/* forceRefresh */ false)) ?? null\n_10\n},\n_10\n})\n`\n\nMake sure the all users in your application have the `role: 'authenticated'` [custom claim](https://firebase.google.com/docs/auth/admin/custom-claims) set. If you're using the `onCreate` Cloud Function to add this custom claim to newly signed up users, you will need to call `getIdToken(/* forceRefresh */ true)` immediately after sign up as the `onCreate` function does not run synchronously.\n\n## Add a new Third-Party Auth integration to your project [\\#](\\#add-a-new-third-party-auth-integration-to-your-project)\n\nIn the dashboard navigate to your project's [Authentication settings](/dashboard/project/_/settings/auth) and find the Third-Party Auth section to add a new integration.\n\nIn the CLI add the following config to your `supabase/config.toml` file:\n\n`\n_10\n[auth.third_party.firebase]\n_10\nenabled = true\n_10\nproject_id = \"<id>\"\n`\n\n## Adding an extra layer of security to your project's RLS policies [\\#](\\#adding-an-extra-layer-of-security-to-your-projects-rls-policies)\n\nWhile Third-Party Auth with Firebase is in a private alpha, it is strongly recommended to follow this guide closely. Once it becomes generally available this method would not be necessary to secure your project against unauthorized access from other Firebase projects.\n\nYou should also follow this best practice if self-hosting.\n\nFirebase Auth uses a single set of JWT signing keys for all projects. This means that JWTs issued from an unrelated Firebase project to yours could access data in your Supabase project. To guard against this, creating and maintaining the following RLS policies for **all of your tables in the `public` schema** is very important. You should also attach this policy to [Storage](/docs/guides/storage/security/access-control) buckets or [Realtime](/docs/guides/realtime/authorization) channels.\n\nTo achieve this we recommend using a [restrictive Postgres Row-Level Security policy](https://www.postgresql.org/docs/current/sql-createpolicy.html).\n\nRestrictive RLS policies differ from regular (or permissive) policies in that they use the `as restrictive` clause when being defined. They do not grant permissions, but rather restrict any existing or future permissions. They're great for cases like this where the technical limitations of Firebase Auth remain separate from your app's logic.\n\nPostgres has two types of policies: permissive and restrictive. This example uses restrictive policies so make sure you don't omit the `as restrictive` clause.\n\nThis is an example of such an RLS policy that will restrict access to only your project's (denoted with `<firebase-project-id>`) users, and not any other Firebase project.\n\n`\n_13\ncreate policy \"Restrict access to Supabase Auth and Firebase Auth for project ID <firebase-project-id>\"\n_13\non table_name\n_13\nas restrictive\n_13\nto authenticated\n_13\nusing (\n_13\n    (auth.jwt()->>'iss' = 'https://<project-ref>.supabase.co/auth/v1')\n_13\n    or\n_13\n    (\n_13\n        auth.jwt()->>'iss' = 'https://securetoken.google.com/<firebase-project-id>'\n_13\n        and\n_13\n        auth.jwt()->>'aud' = '<firebase-project-id>'\n_13\n     )\n_13\n);\n`\n\nIf you have a lot of tables in your app, or need to manage complex RLS policies for [Storage](/docs/guides/storage) or [Realtime](/docs/guides/realtime) it can be useful to define a [stable Postgres function](https://www.postgresql.org/docs/current/xfunc-volatility.html) that performs the check to cut down on duplicate code. For example:\n\n`\n_14\ncreate function public.is_supabase_or_firebase_project_jwt()\n_14\nreturns bool\n_14\nlanguage sql\n_14\nstable\n_14\nreturns null on null input\n_14\nreturn (\n_14\n    (auth.jwt()->>'iss' = 'https://<project-ref>.supabase.co/auth/v1')\n_14\n    or\n_14\n    (\n_14\n        auth.jwt()->>'iss' = concat('https://securetoken.google.com/<firebase-project-id>')\n_14\n        and\n_14\n        auth.jwt()->>'aud' = '<firebase-project-id>'\n_14\n     )\n_14\n);\n`\n\nMake sure you substitute `<project-ref>` with your Supabase project's ID and the `<firebase-project-id>` to your Firebase Project ID. Then the restrictive policies on all your tables, buckets and channels can be simplified to be:\n\n`\n_10\ncreate policy \"Restrict access to correct Supabase and Firebase projects\"\n_10\non table_name\n_10\nas restrictive\n_10\nto authenticated\n_10\nusing ((select public.is_supabase_or_firebase_project_jwt()) is true);\n`\n\n## Assign the \"role\" custom claim [\\#](\\#assign-the-role-custom-claim)\n\nYour Supabase project inspects the `role` claim present in all JWTs sent to it, to assign the correct Postgres role when using the Data API, Storage or Realtime authorization.\n\nBy default, Firebase JWTs do not contain a `role` claim in them. If you were to send such a JWT to your Supabase project, the `anon` role would be assigned when executing the Postgres query. Most of your app's logic will be accessible by the `authenticated` role.\n\n### Use Firebase Authentication functions to assign the authenticated role [\\#](\\#use-firebase-authentication-functions-to-assign-the-authenticated-role)\n\nYou have two choices to set up a Firebase Authentication function depending on your Firebase project's configuration:\n\n1. Easiest: Use a [blocking Firebase Authentication function](https://firebase.google.com/docs/auth/extend-with-blocking-functions) but this is only available if your project uses [Firebase Authentication with Identity Platform](https://cloud.google.com/security/products/identity-platform).\n2. Manually assign the custom claims to all users with the [admin SDK](https://firebase.google.com/docs/auth/admin/custom-claims#set_and_validate_custom_user_claims_via_the_admin_sdk) and define an [`onCreate` Firebase Authentication Cloud Function](https://firebase.google.com/docs/auth/extend-with-functions) to persist the role to all newly created users.\n\nNode.js (Blocking Functions Gen 2)Python (Blocking Functions Gen 2)onCreate Cloud Function in Node.js\n\n``\n_21\nimport { beforeUserCreated, beforeUserSignedIn } from 'firebase-functions/v2/identity'\n_21\n_21\nexport const beforecreated = beforeUserCreated((event) => {\n_21\nreturn {\n_21\n    customClaims: {\n_21\n      // The Supabase project will use this role to assign the `authenticated`\n_21\n      // Postgres role.\n_21\n      role: 'authenticated',\n_21\n    },\n_21\n}\n_21\n})\n_21\n_21\nexport const beforesignedin = beforeUserSignedIn((event) => {\n_21\nreturn {\n_21\n    customClaims: {\n_21\n      // The Supabase project will use this role to assign the `authenticated`\n_21\n      // Postgres role.\n_21\n      role: 'authenticated',\n_21\n    },\n_21\n}\n_21\n})\n``\n\nNote that instead of using `customClaims` you can instead use `sessionClaims`. The difference is that `session_claims` are not saved in the Firebase user profile, but remain valid for as long as the user is signed in.\n\nFinally deploy your functions for the changes to take effect:\n\n`\n_10\nfirebase deploy --only functions\n`\n\nNote that these functions are only called on new sign-ups and sign-ins. Existing users will not have these claims in their ID tokens. You will need to use the admin SDK to assign the role custom claim to all users. Make sure you do this after the blocking Firebase Authentication functions as described above are deployed.\n\n### Use the admin SDK to assign the role custom claim to all users [\\#](\\#use-the-admin-sdk-to-assign-the-role-custom-claim-to-all-users)\n\nYou need to run a script that will assign the `role: 'authenticated'` custom claim to all of your existing Firebase Authentication users. You can do this by combining the [list users](https://firebase.google.com/docs/auth/admin/manage-users#list_all_users) and [set custom user claims](https://firebase.google.com/docs/auth/admin/create-custom-tokens) admin APIs. An example script is provided below:\n\n`\n_26\n'use strict';\n_26\nconst { initializeApp } = require('firebase-admin/app');\n_26\nconst { getAuth } = require('firebase-admin/auth');\n_26\ninitializeApp();\n_26\n_26\nasync function setRoleCustomClaim() => {\n_26\nlet nextPageToken = undefined\n_26\n_26\ndo {\n_26\n    const listUsersResult = await getAuth().listUsers(1000, nextPageToken)\n_26\n_26\n    nextPageToken = listUsersResult.pageToken\n_26\n_26\n    await Promise.all(listUsersResult.users.map(async (userRecord) => {\n_26\n      try {\n_26\n        await getAuth().setCustomUserClaims(userRecord.id, {\n_26\n          role: 'authenticated'\n_26\n        })\n_26\n      } catch (error) {\n_26\n        console.error('Failed to set custom role for user', userRecord.id)\n_26\n      }\n_26\n    })\n_26\n} while (nextPageToken);\n_26\n};\n_26\n_26\nsetRoleCustomClaim().then(() => process.exit(0))\n`\n\nAfter all users have received the `role: 'authenticated'` claim, it will appear in all newly issued ID tokens for the user.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/third-party/firebase-auth",
        "title": "Firebase Auth | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Firebase%20Auth&description=undefined",
        "ogTitle": "Firebase Auth | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/third-party/firebase-auth",
        "description": "Use Firebase Auth with your Supabase project",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "ogDescription": "Use Firebase Auth with your Supabase project",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Error Codes\n\n## Learn about the Auth error codes and how to resolve them\n\n* * *\n\n## Auth Error Codes [\\#](\\#auth-error-codes)\n\nSupabase Auth can return various errors when using its API. This guide explains how to handle these errors effectively across different programming languages.\n\n## Error Types [\\#](\\#error-types)\n\nSupabase Auth errors are generally categorized into two main types:\n\n- API Errors: Originate from the Supabase Auth API.\n- Client Errors: Originate from the client library's state.\n\nClient errors differ by language so do refer to the appropriate section below:\n\nJavaScriptDartPythonKotlin\n\nAll errors originating from the `supabase.auth` namespace of the client library will be wrapped by the `AuthError` class.\n\nError objects are split in a few classes:\n\n- `AuthApiError` \\-\\- errors which originate from the Supabase Auth API.\n  - Use `isAuthApiError` instead of `instanceof` checks to see if an error you caught is of this type.\n- `CustomAuthError` \\-\\- errors which generally originate from state in the client library.\n  - Use the `name` property on the error to identify the class of error received.\n\nErrors originating from the server API classed as `AuthApiError` always have a `code` property that can be used to identify the error returned by the server. The `status` property is also present, encoding the HTTP status code received in the response.\n\n## HTTP Status Codes [\\#](\\#http-status-codes)\n\nBelow are the most common HTTP status codes you might encounter, along with their meanings in the context of Supabase Auth:\n\n### [403 Forbidden](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) [\\#](\\#403-forbidden)\n\nSent out in rare situations where a certain Auth feature is not available for the user, and you as the developer are not checking a precondition whether that API is available for the user.\n\n### [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422) [\\#](\\#422-unprocessable-entity)\n\nSent out when the API request is accepted, but cannot be processed because the user or Auth server is in a state where it cannot satisfy the request.\n\n### [429 Too Many Requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [\\#](\\#429-too-many-requests)\n\nSent out when rate-limits are breached for an API. You should handle this status code often, especially in functions that authenticate a user.\n\n### [500 Internal Server Error](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [\\#](\\#500-internal-server-error)\n\nIndicate that the Auth server's service is degraded. Most often it points to issues in your database setup such as a misbehaving trigger on a schema, function, view or other database object.\n\n### [501 Not Implemented](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/501) [\\#](\\#501-not-implemented)\n\nSent out when a feature is not enabled on the Auth server, and you are trying to use an API which requires it.\n\nThe following table provides a comprehensive list of error codes you may encounter when working with Supabase Auth. Each error code is associated with a specific issue and includes a description to help you understand and resolve the problem efficiently.\n\n## Auth Error Codes Table [\\#](\\#auth-error-codes-table)\n\nTo supplement HTTP status codes, Supabase Auth returns a string error code which gives you more insight into what went wrong. These codes are stable and can be used to present an internationalized message to your users.\n\n| Code | Description |\n| --- | --- |\n| `anonymous_provider_disabled` | Anonymous sign-ins are disabled. |\n| `bad_code_verifier` | Returned from the PKCE flow where the provided code verifier does not match the expected one. Indicates a bug in the implementation of the client library. |\n| `bad_json` | Usually used when the HTTP body of the request is not valid JSON. |\n| `bad_jwt` | JWT sent in the `Authorization` header is not valid. |\n| `bad_oauth_callback` | OAuth callback from provider to Auth does not have all the required attributes (state). Indicates an issue with the OAuth provider or client library implementation. |\n| `bad_oauth_state` | OAuth state (data echoed back by the OAuth provider to Supabase Auth) is not in the correct format. Indicates an issue with the OAuth provider integration. |\n| `captcha_failed` | Captcha challenge could not be verified with the captcha provider. Check your captcha integration. |\n| `conflict` | General database conflict, such as concurrent requests on resources that should not be modified concurrently. Can often occur when you have too many session refresh requests firing off at the same time for a user. Check your app for concurrency issues, and if detected, back off exponentially. |\n| `email_address_not_authorized` | Email sending is not allowed for this address as it is not in the list of authorized email addresses |\n| `email_conflict_identity_not_deletable` | Unlinking this identity causes the user's account to change to an email address which is already used by another user account. Indicates an issue where the user has two different accounts using different primary email addresses. You may need to migrate user data to one of their accounts in this case. |\n| `email_exists` | Email address already exists in the system. |\n| `email_not_confirmed` | Signing in is not allowed for this user as the email address is not confirmed. |\n| `email_provider_disabled` | Signups are disabled for email and password. |\n| `flow_state_expired` | PKCE flow state to which the API request relates has expired. Ask the user to sign in again. |\n| `flow_state_not_found` | PKCE flow state to which the API request relates no longer exists. Flow states expire after a while and are progressively cleaned up, which can cause this error. Retried requests can cause this error, as the previous request likely destroyed the flow state. Ask the user to sign in again. |\n| `hook_payload_over_size_limit` | Payload from Auth exceeds maximum size limit. |\n| `hook_timeout` | Unable to reach hook within maximum time allocated. |\n| `hook_timeout_after_retry` | Unable to reach hook after maximum number of retries. |\n| `identity_already_exists` | The identity to which the API relates is already linked to a user. |\n| `identity_not_found` | Identity to which the API call relates does not exist, such as when an identity is unlinked or deleted. |\n| `insufficient_aal` | To call this API, the user must have a higher [Authenticator Assurance Level](https://supabase.com/docs/guides/auth/auth-mfa). To resolve, ask the user to solve an MFA challenge. |\n| `invite_not_found` | Invite is expired or already used. |\n| `invalid_credentials` | Login credentials or grant type not recognized. |\n| `manual_linking_disabled` | Calling the `supabase.auth.linkUser()` and related APIs is not enabled on the Auth server. |\n| `mfa_challenge_expired` | Responding to an MFA challenge should happen within a fixed time period. Request a new challenge when encountering this error. |\n| `mfa_factor_name_conflict` | MFA factors for a single user should not have the same friendly name. |\n| `mfa_factor_not_found` | MFA factor no longer exists. |\n| `mfa_ip_address_mismatch` | The enrollment process for MFA factors must begin and end with the same IP address. |\n| `mfa_verification_failed` | MFA challenge could not be verified -- wrong TOTP code. |\n| `mfa_verification_rejected` | Further MFA verification is rejected. Only returned if the [MFA verification attempt hook](https://supabase.com/docs/guides/auth/auth-hooks?language=add-admin-role#hook-mfa-verification-attempt) returns a reject decision. |\n| `mfa_verified_factor_exists` | Verified phone factor already exists for a user. Unenroll existing verified phone factor to continue. |\n| `mfa_totp_enroll_disabled` | Enrollment of MFA TOTP factors is disabled. |\n| `mfa_totp_verify_disabled` | Login via TOTP factors and verification of new TOTP factors is disabled. |\n| `mfa_phone_enroll_disabled` | Enrollment of MFA Phone factors is disabled. |\n| `mfa_phone_verify_disabled` | Login via Phone factors and verification of new Phone factors is disabled. |\n| `no_authorization` | This HTTP request requires an `Authorization` header, which is not provided. |\n| `not_admin` | User accessing the API is not admin, i.e. the JWT does not contain a `role` claim that identifies them as an admin of the Auth server. |\n| `oauth_provider_not_supported` | Using an OAuth provider which is disabled on the Auth server. |\n| `otp_disabled` | Sign in with OTPs (magic link, email OTP) is disabled. Check your sever's configuration. |\n| `otp_expired` | OTP code for this sign-in has expired. Ask the user to sign in again. |\n| `over_email_send_rate_limit` | Too many emails have been sent to this email address. Ask the user to wait a while before trying again. |\n| `over_request_rate_limit` | Too many requests have been sent by this client (IP address). Ask the user to try again in a few minutes. Sometimes can indicate a bug in your application that mistakenly sends out too many requests (such as a badly written [`useEffect` React hook](https://react.dev/reference/react/useEffect)). |\n| `over_sms_send_rate_limit` | Too many SMS messages have been sent to this phone number. Ask the user to wait a while before trying again. |\n| `phone_exists` | Phone number already exists in the system. |\n| `phone_not_confirmed` | Signing in is not allowed for this user as the phone number is not confirmed. |\n| `phone_provider_disabled` | Signups are disabled for phone and password. |\n| `provider_disabled` | OAuth provider is disabled for use. Check your server's configuration. |\n| `provider_email_needs_verification` | Not all OAuth providers verify their user's email address. Supabase Auth requires emails to be verified, so this error is sent out when a verification email is sent after completing the OAuth flow. |\n| `reauthentication_needed` | A user needs to reauthenticate to change their password. Ask the user to reauthenticate by calling the `supabase.auth.reauthenticate()` API. |\n| `reauthentication_not_valid` | Verifying a reauthentication failed, the code is incorrect. Ask the user to enter a new code. |\n| `request_timeout` | Processing the request took too long. Retry the request. |\n| `same_password` | A user that is updating their password must use a different password than the one currently used. |\n| `saml_assertion_no_email` | SAML assertion (user information) was received after sign in, but no email address was found in it, which is required. Check the provider's attribute mapping and/or configuration. |\n| `saml_assertion_no_user_id` | SAML assertion (user information) was received after sign in, but a user ID (called NameID) was not found in it, which is required. Check the SAML identity provider's configuration. |\n| `saml_entity_id_mismatch` | (Admin API.) Updating the SAML metadata for a SAML identity provider is not possible, as the entity ID in the update does not match the entity ID in the database. This is equivalent to creating a new identity provider, and you should do that instead. |\n| `saml_idp_already_exists` | (Admin API.) Adding a SAML identity provider that is already added. |\n| `saml_idp_not_found` | SAML identity provider not found. Most often returned after IdP-initiated sign-in with an unregistered SAML identity provider in Supabase Auth. |\n| `saml_metadata_fetch_failed` | (Admin API.) Adding or updating a SAML provider failed as its metadata could not be fetched from the provided URL. |\n| `saml_provider_disabled` | Using [Enterprise SSO with SAML 2.0](https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml) is not enabled on the Auth server. |\n| `saml_relay_state_expired` | SAML relay state is an object that tracks the progress of a `supabase.auth.signInWithSSO()` request. The SAML identity provider should respond after a fixed amount of time, after which this error is shown. Ask the user to sign in again. |\n| `saml_relay_state_not_found` | SAML relay states are progressively cleaned up after they expire, which can cause this error. Ask the user to sign in again. |\n| `session_not_found` | Session to which the API request relates no longer exists. This can occur if the user has signed out, or the session entry in the database was deleted in some other way. |\n| `signup_disabled` | Sign ups (new account creation) are disabled on the server. |\n| `single_identity_not_deletable` | Every user must have at least one identity attached to it, so deleting (unlinking) an identity is not allowed if it's the only one for the user. |\n| `sms_send_failed` | Sending an SMS message failed. Check your SMS provider configuration. |\n| `sso_domain_already_exists` | (Admin API.) Only one SSO domain can be registered per SSO identity provider. |\n| `sso_provider_not_found` | SSO provider not found. Check the arguments in `supabase.auth.signInWithSSO()`. |\n| `too_many_enrolled_mfa_factors` | A user can only have a fixed number of enrolled MFA factors. |\n| `unexpected_audience` | (Deprecated feature not available via Supabase client libraries.) The request's `X-JWT-AUD` claim does not match the JWT's audience. |\n| `unexpected_failure` | Auth service is degraded or a bug is present, without a specific reason. |\n| `user_already_exists` | User with this information (email address, phone number) cannot be created again as it already exists. |\n| `user_banned` | User to which the API request relates has a `banned_until` property which is still active. No further API requests should be attempted until this field is cleared. |\n| `user_not_found` | User to which the API request relates no longer exists. |\n| `user_sso_managed` | When a user comes from SSO, certain fields of the user cannot be updated (like `email`). |\n| `validation_failed` | Provided parameters are not in the expected format. |\n| `weak_password` | User is signing up or changing their password without meeting the password strength criteria. Use the `AuthWeakPasswordError` class to access more information about what they need to do to make the password pass. |\n\n## Best Practices for Error Handling [\\#](\\#best-practices-for-error-handling)\n\n- Always use `error.code` and `error.name` to identify errors, not string matching on error messages.\n- Avoid relying solely on HTTP status codes, as they may change unexpectedly.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/debugging/error-codes",
        "title": "Error Codes | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Error%20Codes&description=Supabase%20Auth%20Error%20Codes",
        "ogTitle": "Error Codes | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/debugging/error-codes",
        "description": "Supabase Auth Error Codes",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Supabase Auth Error Codes",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Phone Login\n\n* * *\n\nPhone Login is a method of authentication that allows users to log in to a website or application without using a password. The user authenticates through a one-time code sent via SMS.\n\nUsers can also log in with their phones using Native Mobile Login with the built-in identity provider. For Native Mobile Login with Android and iOS, see the [Social Login guides](/docs/guides/auth/social-login).\n\nPhone OTP login can:\n\n- Improve the user experience by not requiring users to create and remember a password\n- Increase security by reducing the risk of password-related security breaches\n- Reduce support burden of dealing with password resets and other password-related flows\n\nTo keep SMS sending costs under control, make sure you adjust your project's rate limits and [configure CAPTCHA](/docs/guides/auth/auth-captcha). See the [Production Checklist](/docs/guides/platform/going-into-prod) to learn more.\n\nSome countries have special regulations for services that send SMS messages to users, for example, India's TRAI DLT regulations. Remember to look up and follow the regulations of countries where you operate.\n\n## Enabling Phone Login [\\#](\\#enabling-phone-login)\n\nEnable phone authentication on the [Auth Providers page](/dashboard/project/_/auth/providers) for hosted Supabase projects.\n\nFor self-hosted projects or local development, use the [configuration file](/docs/guides/cli/config#auth.sms.enable_signup). See the configuration variables namespaced under `auth.sms`.\n\nYou also need to set up an SMS provider. Each provider has its own configuration. Supported providers include MessageBird, Twilio, Vonage, and TextLocal (community-supported).\n\n### Configuring SMS Providers\n\n![MessageBird Icon](https://supabase.com/docs/img/icons/messagebird-icon.svg)\n\n##### MessageBird\n\n![Twilio Icon](https://supabase.com/docs/img/icons/twilio-icon.svg)\n\n##### Twilio\n\n![Vonage Icon](https://supabase.com/docs/img/icons/vonage-icon-light.svg)\n\n##### Vonage\n\n![Textlocal (Community Supported) Icon](https://supabase.com/docs/guides/auth/Community%20Supported)\n\n##### Textlocal (Community Supported)\n\nBy default, a user can only request an OTP once every 60 seconds and they expire after 1 hour.\n\n## Signing in with phone OTP [\\#](\\#signing-in-with-phone-otp)\n\nWith OTP, a user can sign in without setting a password on their account. They need to verify their phone number each time they sign in.\n\nJavaScriptSwiftKotlinPythonHTTP\n\n`\n_10\nconst { data, error } = await supabase.auth.signInWithOtp({\n_10\nphone: '+13334445555',\n_10\n})\n`\n\nThe user receives an SMS with a 6-digit pin that you must verify within 60 seconds.\n\n## Verifying a phone OTP [\\#](\\#verifying-a-phone-otp)\n\nTo verify the one-time password (OTP) sent to the user's phone number, call [`verifyOtp()`](/docs/reference/javascript/auth-verifyotp) with the phone number and OTP:\n\nJavaScriptSwiftKotlinPythonHTTP\n\nYou should present a form to the user so they can input the 6 digit pin, then send it along with the phone number to `verifyOtp`:\n\n`\n_10\nconst {\n_10\ndata: { session },\n_10\nerror,\n_10\n} = await supabase.auth.verifyOtp({\n_10\nphone: '13334445555',\n_10\ntoken: '123456',\n_10\ntype: 'sms',\n_10\n})\n`\n\nIf successful the user will now be logged in and you should receive a valid session like:\n\n`\n_10\n{\n_10\n\"access_token\": \"<ACCESS_TOKEN>\",\n_10\n\"token_type\": \"bearer\",\n_10\n\"expires_in\": 3600,\n_10\n\"refresh_token\": \"<REFRESH_TOKEN>\"\n_10\n}\n`\n\nThe access token can be sent in the Authorization header as a Bearer token for any CRUD operations on supabase-js. See our guide on [Row Level Security](/docs/guides/auth#row-level-security) for more info on restricting access on a user basis.\n\n## Updating a phone number [\\#](\\#updating-a-phone-number)\n\nTo update a user's phone number, the user must be logged in. Call [`updateUser()`](/docs/reference/javascript/auth-updateuser) with their phone number:\n\nJavaScriptSwiftPython\n\n`\n_10\nconst { data, error } = await supabase.auth.updateUser({\n_10\nphone: '123456789',\n_10\n})\n`\n\nThe user receives an SMS with a 6-digit pin that you must [verify](#verifying-a-phone-otp) within 60 seconds.\nUse the `phone_change` type when calling `verifyOTP` to update a user\u2019s phone number.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/phone-login",
        "title": "Phone Login | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Phone%20Login&description=Learn%20about%20logging%20in%20to%20your%20platform%20using%20SMS%20one-time%20passwords.",
        "ogTitle": "Phone Login | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/phone-login",
        "description": "Learn about logging in to your platform using SMS one-time passwords.",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Learn about logging in to your platform using SMS one-time passwords.",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Flutter Auth UI\n\n* * *\n\nFlutter Auth UI is a Flutter package containing pre-built widgets for authenticating users.\nIt is unstyled and can match your brand and aesthetic.\n\n![Flutter Auth UI](https://raw.githubusercontent.com/supabase-community/flutter-auth-ui/main/screenshots/supabase_auth_ui.png)\n\n## Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)\n\nAdd the latest version of the package [supabase-auth-ui](https://pub.dev/packages/supabase_auth_ui) to pubspec.yaml:\n\n`\n_10\nflutter pub add supabase_auth_ui\n`\n\n### Initialize the Flutter Auth package [\\#](\\#initialize-the-flutter-auth-package)\n\n`\n_11\nimport 'package:flutter/material.dart';\n_11\nimport 'package:supabase_auth_ui/supabase_auth_ui.dart';\n_11\n_11\nvoid main() async {\n_11\nawait Supabase.initialize(\n_11\n    url: dotenv.get('SUPABASE_URL'),\n_11\n    anonKey: dotenv.get('SUPABASE_ANON_KEY'),\n_11\n);\n_11\n_11\nrunApp(const MyApp());\n_11\n}\n`\n\n### Email Auth [\\#](\\#email-auth)\n\nUse a SupaEmailAuth widget to create an email and password signin and signup form. It also contains a button to toggle to display a forgot password form.\n\nYou can pass metadataFields to add additional fields to the form to pass as metadata to Supabase.\n\n`\n_18\nSupaEmailAuth(\n_18\nredirectTo: kIsWeb ? null : 'io.mydomain.myapp://callback',\n_18\nonSignInComplete: (response) {},\n_18\nonSignUpComplete: (response) {},\n_18\nmetadataFields: [\\\n_18\\\n    MetaDataField(\\\n_18\\\n    prefixIcon: const Icon(Icons.person),\\\n_18\\\n    label: 'Username',\\\n_18\\\n    key: 'username',\\\n_18\\\n    validator: (val) {\\\n_18\\\n            if (val == null || val.isEmpty) {\\\n_18\\\n            return 'Please enter something';\\\n_18\\\n            }\\\n_18\\\n            return null;\\\n_18\\\n          },\\\n_18\\\n        ),\\\n_18\\\n    ],\n_18\n)\n`\n\n### Magic link Auth [\\#](\\#magic-link-auth)\n\nUse SupaMagicAuth widget to create a magic link signIn form.\n\n`\n_10\nSupaMagicAuth(\n_10\nredirectUrl: kIsWeb ? null : 'io.mydomain.myapp://callback',\n_10\nonSuccess: (Session response) {},\n_10\nonError: (error) {},\n_10\n)\n`\n\n### Reset password [\\#](\\#reset-password)\n\nUse SupaResetPassword to create a password reset form.\n\n`\n_10\nSupaResetPassword(\n_10\naccessToken: supabase.auth.currentSession?.accessToken,\n_10\nonSuccess: (UserResponse response) {},\n_10\nonError: (error) {},\n_10\n)\n`\n\n### Phone Auth [\\#](\\#phone-auth)\n\nUse SupaPhoneAuth to create a phone authentication form.\n\n`\n_10\nSupaPhoneAuth(\n_10\nauthAction: SupaAuthAction.signUp,\n_10\nonSuccess: (AuthResponse response) {},\n_10\n),\n`\n\n### Social Auth [\\#](\\#social-auth)\n\nThe package supports login with [official social providers](../../auth#providers).\n\nUse SupaSocialsAuth to create list of social login buttons.\n\n`\n_12\nSupaSocialsAuth(\n_12\nsocialProviders: [\\\n_12\\\n    OAuthProvider.apple,\\\n_12\\\n    OAuthProvider.google,\\\n_12\\\n],\n_12\ncolored: true,\n_12\nredirectUrl: kIsWeb\n_12\n    ? null\n_12\n    : 'io.mydomain.myapp://callback',\n_12\nonSuccess: (Session response) {},\n_12\nonError: (error) {},\n_12\n)\n`\n\n### Theming [\\#](\\#theming)\n\nThis package uses plain Flutter components allowing you to control the appearance of the components using your own theme.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
        "title": "Flutter Auth UI | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Flutter%20Auth%20UI&description=Prebuilt%2C%20customizable%20Flutter%20widgets%20for%20authenticating%20users.",
        "ogTitle": "Flutter Auth UI | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
        "description": "Prebuilt, customizable Flutter widgets for authenticating users.",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Prebuilt, customizable Flutter widgets for authenticating users.",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Enterprise Single Sign-On\n\n* * *\n\nSupabase Auth supports building enterprise applications that require Single Sign-On (SSO) authentication [with SAML 2.0](/docs/guides/auth/sso/auth-sso-saml).",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/enterprise-sso",
        "title": "Enterprise Single Sign-On | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Enterprise%20Single%20Sign-On&description=Learn%20about%20Single%20Sign-On%20support%20in%20Supabase%20Auth%20for%20enterprise%20applications",
        "ogTitle": "Enterprise Single Sign-On | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/enterprise-sso",
        "description": "Learn about Single Sign-On support in Supabase Auth for enterprise applications",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "ogDescription": "Learn about Single Sign-On support in Supabase Auth for enterprise applications",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Rate limits\n\n## Rate limits protect your services from abuse\n\n* * *\n\nSupabase Auth enforces rate limits on endpoints to prevent abuse. Some rate limits are [customizable](/dashboard/project/_/auth/rate-limits).\n\n| Endpoint | Path | Limited By | Rate Limit |\n| --- | --- | --- | --- |\n| All endpoints that send emails | `/auth/v1/signup` `/auth/v1/recover` `/auth/v1/user` [1](#user-content-fn-1) | Sum of combined requests | Defaults to 4 emails per hour as of 14th July 2023. As of 21 Oct 2023, this has been updated to 2 emails per hour. You can only change this with your own custom SMTP setup. |\n| All endpoints that send One-Time-Passwords (OTP) | `/auth/v1/otp` | Sum of combined requests | Defaults to 30 OTPs per hour. Is customizable. |\n| Send OTPs or magiclinks | `/auth/v1/otp` | Last request | Defaults to 60 seconds window before a new request is allowed. Is customizable. |\n| Signup confirmation request | `/auth/v1/signup` | Last request | Defaults to 60 seconds window before a new request is allowed. Is customizable. |\n| Password Reset Request | `/auth/v1/recover` | Last request | Defaults to 60 seconds window before a new request is allowed. Is customizable. |\n| Verification requests | `/auth/v1/verify` | IP Address | 360 requests per hour (with bursts up to 30 requests) |\n| Token refresh requests | `/auth/v1/token` | IP Address | 1800 requests per hour (with bursts up to 30 requests) |\n| Create or Verify an MFA challenge | `/auth/v1/factors/:id/challenge` `/auth/v1/factors/:id/verify` | IP Address | 15 requests per hour (with bursts up to  requests) |\n| Anonymous sign-ins | `/auth/v1/signup` [2](#user-content-fn-2) | IP Address | 30 requests per hour (with bursts up to 30 requests) |\n\n## Footnotes [\\#](\\#footnote-label)\n\n1. The rate limit is only applied on `/auth/v1/user` if this endpoint is called to update the user's email address. [\u21a9](#user-content-fnref-1)\n\n2. The rate limit is only applied on `/auth/v1/signup` if this endpoint is called without passing in an email or phone number in the request body. [\u21a9](#user-content-fnref-2)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/rate-limits",
        "title": "Rate limits | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Rate%20limits&description=undefined",
        "ogTitle": "Rate limits | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/rate-limits",
        "description": "Rate limits protect your services from abuse",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Rate limits protect your services from abuse",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Auth Hooks\n\n## Use HTTP or Postgres Functions to customize your authentication flow\n\n* * *\n\n## What is a hook [\\#](\\#what-is-a-hook)\n\nA hook is an endpoint that allows you to alter the default Supabase Auth flow at specific execution points. Developers can use hooks to add custom behavior that's not supported natively.\n\nHooks help you:\n\n- Track the origin of user signups by adding metadata\n- Improve security by adding additional checks to password and multi-factor authentication\n- Support legacy systems by integrating with identity credentials from external authentication systems\n- Add additional custom claims to your JWT\n- Send authentication emails or SMS messages through a custom provider\n\nThe following hooks are available:\n\n| Hook | Available on Plan |\n| --- | --- |\n| [Custom Access Token](/docs/guides/auth/auth-hooks/custom-access-token-hook) | Free, Pro |\n| [Send SMS](/docs/guides/auth/auth-hooks/send-sms-hook) | Free, Pro |\n| [Send Email](/docs/guides/auth/auth-hooks/send-email-hook) | Free, Pro |\n| [MFA Verification Attempt](/docs/guides/auth/auth-hooks/mfa-verification-hook) | Teams and Enterprise |\n| [Password Verification Attempt](/docs/guides/auth/auth-hooks/password-verification-hook) | Teams and Enterprise |\n\nSupabase supports 2 ways to [configure a hook](/dashboard/project/_/auth/hooks) in your project:\n\nPostgres FunctionHTTP Endpoint\n\nA [postgres function](/docs/guides/database/functions) can be configured as a hook. The function should take in a single argument -- the event of type JSONB -- and return a JSONB object. Since the postgres function runs on your database, the request does not leave your project's instance.\n\n## Security Model [\\#](\\#security-model)\n\nSign the payload and grant permissions selectively in order to guard the integrity of the payload.\n\nSQLHTTP\n\nWhen you configure a postgres function as a hook, Supabase will automatically apply the following grants to the function for these reasons:\n\n- Allow the `supabase_auth_admin` role to execute the function. The `supabase_auth_admin` role is the postgres role that is used by Supabase Auth to make requests to your database.\n- Revoke permissions from other roles (e.g. `anon`, `authenticated`, `public`) to ensure the function is not accessible by Supabase Data APIs.\n\n`\n_12\n-- Grant access to function to supabase_auth_admin\n_12\ngrant execute\n_12\non function public.custom_access_token_hook\n_12\nto supabase_auth_admin;\n_12\n_12\n-- Grant access to schema to supabase_auth_admin\n_12\ngrant usage on schema public to supabase_auth_admin;\n_12\n_12\n-- Revoke function permissions from authenticated, anon and public\n_12\nrevoke execute\n_12\non function public.custom_access_token_hook\n_12\nfrom authenticated, anon, public;\n`\n\n##### Create postgres functions with security invoker\n\nWe do not recommend creating postgres functions with the `security definer` tag. The `security definer` tag specifies that the function is to be executed with the privileges of the user that owns it. Read more about the `security definer` tag [in our database guide](/docs/guides/database/functions#security-definer-vs-invoker).\n\n## Using Hooks [\\#](\\#using-hooks)\n\n### Developing [\\#](\\#developing)\n\nLet us develop a Hook locally and then deploy it to the cloud. As a recap, here\u2019s a list of available Hooks\n\n| Hook | Suggested Function Name | When it is called | What it Does |\n| --- | --- | --- | --- |\n| Send SMS | `send_sms` | Each time an SMS is sent | Allows you to customize message content and SMS Provider |\n| Send Email | `send_email` | Each time an Email is sent | Allows you to customize message content and Email Provider |\n| Custom Access Token | `custom_access_token` | Each time a new JWT is created | Returns the claims you wish to be present in the JWT. |\n| MFA Verification Attempt | `mfa_verification_attempt` | Each time a user tries to verify an MFA factor. | Returns a decision on whether to reject the attempt and future ones, or to allow the user to keep trying. |\n| Password Verification Attempt | `password_verification_attempt` | Each time a user tries to sign in with a password. | Return a decision whether to allow the user to reject the attempt, or to allow the user to keep trying. |\n\nEdit `config.toml` to set up the Auth Hook locally.\n\nSQLHTTP\n\nModify the `auth.hook.<hook_name>` field and set `uri` to a value of `pg-functions://postgres/<schema>/<function_name>`\n\n`\n_10\n[auth.hook.<hook_name>]\n_10\nenabled = true\n_10\nuri = \"pg-functions://....\"\n`\n\nYou need to assign additional permissions so that Supabase Auth can access the hook as well as the tables it interacts with.\n\nThe `supabase_auth_admin` role does not have permissions to the `public` schema. You need to grant the role permission to execute your hook:\n\n`\n_10\ngrant execute\n_10\non function public.custom_access_token_hook\n_10\nto supabase_auth_admin;\n`\n\nYou also need to grant usage to `supabase_auth_admin`:\n\n`\n_10\ngrant usage on schema public to supabase_auth_admin;\n`\n\nAlso revoke permissions from the `authenticated` and `anon` roles to ensure the function is not accessible by Supabase Serverless APIs.\n\n`\n_10\nrevoke execute\n_10\non function public.custom_access_token_hook\n_10\nfrom authenticated, anon;\n`\n\nFor security, we recommend against the use the `security definer` tag. The `security definer` tag specifies that the function is to be executed with the privileges of the user that owns it. When a function is created via the Supabase dashboard with the tag, it will have the extensive permissions of the `postgres` role which make it easier for undesirable actions to occur.\n\nWe recommend that you do not use any tag and explicitly grant permissions to `supabase_auth_admin` as described above.\n\nRead more about `security definer` tag [in our database guide](/docs/guides/database/functions#security-definer-vs-invoker).\n\nThere are no restrictions as to what language can be used to write a Postgres Hook. If [PL/pgSQL](https://www.postgresql.org/docs/current/plpgsql.html) is too difficult consider using the [plv8](/docs/guides/database/extensions/plv8) extension which lets you use JavaScript to define functions.\n\nOnce done, save your Auth Hook as a migration in order to version the Auth Hook and share it with other team members. Run [`supabase migration new`](/docs/reference/cli/supabase-migration-new) to create a migration.\n\nIf you're using the Supabase SQL Editor, there's an issue when using the `?` ( _Does the string exist as a top-level key within the JSON value?_) operator. Use a direct connection to the database if you need to use it when defining a function.\n\nHere is an example hook signature:\n\n`\n_11\ncreate or replace function public.custom_access_token_hook(event jsonb)\n_11\nreturns jsonb\n_11\nlanguage plpgsql\n_11\nas $$\n_11\ndeclare\n_11\n  -- Insert variables here\n_11\nbegin\n_11\n  -- Insert logic here\n_11\nreturn event;\n_11\nend;\n_11\n$$;\n`\n\nYou can visit `SQL Editor > Templates` for hook templates.\n\n### Deploying [\\#](\\#deploying)\n\nIn the dashboard, navigate to [`Authentication > Hooks`](/dashboard/project/_/auth/hooks) and select the appropriate function type (SQL or HTTP) from the dropdown menu.\n\n### Error Handling [\\#](\\#error-handling)\n\nYou should return an error when facing a runtime error. Runtime errors are specific to your application and arise from specific business rules rather than programmer errors.\n\nRuntime errors could happen when:\n\n- The user does not have appropriate permissions\n- The event payload received does not have required claims.\n- The user has performed an action which violates a business rule.\n- The email or phone provider used in the webhook returned an error.\n\nSQLHTTP\n\nThe error is a JSON object and has the following properties:\n\n- `error` An object that contains information about the error.\n  - `http_code` A number indicating the HTTP code to be returned. If not set, the code is HTTP 500 Internal Server Error.\n  - `message` A message to be returned in the HTTP response. Required.\n\nHere's an example:\n\n`\n_10\n{\n_10\n\"error\": {\n_10\n    \"http_code\": 429,\n_10\n    \"message\": \"You can only verify a factor once every 10 seconds.\"\n_10\n}\n_10\n}\n`\n\nErrors returned from a Postgres Hook are not retry-able. When an error is returned, the error is propagated from the hook to Supabase Auth and translated into a HTTP error which is returned to your application. Supabase Auth will only take into account the error and disregard the rest of the payload.\n\nOutside of runtime errors, both HTTP Hooks and Postgres Hooks return timeout errors. Postgres Hooks have 2 seconds to complete processing while HTTP Hooks should complete in 5 seconds. Both HTTP Hooks and Postgres Hooks are run in a transaction do limit the duration of execution to avoid delays in authentication process.\n\n## Available Hooks [\\#](\\#available-hooks)\n\nEach Hook description contains an example JSONSchema which you can use in conjunction with [JSONSchema Faker](https://json-schema-faker.js.org/) in order to generate a mock payload. For HTTP Hooks, you can also use [the Standard Webhooks Testing Tool](https://www.standardwebhooks.com/simulate) to simulate a request.\n\n[Custom Access Token\\\\\n\\\\\nCustomize the access token issued by Supabase Auth](/docs/guides/auth/auth-hooks/custom-access-token-hook)\n\n[Send SMS\\\\\n\\\\\nUse a custom SMS provider to send authentication messages](/docs/guides/auth/auth-hooks/send-sms-hook)\n\n[Send Email\\\\\n\\\\\nUse a custom email provider to send authentication messages](/docs/guides/auth/auth-hooks/send-email-hook)\n\n[MFA Verification\\\\\n\\\\\nAdd additional checks to the MFA verification flow](/docs/guides/auth/auth-hooks/mfa-verification-hook)\n\n[Password verification\\\\\n\\\\\nAdd additional checks to the password verification flow](/docs/guides/auth/auth-hooks/password-verification-hook)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-hooks",
        "title": "Auth Hooks | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Auth%20Hooks&description=undefined",
        "ogTitle": "Auth Hooks | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-hooks",
        "description": "Use HTTP or Postgres Functions to customize your authentication flow",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "ogDescription": "Use HTTP or Postgres Functions to customize your authentication flow",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# User Management\n\n## View, delete, and export user information.\n\n* * *\n\nYou can view your users on the [Users page](/dashboard/project/_/auth/users) of the Dashboard. You can also view the contents of the Auth schema in the [Table Editor](/dashboard/project/_/editor).\n\n## Accessing user data via API [\\#](\\#accessing-user-data-via-api)\n\nFor security, the Auth schema is not exposed in the auto-generated API. If you want to access users data via the API, you can create your own user tables in the `public` schema.\n\nMake sure to protect the table by enabling [Row Level Security](/docs/guides/database/postgres/row-level-security). Reference the `auth.users` table to ensure data integrity. Specify `on delete cascade` in the reference. For example, a `public.profiles` table might look like this:\n\n`\n_10\ncreate table public.profiles (\n_10\nid uuid not null references auth.users on delete cascade,\n_10\nfirst_name text,\n_10\nlast_name text,\n_10\n_10\nprimary key (id)\n_10\n);\n_10\n_10\nalter table public.profiles enable row level security;\n`\n\nOnly use primary keys as [foreign key references](https://www.postgresql.org/docs/current/tutorial-fk.html) for schemas and tables like `auth.users` which are managed by Supabase. PostgreSQL lets you specify a foreign key reference for columns backed by a unique index (not necessarily primary keys).\n\nPrimary keys are **guaranteed not to change**. Columns, indices, constraints or other database objects managed by Supabase **may change at any time** and you should be careful when referencing them directly.\n\nTo update your `public.profiles` table every time a user signs up, set up a trigger. If the trigger fails, it could block signups, so test your code thoroughly.\n\n`\n_17\n-- inserts a row into public.profiles\n_17\ncreate function public.handle_new_user()\n_17\nreturns trigger\n_17\nlanguage plpgsql\n_17\nsecurity definer set search_path = ''\n_17\nas $$\n_17\nbegin\n_17\ninsert into public.profiles (id, first_name, last_name)\n_17\nvalues (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name');\n_17\nreturn new;\n_17\nend;\n_17\n$$;\n_17\n_17\n-- trigger the function every time a user is created\n_17\ncreate trigger on_auth_user_created\n_17\nafter insert on auth.users\n_17\nfor each row execute procedure public.handle_new_user();\n`\n\n## Adding and retrieving user metadata [\\#](\\#adding-and-retrieving-user-metadata)\n\nYou can assign metadata to users on sign up:\n\nJavaScriptDartSwiftKotlin\n\n`\n_10\nconst { data, error } = await supabase.auth.signUp({\n_10\nemail: 'example@email.com',\n_10\npassword: 'example-password',\n_10\noptions: {\n_10\n    data: {\n_10\n      first_name: 'John',\n_10\n      age: 27,\n_10\n    },\n_10\n},\n_10\n})\n`\n\nUser metadata is stored on the `raw_user_meta_data` column of the `auth.users` table. To view the metadata:\n\nJavaScriptDartSwiftKotlin\n\n`\n_10\nconst {\n_10\ndata: { user },\n_10\n} = await supabase.auth.getUser()\n_10\nlet metadata = user.user_metadata\n`\n\n## Deleting users [\\#](\\#deleting-users)\n\nYou may delete users directly or via the management console at Authentication > Users. Note that deleting a user from the `auth.users` table does not automatically sign out a user. As Supabase makes use of JSON Web Tokens (JWT), a user's JWT will remain \"valid\" until it has expired. Should you wish to immediately revoke access for a user, do consider making use of a Row Level Security policy as described below.\n\nYou cannot delete a user if they are the owner of any objects in Supabase Storage.\n\nYou will encounter an error when you try to delete an Auth user that owns any Storage objects. If this happens, try deleting all the objects for that user, or reassign ownership to another user.\n\n## Exporting users [\\#](\\#exporting-users)\n\nAs Supabase is built on top of Postgres, you can query the `auth.users` and `auth.identities` table via the `SQL Editor` tab to extract all users:\n\n`\n_10\nselect * from auth.users;\n`\n\nYou can then export the results as CSV.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/managing-user-data",
        "title": "User Management | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=User%20Management&description=undefined",
        "ogTitle": "User Management | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/managing-user-data",
        "description": "View, delete, and export user information.",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "View, delete, and export user information.",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Signing out\n\n## Signing out a user\n\n* * *\n\nSigning out a user works the same way no matter what method they used to sign in.\n\nCall the sign out method from the client library. It removes the active session and clears Auth data from the storage medium.\n\nJavaScriptDartSwiftKotlinPython\n\n`\n_10\nasync function signOut() {\n_10\nconst { error } = await supabase.auth.signOut()\n_10\n}\n`\n\n## Sign out and scopes [\\#](\\#sign-out-and-scopes)\n\nSupabase Auth allows you to specify three different scopes for when a user invokes the [sign out API](/docs/reference/javascript/auth-signout) in your application:\n\n- `global` (default) when all sessions active for the user are terminated.\n- `local` which only terminates the current session for the user but keep sessions on other devices or browsers active.\n- `others` to terminate all but the current session for the user.\n\nYou can invoke these by providing the `scope` option:\n\nJavaScriptDartKotlin\n\n`\n_10\n// defaults to the global scope\n_10\nawait supabase.auth.signOut()\n_10\n_10\n// sign out from the current session only\n_10\nawait supabase.auth.signOut({ scope: 'local' })\n`\n\nUpon sign out, all refresh tokens and potentially other database objects related to the affected sessions are destroyed and the client library removes the session stored in the local storage medium.\n\nAccess Tokens of revoked sessions remain valid until their expiry time, encoded in the `exp` claim. The user won't be immediately logged out and will only be logged out when the Access Token expires.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/signout",
        "title": "Signing out | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Signing%20out&description=undefined",
        "ogTitle": "Signing out | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/signout",
        "description": "Signing out a user",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Signing out a user",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Server-Side Rendering\n\n## How SSR works with Supabase Auth.\n\n* * *\n\nSSR frameworks move rendering and data fetches to the server, to reduce client bundle size and execution time.\n\nSupabase Auth is fully compatible with SSR. You need to make a few changes to the configuration of your Supabase client, to store the user session in cookies instead of local storage. After setting up your Supabase client, follow the instructions for any flow in the How-To guides.\n\nMake sure to use the PKCE flow instructions where those differ from the implicit flow instructions. If no difference is mentioned, don't worry about this.\n\n## `@supabase/ssr` [\\#](\\#supabasessr)\n\nWe have developed an [`@supabase/ssr`](https://www.npmjs.com/package/@supabase/ssr) package to make setting up the Supabase client as simple as possible. This package is currently in beta. Adoption is recommended but be aware that the API is still unstable and may have breaking changes in the future.\n\nIf you're currently using the [Auth Helpers package](https://github.com/supabase/auth-helpers), the [docs are still available](/docs/guides/auth/auth-helpers), however we recommend migrating to the new `@supabase/ssr` package as this will be the recommended path moving forward.\n\n## Framework quickstarts [\\#](\\#framework-quickstarts)\n\n[![Next.js](https://supabase.com/docs/img/icons/nextjs-icon.svg)\\\\\n\\\\\nNext.js\\\\\n\\\\\nAutomatically configure Supabase in Next.js to use cookies, making your user and their session available on the client and server.](/docs/guides/auth/server-side/nextjs) [![SvelteKit](https://supabase.com/docs/img/icons/svelte-icon.svg)\\\\\n\\\\\nSvelteKit\\\\\n\\\\\nAutomatically configure Supabase in SvelteKit to use cookies, making your user and their session available on the client and server.](/docs/guides/auth/server-side/sveltekit)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/server-side",
        "title": "Server-Side Rendering | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Server-Side%20Rendering&description=undefined",
        "ogTitle": "Server-Side Rendering | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/server-side",
        "description": "How SSR works with Supabase Auth.",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "How SSR works with Supabase Auth.",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Redirect URLs\n\n## Set up redirect urls with Supabase Auth.\n\n* * *\n\n## Overview [\\#](\\#overview)\n\nWhen using [passwordless sign-ins](/docs/reference/javascript/auth-signinwithotp) or [third-party providers](/docs/reference/javascript/auth-signinwithoauth#sign-in-using-a-third-party-provider-with-redirect), the Supabase client library methods provide a `redirectTo` parameter to specify where to redirect the user to after authentication. By default, the user will be redirected to the [`SITE_URL`](/docs/guides/auth/redirect-urls) but you can modify the `SITE_URL` or add additional redirect URLs to the allow list. Once you've added necessary URLs to the allow list, you can specify the URL you want the user to be redirected to in the `redirectTo` parameter.\n\nTo edit the allow list, go to the [URL Configuration](/dashboard/project/_/auth/url-configuration) page. In local development or self-hosted projects, use the [configuration file](/docs/guides/cli/config#auth.additional_redirect_urls).\n\n## Use wildcards in redirect URLs [\\#](\\#use-wildcards-in-redirect-urls)\n\nSupabase allows you to specify wildcards when adding redirect URLs to the [allow list](https://supabase.com/dashboard/project/_/auth/url-configuration). You can use wildcard match patterns to support preview URLs from providers like Netlify and Vercel.\n\n| Wildcard | Description |\n| --- | --- |\n| `*` | matches any sequence of non-separator characters |\n| `**` | matches any sequence of characters |\n| `?` | matches any single non-separator character |\n| `c` | matches character c (c != `*`, `**`, `?`, `\\`, `[`, `{`, `}`) |\\\n| `\\c` | matches character c |\\\n| `[!{ character-range }]` | matches any sequence of characters not in the `{ character-range }`. For example, `[!a-z]` will not match any characters ranging from a-z. |\\\n\\\nThe separator characters in a URL are defined as `.` and `/`. Use [this tool](https://www.digitalocean.com/community/tools/glob?comments=true&glob=http%3A%2F%2Flocalhost%3A3000%2F%2A%2A&matches=false&tests=http%3A%2F%2Flocalhost%3A3000&tests=http%3A%2F%2Flocalhost%3A3000%2F&tests=http%3A%2F%2Flocalhost%3A3000%2F%3Ftest%3Dtest&tests=http%3A%2F%2Flocalhost%3A3000%2Ftest-test%3Ftest%3Dtest&tests=http%3A%2F%2Flocalhost%3A3000%2Ftest%2Ftest%3Ftest%3Dtest) to test your patterns.\\\n\\\n##### Recommendation\\\n\\\nWhile the \"globstar\" ( `**`) is useful for local development and preview URLs, we recommend setting the exact redirect URL path for your site URL in production.\\\n\\\n### Redirect URL examples with wildcards [\\#](\\#redirect-url-examples-with-wildcards)\\\n\\\n| Redirect URL | Description |\\\n| --- | --- |\\\n| `http://localhost:3000/*` | matches `http://localhost:3000/foo`, `http://localhost:3000/bar` but not `http://localhost:3000/foo/bar` or `http://localhost:3000/foo/` (note the trailing slash) |\\\n| `http://localhost:3000/**` | matches `http://localhost:3000/foo`, `http://localhost:3000/bar` and `http://localhost:3000/foo/bar` |\\\n| `http://localhost:3000/?` | matches `http://localhost:3000/a` but not `http://localhost:3000/foo` |\\\n| `http://localhost:3000/[!a-z]` | matches `http://localhost:3000/1` but not `http://localhost:3000/a` |\\\n\\\n## Netlify preview URLs [\\#](\\#netlify-preview-urls)\\\n\\\nFor deployments with Netlify, set the `SITE_URL` to your official site URL. Add the following additional redirect URLs for local development and deployment previews:\\\n\\\n- `http://localhost:3000/**`\\\n- `https://**--my_org.netlify.app/**`\\\n\\\n## Vercel preview URLs [\\#](\\#vercel-preview-urls)\\\n\\\nFor deployments with Vercel, set the `SITE_URL` to your official site URL. Add the following additional redirect URLs for local development and deployment previews:\\\n\\\n- `http://localhost:3000/**`\\\n- `https://*-<team-or-account-slug>.vercel.app/**`\\\n\\\nVercel provides an environment variable for the URL of the deployment called `NEXT_PUBLIC_VERCEL_URL`. See the [Vercel docs](https://vercel.com/docs/concepts/projects/environment-variables#system-environment-variables) for more details. You can use this variable to dynamically redirect depending on the environment. You should also set the value of the environment variable called NEXT\\_PUBLIC\\_SITE\\_URL, this should be set to your site URL in production environment to ensure that redirects function correctly.\\\n\\\n``\\\n_18\\\nconst getURL = () => {\\\n_18\\\nlet url =\\\n_18\\\n    process?.env?.NEXT_PUBLIC_SITE_URL ?? // Set this to your site URL in production env.\\\n_18\\\n    process?.env?.NEXT_PUBLIC_VERCEL_URL ?? // Automatically set by Vercel.\\\n_18\\\n    'http://localhost:3000/'\\\n_18\\\n// Make sure to include `https://` when not localhost.\\\n_18\\\nurl = url.startsWith('http') ? url : `https://${url}`\\\n_18\\\n// Make sure to include a trailing `/`.\\\n_18\\\nurl = url.endsWith('/') ? url : `${url}/`\\\n_18\\\nreturn url\\\n_18\\\n}\\\n_18\\\n_18\\\nconst { data, error } = await supabase.auth.signInWithOAuth({\\\n_18\\\nprovider: 'github',\\\n_18\\\noptions: {\\\n_18\\\n    redirectTo: getURL(),\\\n_18\\\n},\\\n_18\\\n})\\\n``\\\n\\\n## Email templates when using `redirectTo` [\\#](\\#email-templates-when-using-redirectto)\\\n\\\nWhen using a `redirectTo` option, you may need to replace the `{{ .SiteURL }}` with `{{ .RedirectTo }}` in your email templates. See the [Email Templates guide](/docs/guides/auth/auth-email-templates) for more information.\\\n\\\nFor example, change the following:\\\n\\\n`\\\n_10\\\n<!-- Old -->\\\n_10\\\n<a href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=signup\">Confirm your mail</a>\\\n_10\\\n_10\\\n<!-- New -->\\\n_10\\\n<a href=\"{{ .RedirectTo }}/auth/confirm?token_hash={{ .TokenHash }}&type=signup\"\\\n_10\\\n>Confirm your mail</a\\\n_10\\\n>\\\n`\\\n\\\n## Mobile deep linking URIs [\\#](\\#mobile-deep-linking-uris)\\\n\\\nFor mobile applications you can use deep linking URIs. For example, for your `SITE_URL` you can specify something like `com.supabase://login-callback/` and for additional redirect URLs something like `com.supabase.staging://login-callback/` if needed.\\\n\\\nRead more about deep linking and find code examples for different frameworks [here](/docs/guides/auth/native-mobile-deep-linking).\\\n\\\n## Error Handling [\\#](\\#error-handling)\\\n\\\nWhen authentication fails, the user will still be redirected to the redirect URL provided. However, the error details will be returned as query fragments in the URL. You can parse these query fragments and show a custom error message to the user. For example:\\\n\\\n`\\\n_10\\\nconst params = new URLSearchParams(window.location.hash.slice())\\\n_10\\\n_10\\\nif (params.get('error_code').startsWith('4')) {\\\n_10\\\n// show error message if error is a 4xx error\\\n_10\\\nwindow.alert(params.get('error_description'))\\\n_10\\\n}\\\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/redirect-urls",
        "title": "Redirect URLs | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Redirect%20URLs&description=Set%20up%20redirect%20urls%20with%20Supabase%20Auth.",
        "ogTitle": "Redirect URLs | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/redirect-urls",
        "description": "Set up redirect urls with Supabase Auth.",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Set up redirect urls with Supabase Auth.",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Email Templates\n\n## Learn how to manage the email templates in Supabase.\n\n* * *\n\nYou can customize the email messages used for the authentication flows. You can edit the following email templates:\n\n- Confirm signup\n- Invite user\n- Magic Link\n- Change Email Address\n- Reset Password\n\n## Terminology [\\#](\\#terminology)\n\nThe templating system provides the following variables for use:\n\n| Name | Description |\n| --- | --- |\n| `{{ .ConfirmationURL }}` | Contains the confirmation URL. For example, a signup confirmation URL would look like: `https://project-ref.supabase.co/auth/v1/verify?token={{ .TokenHash }}&type=signup&redirect_to=https://example.com/path` . |\n| `{{ .Token }}` | Contains a 6-digit One-Time-Password (OTP) that can be used instead of the `{{. ConfirmationURL }}` . |\n| `{{ .TokenHash }}` | Contains a hashed version of the `{{ .Token }}`. This is useful for constructing your own email link in the email template. |\n| `{{ .SiteURL }}` | Contains your application's Site URL. This can be configured in your project's [authentication settings](/dashboard/project/_/auth/url-configuration). |\n| `{{ .RedirectTo }}` | Contains the redirect URL passed when `signUp`, `signInWithOtp`, `signInWithOAuth`, `resetPasswordForEmail` or `inviteUserByEmail` is called. The redirect URL allow list can be configured in your project's [authentication settings](/dashboard/project/_/auth/url-configuration). |\n| `{{ .Data }}` | Contains metadata from `auth.users.user_metadata`. Use this to personalize the email message. |\n\n## Editing email templates [\\#](\\#editing-email-templates)\n\nOn hosted Supabase projects, edit your email templates on the [Email Templates](/dashboard/project/_/auth/templates) page. On self-hosted projects or in local development, edit your [configuration files](/docs/guides/cli/customizing-email-templates).\n\n## Mobile Deep Linking [\\#](\\#mobile-deep-linking)\n\nFor mobile applications, you might need to link or redirect to a specific page within your app. See the [Mobile Deep Linking guide](/docs/guides/auth/native-mobile-deep-linking) to set this up.\n\n## Limitations [\\#](\\#limitations)\n\n### Email prefetching [\\#](\\#email-prefetching)\n\nCertain email providers may have spam detection or other security features that prefetch URL links from incoming emails (e.g. [Safe Links in Microsoft Defender for Office 365](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/safe-links-about?view=o365-worldwide)).\nIn this scenario, the `{{ .ConfirmationURL }}` sent will be consumed instantly which leads to a \"Token has expired or is invalid\" error.\nTo guard against this:\n\n- Use an email OTP instead by including `{{ .Token }}` in the email template.\n\n- Create your own custom email link to redirect the user to a page where they can click on a button to confirm the action.\nFor example, you can include the following in your email template:\n\n\n\n`\n_10\n<a href=\"{{ .SiteURL }}/confirm-signup?confirmation_url={{ .ConfirmationURL }}\"\n_10\n>Confirm your signup\n_10\n</a>\n`\n\n\n\nThe user should be brought to a page on your site where they can confirm the action by clicking a button.\nThe button should contain the actual confirmation link which can be obtained from parsing the `confirmation_url={{ .ConfirmationURL }}` query parameter in the URL.\n\n\n### Email tracking [\\#](\\#email-tracking)\n\nIf you are using an external email provider that enables \"email tracking\", the links inside the Supabase email templates will be overwritten and won't perform as expected. We recommend disabling email tracking to ensure email links are not overwritten.\n\n### Redirecting the user to a server-side endpoint [\\#](\\#redirecting-the-user-to-a-server-side-endpoint)\n\nIf you intend to use [Server-side rendering](/docs/guides/auth/server-side-rendering), you might want the email link to redirect the user to a server-side endpoint to check if they are authenticated before returning the page. However, the default email link will redirect the user after verification to the redirect URL with the session in the query fragments. Since the session is returned in the query fragments by default, you won't be able to access it on the server-side.\n\nYou can customize the email link in the email template to redirect the user to a server-side endpoint successfully. For example:\n\n`\n_10\n<a\n_10\nhref=\"https://api.example.com/v1/authenticate?token_hash={{ .TokenHash }}&type=invite&redirect_to={{ .RedirectTo }}\"\n_10\n>Accept the invite\n_10\n</a>\n`\n\nWhen the user clicks on the link, the request will hit `https://api.example.com/v1/authenticate` and you can grab the `token_hash`, `type` and `redirect_to` query parameters from the URL. Then, you can call the [`verifyOtp`](/docs/reference/javascript/auth-verifyotp) method to get back an authenticated session before redirecting the user back to the client. Since the `verifyOtp` method makes a `POST` request to Supabase Auth to verify the user, the session will be returned in the response body, which can be read by the server. For example:\n\n`\n_10\nconst { token_hash, type } = Object.fromEntries(new URLSearchParams(window.location.search))\n_10\nconst {\n_10\ndata: { session },\n_10\nerror,\n_10\n} = await supabase.auth.verifyOtp({ token_hash, type })\n_10\n_10\n// subsequently redirect the user back to the client using the redirect_to param\n_10\n// ...\n`\n\n## Customization [\\#](\\#customization)\n\nSupabase Auth makes use of [Go Templates](https://pkg.go.dev/text/template). This means it is possible to conditionally render information based on template properties.You may wish to checkout this [guide by Hugo](https://gohugo.io/templates/introduction/) for a guide on the templating language.\n\n### Send different email to early access users [\\#](\\#send-different-email-to-early-access-users)\n\nSend a different email to users who signed up via an early access domain ( `https://www.earlyaccess.trial.com`).\n\n`\n_14\n{{ if eq .Data.Domain \"https://www.example.com\" }}\n_14\n<h1>Welcome to Our Database Service!</h1>\n_14\n<p>Dear Developer,</p>\n_14\n<p>Welcome to Billy, the scalable developer platform!</p>\n_14\n<p>Best Regards,<br>\n_14\nBilly Team</p>\n_14\n{{ else if eq .Data.Domain \"https://www.earlyaccess.trial.com\" }}\n_14\n<h1>Welcome to Our Database Service!</h1>\n_14\n<p>Dear Developer,</p>\n_14\n<p>Welcome Billy, the scalable developer platform!</p>\n_14\n<p> As an early access member, you have access to select features like Point To Space Restoration.</p>\n_14\n<p>Best Regards,<br>\n_14\nBilly Team</p>\n_14\n{{ end }}\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-email-templates",
        "title": "Email Templates | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Email%20Templates&description=Learn%20how%20to%20manage%20the%20email%20templates%20in%20Supabase.",
        "ogTitle": "Email Templates | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-email-templates",
        "description": "Learn how to manage the email templates in Supabase.",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Learn how to manage the email templates in Supabase.",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Passwordless email logins\n\n## Email logins using Magic Links or One-Time Passwords (OTPs)\n\n* * *\n\nSupabase Auth provides several passwordless login methods. Passwordless logins allow users to sign in without a password, by clicking a confirmation link or entering a verification code.\n\nPasswordless login can:\n\n- Improve the user experience by not requiring users to create and remember a password\n- Increase security by reducing the risk of password-related security breaches\n- Reduce support burden of dealing with password resets and other password-related flows\n\nSupabase Auth offers two passwordless login methods that use the user's email address:\n\n- [Magic Link](#with-magic-link)\n- [OTP](#with-otp)\n\n## With Magic Link [\\#](\\#with-magic-link)\n\nMagic Links are a form of passwordless login where users click on a link sent to their email address to log in to their accounts. Magic Links only work with email addresses and are one-time use only.\n\n### Enabling Magic Link [\\#](\\#enabling-magic-link)\n\nEmail authentication methods, including Magic Links, are enabled by default.\n\nConfigure the Site URL and any additional redirect URLs. These are the only URLs that are allowed as redirect destinations after the user clicks a Magic Link. You can change the URLs on the [Auth Providers page](/dashboard/project/_/auth/providers) for hosted projects, or in the [configuration file](/docs/guides/cli/config#auth.additional_redirect_urls) for self-hosted projects.\n\nBy default, a user can only request a magic link once every 60 seconds and they expire after 1 hour.\n\n### Signing in with Magic Link [\\#](\\#signing-in-with-magic-link)\n\nCall the \"sign in with OTP\" method from the client library.\n\nThough the method is labelled \"OTP\", it sends a Magic Link by default. The two methods differ only in the content of the confirmation email sent to the user.\n\nIf the user hasn't signed up yet, they are automatically signed up by default. To prevent this, set the `shouldCreateUser` option to `false`.\n\nJavaScriptExpo React NativeDartSwiftKotlinPython\n\n`\n_10\nasync function signInWithEmail() {\n_10\nconst { data, error } = await supabase.auth.signInWithOtp({\n_10\n    email: 'example@email.com',\n_10\n    options: {\n_10\n      // set this to false if you do not want the user to be automatically signed up\n_10\n      shouldCreateUser: false,\n_10\n      emailRedirectTo: 'https://example.com/welcome',\n_10\n    },\n_10\n})\n_10\n}\n`\n\nThat's it for the implicit flow.\n\nIf you're using PKCE flow, edit the Magic Link [email template](/docs/guides/auth/auth-email-templates) to send a token hash:\n\n`\n_10\n<h2>Magic Link</h2>\n_10\n_10\n<p>Follow this link to login:</p>\n_10\n<p><a href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=magiclink\">Log In</a></p>\n`\n\nAt the `/auth/confirm` endpoint, exchange the hash for the session:\n\n`\n_10\nconst { error } = await supabase.auth.verifyOtp({ token_hash, type })\n`\n\n## With OTP [\\#](\\#with-otp)\n\nEmail one-time passwords (OTP) are a form of passwordless login where users key in a six digit code sent to their email address to log in to their accounts.\n\n### Enabling Email OTP [\\#](\\#enabling-email-otp)\n\nEmail authentication methods, including Email OTPs, are enabled by default.\n\nEmail OTPs share an implementation with Magic Links. To send an OTP instead of a Magic Link, alter the **Magic Link** email template. For a hosted Supabase project, go to [Email Templates](/dashboard/project/_/auth/templates) in the Dashboard. For a self-hosted project or local development, see the [Email Templates guide](/docs/guides/auth/auth-email-templates).\n\nModify the template to include the `{{ .Token }}` variable, for example:\n\n`\n_10\n<h2>One time login code</h2>\n_10\n_10\n<p>Please enter this code: {{ .Token }}</p>\n`\n\nBy default, a user can only request an OTP once every 60 seconds and they expire after 1 hour. This is configurable via `Auth > Providers > Email > Email OTP Expiration`. An expiry duration of more than 86400 seconds (one day) is disallowed to guard against brute force attacks. The longer an OTP remains valid, the more time an attacker has to attempt brute force attacks. If the OTP is valid for several days, an attacker might have more opportunities to guess the correct OTP through repeated attempts.\n\n### Signing in with Email OTP [\\#](\\#signing-in-with-email-otp)\n\n#### Step 1: Send the user an OTP code [\\#](\\#step-1-send-the-user-an-otp-code)\n\nGet the user's email and call the \"sign in with OTP\" method from your client library.\n\nIf the user hasn't signed up yet, they are automatically signed up by default. To prevent this, set the `shouldCreateUser` option to `false`.\n\nJavaScriptDartSwiftKotlinPython\n\n`\n_10\nconst { data, error } = await supabase.auth.signInWithOtp({\n_10\nemail: 'example@email.com',\n_10\noptions: {\n_10\n    // set this to false if you do not want the user to be automatically signed up\n_10\n    shouldCreateUser: false,\n_10\n},\n_10\n})\n`\n\nIf the request is successful, you receive a response with `error: null` and a `data` object where both `user` and `session` are null. Let the user know to check their email inbox.\n\n`\n_10\n{\n_10\n\"data\": {\n_10\n    \"user\": null,\n_10\n    \"session\": null\n_10\n},\n_10\n\"error\": null\n_10\n}\n`\n\n#### Step 2: Verify the OTP to create a session [\\#](\\#step-2-verify-the-otp-to-create-a-session)\n\nProvide an input field for the user to enter their one-time code.\n\nCall the \"verify OTP\" method from your client library with the user's email address, the code, and a type of `email`:\n\nJavaScriptSwiftKotlinPython\n\n`\n_10\nconst {\n_10\ndata: { session },\n_10\nerror,\n_10\n} = await supabase.auth.verifyOtp({\n_10\nemail,\n_10\ntoken: '123456',\n_10\ntype: 'email',\n_10\n})\n`\n\nIf successful, the user is now logged in, and you receive a valid session that looks like:\n\n`\n_10\n{\n_10\n\"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjI3MjkxNTc3LCJzdWIiOiJmYTA2NTQ1Zi1kYmI1LTQxY2EtYjk1NC1kOGUyOTg4YzcxOTEiLCJlbWFpbCI6IiIsInBob25lIjoiNjU4NzUyMjAyOSIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6InBob25lIn0sInVzZXJfbWV0YWRhdGEiOnt9LCJyb2xlIjoiYXV0aGVudGljYXRlZCJ9.1BqRi0NbS_yr1f6hnr4q3s1ylMR3c1vkiJ4e_N55dhM\",\n_10\n\"token_type\": \"bearer\",\n_10\n\"expires_in\": 3600,\n_10\n\"refresh_token\": \"LSp8LglPPvf0DxGMSj-vaQ\",\n_10\n\"user\": {...}\n_10\n}\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
        "title": "Passwordless email logins | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Passwordless%20email%20logins&description=undefined",
        "ogTitle": "Passwordless email logins | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
        "description": "Email logins using Magic Links or One-Time Passwords (OTPs)",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "ogDescription": "Email logins using Magic Links or One-Time Passwords (OTPs)",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Third-party auth\n\n## First-class support for authentication providers\n\n* * *\n\nSupabase has first-class support for these third-party authentication providers:\n\n- [Firebase Auth](/docs/guides/auth/third-party/firebase-auth)\n- [Auth0](/docs/guides/auth/third-party/auth0)\n- [AWS Cognito (with or without AWS Amplify)](/docs/guides/auth/third-party/aws-cognito)\n\nYou can use these providers alongside Supabase Auth, or on their own, to access the [Data API (REST and GraphQL)](/docs/guides/database), [Storage](/docs/guides/storage), [Realtime](/docs/guides/storage) and [Functions](/docs/guides/functions) from your existing apps.\n\nIf you already have production apps using one of these authentication providers, and would like to use a Supabase feature, you no longer need to migrate your users to Supabase Auth or use work-arounds like translating JWTs into the Supabase Auth format and using your project's signing secret.\n\n## How does it work? [\\#](\\#how-does-it-work)\n\nTo use Supabase products like Data APIs for your Postgres database, Storage or Realtime, you often need to send access tokens or JWTs via the Supabase client libraries or via the REST API. Third-party auth support means that when you add a new integration with one of these providers, the API will trust JWTs issued by the provider similar to how it trusts JWTs issued by Supabase Auth.\n\nThis is made possible if the providers are using JWTs signed with asymmetric keys, which means that the Supabase APIs will be able to only verify but not create JWTs.\n\n## Limitations [\\#](\\#limitations)\n\nThere are some limitations you should be aware of when using third-party authentication providers with Supabase.\n\n1. The third-party provider must use asymmetrically signed JWTs (exposed as an OIDC Issuer Discovery URL by the third-party authentication provider). Using symmetrically signed JWTs is not possible at this time.\n2. The JWT signing keys from the third-party provider are stored in the configuration of your project, and are checked for changes periodically. If you are rotating your keys (when supported) allow up to 30 minutes for the change to be picked up.\n3. It is not possible to disable Supabase Auth at this time.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/third-party/overview",
        "title": "Third-party auth | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Third-party%20auth&description=undefined",
        "ogTitle": "Third-party auth | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/third-party/overview",
        "description": "First-class support for authentication providers",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "First-class support for authentication providers",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Anonymous Sign-Ins\n\n## Create and use anonymous users to authenticate with Supabase\n\n* * *\n\n[Enable Anonymous Sign-Ins](/dashboard/project/_/settings/auth) to build apps which provide users an authenticated experience without requiring users to enter an email address, password, use an OAuth provider or provide any other PII (Personally Identifiable Information). Later, when ready, the user can link an authentication method to their account.\n\n##### Anonymous user vs the anon key\n\nCalling `signInAnonymously()` creates an anonymous user. It's just like a permanent user, except the user can't access their account if they sign out, clear browsing data, or use another device.\n\nLike permanent users, the `authenticated` Postgres role will be used when using the Data APIs to access your project. JWTs for these users will have an `is_anonymous` claim which you can use to distinguish in RLS policies.\n\nThis is different from the `anon` API key which does not create a user and can be used to implement public access to your database as it uses the `anonymous` Postgres role.\n\nAnonymous sign-ins can be used to build:\n\n- E-commerce applications, such as shopping carts before check-out\n- Full-feature demos without collecting personal information\n- Temporary or throw-away accounts\n\nReview your existing RLS policies before enabling anonymous sign-ins. Anonymous users use the `authenticated` role. To distinguish between anonymous users and permanent users, your policies need to check the `is_anonymous` field of the user's JWT.\n\nSee the [Access control section](#access-control) for more details.\n\n##### Use Dynamic Rendering with Next.js\n\nThe Supabase team has received reports of user metadata being cached across unique anonymous users as a result of Next.js static page rendering. For the best user experience, utilize dynamic page rendering.\n\n##### Self hosting and local development\n\nFor self-hosting, you can update your project configuration using the files and environment variables provided. See the [local development docs](/docs/guides/cli/config) for more details.\n\n## Sign in anonymously [\\#](\\#sign-in-anonymously)\n\nJavaScriptFlutterSwiftKotlinPython\n\nCall the [`signInAnonymously()`](/docs/reference/javascript/auth-signinanonymously) method:\n\n`\n_10\nconst { data, error } = await supabase.auth.signInAnonymously()\n`\n\n## Convert an anonymous user to a permanent user [\\#](\\#convert-an-anonymous-user-to-a-permanent-user)\n\nConverting an anonymous user to a permanent user requires [linking an identity](/docs/guides/auth/auth-identity-linking#manual-linking-beta) to the user. This requires you to [enable manual linking](/dashboard/project/_/settings/auth) in your Supabase project.\n\n### Link an Email / Phone identity [\\#](\\#link-an-email--phone-identity)\n\nJavaScriptFlutterSwiftKotlinPython\n\nYou can use the [`updateUser()`](/docs/reference/javascript/auth-updateuser) method to link an email or phone identity to the anonymous user. To add a password for the anonymous user, the user's email or phone number needs to be verified first.\n\n`\n_10\nconst { data, error } = await supabase.auth.updateUser({ email: 'example@email.com' })\n_10\n_10\n// verify the user's email by clicking on the email change link\n_10\n// or entering the 6-digit OTP sent to the email address\n_10\n_10\n// once the user has been verified, update the password\n_10\nconst { data, error } = await supabase.auth.updateUser({ password: 'password' })\n`\n\n### Link an OAuth identity [\\#](\\#link-an-oauth-identity)\n\nJavaScriptFlutterSwiftKotlinPython\n\nYou can use the [`linkIdentity()`](/docs/reference/javascript/auth-linkidentity) method to link an oauth identity to the anonymous user.\n\n`\n_10\nconst { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })\n`\n\n## Access control [\\#](\\#access-control)\n\nAn anonymous user assumes the `authenticated` role just like a permanent user. You can use row-level security (RLS) policies to differentiate between an anonymous user and a permanent user by checking for the `is_anonymous` claim in the JWT returned by `auth.jwt()`:\n\n`\n_10\ncreate policy \"Only permanent users can post to the news feed\"\n_10\non news_feed as restrictive for insert\n_10\nto authenticated\n_10\nwith check ((select (auth.jwt()->>'is_anonymous')::boolean) is false );\n_10\n_10\ncreate policy \"Anonymous and permanent users can view the news feed\"\n_10\non news_feed for select\n_10\nto authenticated\n_10\nusing ( true );\n`\n\n##### Use restrictive policies\n\nRLS policies are permissive by default, which means that they are combined using an \"OR\" operator when multiple policies are applied. It is important to construct restrictive policies to ensure that the checks for an anonymous user are always enforced when combined with other policies.\n\n## Resolving identity conflicts [\\#](\\#resolving-identity-conflicts)\n\nDepending on your application requirements, data conflicts can arise when an anonymous user is converted to a permanent user. For example, in the context of an e-commerce application, an anonymous user would be allowed to add items to the shopping cart without signing up / signing in. When they decide to sign-in to an existing account, you will need to decide how you want to resolve data conflicts in the shopping cart:\n\n1. Overwrite the items in the cart with those in the existing account\n2. Overwrite the items in the cart with those from the anonymous user\n3. Merge the items in the cart together\n\n## Abuse prevention and rate limits [\\#](\\#abuse-prevention-and-rate-limits)\n\nSince anonymous users are stored in your database, bad actors can abuse the endpoint to increase your database size drastically. It is strongly recommended to [enable invisible Captcha or Cloudflare Turnstile](/docs/guides/auth/auth-captcha) to prevent abuse for anonymous sign-ins. An IP-based rate limit is enforced at 30 requests per hour which can be modified in your [dashboard](/dashboard/project/_/auth/rate-limits). You can refer to the full list of rate limits [here](/docs/guides/platform/going-into-prod#rate-limiting-resource-allocation--abuse-prevention).\n\n## Automatic cleanup [\\#](\\#automatic-cleanup)\n\nAutomatic cleanup of anonymous users is currently not available. Instead, you can delete anonymous users from your project by running the following SQL:\n\n`\n_10\n-- deletes anonymous users created more than 30 days ago\n_10\ndelete from auth.users\n_10\nwhere is_anonymous is true and created_at < now() - interval '30 days';\n`\n\n## Resources [\\#](\\#resources)\n\n- [Supabase - Get started for free](https://supabase.com)\n- [Supabase JS Client](https://github.com/supabase/supabase-js)\n- [Supabase Flutter Client](https://github.com/supabase/supabase-flutter)\n- [Supabase Kotlin Client](https://github.com/supabase-community/supabase-kt)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/auth-anonymous",
        "title": "Anonymous Sign-Ins | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Anonymous%20Sign-Ins&description=undefined",
        "ogTitle": "Anonymous Sign-Ins | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/auth-anonymous",
        "description": "Create and use anonymous users to authenticate with Supabase",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "ogDescription": "Create and use anonymous users to authenticate with Supabase",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Identities\n\n* * *\n\nAn identity is an authentication method associated with a user. Supabase Auth supports the following types of identity:\n\n- Email\n- Phone\n- OAuth\n- SAML\n\nA user can have more than one identity. Anonymous users have no identity until they link an identity to their user.\n\n## The user identity object [\\#](\\#the-user-identity-object)\n\nThe user identity object contains the following attributes:\n\n| Attributes | Type | Description |\n| --- | --- | --- |\n| provider\\_id | `string` | The provider id returned by the provider. If the provider is an OAuth provider, the id refers to the user's account with the OAuth provider. If the provider is `email` or `phone`, the id is the user's id from the `auth.users` table. |\n| user\\_id | `string` | The user's id that the identity is linked to. |\n| identity\\_data | `object` | The identity metadata. For OAuth and SAML identities, this contains information about the user from the provider. |\n| id | `string` | The unique id of the identity. |\n| provider | `string` | The provider name. |\n| email | `string` | The email is a generated column that references the optional email property in the identity\\_data |\n| created\\_at | `string` | The timestamp that the identity was created. |\n| last\\_sign\\_in\\_at | `string` | The timestamp that the identity was last used to sign in. |\n| updated\\_at | `string` | The timestamp that the identity was last updated. |",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/identities",
        "title": "Identities | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Identities&description=undefined",
        "ogTitle": "Identities | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/identities",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# User sessions\n\n* * *\n\nSupabase Auth provides fine-grained control over your user's sessions.\n\nSome security sensitive applications, or those that need to be SOC 2, HIPAA, PCI-DSS or ISO27000 compliant will require some sort of additional session controls to enforce timeouts or provide additional security guarantees. Supabase Auth makes it easy to build compliant applications.\n\n## What is a session? [\\#](\\#what-is-a-session)\n\nA session is created when a user signs in. By default, it lasts indefinitely and a user can have an unlimited number of active sessions on as many devices.\n\nA session is represented by the Supabase Auth access token in the form of a JWT, and a refresh token which is a unique string.\n\nAccess tokens are designed to be short lived, usually between 5 minutes and 1 hour while refresh tokens never expire but can only be used once. You can exchange a refresh token only once to get a new access and refresh token pair.\n\nThis process is called **refreshing the session.**\n\nA session terminates, depending on configuration, when:\n\n- The user clicks sign out.\n- The user changes their password or performs a security sensitive action.\n- It times out due to inactivity.\n- It reaches its maximum lifetime.\n- A user signs in on another device.\n\n## Access token (JWT) claims [\\#](\\#access-token-jwt-claims)\n\nEvery access token contains a `session_id` claim, a UUID, uniquely identifying the session of the user. You can correlate this ID with the primary key of the `auth.sessions` table.\n\n## Initiating a session [\\#](\\#initiating-a-session)\n\nA session is initiated when a user signs in. The session is stored in the `auth.sessions` table, and your app should receive the access and refresh tokens.\n\nThere are two flows for initiating a session and receiving the tokens:\n\n- [Implicit flow](/docs/guides/auth/sessions/implicit-flow)\n- [PKCE flow](/docs/guides/auth/sessions/pkce-flow)\n\n## Limiting session lifetime and number of allowed sessions per user [\\#](\\#limiting-session-lifetime-and-number-of-allowed-sessions-per-user)\n\nThis feature is only available on Pro Plans and up.\n\nSupabase Auth can be configured to limit the lifetime of a user's session. By default, all sessions are active until the user signs out or performs some other action that terminates a session.\n\nIn some applications, it's useful or required for security to ensure that users authenticate often, or that sessions are not left active on devices for too long.\n\nThere are three ways to limit the lifetime of a session:\n\n- Time-boxed sessions, which terminate after a fixed amount of time.\n- Set an inactivity timeout, which terminates sessions that haven't been refreshed within the timeout duration.\n- Enforce a single-session per user, which only keeps the most recently active session.\n\nTo make sure that users are required to re-authenticate periodically, you can set a positive value for the **Time-box user sessions** option in the [Auth settings](/dashboard/project/_/settings/auth) for your project.\n\nTo make sure that sessions expire after a period of inactivity, you can set a positive duration for the **Inactivity timeout** option in the [Auth settings](/dashboard/project/_/settings/auth).\n\nYou can also enforce only one active session per user per device or browser. When this is enabled, the session from the most recent sign in will remain active, while the rest are terminated. Enable this via the _Single session per user_ option in the [Auth settings](/dashboard/project/_/settings/auth).\n\nSessions are not proactively destroyed when you change these settings, but rather the check is enforced whenever a session is refreshed next. This can confuse developers because the actual duration of a session is the configured timeout plus the JWT expiration time. For single session per user, the effect will only be noticed at intervals of the JWT expiration time. Please make sure you adjust this setting depending on your needs. We do not recommend going below 5 minutes for the JWT expiration time.\n\nOtherwise sessions are progressively deleted from the database 24 hours after they expire, which prevents you from causing a high load on your project by accident and allows you some freedom to undo changes without adversely affecting all users.\n\n## Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n### What are recommended values for access token (JWT) expiration? [\\#](\\#what-are-recommended-values-for-access-token-jwt-expiration)\n\nMost applications should use the default expiration time of 1 hour. This can be customized in your project's [Auth settings](/dashboard/project/_/settings/auth) in the Advanced Settings section.\n\nSetting a value over 1 hour is generally discouraged for security reasons, but it may make sense in certain situations.\n\nValues below 5 minutes, and especially below 2 minutes, should not be used in most situations because:\n\n- The shorter the expiration time, the more frequently refresh tokens are used, which increases the load on the Auth server.\n- Time is not absolute. Servers can often be off sync for tens of seconds, but user devices like laptops, desktops or mobile devices can sometimes be off by minutes or even hours. Having too short expiration time can cause difficult-to-debug errors due to clock skew.\n- Supabase's client libraries always try to refresh the session ahead of time, which won't be possible if the expiration time is too short.\n- Access tokens should generally be valid for at least as long as the longest running request in your application. This helps you avoid issues where the access token becomes invalid midway through processing.\n\n### What is refresh token reuse detection and what does it protect from? [\\#](\\#what-is-refresh-token-reuse-detection-and-what-does-it-protect-from)\n\nAs your users continue using your app, refresh tokens are being constantly exchanged for new access tokens.\n\nThe general rule is that a refresh token can only be used once. However, strictly enforcing this can cause certain issues to arise. There are two exceptions to this design to prevent the early and unexpected termination of user's sessions:\n\n- A refresh token can be used more than once within a defined reuse interval. By default this is 10 seconds and we do not recommend changing this value. This exception is granted for legitimate situations such as:\n  - Using server-side rendering where the same refresh token needs to be reused on the server and soon after on the client\n  - To allow some leeway for bugs or issues with serializing access to the refresh token request\n- If the parent of the currently active refresh token for the user's session is being used, the active token will be returned. This exception solves an important and often common situation:\n  - All clients such as browsers, mobile or desktop apps, and even some servers are inherently unreliable due to network issues. A request does not indicate that they received a response or even processed the response they received.\n  - If a refresh token is revoked after being used only once, and the response wasn't received and processed by the client, when the client comes back online, it will attempt to use the refresh token that was already used. Since this might happen outside of the reuse interval, it can cause sudden and unexpected session termination.\n\nShould the reuse attempt not fall under these two exceptions, the whole session is regarded as terminated and all refresh tokens belonging to it are marked as revoked. You can disable this behavior in the Advanced Settings of the [Auth settings](/dashboard/project/_/settings/auth) page, though it is generally not recommended.\n\nThe purpose of this mechanism is to guard against potential security issues where a refresh token could have been stolen from the user, for example by exposing it accidentally in logs that leak (like logging cookies, request bodies or URL params) or via vulnerable third-party servers. It does not guard against the case where a user's session is stolen from their device.\n\n### What are the benefits of using access and refresh tokens instead of traditional sessions? [\\#](\\#what-are-the-benefits-of-using-access-and-refresh-tokens-instead-of-traditional-sessions)\n\nTraditionally user sessions were implemented by using a unique string stored in cookies that identified the authorization that the user had on a specific browser. Applications would use this unique string to constantly fetch the attached user information on every API call.\n\nThis approach has some tradeoffs compared to using a JWT-based approach:\n\n- If the authentication server or its database crashes or is unavailable for even a few seconds, the whole application goes down. Scheduling maintenance or dealing with transient errors becomes very challenging.\n- A failing authentication server can cause a chain of failures across other systems and APIs, paralyzing the whole application system.\n- All requests that require authentication has to be routed through the authentication, which adds an additional latency overhead to all requests.\n\nSupabase Auth prefers a JWT-based approach using access and refresh tokens are because the session information is encoded in a short-lived token -- the access token -- which can be transferred across APIs and systems without relying on the availability or performance of a central server. An application can thus tolerate transient failures or performance issues a lot better. By trying to refresh the access token ahead of time, your application can safely continue to function even with larger outages.\n\nIt's better for cost optimization and scaling as well, as the authentication system's servers and database only handle traffic for this use case.\n\n### How do I make sure that an access token (JWT) cannot be used after a user clicks sign out? [\\#](\\#how-do-i-make-sure-that-an-access-token-jwt-cannot-be-used-after-a-user-clicks-sign-out)\n\nMost applications rarely need such strong guarantees. Consider adjusting the JWT expiry time to an acceptable value. If this is still necessary, you should try to use this validation logic only for the most sensitive actions within your application.\n\nWhen a user signs out, the sessions affected by the logout are removed from the database entirely. You can check that the `session_id` claim in the JWT corresponds to a row in the `auth.sessions` table. If such a row does not exist, it means that the user has logged out.\n\nNote that sessions are not proactively terminated when their maximum lifetime (time-box) or inactivity timeout are reached. These sessions are cleaned up progressively 24 hours after reaching that status. This allows you to tweak the values or roll back changes without causing unintended user friction.\n\n### Can I use HTTP-Only cookies to store the access and refresh tokens? [\\#](\\#can-i-use-http-only-cookies-to-store-the-access-and-refresh-tokens)\n\nThis is possible, but only for apps that use the traditional server-only web app approach where all of the application logic is implemented on the server and it returns rendered HTML only.\n\nIf your app uses any client side JavaScript to build a rich user experience, using HTTP-Only cookies is not feasible since only your server will be able to read and refresh the session of the user. The browser will not have access to the access and refresh tokens.\n\nBecause of this, the Supabase JavaScript libraries provide only limited support. You can override the `storage` option when creating the Supabase client **on the server** to store the values in cookies or your preferred storage choice, for example:\n\n`\n_10\nimport { createClient } from '@supabase/supabase-js'\n_10\n_10\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n_10\nauth: {\n_10\n    storage: customStorageObject,\n_10\n},\n_10\n})\n`\n\nThe `customStorageObject` should implement the `getItem`, `setItem`, and `removeItem` methods from the [`Storage` interface](https://developer.mozilla.org/en-US/docs/Web/API/Storage). Async versions of these methods are also supported.\n\nWhen using cookies to store access and refresh tokens, make sure that the [`Expires` or `Max-Age` attributes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#attributes) of the cookies is set to a timestamp very far into the future. Browsers will clear the cookies, but the session will remain active in Supabase Auth. Therefore it's best to let Supabase Auth control the validity of these tokens and instruct the browser to always store the cookies indefinitely.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/sessions",
        "title": "User sessions | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=User%20sessions&description=undefined",
        "ogTitle": "User sessions | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/sessions",
        "modifiedTime": "2024-09-16T15:38:21.977Z",
        "publishedTime": "2024-09-16T15:38:21.977Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Users\n\n* * *\n\nA **user** in Supabase Auth is someone with a user ID, stored in the Auth schema. Once someone is a user, they can be issued an Access Token, which can be used to access Supabase endpoints. The token is tied to the user, so you can restrict access to resources via [RLS policies](/docs/guides/database/postgres/row-level-security).\n\n## Permanent and anonymous users [\\#](\\#permanent-and-anonymous-users)\n\nSupabase distinguishes between permanent and anonymous users.\n\n- **Permanent users** are tied to a piece of Personally Identifiable Information (PII), such as an email address, a phone number, or a third-party identity. They can use these identities to sign back into their account after signing out.\n- **Anonymous users** aren't tied to any identities. They have a user ID and a personalized Access Token, but they have no way of signing back in as the same user if they are signed out.\n\nAnonymous users are useful for:\n\n- E-commerce applications, to create shopping carts before checkout\n- Full-feature demos without collecting personal information\n- Temporary or throw-away accounts\n\nSee the [Anonymous Signins guide](/docs/guides/auth/auth-anonymous) to learn more about anonymous users.\n\n##### Anonymous users do not use the anon role\n\nJust like permanent users, anonymous users use the **authenticated** role for database access.\n\nThe **anon** role is for those who aren't signed in at all and are not tied to any user ID. We refer to these as unauthenticated or public users.\n\n## The user object [\\#](\\#the-user-object)\n\nThe user object stores all the information related to a user in your application. The user object can be retrieved using one of these methods:\n\n1. [`supabase.auth.getUser()`](/docs/reference/javascript/auth-getuser)\n2. Retrieve a user object as an admin using [`supabase.auth.admin.getUserById()`](/docs/reference/javascript/auth-admin-listusers)\n\nA user can sign in with one of the following methods:\n\n- Password-based method (with email or phone)\n- Passwordless method (with email or phone)\n- OAuth\n- SAML SSO\n\nAn identity describes the authentication method that a user can use to sign in. A user can have multiple identities. These are the types of identities supported:\n\n- Email\n- Phone\n- OAuth\n- SAML\n\nA user with an email or phone identity will be able to sign in with either a password or passwordless method (e.g. use a one-time password (OTP) or magiclink). By default, a user with an unverified email or phone number will not be able to sign in.\n\nThe user object contains the following attributes:\n\n| Attributes | Type | Description |\n| --- | --- | --- |\n| id | `string` | The unique id of the identity of the user. |\n| aud | `string` | The audience claim. |\n| role | `string` | The role claim used by Postgres to perform Row Level Security (RLS) checks. |\n| email | `string` | The user's email address. |\n| email\\_confirmed\\_at | `string` | The timestamp that the user's email was confirmed. If null, it means that the user's email is not confirmed. |\n| phone | `string` | The user's phone number. |\n| phone\\_confirmed\\_at | `string` | The timestamp that the user's phone was confirmed. If null, it means that the user's phone is not confirmed. |\n| confirmed\\_at | `string` | The timestamp that either the user's email or phone was confirmed. If null, it means that the user does not have a confirmed email address and phone number. |\n| last\\_sign\\_in\\_at | `string` | The timestamp that the user last signed in. |\n| app\\_metadata | `object` | The `provider` attribute indicates the first provider that the user used to sign up with. The `providers` attribute indicates the list of providers that the user can use to login with. |\n| user\\_metadata | `object` | Defaults to the first provider's identity data but can contain additional custom user metadata if specified. Refer to [**User Identity**](/docs/guides/auth/auth-identity-linking#the-user-identity) for more information about the identity object. |\n| identities | `UserIdentity[]` | Contains an object array of identities linked to the user. |\n| created\\_at | `string` | The timestamp that the user was created. |\n| updated\\_at | `string` | The timestamp that the user was last updated. |\n| is\\_anonymous | `boolean` | Is true if the user is an anonymous user. |\n\n## Resources [\\#](\\#resources)\n\n- [User Management guide](/docs/guides/auth/managing-user-data)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/users",
        "title": "Users | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Users&description=undefined",
        "ogTitle": "Users | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/users",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Use Supabase Auth with React Native\n\n## Learn how to use Supabase Auth with React Native\n\n* * *\n\n1\n\n### Create a new Supabase project\n\n[Launch a new project](https://supabase.com/dashboard) in the Supabase Dashboard.\n\nYour new database has a table for storing your users. You can see that this table is currently empty by running some SQL in the [SQL Editor](https://supabase.com/dashboard/project/_/sql).\n\nSQL\\_EDITOR\n\n`\n_10\nselect * from auth.users;\n`\n\n2\n\n### Create a React app\n\nCreate a React app using the `create-expo-app` command.\n\nTerminal\n\n`\n_10\nnpx create-expo-app -t expo-template-blank-typescript my-app\n`\n\n3\n\n### Install the Supabase client library\n\nInstall `supabase-js` and the required dependencies.\n\nTerminal\n\n`\n_10\ncd my-app && npx expo install @supabase/supabase-js @react-native-async-storage/async-storage @rneui/themed react-native-url-polyfill\n`\n\n4\n\n### Set up your login component\n\nCreate a helper file `lib/supabase.ts` that exports a Supabase client using your [Project URL and public API (anon) key](https://supabase.com/dashboard/project/_/settings/api).\n\nlib/supabase.ts\n\n``\n_29\nimport { AppState } from 'react-native'\n_29\nimport 'react-native-url-polyfill/auto'\n_29\nimport AsyncStorage from '@react-native-async-storage/async-storage'\n_29\nimport { createClient } from '@supabase/supabase-js'\n_29\n_29\nconst supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL\n_29\nconst supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY\n_29\n_29\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n_29\nauth: {\n_29\n    storage: AsyncStorage,\n_29\n    autoRefreshToken: true,\n_29\n    persistSession: true,\n_29\n    detectSessionInUrl: false,\n_29\n},\n_29\n})\n_29\n_29\n// Tells Supabase Auth to continuously refresh the session automatically\n_29\n// if the app is in the foreground. When this is added, you will continue\n_29\n// to receive `onAuthStateChange` events with the `TOKEN_REFRESHED` or\n_29\n// `SIGNED_OUT` event if the user's session is terminated. This should\n_29\n// only be registered once.\n_29\nAppState.addEventListener('change', (state) => {\n_29\nif (state === 'active') {\n_29\n    supabase.auth.startAutoRefresh()\n_29\n} else {\n_29\n    supabase.auth.stopAutoRefresh()\n_29\n}\n_29\n})\n``\n\n5\n\n### Create a login component\n\nLet's set up a React Native component to manage logins and sign ups.\n\ncomponents/Auth.tsx\n\n`\n_83\nimport React, { useState } from 'react'\n_83\nimport { Alert, StyleSheet, View } from 'react-native'\n_83\nimport { supabase } from '../lib/supabase'\n_83\nimport { Button, Input } from '@rneui/themed'\n_83\n_83\nexport default function Auth() {\n_83\nconst [email, setEmail] = useState('')\n_83\nconst [password, setPassword] = useState('')\n_83\nconst [loading, setLoading] = useState(false)\n_83\n_83\nasync function signInWithEmail() {\n_83\n    setLoading(true)\n_83\n    const { error } = await supabase.auth.signInWithPassword({\n_83\n      email: email,\n_83\n      password: password,\n_83\n    })\n_83\n_83\n    if (error) Alert.alert(error.message)\n_83\n    setLoading(false)\n_83\n}\n_83\n_83\nasync function signUpWithEmail() {\n_83\n    setLoading(true)\n_83\n    const {\n_83\n      data: { session },\n_83\n      error,\n_83\n    } = await supabase.auth.signUp({\n_83\n      email: email,\n_83\n      password: password,\n_83\n    })\n_83\n_83\n    if (error) Alert.alert(error.message)\n_83\n    if (!session) Alert.alert('Please check your inbox for email verification!')\n_83\n    setLoading(false)\n_83\n}\n_83\n_83\nreturn (\n_83\n    <View style={styles.container}>\n_83\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n_83\n        <Input\n_83\n          label=\"Email\"\n_83\n          leftIcon={{ type: 'font-awesome', name: 'envelope' }}\n_83\n          onChangeText={(text) => setEmail(text)}\n_83\n          value={email}\n_83\n          placeholder=\"email@address.com\"\n_83\n          autoCapitalize={'none'}\n_83\n        />\n_83\n      </View>\n_83\n      <View style={styles.verticallySpaced}>\n_83\n        <Input\n_83\n          label=\"Password\"\n_83\n          leftIcon={{ type: 'font-awesome', name: 'lock' }}\n_83\n          onChangeText={(text) => setPassword(text)}\n_83\n          value={password}\n_83\n          secureTextEntry={true}\n_83\n          placeholder=\"Password\"\n_83\n          autoCapitalize={'none'}\n_83\n        />\n_83\n      </View>\n_83\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n_83\n        <Button title=\"Sign in\" disabled={loading} onPress={() => signInWithEmail()} />\n_83\n      </View>\n_83\n      <View style={styles.verticallySpaced}>\n_83\n        <Button title=\"Sign up\" disabled={loading} onPress={() => signUpWithEmail()} />\n_83\n      </View>\n_83\n    </View>\n_83\n)\n_83\n}\n_83\n_83\nconst styles = StyleSheet.create({\n_83\ncontainer: {\n_83\n    marginTop: 40,\n_83\n    padding: 12,\n_83\n},\n_83\nverticallySpaced: {\n_83\n    paddingTop: 4,\n_83\n    paddingBottom: 4,\n_83\n    alignSelf: 'stretch',\n_83\n},\n_83\nmt20: {\n_83\n    marginTop: 20,\n_83\n},\n_83\n})\n`\n\n6\n\n### Add the Auth component to your app\n\nAdd the `Auth` component to your `App.tsx` file. If the user is logged in, print the user id to the screen.\n\nApp.tsx\n\n`\n_28\nimport 'react-native-url-polyfill/auto'\n_28\nimport { useState, useEffect } from 'react'\n_28\nimport { supabase } from './lib/supabase'\n_28\nimport Auth from './components/Auth'\n_28\nimport Account from './components/Account'\n_28\nimport { View, Text } from 'react-native'\n_28\nimport { Session } from '@supabase/supabase-js'\n_28\n_28\nexport default function App() {\n_28\nconst [session, setSession] = useState<Session | null>(null)\n_28\n_28\nuseEffect(() => {\n_28\n    supabase.auth.getSession().then(({ data: { session } }) => {\n_28\n      setSession(session)\n_28\n    })\n_28\n_28\n    supabase.auth.onAuthStateChange((_event, session) => {\n_28\n      setSession(session)\n_28\n    })\n_28\n}, [])\n_28\n_28\nreturn (\n_28\n    <View>\n_28\n      <Auth />\n_28\n      {session && session.user && <Text>{session.user.id}</Text>}\n_28\n    </View>\n_28\n)\n_28\n}\n`\n\n7\n\n### Start the app\n\nStart the app, and follow the instructions in the terminal.\n\nTerminal\n\n`\n_10\nnpm start\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/quickstarts/react-native",
        "title": "Use Supabase Auth with React Native | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Use%20Supabase%20Auth%20with%20React%20Native&description=undefined",
        "ogTitle": "Use Supabase Auth with React Native | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/quickstarts/react-native",
        "description": "Learn how to use Supabase Auth with React Native",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Learn how to use Supabase Auth with React Native",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Use Supabase Auth with React\n\n## Learn how to use Supabase Auth with React.js.\n\n* * *\n\n1\n\n### Create a new Supabase project\n\n[Launch a new project](https://supabase.com/dashboard) in the Supabase Dashboard.\n\nYour new database has a table for storing your users. You can see that this table is currently empty by running some SQL in the [SQL Editor](https://supabase.com/dashboard/project/_/sql).\n\nSQL\\_EDITOR\n\n`\n_10\nselect * from auth.users;\n`\n\n2\n\n### Create a React app\n\nCreate a React app using the `create-react-app` command.\n\nTerminal\n\n`\n_10\nnpx create-react-app my-app\n`\n\n3\n\n### Install the Supabase client library\n\nThe fastest way to get started is to use Supabase's `auth-ui-react` library which provides a convenient interface for working with Supabase Auth from a React app.\n\nNavigate to the React app and install the Supabase libraries.\n\nTerminal\n\n`\n_10\ncd my-app && npm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared\n`\n\n4\n\n### Set up your login component\n\nIn `App.js`, create a Supabase client using your [Project URL and public API (anon) key](https://supabase.com/dashboard/project/_/settings/api).\n\nYou can configure the Auth component to display whenever there is no session inside `supabase.auth.getSession()`\n\nsrc/App.js\n\n`\n_32\nimport './index.css'\n_32\nimport { useState, useEffect } from 'react'\n_32\nimport { createClient } from '@supabase/supabase-js'\n_32\nimport { Auth } from '@supabase/auth-ui-react'\n_32\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n_32\n_32\nconst supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n_32\n_32\nexport default function App() {\n_32\n    const [session, setSession] = useState(null)\n_32\n_32\n    useEffect(() => {\n_32\n      supabase.auth.getSession().then(({ data: { session } }) => {\n_32\n        setSession(session)\n_32\n      })\n_32\n_32\n      const {\n_32\n        data: { subscription },\n_32\n      } = supabase.auth.onAuthStateChange((_event, session) => {\n_32\n        setSession(session)\n_32\n      })\n_32\n_32\n      return () => subscription.unsubscribe()\n_32\n    }, [])\n_32\n_32\n    if (!session) {\n_32\n      return (<Auth supabaseClient={supabase} appearance={{ theme: ThemeSupa }} />)\n_32\n    }\n_32\n    else {\n_32\n      return (<div>Logged in!</div>)\n_32\n    }\n_32\n}\n`\n\n5\n\n### Start the app\n\nStart the app, go to [http://localhost:3000](http://localhost:3000) in a browser, and open the browser console and you should be able to log in.\n\nTerminal\n\n`\n_10\nnpm start\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/quickstarts/react",
        "title": "Use Supabase Auth with React | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Use%20Supabase%20Auth%20with%20React&description=undefined",
        "ogTitle": "Use Supabase Auth with React | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/quickstarts/react",
        "description": "Learn how to use Supabase Auth with React.js.",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Learn how to use Supabase Auth with React.js.",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Use Supabase Auth with Next.js\n\n## Learn how to configure Supabase Auth for the Next.js App Router.\n\n* * *\n\n1\n\n### Create a new Supabase project\n\nHead over to [database.new](https://database.new) and create a new Supabase project.\n\nYour new database has a table for storing your users. You can see that this table is currently empty by running some SQL in the [SQL Editor](https://supabase.com/dashboard/project/_/sql/new).\n\nSQL\\_EDITOR\n\n`\n_10\nselect * from auth.users;\n`\n\n2\n\n### Create a Next.js app\n\nUse the `create-next-app` command and the `with-supabase` template, to create a Next.js app pre-configured with:\n\n- [Cookie-based Auth](https://supabase.com/docs/guides/auth/auth-helpers/nextjs)\n- [TypeScript](https://www.typescriptlang.org/)\n- [Tailwind CSS](https://tailwindcss.com/)\n\n[See GitHub repo](https://github.com/vercel/next.js/tree/canary/examples/with-supabase)\n\nTerminal\n\n`\n_10\nnpx create-next-app -e with-supabase\n`\n\n3\n\n### Declare Supabase Environment Variables\n\nRename `.env.local.example` to `.env.local` and populate with [your project's URL and Anon Key](https://supabase.com/dashboard/project/_/settings/api).\n\n.env.local\n\n`\n_10\nNEXT_PUBLIC_SUPABASE_URL=your-project-url\n_10\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key\n`\n\n4\n\n### Start the app\n\nStart the development server, go to [http://localhost:3000](http://localhost:3000) in a browser, and you should see the contents of `app/page.tsx`.\n\nTo Sign Up a new user, navigate to [http://localhost:3000/login](http://localhost:3000/login), and click `Sign Up Now`.\n\nCheck out the [Supabase Auth docs](https://supabase.com/docs/guides/auth#authentication) for more authentication methods.\n\nTerminal\n\n`\n_10\nnpm run dev\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/quickstarts/nextjs",
        "title": "Use Supabase Auth with Next.js | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Use%20Supabase%20Auth%20with%20Next.js&description=undefined",
        "ogTitle": "Use Supabase Auth with Next.js | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/quickstarts/nextjs",
        "description": "Learn how to configure Supabase Auth for the Next.js App Router.",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "Learn how to configure Supabase Auth for the Next.js App Router.",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Auth architecture\n\n## The architecture behind Supabase Auth.\n\n* * *\n\nThere are four major layers to Supabase Auth:\n\n1. [Client layer.](#client-layer) This can be one of the Supabase client SDKs, or manually made HTTP requests using the HTTP client of your choice.\n2. Kong API gateway. This is shared between all Supabase products.\n3. [Auth service](#auth-service) (formerly known as GoTrue).\n4. [Postgres database.](#postgres) This is shared between all Supabase products.\n\n## Client layer [\\#](\\#client-layer)\n\nThe client layer runs in your app. This could be running in many places, including:\n\n- Your frontend browser code\n- Your backend server code\n- Your native application\n\nThe client layer provides the functions that you use to sign in and manage users. We recommend using the Supabase client SDKs, which handle:\n\n- Configuration and authentication of HTTP calls to the Supabase Auth backend\n- Persistence, refresh, and removal of Auth Tokens in your app's storage medium\n- Integration with other Supabase products\n\nBut at its core, this layer manages the making of HTTP calls, so you could write your own client layer if you wanted to.\n\nSee the Client SDKs for more information:\n\n- [JavaScript](/docs/reference/javascript/introduction)\n- [Flutter](/docs/reference/dart/introduction)\n- [Swift](/docs/reference/swift/introduction)\n- [Python](/docs/reference/python/introduction)\n- [C#](/docs/reference/csharp/introduction)\n- [Kotlin](/docs/reference/kotlin/introduction)\n\n## Auth service [\\#](\\#auth-service)\n\nThe [Auth service](https://github.com/supabase/auth) is an Auth API server written and maintained by Supabase. It is a fork of the GoTrue project, originally created by Netlify.\n\nWhen you deploy a new Supabase project, we deploy an instance of this server alongside your database, and inject your database with the required Auth schema.\n\nThe Auth service is responsible for:\n\n- Validating, issuing, and refreshing JWTs\n- Serving as the intermediary between your app and Auth information in the database\n- Communicating with external providers for Social Login and SSO\n\n## Postgres [\\#](\\#postgres)\n\nSupabase Auth uses the `auth` schema in your Postgres database to store user tables and other information. For security, this schema is not exposed on the auto-generated API.\n\nYou can connect Auth information to your own objects using [database triggers](/docs/guides/database/postgres/triggers) and [foreign keys](https://www.postgresql.org/docs/current/tutorial-fk.html). Make sure that any views you create for Auth data are adequately protected by [enabling RLS](/docs/guides/database/postgres/row-level-security) or [revoking grants](https://www.postgresql.org/docs/current/sql-revoke.html).\n\nMake sure any views you create for Auth data are protected.\n\nStarting in Postgres version 15, views inherit the RLS policies of the underlying tables if created with `security_invoker`. Views in earlier versions, or those created without `security_invoker`, inherit the permissions of the owner, who can bypass RLS policies.",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth/architecture",
        "title": "Auth architecture | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Auth%20architecture&description=undefined",
        "ogTitle": "Auth architecture | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth/architecture",
        "description": "The architecture behind Supabase Auth.",
        "modifiedTime": "2024-09-16T15:38:22.503Z",
        "ogDescription": "The architecture behind Supabase Auth.",
        "publishedTime": "2024-09-16T15:38:22.503Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Auth\n\n# Auth\n\n## Use Supabase to authenticate and authorize your users.\n\n* * *\n\nSupabase Auth makes it easy to implement authentication and authorization in your app. We provide client SDKs and API endpoints to help you create and manage users.\n\nYour users can use many popular Auth methods, including password, magic link, one-time password (OTP), social login, and single sign-on (SSO).\n\n## About authentication and authorization [\\#](\\#about-authentication-and-authorization)\n\nAuthentication and authorization are the core responsibilities of any Auth system.\n\n- **Authentication** means checking that a user is who they say they are.\n- **Authorization** means checking what resources a user is allowed to access.\n\nSupabase Auth uses [JSON Web Tokens (JWTs)](/docs/guides/auth/jwts) for authentication. Auth integrates with Supabase's database features, making it easy to use [Row Level Security (RLS)](/docs/guides/database/postgres/row-level-security) for authorization.\n\n## The Supabase ecosystem [\\#](\\#the-supabase-ecosystem)\n\nYou can use Supabase Auth as a standalone product, but it's also built to integrate with the Supabase ecosystem.\n\nAuth uses your project's Postgres database under the hood, storing user data and other Auth information in a special schema. You can connect this data to your own tables using triggers and foreign key references.\n\nAuth also enables access control to your database's automatically generated [REST API](/docs/guides/api). When using Supabase SDKs, your data requests are automatically sent with the user's Auth Token. The Auth Token scopes database access on a row-by-row level when used along with [RLS policies](/docs/guides/database/postgres/row-level-security).\n\n## Providers [\\#](\\#providers)\n\nSupabase Auth works with many popular Auth methods, including Social and Phone Auth using third-party providers. See the following sections for a list of supported third-party providers.\n\n### Social Auth [\\#](\\#social-auth)\n\n[![Apple Icon](https://supabase.com/docs/img/icons/apple-icon.svg)\\\\\n\\\\\n**Apple**](/docs/guides/auth/social-login/auth-apple) [![Azure (Microsoft) Icon](https://supabase.com/docs/guides/Microsoft)\\\\\n\\\\\n**Azure (Microsoft)**](/docs/guides/auth/social-login/auth-azure) [![Bitbucket Icon](https://supabase.com/docs/img/icons/bitbucket-icon.svg)\\\\\n\\\\\n**Bitbucket**](/docs/guides/auth/social-login/auth-bitbucket) [![Discord Icon](https://supabase.com/docs/img/icons/discord-icon.svg)\\\\\n\\\\\n**Discord**](/docs/guides/auth/social-login/auth-discord) [![Facebook Icon](https://supabase.com/docs/img/icons/facebook-icon.svg)\\\\\n\\\\\n**Facebook**](/docs/guides/auth/social-login/auth-facebook) [![Figma Icon](https://supabase.com/docs/img/icons/figma-icon.svg)\\\\\n\\\\\n**Figma**](/docs/guides/auth/social-login/auth-figma) [![GitHub Icon](https://supabase.com/docs/img/icons/github-icon-light.svg)\\\\\n\\\\\n**GitHub**](/docs/guides/auth/social-login/auth-github) [![GitLab Icon](https://supabase.com/docs/img/icons/gitlab-icon.svg)\\\\\n\\\\\n**GitLab**](/docs/guides/auth/social-login/auth-gitlab) [![Google Icon](https://supabase.com/docs/img/icons/google-icon.svg)\\\\\n\\\\\n**Google**](/docs/guides/auth/social-login/auth-google) [![Kakao Icon](https://supabase.com/docs/img/icons/kakao-icon.svg)\\\\\n\\\\\n**Kakao**](/docs/guides/auth/social-login/auth-kakao) [![Keycloak Icon](https://supabase.com/docs/img/icons/keycloak-icon.svg)\\\\\n\\\\\n**Keycloak**](/docs/guides/auth/social-login/auth-keycloak) [![LinkedIn Icon](https://supabase.com/docs/img/icons/linkedin-icon.svg)\\\\\n\\\\\n**LinkedIn**](/docs/guides/auth/social-login/auth-linkedin) [![Notion Icon](https://supabase.com/docs/img/icons/notion-icon.svg)\\\\\n\\\\\n**Notion**](/docs/guides/auth/social-login/auth-notion) [![Slack Icon](https://supabase.com/docs/img/icons/slack-icon.svg)\\\\\n\\\\\n**Slack**](/docs/guides/auth/social-login/auth-slack) [![Spotify Icon](https://supabase.com/docs/img/icons/spotify-icon.svg)\\\\\n\\\\\n**Spotify**](/docs/guides/auth/social-login/auth-spotify) [![Twitter Icon](https://supabase.com/docs/img/icons/twitter-icon-light.svg)\\\\\n\\\\\n**Twitter**](/docs/guides/auth/social-login/auth-twitter) [![Twitch Icon](https://supabase.com/docs/img/icons/twitch-icon.svg)\\\\\n\\\\\n**Twitch**](/docs/guides/auth/social-login/auth-twitch) [![WorkOS Icon](https://supabase.com/docs/img/icons/workos-icon.svg)\\\\\n\\\\\n**WorkOS**](/docs/guides/auth/social-login/auth-workos) [![Zoom Icon](https://supabase.com/docs/img/icons/zoom-icon.svg)\\\\\n\\\\\n**Zoom**](/docs/guides/auth/social-login/auth-zoom)\n\n### Phone Auth [\\#](\\#phone-auth)\n\n[![MessageBird Icon](https://supabase.com/docs/img/icons/messagebird-icon.svg)\\\\\n\\\\\n**MessageBird**](/docs/guides/auth/phone-login?showSmsProvider=MessageBird) [![Twilio Icon](https://supabase.com/docs/img/icons/twilio-icon.svg)\\\\\n\\\\\n**Twilio**](/docs/guides/auth/phone-login?showSmsProvider=Twilio) [![Vonage Icon](https://supabase.com/docs/img/icons/vonage-icon-light.svg)\\\\\n\\\\\n**Vonage**](/docs/guides/auth/phone-login?showSmsProvider=Vonage)",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/guides/auth",
        "title": "Auth | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=auth&title=Auth&description=Use%20Supabase%20to%20Authenticate%20and%20Authorize%20your%20users.",
        "ogTitle": "Auth | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/guides/auth",
        "description": "Use Supabase to Authenticate and Authorize your users.",
        "modifiedTime": "2024-09-16T15:38:21.528Z",
        "ogDescription": "Use Supabase to Authenticate and Authorize your users.",
        "publishedTime": "2024-09-16T15:38:21.528Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    }
  ]
}
