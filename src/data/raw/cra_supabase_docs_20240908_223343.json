{
  "input_url": "https://supabase.com/docs/reference/python",
  "data": [
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/order",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/lte",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/or",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/limit",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/range",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/ilike",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/rangelt",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/auth-api",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/auth-signinwithotp",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/insert",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/overlaps",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/using-filters",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/match",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/in",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/not",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/containedby",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/eq",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/explain",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/textsearch",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/rangeadjacent",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/gt",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/neq",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/select",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/filter",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/like",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/auth-signup",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/rangelte",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/rangegt",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/auth-signinanonymously",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/db-csv",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/rangegte",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/using-modifiers",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/contains",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/single",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/gte",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/initializing",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/undefined",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/is",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/rpc",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/lt",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n1\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n1\nimport os\n2\nfrom supabase import create_client, Client\n3\n4\nurl: str = os.environ.get(\"SUPABASE_URL\")\n5\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n6\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .update({\"name\": \"Australia\"})\n4\n    .eq(\"id\", 1)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n4\n    .execute()\n5\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n1\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n1\ncreate or replace function hello_world() returns text as $$\n2\nselect 'Hello world';\n3\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n1\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n1\n# Correct\n2\nresponse = (\n3\n    supabase.table(\"cities\")\n4\n    .select(\"name, country_id\")\n5\n    .eq(\"name\", \"Bali\")\n6\n    .execute()\n7\n)\n8\n9\n# Incorrect\n10\nresponse = (\n11\n    supabase.table(\"cities\")\n12\n    .eq(\"name\", \"Bali\")\n13\n    .select(\"name, country_id\")\n14\n    .execute()\n15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"*\")\n4\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"classes\")\n3\n    .select(\"name\")\n4\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"reservations\")\n3\n    .select(\"*\")\n4\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n1\nresponse = (\n2\n    supabase.table(\"issues\")\n3\n    .select(\"title\")\n4\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n1\nresponse = (\n2\n    supabase.table(\"texts\")\n3\n    .select(\"content\")\n4\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .match({\"id\": 2, \"name\": \"Albania\"})\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n2\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .not_.is_(\"name\", \"null\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n1\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n2\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"name\")\n4\n    .or_(\"id.eq.2,name.eq.Algeria\")\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n1\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n2\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .order(\"name\", desc=True)\n5\n    .execute()\n6\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n1\nresponse = (\n2\n    supabase.table(\"countries\")\n3\n    .select(\"*\")\n4\n    .eq(\"name\", \"Albania\")\n5\n    .maybe_single()\n6\n    .execute()\n7\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n1\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n1\nresponse = supabase.auth.sign_up(\n2\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n1\nresponse = supabase.auth.sign_in_anonymously(\n2\n    {\"options\": {\"captcha_token\": \"\"}}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n1\nresponse = supabase.auth.sign_in_with_password(\n2\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n1\nresponse = supabase.auth.sign_in_with_id_token(\n2\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n1\nresponse = supabase.auth.sign_in_with_otp(\n2\n    {\n3\n        \"email\": \"email@example.com\",\n4\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n5\n    }\n6\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n1\nresponse = supabase.auth.sign_in_with_oauth({\n2\n\"provider\": 'github'\n3\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n1\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n1\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n1\nresponse = supabase.auth.update_user(\\{\n2\n\"password\": new_password\n3\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n1\nsupabase.auth.reset_password_for_email(email, {\n2\n\"redirect_to\": \"https://example.com/update-password\",\n3\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n1\nresponse = supabase.auth.verify_otp(\n2\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n3\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n1\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n1\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n1\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n1\nresponse = supabase.auth.update_user({\n2\n\"email\": \"new@email.com\"\n3\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n1\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n1\nresponse = supabase.auth.link_identity({\n2\nprovider: 'github'\n3\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n1\n# retrieve all identites linked to a user\n2\nres = supabase.auth.get_user_identities()\n3\n4\n# find the google identity\n5\ngoogle_identity = list(\n6\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n7\n).pop()\n8\n9\n# unlink the google identity\n10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n1\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n1\nresponse = supabase.auth.resend({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"options\": {\n5\n    \"email_redirect_to\": \"https://example.com/welcome\"\n6\n}\n7\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n1\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n1\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n1\nres = supabase.auth.mfa.enroll({\n2\n\"factor_type\": \"totp\",\n3\n\"friendly_name\": \"your_friendly_name\"\n4\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n3\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n4\n\"code\": '123456'\n5\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n1\nres = supabase.auth.mfa.challenge_and_verify({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n\"code\": '123456'\n4\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n1\nres = supabase.auth.mfa.unenroll({\n2\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n3\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n1\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n1\nfrom supabase import create_client\n2\nfrom supabase.lib.client_options import ClientOptions\n3\n4\nsupabase = create_client(\n5\nsupabase_url,\n6\nservice_role_key,\n7\noptions=ClientOptions(\n8\n    auto_refresh_token=False,\n9\n    persist_session=False,\n10\n)\n11\n)\n12\n13\n# Access auth admin api\n14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n1\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n1\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n1\nresponse = supabase.auth.admin.create_user({\n2\n\"email\": \"user@email.com\",\n3\n\"password\": \"password\",\n4\n\"user_metadata\": { \"name\": \"Yoda\" }\n5\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n1\nsupabase.auth.admin.delete_user(\n2\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n3\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n1\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n1\nresponse = supabase.auth.admin.generate_link({\n2\n\"type\": \"signup\",\n3\n\"email\": \"email@example.com\",\n4\n\"password\": \"secret\"\n5\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n1\nresponse = supabase.auth.admin.update_user_by_id(\n2\n\"11111111-1111-1111-1111-111111111111\",\n3\n{ \"email\": \"new@email.com\" }\n4\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n1\nresponse = supabase.auth.admin.mfa.delete_factor({\n2\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n3\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n4\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n1\nresponse = supabase.functions.invoke(\n2\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n3\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n1\nchannel = supabase.channel(\"room1\")\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\ndef handle_broadcast(payload):\n8\nprint(\"Cursor position received!\", payload)\n9\n10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n1\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n1\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n1\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n1\nchannel = supabase.channel('room1')\n2\n3\ndef on_subscribe(status, err):\n4\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n5\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n6\n7\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n1\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n1\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n1\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n1\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n1\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n1\nwith open(destination, 'wb+') as f:\n2\nres = supabase.storage.from_('bucket_name').download(source)\n3\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n1\nwith open(filepath, 'rb') as f:\n2\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n1\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n1\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n1\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n1\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/maybesingle",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/upsert",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/undefined",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/delete",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/installing",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/update",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    },
    {
      "markdown": "Python Reference v2.0\n\n# Python Client Library\n\nsupabase-py [View on GitHub](https://github.com/supabase/supabase-py)\n\nThis reference documents every object and method available in Supabase's Python library, [supabase-py](https://github.com/supabase/supabase-py). You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\n* * *\n\n## Installing\n\n### Install with PyPi [\\#](\\#install-with-pypi)\n\nYou can install supabase-py via the terminal. (for Python > 3.8)\n\nPIPConda\n\nTerminal\n\n`\n_10\npip install supabase\n`\n\n* * *\n\n## Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n- supabase\\_urlRequiredstring\n\n\n\nThe unique Supabase URL which is supplied when you create a new project in your project dashboard.\n\n- supabase\\_keyRequiredstring\n\n\n\nThe unique Supabase Key which is supplied when you create a new project in your project dashboard.\n\n- optionsOptionalClientOptions\n\n\n\nOptions to change the Auth behaviors.\n\n\n\nDetails\n\n\ncreate\\_client()With timeout option\n\n`\n_10\nimport os\n_10\nfrom supabase import create_client, Client\n_10\n_10\nurl: str = os.environ.get(\"SUPABASE_URL\")\n_10\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n_10\nsupabase: Client = create_client(url, key)\n`\n\n* * *\n\n## Fetch data\n\n- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n- columnsOptionalstring\n\n\n\nThe columns to retrieve, defaults to `*`.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Insert data\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nCreate a recordBulk create\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .insert({\"id\": 1, \"name\": \"Denmark\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Update data\n\n- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n\nUpdating your dataUpdating JSON data\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .update({\"name\": \"Australia\"})\n_10\n    .eq(\"id\", 1)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Upsert data\n\n- Primary keys must be included in the `values` dict to use upsert.\n\n### Parameters\n\n- jsonRequireddict, list\n\n\n\nThe values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n- ignore\\_duplicatesOptionalbool\n\n\n\nWhether duplicate rows should be ignored.\n\n- on\\_conflictOptionalstring\n\n\n\nSpecified columns to be made to work with UNIQUE constraint.\n\n- default\\_to\\_nullOptionalbool\n\n\n\nMake missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n\n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .upsert({\"id\": 1, \"name\": \"Australia\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Delete data\n\n- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/ `ALL` policy that makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n- countOptionalCountMethod\n\n\n\nThe property to use to get the count of rows returned.\n\n- returningOptionalReturnMethod\n\n\n\nEither 'minimal' or 'representation'. Defaults to 'representation'.\n\n\nDelete recordsDelete multiple records\n\n`\n_10\nresponse = supabase.table('countries').delete().eq('id', 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`\n_10\ncreate or replace function hello_world() returns text as $$\n_10\nselect 'Hello world';\n_10\n$$ language sql;\n`\n\n### Parameters\n\n- fnRequiredcallable\n\n\n\nThe stored procedure call to be executed.\n\n- paramsOptionaldict of any\n\n\n\nParameters passed into the stored procedure call.\n\n- getOptionaldict of any\n\n\n\nWhen set to `true`, `data` will not be returned. Useful if you only need the count.\n\n- headOptionaldict of any\n\n\n\nWhen set to `true`, the function will be called with read-only access mode.\n\n- countOptionalCountMethod\n\n\n\nCount algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n\n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`\n_10\nresponse = supabase.rpc(\"hello_world\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables\n\n`\n_15\n# Correct\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .select(\"name, country_id\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .execute()\n_15\n)\n_15\n_15\n# Incorrect\n_15\nresponse = (\n_15\n    supabase.table(\"cities\")\n_15\n    .eq(\"name\", \"Bali\")\n_15\n    .select(\"name, country_id\")\n_15\n    .execute()\n_15\n)\n`\n\nData source\n\nNotes\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valueRequiredany\n\n\n\nThe value to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- patternRequiredstring\n\n\n\nThe pattern to match by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe name of the column to apply a filter on\n\n- valueRequirednull \\| boolean\n\n\n\nThe value to match by\n\n\nChecking for nullness, True or False\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredarray\n\n\n\nThe values to filter by\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .in_(\"name\", [\"Albania\", \"Algeria\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- valuesRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"*\")\n_10\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe jsonb, array, or range column to filter on\n\n- valueRequiredobject\n\n\n\nThe jsonb, array, or range value to filter with\n\n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"classes\")\n_10\n    .select(\"name\")\n_10\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredstring\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe range column to filter on\n\n- rangeRequiredarray\n\n\n\nThe range to filter with\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"reservations\")\n_10\n    .select(\"*\")\n_10\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe array or range column to filter on\n\n- valueRequiredIterable\\[Any\\]\n\n\n\nThe array or range value to filter with\n\n\nOn array columnsOn range columns\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"issues\")\n_10\n    .select(\"title\")\n_10\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe text or tsvector column to filter on\n\n- queryRequiredstring\n\n\n\nThe query text to match with\n\n- optionsOptionalobject\n\n\n\nNamed parameters\n\n\n\nDetails\n\n\nText searchBasic normalizationFull normalizationWebsearch\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"texts\")\n_10\n    .select(\"content\")\n_10\n    .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()` s.\n\n### Parameters\n\n- queryRequireddict\n\n\n\nThe object to filter with, with column names as keys mapped to their filter values\n\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .match({\"id\": 2, \"name\": \"Albania\"})\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.not_.contains('arraycol', '\\{\"a\",\"b\"\\}')  # Use `\\{\\}` for array values\n``\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .not_.is_(\"name\", \"null\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``\n_10\n.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}')  # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.\n_10\n.or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}')  # Use `cd` for `containedBy()`\n``\n\n### Parameters\n\n- filtersRequiredstring\n\n\n\nThe filters to use, following PostgREST syntax\n\n- reference\\_tableOptionalstring\n\n\n\nSet this to filter on referenced tables instead of the parent table\n\n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"name\")\n_10\n    .or_(\"id.eq.2,name.eq.Algeria\")\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``\n_10\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n_10\n.filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}')  # Use `cs` for `contains()`, `\\{\\}` for array values\n``\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to filter on\n\n- operatorOptionalstring\n\n\n\nThe operator to filter with, following PostgREST syntax\n\n- valueOptionalany\n\n\n\nThe value to filter with, following PostgREST syntax\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n- columnRequiredstring\n\n\n\nThe column to order by\n\n- descOptionalbool\n\n\n\nWhether the rows should be ordered in descending order or not.\n\n- foreign\\_tableOptionalstring\n\n\n\nForeign table name whose results are to be ordered.\n\n- nullsfirstOptionalbool\n\n\n\nOrder by showing nulls first\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .order(\"name\", desc=True)\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the number of rows returned\n\n### Parameters\n\n- sizeRequirednumber\n\n\n\nThe maximum number of rows to return\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset ( `from`) and ending at the offset ( `from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n- startRequirednumber\n\n\n\nThe starting index from which to limit the result.\n\n- endRequirednumber\n\n\n\nThe last index to which to limit the result.\n\n- foreign\\_tableOptionalstring\n\n\n\nSet this to limit rows of foreign tables instead of the parent table.\n\n\nWith \\`select()\\`On a foreign table\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`\n_10\nresponse = (\n_10\n    supabase.table(\"countries\")\n_10\n    .select(\"*\")\n_10\n    .eq(\"name\", \"Albania\")\n_10\n    .maybe_single()\n_10\n    .execute()\n_10\n)\n`\n\nData source\n\nResponse\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\nReturn data as CSV\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").csv().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n- walOptionalboolean\n\n\n\nIf `true`, include information on WAL record generation.\n\n- verboseOptionalboolean\n\n\n\nIf `true`, the query identifier will be returned and `data` will include the output columns of the query.\n\n- settingsOptionalboolean\n\n\n\nIf `true`, include information on configuration parameters that affect query planning.\n\n- formatOptionalboolean\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- formatOptional\"text\" \\| \"json\"\n\n\n\nThe format of the output, can be `\"text\"` (default) or `\"json\"`.\n\n- buffersOptionalboolean\n\n\n\nIf `true`, include information on buffer usage.\n\n- analyzeOptionalboolean\n\n\n\nIf `true`, the query will be executed and the actual run time will be returned.\n\n\nGet the execution planGet the execution plan with analyze and verbose\n\n`\n_10\nresponse = supabase.table(\"countries\").select(\"*\").explain().execute()\n`\n\nData source\n\nResponse\n\nNotes\n\n* * *\n\n## Overview\n\n- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n\n* * *\n\n## Create a new user\n\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign\\_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n\n### Parameters\n\n- credentialsRequiredSignUpWithPasswordCredentials\n\nDetails\n\n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`\n_10\nresponse = supabase.auth.sign_up(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Create an anonymous user\n\n- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n- credentialsRequiredSignInAnonymouslyCredentials\n\nDetails\n\n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`\n_10\nresponse = supabase.auth.sign_in_anonymously(\n_10\n    {\"options\": {\"captcha_token\": \"\"}}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n- Requires either an email and password or a phone number and password.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with email and passwordSign in with phone and password\n\n`\n_10\nresponse = supabase.auth.sign_in_with_password(\n_10\n    {\"email\": \"email@example.com\", \"password\": \"example-password\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n- credentialsRequiredSignInWithIdTokenCredentials\n\nDetails\n\n\nSign In using ID Token\n\n`\n_10\nresponse = supabase.auth.sign_in_with_id_token(\n_10\n{\"provider\": \"google\", \"token\": \"your-id-token\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Sign in a user through OTP\n\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.\n\n### Parameters\n\n- credentialsRequiredSignInWithPasswordCredentials\n\nDetails\n\n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`\n_10\nresponse = supabase.auth.sign_in_with_otp(\n_10\n    {\n_10\n        \"email\": \"email@example.com\",\n_10\n        \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},\n_10\n    }\n_10\n)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign in a user through OAuth\n\n- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`\n_10\nresponse = supabase.auth.sign_in_with_oauth({\n_10\n\"provider\": 'github'\n_10\n})\n`\n\n* * *\n\n## Sign in a user through SSO\n\n- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n  - Mapping specific user email addresses with an identity provider.\n  - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n- paramsRequiredSignInWithSSOCredentials\n\nDetails\n\n\nSign in with email domainSign in with provider UUID\n\n`\n_10\nresponse = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Sign out a user\n\n- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n- optionsOptionalSignOutOptions\n\nDetails\n\n\nSign out\n\n`\n_10\nresponse = supabase.auth.sign_out()\n`\n\n* * *\n\n## Send a password reset request\n\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email. To update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n\n`\n_10\nresponse = supabase.auth.update_user(\\{\n_10\n\"password\": new_password\n_10\n\\})\n`\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalobject\n\nDetails\n\n\nReset password\n\n`\n_10\nsupabase.auth.reset_password_for_email(email, {\n_10\n\"redirect_to\": \"https://example.com/update-password\",\n_10\n})\n`\n\n* * *\n\n## Verify and log in through OTP\n\n- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` ( `signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n- paramsRequiredVerifyOtpParams\n\nDetails\n\n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`\n_10\nresponse = supabase.auth.verify_otp(\n_10\n{\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Retrieve a session\n\n- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n\nGet the session data\n\n`\n_10\nresponse = supabase.auth.get_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n- This method will refresh the session whether the current one is expired or not.\n\n### Parameters\n\n- refresh\\_tokenOptionalstring\n\n\nRefresh session using the current session\n\n`\n_10\nresponse = supabase.auth.refresh_session()\n`\n\nResponse\n\n* * *\n\n## Retrieve a user\n\n- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n\n### Parameters\n\n- jwtOptionalstring\n\n\n\nTakes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n\n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`\n_10\nresponse = supabase.auth.get_user()\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`\n_10\nresponse = supabase.auth.update_user({\n_10\n\"email\": \"new@email.com\"\n_10\n})\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n- The user needs to be signed in to call `get_user_identities()`.\n\nReturns a list of identities linked to the user\n\n`\n_10\nresponse = supabase.auth.get_user_identities()\n`\n\nResponse\n\n* * *\n\n## Link an identity to a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n\n### Parameters\n\n- credentialsRequiredSignInWithOAuthCredentials\n\nDetails\n\n\nLink an identity to a user\n\n`\n_10\nresponse = supabase.auth.link_identity({\n_10\nprovider: 'github'\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Unlink an identity from a user\n\n- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n\n### Parameters\n\n- identityRequiredUserIdentity\n\nDetails\n\n\nUnlink an identity\n\n`\n_10\n# retrieve all identites linked to a user\n_10\nres = supabase.auth.get_user_identities()\n_10\n_10\n# find the google identity\n_10\ngoogle_identity = list(\n_10\nfilter(lambda identity: identity.provider == \"google\", res.identities)\n_10\n).pop()\n_10\n_10\n# unlink the google identity\n_10\nresponse = supabase.auth.unlink_identity(google_identity)\n`\n\n* * *\n\n## Send a password reauthentication nonce\n\n- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`\n_10\nresponse = supabase.auth.reauthenticate()\n`\n\nNotes\n\n* * *\n\n## Resend an OTP\n\n- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n\n### Parameters\n\n- credentialsRequiredResendCredentials\n\nDetails\n\n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`\n_10\nresponse = supabase.auth.resend({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"options\": {\n_10\n    \"email_redirect_to\": \"https://example.com/welcome\"\n_10\n}\n_10\n})\n`\n\nNotes\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n- access\\_tokenRequiredstring\n\n- refresh\\_tokenRequiredstring\n\n\nRefresh the session\n\n`\n_10\nresponse = supabase.auth.set_session(access_token, refresh_token)\n`\n\nResponse\n\nNotes\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n\n### Parameters\n\n- auth\\_codeRequiredstring\n\n\nExchange Auth Code\n\n`\n_10\nresponse = supabase.auth.exchange_code_for_session(\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n`\n\nResponse\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n\n* * *\n\n## Enroll a factor\n\n- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n\nEnroll a time-based, one-time password (TOTP) factor\n\n`\n_10\nres = supabase.auth.mfa.enroll({\n_10\n\"factor_type\": \"totp\",\n_10\n\"friendly_name\": \"your_friendly_name\"\n_10\n})\n`\n\n* * *\n\n## Create a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n\nCreate a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'\n_10\n})\n`\n\n* * *\n\n## Verify a challenge\n\n- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n\nVerify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Create and verify a challenge\n\n- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n\nCreate and verify a challenge for a factor\n\n`\n_10\nres = supabase.auth.mfa.challenge_and_verify({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n\"code\": '123456'\n_10\n})\n`\n\n* * *\n\n## Unenroll a factor\n\nUnenroll a factor\n\n`\n_10\nres = supabase.auth.mfa.unenroll({\n_10\n\"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n_10\n})\n`\n\n* * *\n\n## Get Authenticator Assurance Level\n\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n\nGet the AAL details of a session\n\n`\n_10\nres = supabase.auth.mfa.get_authenticator_assurance_level()\n`\n\n* * *\n\n## Auth Admin\n\n- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`\n_14\nfrom supabase import create_client\n_14\nfrom supabase.lib.client_options import ClientOptions\n_14\n_14\nsupabase = create_client(\n_14\nsupabase_url,\n_14\nservice_role_key,\n_14\noptions=ClientOptions(\n_14\n    auto_refresh_token=False,\n_14\n    persist_session=False,\n_14\n)\n_14\n)\n_14\n_14\n# Access auth admin api\n_14\nadmin_auth_client = supabase.auth.admin\n`\n\n* * *\n\n## Retrieve a user\n\n- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n- uidRequiredstring\n\n\n\nThe user's unique identifier\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nFetch the user object using the access\\_token jwt\n\n`\n_10\nresponse = supabase.auth.admin.get_user_by_id(1)\n`\n\nResponse\n\n* * *\n\n## List all users\n\n- Defaults to return 50 users per page.\n\n### Parameters\n\n- paramsOptionalPageParams\n\n\n\nAn object which supports page and perPage as numbers, to alter the paginated results.\n\n\n\nDetails\n\n\nGet a page of usersPaginated list of users\n\n`\n_10\nresponse = supabase.auth.admin.list_users()\n`\n\n* * *\n\n## Create a user\n\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n- attributesRequiredAdminUserAttributes\n\nDetails\n\n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.create_user({\n_10\n\"email\": \"user@email.com\",\n_10\n\"password\": \"password\",\n_10\n\"user_metadata\": { \"name\": \"Yoda\" }\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n- idRequiredstring\n\n\n\nThe user id you want to remove.\n\n- should\\_soft\\_deleteOptionalboolean\n\n\n\nIf true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\nRemoves a user\n\n`\n_10\nsupabase.auth.admin.delete_user(\n_10\n\"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n_10\n)\n`\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n- emailRequiredstring\n\n\n\nThe email address of the user.\n\n- optionsOptionalInviteUserByEmailOptions\n\nDetails\n\n\nInvite a user\n\n`\n_10\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n`\n\nResponse\n\n* * *\n\n## Generate an email link\n\n- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n- paramsRequiredGenerateLinkParams\n\nDetails\n\n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`\n_10\nresponse = supabase.auth.admin.generate_link({\n_10\n\"type\": \"signup\",\n_10\n\"email\": \"email@example.com\",\n_10\n\"password\": \"secret\"\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Update a user\n\n### Parameters\n\n- uidRequiredstring\n\n- attributesRequiredAdminUserAttributes\n\n\n\nThe data you want to update.\n\n\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n\n\n\nDetails\n\n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`\n_10\nresponse = supabase.auth.admin.update_user_by_id(\n_10\n\"11111111-1111-1111-1111-111111111111\",\n_10\n{ \"email\": \"new@email.com\" }\n_10\n)\n`\n\nResponse\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n- paramsRequiredAuthMFAAdminDeleteFactorParams\n\nDetails\n\n\nDelete a factor for a user\n\n`\n_10\nresponse = supabase.auth.admin.mfa.delete_factor({\n_10\n\"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n_10\n\"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\",\n_10\n})\n`\n\nResponse\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvoke a Supabase Function.\n\n- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n\nBasic invocationError handlingPassing custom headers\n\n`\n_10\nresponse = supabase.functions.invoke(\n_10\n    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}\n_10\n)\n`\n\n* * *\n\n## Subscribe to channel\n\n- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`\n_10\nchannel = supabase.channel(\"room1\")\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\ndef handle_broadcast(payload):\n_10\nprint(\"Cursor position received!\", payload)\n_10\n_10\nchannel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n`\n\n* * *\n\n## Unsubscribe from a channel\n\n- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemoves a channel\n\n`\n_10\nsupabase.remove_channel(myChannel)\n`\n\n* * *\n\n## Unsubscribe from all channels\n\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`\n_10\nsupabase.remove_all_channels()\n`\n\n* * *\n\n## Retrieve all channels\n\nGet all channels\n\n`\n_10\nchannels = supabase.get_channels()\n`\n\n* * *\n\n## Broadcast a message\n\nBroadcast a message to all connected clients to a channel.\n\nSend a message via websocket\n\n`\n_10\nchannel = supabase.channel('room1')\n_10\n_10\ndef on_subscribe(status, err):\n_10\nif status == RealtimeSubscribeStates.SUBSCRIBED:\n_10\n    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })\n_10\n_10\nchannel.subscribe(on_subscribe)\n`\n\nResponse\n\n* * *\n\n## Create a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate bucket\n\n`\n_10\nres = supabase.storage.create_bucket(name)\n`\n\n* * *\n\n## Retrieve a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nGet bucket\n\n`\n_10\nres = supabase.storage.get_bucket(name)\n`\n\n* * *\n\n## List all buckets\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`\n_10\nres = supabase.storage.list_buckets()\n`\n\n* * *\n\n## Delete a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete bucket\n\n`\n_10\nres = supabase.storage.delete_bucket(name)\n`\n\n* * *\n\n## Empty a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nEmpty bucket\n\n`\n_10\nres = supabase.storage.empty_bucket(name)\n`\n\n* * *\n\n## Upload a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n\nUpload file using filepath\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\n    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})\n`\n\n* * *\n\n## Download a file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDownload file\n\n`\n_10\nwith open(destination, 'wb+') as f:\n_10\nres = supabase.storage.from_('bucket_name').download(source)\n_10\nf.write(res)\n`\n\n* * *\n\n## List all files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nList files in a bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').list()\n`\n\n* * *\n\n## Replace an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nUpdate file\n\n`\n_10\nwith open(filepath, 'rb') as f:\n_10\nsupabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})\n`\n\n* * *\n\n## Move an existing file\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nMove file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')\n`\n\n* * *\n\n## Delete files in a bucket\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nDelete file\n\n`\n_10\nres = supabase.storage.from_('bucket_name').remove('test.jpg')\n`\n\n* * *\n\n## Create a signed URL\n\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nCreate Signed URL\n\n`\n_10\nres = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)\n`\n\n* * *\n\n## Retrieve public URL\n\n- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\nReturns the URL for an asset in a public bucket\n\n`\n_10\nres = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')\n`",
      "metadata": {
        "ogUrl": "https://supabase.com/docs/reference/python/python",
        "title": "Python API Reference | Supabase Docs",
        "robots": "index, follow",
        "ogImage": "https://obuldanrptloktxcffvn.supabase.co/functions/v1/og-images?site=docs&type=API%20Reference&title=Python&description=undefined",
        "ogTitle": "Python API Reference | Supabase Docs",
        "language": "en",
        "sourceURL": "https://supabase.com/docs/reference/python/introduction",
        "description": "API reference for the Python Supabase SDK",
        "modifiedTime": "2024-09-06T19:20:40.301Z",
        "ogDescription": "API reference for the Python Supabase SDK",
        "publishedTime": "2024-09-06T19:20:40.300Z",
        "ogLocaleAlternate": [],
        "statusCode": 200
      }
    }
  ],
  "unique_links": [
    "https://supabase.com/docs/reference/python/initializing",
    "https://supabase.com/docs/reference/python/match",
    "https://supabase.com/docs/reference/python/eq",
    "https://supabase.com/docs/reference/python/ilike",
    "https://supabase.com/docs/reference/python/not",
    "https://supabase.com/docs/reference/python/containedby",
    "https://supabase.com/docs/reference/python/lt",
    "https://supabase.com/docs/reference/python/db-csv",
    "https://supabase.com/docs/reference/python/rangeadjacent",
    "https://supabase.com/docs/reference/python/explain",
    "https://supabase.com/docs/reference/python/overlaps",
    "https://supabase.com/docs/reference/python/rangelte",
    "https://supabase.com/docs/reference/python/using-filters",
    "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "https://supabase.com/docs/reference/python/gt",
    "https://supabase.com/docs/reference/python/introduction",
    "https://supabase.com/docs/reference/python/select",
    "https://supabase.com/docs/reference/python/upsert",
    "https://supabase.com/docs/reference/python/gte",
    "https://supabase.com/docs/reference/python/update",
    "https://supabase.com/docs/reference/python/using-modifiers",
    "https://supabase.com/docs/reference/python/rpc",
    "https://supabase.com/docs/reference/python/auth-api",
    "https://supabase.com/docs/reference/python/contains",
    "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "https://supabase.com/docs/reference/python/lte",
    "https://supabase.com/docs/reference/python/auth-signup",
    "https://supabase.com/docs/reference/python/or",
    "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "https://supabase.com/docs/reference/python/range",
    "https://supabase.com/docs/reference/python/neq",
    "https://supabase.com/docs/reference/python/installing",
    "https://supabase.com/docs/reference/python/rangegte",
    "https://supabase.com/docs/reference/python/is",
    "https://supabase.com/docs/reference/python/limit",
    "https://supabase.com/docs/reference/python/rangegt",
    "https://supabase.com/docs/reference/python/order",
    "https://supabase.com/docs/reference/python/in",
    "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "https://supabase.com/docs/reference/python/textsearch",
    "https://supabase.com/docs/reference/python/insert",
    "https://supabase.com/docs/reference/python/rangelt",
    "https://supabase.com/docs/reference/python/single",
    "https://supabase.com/docs/reference/python/filter",
    "https://supabase.com/docs/reference/python/delete",
    "https://supabase.com/docs/reference/python/maybesingle",
    "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "https://supabase.com/docs/reference/python/like",
    "https://supabase.com/docs/reference/python/undefined"
  ]
}