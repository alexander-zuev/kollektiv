{
  "too_small": [
    {
      "id": "59b1e136-0d9d-4886-a1fe-076fd2618d25",
      "size": 55,
      "headers": {
        "h1": "IP addresses - Anthropic",
        "h2": "",
        "h3": "#   IPv4"
      },
      "text": "Using the API\n\nIP addresses\n<code>160.79.104.0/23</code>\n<code>2607:6bc0::/48</code>\n\n- [IPv4](#ipv4)\n- [IPv6](#ipv6)\n"
    }
  ],
  "too_large": [
    {
      "id": "7ea09235-f1a4-4c12-86ce-54916dbb2a75",
      "size": 1058,
      "headers": {
        "h1": "Tool use (function calling) - Anthropic",
        "h2": "Tool use examples",
        "h3": ""
      },
      "text": "Here are a few code examples demonstrating various tool use patterns and techniques. For brevityâ€™s sake, the tools are simple tools, and the tool descriptions are shorter than would be ideal to ensure best performance.\n\nSingle tool example\n\nShell\n\nPython\n\nCopy\n\n```bash\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-3-5-sonnet-20240620\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\\\n        \"name\": \"get_weather\",\\\n        \"description\": \"Get the current weather in a given location\",\\\n        \"input_schema\": {\\\n            \"type\": \"object\",\\\n            \"properties\": {\\\n                \"location\": {\\\n                    \"type\": \"string\",\\\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\\\n                },\\\n                \"unit\": {\\\n                    \"type\": \"string\",\\\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\\\n                    \"description\": \"The unit of temperature, either \\\"celsius\\\" or \\\"fahrenheit\\\"\"\\\n                }\\\n            },\\\n            \"required\": [\"location\"]\\\n        }\\\n    }],\n    \"messages\": [{\"role\": \"user\", \"content\": \"What is the weather like in San Francisco?\"}]\n}'\n\n```\n\nClaude will return a response similar to:\n\nJSON\n\nCopy\n\n```JSON\n{\n  \"id\": \"msg_01Aq9w938a90dw8q\",\n  \"model\": \"claude-3-5-sonnet-20240620\",\n  \"stop_reason\": \"tool_use\",\n  \"role\": \"assistant\",\n  \"content\": [\\\n    {\\\n      \"type\": \"text\",\\\n      \"text\": \"<thinking>I need to call the get_weather function, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\\\n    },\\\n    {\\\n      \"type\": \"tool_use\",\\\n      \"id\": \"toolu_01A09q90qw90lq917835lq9\",\\\n      \"name\": \"get_weather\",\\\n      \"input\": {\"location\": \"San Francisco, CA\", \"unit\": \"celsius\"}\\\n    }\\\n  ]\n}\n\n```\n\nYou would then need to execute the <code>get_weather</code> function with the provided input, and return the result in a new <code>user</code> message:\n\nShell\n\nPython\n\nCopy\n\n```bash\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-3-5-sonnet-20240620\",\n    \"max_tokens\": 1024,\n    \"tools\": [\\\n        {\\\n            \"name\": \"get_weather\",\\\n            \"description\": \"Get the current weather in a given location\",\\\n            \"input_schema\": {\\\n                \"type\": \"object\",\\\n                \"properties\": {\\\n                    \"location\": {\\\n                        \"type\": \"string\",\\\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\\\n                    },\\\n                    \"unit\": {\\\n                        \"type\": \"string\",\\\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\\\n                        \"description\": \"The unit of temperature, either \\\"celsius\\\" or \\\"fahrenheit\\\"\"\\\n                    }\\\n                },\\\n                \"required\": [\"location\"]\\\n            }\\\n        }\\\n    ],\n    \"messages\": [\\\n        {\\\n            \"role\": \"user\",\\\n            \"content\": \"What is the weather like in San Francisco?\"\\\n        },\\\n        {\\\n            \"role\": \"assistant\",\\\n            \"content\": [\\\n                {\\\n                    \"type\": \"text\",\\\n                    \"text\": \"<thinking>I need to use get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\\\n                },\\\n                {\\\n                    \"type\": \"tool_use\",\\\n                    \"id\": \"toolu_01A09q90qw90lq917835lq9\",\\\n                    \"name\": \"get_weather\",\\\n                    \"input\": {\\\n                        \"location\": \"San Francisco, CA\",\\\n                        \"unit\": \"celsius\"\\\n                    }\\\n                }\\\n            ]\\\n        },\\\n        {\\\n            \"role\": \"user\",\\\n            \"content\": [\\\n                {\\\n                    \"type\": \"tool_result\",\\\n                    \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\\\n                    \"content\": \"15 degrees\"\\\n                }\\\n            ]\\\n        }\\\n    ]\n}'\n\n```\n"
    },
    {
      "id": "41c5cfa3-cddc-4d44-a57d-7ef14f85b444",
      "size": 1265,
      "headers": {
        "h1": "Streaming Messages - Anthropic",
        "h2": "Raw HTTP Stream response",
        "h3": "Streaming request with tool use"
      },
      "text": "In this request, we ask Claude to use a tool to tell us the weather.\n\nRequest\n\nCopy\n\n```bash\n  curl https://api.anthropic.com/v1/messages \\\n    -H \"content-type: application/json\" \\\n    -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    -H \"anthropic-version: 2023-06-01\" \\\n    -d '{\n      \"model\": \"claude-3-5-sonnet-20240620\",\n      \"max_tokens\": 1024,\n      \"tools\": [\\\n        {\\\n          \"name\": \"get_weather\",\\\n          \"description\": \"Get the current weather in a given location\",\\\n          \"input_schema\": {\\\n            \"type\": \"object\",\\\n            \"properties\": {\\\n              \"location\": {\\\n                \"type\": \"string\",\\\n                \"description\": \"The city and state, e.g. San Francisco, CA\"\\\n              }\\\n            },\\\n            \"required\": [\"location\"]\\\n          }\\\n        }\\\n      ],\n      \"tool_choice\": {\"type\": \"any\"},\n      \"messages\": [\\\n        {\\\n          \"role\": \"user\",\\\n          \"content\": \"What is the weather like in San Francisco?\"\\\n        }\\\n      ],\n      \"stream\": true\n    }'\n\n```\n\nResponse\n\nCopy\n\n```json\nevent: message_start\ndata: {\"type\":\"message_start\",\"message\":{\"id\":\"msg_014p7gG3wDgGV9EUtLvnow3U\",\"type\":\"message\",\"role\":\"assistant\",\"model\":\"claude-3-haiku-20240307\",\"stop_sequence\":null,\"usage\":{\"input_tokens\":472,\"output_tokens\":2},\"content\":[],\"stop_reason\":null}}\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":0,\"content_block\":{\"type\":\"text\",\"text\":\"\"}}\n\nevent: ping\ndata: {\"type\": \"ping\"}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\"Okay\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\",\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\" let\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\"'s\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\" check\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\" the\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\" weather\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\" for\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\" San\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\" Francisco\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\",\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\" CA\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"text_delta\",\"text\":\":\"}}\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":0}\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":1,\"content_block\":{\"type\":\"tool_use\",\"id\":\"toolu_01T1x1fJ34qAmk2tNTrN7Up6\",\"name\":\"get_weather\",\"input\":{}}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"{\\\"location\\\":\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\" \\\"San\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\" Francisc\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"o,\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\" CA\\\"\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\", \"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\\\"unit\\\": \\\"fah\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"renheit\\\"}\"}}\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":1}\n\nevent: message_delta\ndata: {\"type\":\"message_delta\",\"delta\":{\"stop_reason\":\"tool_use\",\"stop_sequence\":null},\"usage\":{\"output_tokens\":89}}\n\nevent: message_stop\ndata: {\"type\":\"message_stop\"}\n\n```\n"
    },
    {
      "id": "c0bc3f9e-4f1b-4fb8-a7e6-3c3eb37c1d87",
      "size": 1003,
      "headers": {
        "h1": "Create strong empirical evaluations - Anthropic",
        "h2": "Building evals and test cases",
        "h3": "Example evals"
      },
      "text": "\nRelevance and coherence (summarization) - ROUGE-L evaluation\n\n**What it measures**: ROUGE-L (Recall-Oriented Understudy for Gisting Evaluation - Longest Common Subsequence) evaluates the quality of generated summaries. It measures the length of the longest common subsequence between the candidate and reference summaries. High ROUGE-L scores indicate that the generated summary captures key information in a coherent order.\n\n**Example eval test cases**: 200 articles with reference summaries.\n\nCopy\n\n```python\nfrom rouge import Rouge\nimport anthropic\n\narticles = [\\\n    {\"text\": \"In a groundbreaking study, researchers at MIT...\", \"summary\": \"MIT scientists discover a new antibiotic...\"},\\\n    {\"text\": \"Jane Doe, a local hero, made headlines last week for saving... In city hall news, the budget... Meteorologists predict...\", \"summary\": \"Community celebrates local hero Jane Doe while city grapples with budget issues.\"},  # Edge case: Multi-topic\\\n    {\"text\": \"You won't believe what this celebrity did! ... extensive charity work ...\", \"summary\": \"Celebrity's extensive charity work surprises fans\"},  # Edge case: Misleading title\\\n    # ... 197 more articles\\\n]\n\nclient = anthropic.Anthropic()\n\ndef get_completion(prompt: str):\n    message = client.messages.create(\n        model=\"claude-3-5-sonnet-20240620\",\n        max_tokens=1024,\n        messages=[\\\n        {\"role\": \"user\", \"content\": prompt}\\\n        ]\n    )\n    return message.content[0].text\n\ndef evaluate_rouge_l(model_output, true_summary):\n    rouge = Rouge()\n    scores = rouge.get_scores(model_output, true_summary)\n    return scores[0]['rouge-l']['f']  # ROUGE-L F1 score\n\noutputs = [get_completion(f\"Summarize this article in 1-2 sentences:\\n\\n{article['text']}\") for article in articles]\nrelevance_scores = [evaluate_rouge_l(output, article['summary']) for output, article in zip(outputs, articles)]\nprint(f\"Average ROUGE-L F1 Score: {sum(relevance_scores) / len(relevance_scores)}\")\n\n```\n\nTone and style (customer service) - LLM-based Likert scale\n\n**What it measures**: The LLM-based Likert scale is a psychometric scale that uses an LLM to judge subjective attitudes or perceptions. Here, itâ€™s used to rate the tone of responses on a scale from 1 to 5. Itâ€™s ideal for evaluating nuanced aspects like empathy, professionalism, or patience that are difficult to quantify with traditional metrics.\n\n**Example eval test cases**: 100 customer inquiries with target tone (empathetic, professional, concise).\n\nCopy\n\n```python\nimport anthropic\n\ninquiries = [\\\n    {\"text\": \"This is the third time you've messed up my order. I want a refund NOW!\", \"tone\": \"empathetic\"},  # Edge case: Angry customer\\\n    {\"text\": \"I tried resetting my password but then my account got locked...\", \"tone\": \"patient\"},  # Edge case: Complex issue\\\n    {\"text\": \"I can't believe how good your product is. It's ruined all others for me!\", \"tone\": \"professional\"},  # Edge case: Compliment as complaint\\\n    # ... 97 more inquiries\\\n]\n\nclient = anthropic.Anthropic()\n\ndef get_completion(prompt: str):\n    message = client.messages.create(\n        model=\"claude-3-5-sonnet-20240620\",\n        max_tokens=2048,\n        messages=[\\\n        {\"role\": \"user\", \"content\": prompt}\\\n        ]\n    )\n    return message.content[0].text\n\ndef evaluate_likert(model_output, target_tone):\n    tone_prompt = f\"\"\"Rate this customer service response on a scale of 1-5 for being {target_tone}:\n    <response>{model_output}</response>\n    1: Not at all {target_tone}\n    5: Perfectly {target_tone}\n    Output only the number.\"\"\"\n\n    # Generally best practice to use a different model to evaluate than the model used to generate the evaluated output\n    response = client.messages.create(model=\"claude-3-opus-20240229\", max_tokens=50, messages=[{\"role\": \"user\", \"content\": tone_prompt}])\n    return int(response.content[0].text.strip())\n\noutputs = [get_completion(f\"Respond to this customer inquiry: {inquiry['text']}\") for inquiry in inquiries]\ntone_scores = [evaluate_likert(output, inquiry['tone']) for output, inquiry in zip(outputs, inquiries)]\nprint(f\"Average Tone Score: {sum(tone_scores) / len(tone_scores)}\")\n\n```\n"
    }
  ]
}