[
  {
    "chunk_id": "684b3459-2101-4598-bf13-dc99a1a8d948",
    "metadata": {
      "token_count": 86,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/sveltekit",
      "page_title": "Supabase Auth with SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Supabase Auth with SvelteKit"
      },
      "text": "* * *\n\nWe generally recommend using the new `@supabase/ssr` package instead of `auth-helpers`. `@supabase/ssr` takes the core concepts of the Auth Helpers package and makes them available to any server framework. Check out the [migration doc](/docs/guides/auth/server-side/migrating-to-ssr-from-auth-helpers) to learn more.\n\nSee legacy docs\n"
    }
  },
  {
    "chunk_id": "9e2f7c4e-959e-4a0f-859a-c5c178680de0",
    "metadata": {
      "token_count": 120,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "* * *\n\nSet up Server-Side Auth to use cookie-based authentication with SvelteKit.\n\n1\n\n### Install Supabase packages\n\nInstall the `@supabase/supabase-js` package and the helper `@supabase/ssr` package.\n\n`\n_10\nnpm install @supabase/supabase-js @supabase/ssr\n`\n\n2\n\n### Set up environment variables\n\nCreate a `.env.local` file in your project root directory.\n\nFill in your `PUBLIC_SUPABASE_URL` and `PUBLIC_SUPABASE_ANON_KEY`:\n"
    }
  },
  {
    "chunk_id": "11900a05-d085-4351-8f2c-e0b49ee38651",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "\n###### Project URL\n\nLoading...\n\n###### Anon key\n\nLoading...\n\n.env.local\n\n`\n_10\nPUBLIC_SUPABASE_URL=<your_supabase_project_url>\n_10\nPUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>\n`\n\n3\n\n### Set up server-side hooks\n\nSet up server-side hooks in `src/hooks.server.ts`. The hooks:\n\n- Create a request-specific Supabase client, using the user credentials from the request cookie. This client is used for server-only code.\n",
      "overlap_text": {
        "previous_chunk_id": "9e2f7c4e-959e-4a0f-859a-c5c178680de0",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n @supabase/ssr\n`\n\n2\n\n### Set up environment variables\n\nCreate a `.env.local` file in your project root directory.\n\nFill in your `PUBLIC_SUPABASE_URL` and `PUBLIC_SUPABASE_ANON_KEY`:\n"
      }
    }
  },
  {
    "chunk_id": "16419dac-94d5-4433-aee9-3592499aef65",
    "metadata": {
      "token_count": 833,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "- Check user authentication.\n- Guard protected pages.\n\nsrc/hooks.server.ts\n\n``\n_81\nimport { createServerClient } from '@supabase/ssr'\n_81\nimport { type Handle, redirect } from '@sveltejs/kit'\n_81\nimport { sequence } from '@sveltejs/kit/hooks'\n_81\n_81\nimport { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'\n_81\n_81\nconst supabase: Handle = async ({ event, resolve }) => {\n_81\n/**\n_81\n* Creates a Supabase client specific to this server request.\n_81\n*\n_81\n* The Supabase client gets the Auth token from the request cookies.\n_81\n*/\n_81\nevent.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n_81\n    cookies: {\n_81\n      getAll: () => event.cookies.getAll(),\n_81\n      /**\n_81\n       * SvelteKit's cookies API requires `path` to be explicitly set in\n_81\n       * the cookie options. Setting `path` to `/` replicates previous/\n_81\n       * standard behavior.\n_81\n       */\n_81\n      setAll: (cookiesToSet) => {\n_81\n        cookiesToSet.forEach(({ name, value, options }) => {\n_81\n          event.cookies.set(name, value, { ...options, path: '/' })\n_81\n        })\n_81\n      },\n_81\n    },\n_81\n})\n_81\n_81\n/**\n_81\n* Unlike `supabase.auth.getSession()`, which returns the session _without_\n_81\n* validating the JWT, this function also calls `getUser()` to validate the\n_81\n* JWT before returning the session.\n_81\n*/\n_81\nevent.locals.safeGetSession = async () => {\n_81\n    const {\n_81\n      data: { session },\n_81\n    } = await event.locals.supabase.auth.getSession()\n_81\n    if (!session) {\n_81\n      return { session: null, user: null }\n_81\n    }\n_81\n_81\n    const {\n_81\n      data: { user },\n_81\n      error,\n_81\n    } = await event.locals.supabase.auth.getUser()\n_81\n    if (error) {\n_81\n      // JWT validation has failed\n_81\n      return { session: null, user: null }\n_81\n    }\n_81\n_81\n    return { session, user }\n_81\n}\n_81\n_81\nreturn resolve(event, {\n_81\n    filterSerializedResponseHeaders(name) {\n_81\n      /**\n_81\n       * Supabase libraries use the `content-range` and `x-supabase-api-version`\n_81\n       * headers, so we need to tell SvelteKit to pass it through.\n_81\n       */\n_81\n      return name === 'content-range' || name === 'x-supabase-api-version'\n_81\n    },\n_81\n})\n_81\n}\n_81\n_81\nconst authGuard: Handle = async ({ event, resolve }) => {\n_81\nconst { session, user } = await event.locals.safeGetSession()\n_81\nevent.locals.session = session\n_81\nevent.locals.user = user\n_81\n_81\nif (!event.locals.session && event.url.pathname.startsWith('/private')) {\n_81\n    redirect(303, '/auth')\n_81\n}\n_81\n_81\nif (event.locals.session && event.url.pathname === '/auth') {\n_81\n    redirect(303, '/private')\n_81\n}\n_81\n_81\nreturn resolve(event)\n_81\n}\n_81\n_81\nexport const handle: Handle = sequence(supabase, authGuard)\n",
      "overlap_text": {
        "previous_chunk_id": "11900a05-d085-4351-8f2c-e0b49ee38651",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n### Set up server-side hooks\n\nSet up server-side hooks in `src/hooks.server.ts`. The hooks:\n\n- Create a request-specific Supabase client, using the user credentials from the request cookie. This client is used for server-only code.\n"
      }
    }
  },
  {
    "chunk_id": "021232cc-82f8-43ec-baf9-0e2e4b03607e",
    "metadata": {
      "token_count": 208,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "``\n\n4\n\n### Create TypeScript definitions\n\nTo prevent TypeScript errors, add type definitions for the new `event.locals` properties.\n\nsrc/app.d.ts\n\n`\n_20\nimport type { Session, SupabaseClient, User } from '@supabase/supabase-js'\n_20\n_20\ndeclare global {\n_20\nnamespace App {\n_20\n    // interface Error {}\n_20\n    interface Locals {\n_20\n      supabase: SupabaseClient\n_20\n      safeGetSession: () => Promise<{ session: Session | null; user: User | null }>\n_20\n      session: Session | null\n_20\n      user: User | null\n_20\n    }\n_20\n    interface PageData {\n_20\n      session: Session | null\n_20\n    }\n_20\n    // interface PageState {}\n_20\n    // interface Platform {}\n_20\n}\n_20\n}\n_20\n_20\nexport {}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "16419dac-94d5-4433-aee9-3592499aef65",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n_81\n    redirect(303, '/private')\n_81\n}\n_81\n_81\nreturn resolve(event)\n_81\n}\n_81\n_81\nexport const handle: Handle = sequence(supabase, authGuard)\n"
      }
    }
  },
  {
    "chunk_id": "4a2553bf-90fb-4f6b-af34-c6c0f252120a",
    "metadata": {
      "token_count": 512,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "5\n\n### Create a Supabase client in your root layout\n\nCreate a Supabase client in your root `+layout.ts`. This client can be used to access Supabase from the client or the server. In order to get access to the Auth token on the server, use a `+layout.server.ts` file to pass in the session from `event.locals`.\n\nsrc/routes/+layout.ts\n\nsrc/routes/+layout.server.ts\n\n``\n_43\nimport { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr'\n_43\nimport { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'\n_43\nimport type { LayoutLoad } from './$types'\n_43\n_43\nexport const load: LayoutLoad = async ({ data, depends, fetch }) => {\n_43\n/**\n_43\n* Declare a dependency so the layout can be invalidated, for example, on\n_43\n* session refresh.\n_43\n*/\n_43\ndepends('supabase:auth')\n_43\n_43\nconst supabase = isBrowser()\n_43\n    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n_43\n        global: {\n_43\n          fetch,\n_43\n        },\n_43\n      })\n_43\n    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n_43\n        global: {\n_43\n          fetch,\n_43\n        },\n_43\n        cookies: {\n_43\n          getAll() {\n_43\n            return data.cookies\n_43\n          },\n_43\n        },\n_43\n      })\n_43\n_43\n/**\n_43\n* It's fine to use `getSession` here, because on the client, `getSession` is\n_43\n* safe, and on the server, it reads `session` from the `LayoutData`, which\n_43\n* safely checked the session using `safeGetSession`.\n_43\n*/\n_43\nconst {\n_43\n    data: { session },\n_43\n} = await supabase.auth.getSession()\n_43\n_43\nconst {\n_43\n    data: { user },\n_43\n} = await supabase.auth.getUser()\n_43\n_43\nreturn { session, supabase, user }\n_43\n}\n``\n\n",
      "overlap_text": {
        "previous_chunk_id": "021232cc-82f8-43ec-baf9-0e2e4b03607e",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n {\n_20\n      session: Session | null\n_20\n    }\n_20\n    // interface PageState {}\n_20\n    // interface Platform {}\n_20\n}\n_20\n}\n_20\n_20\nexport {}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "263f02ba-5a83-401a-9596-cb97bc2940d5",
    "metadata": {
      "token_count": 204,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "6\n\n### Listen to Auth events\n\nSet up a listener for Auth events on the client, to handle session refreshes and signouts.\n\nsrc/routes/+layout.svelte\n\n`\n_19\n<script>\n_19\n\timport { invalidate } from '$app/navigation';\n_19\n\timport { onMount } from 'svelte';\n_19\n_19\n\texport let data;\n_19\n\t$: ({ session, supabase } = data);\n_19\n_19\n\tonMount(() => {\n_19\n\t\tconst { data } = supabase.auth.onAuthStateChange((_, newSession) => {\n_19\n\t\t\tif (newSession?.expires_at !== session?.expires_at) {\n_19\n\t\t\t\tinvalidate('supabase:auth');\n_19\n\t\t\t}\n_19\n\t\t});\n_19\n_19\n\t\treturn () => data.subscription.unsubscribe();\n_19\n\t});\n_19\n</script>\n_19\n_19\n<slot />\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "4a2553bf-90fb-4f6b-af34-c6c0f252120a",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n43\n_43\nconst {\n_43\n    data: { user },\n_43\n} = await supabase.auth.getUser()\n_43\n_43\nreturn { session, supabase, user }\n_43\n}\n``\n\n"
      }
    }
  },
  {
    "chunk_id": "73962b26-d46f-40ca-ab43-a104bde439d8",
    "metadata": {
      "token_count": 175,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "7\n\n### Create your first page\n\nCreate your first page. This example page calls Supabase from the server to get a list of countries from the database.\n\nThis is an example of a public page that uses publicly readable data.\n\nTo populate your database, run the [countries quickstart](/dashboard/project/_/sql/quickstarts) from your dashboard.\n\nsrc/routes/+page.server.ts\n\nsrc/routes/+page.svelte\n\n`\n_10\nimport type { PageServerLoad } from './$types'\n_10\n_10\nexport const load: PageServerLoad = async ({ locals: { supabase } }) => {\n_10\nconst { data: countries } = await supabase.from('countries').select('name').limit(5).order('name')\n_10\nreturn { countries: countries ?? [] }\n_10\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "263f02ba-5a83-401a-9596-cb97bc2940d5",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n:auth');\n_19\n\t\t\t}\n_19\n\t\t});\n_19\n_19\n\t\treturn () => data.subscription.unsubscribe();\n_19\n\t});\n_19\n</script>\n_19\n_19\n<slot />\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "33fe855e-0255-441f-8a58-de515042d6a1",
    "metadata": {
      "token_count": 107,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "8\n\n### Change the Auth confirmation path\n\nIf you have email confirmation turned on (the default), a new user will receive an email confirmation after signing up.\n\nChange the email template to support a server-side authentication flow.\n\nGo to the [Auth templates](https://supabase.com/dashboard/project/_/auth/templates) page in your dashboard. In the `Confirm signup` template, change `{{ .ConfirmationURL }}` to `{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email`.\n",
      "overlap_text": {
        "previous_chunk_id": "73962b26-d46f-40ca-ab43-a104bde439d8",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n } }) => {\n_10\nconst { data: countries } = await supabase.from('countries').select('name').limit(5).order('name')\n_10\nreturn { countries: countries ?? [] }\n_10\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "30d571f4-0a46-4e5e-9b65-ce3335d9fae5",
    "metadata": {
      "token_count": 386,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "\n9\n\n### Create a login page\n\nNext, create a login page to let users sign up and log in.\n\nsrc/routes/auth/+page.server.ts\n\nsrc/routes/auth/+page.svelte\n\nsrc/routes/auth/+layout.svelte\n\nsrc/routes/auth/error/+page.svelte\n\n`\n_32\nimport { redirect } from '@sveltejs/kit'\n_32\n_32\nimport type { Actions } from './$types'\n_32\n_32\nexport const actions: Actions = {\n_32\nsignup: async ({ request, locals: { supabase } }) => {\n_32\n    const formData = await request.formData()\n_32\n    const email = formData.get('email') as string\n_32\n    const password = formData.get('password') as string\n_32\n_32\n    const { error } = await supabase.auth.signUp({ email, password })\n_32\n    if (error) {\n_32\n      console.error(error)\n_32\n      redirect(303, '/auth/error')\n_32\n    } else {\n_32\n      redirect(303, '/')\n_32\n    }\n_32\n},\n_32\nlogin: async ({ request, locals: { supabase } }) => {\n_32\n    const formData = await request.formData()\n_32\n    const email = formData.get('email') as string\n_32\n    const password = formData.get('password') as string\n_32\n_32\n    const { error } = await supabase.auth.signInWithPassword({ email, password })\n_32\n    if (error) {\n_32\n      console.error(error)\n_32\n      redirect(303, '/auth/error')\n_32\n    } else {\n_32\n      redirect(303, '/private')\n_32\n    }\n_32\n},\n_32\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "33fe855e-0255-441f-8a58-de515042d6a1",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n/dashboard/project/_/auth/templates) page in your dashboard. In the `Confirm signup` template, change `{{ .ConfirmationURL }}` to `{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email`.\n"
      }
    }
  },
  {
    "chunk_id": "cdaa6d19-3380-45f6-87cb-5f31c22c7e27",
    "metadata": {
      "token_count": 360,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "10\n\n### Create the signup confirmation route\n\nFinish the signup flow by creating the API route to handle email verification.\n\nsrc/routes/auth/confirm/+server.ts\n\n``\n_31\nimport type { EmailOtpType } from '@supabase/supabase-js'\n_31\nimport { redirect } from '@sveltejs/kit'\n_31\n_31\nimport type { RequestHandler } from './$types'\n_31\n_31\nexport const GET: RequestHandler = async ({ url, locals: { supabase } }) => {\n_31\nconst token_hash = url.searchParams.get('token_hash')\n_31\nconst type = url.searchParams.get('type') as EmailOtpType | null\n_31\nconst next = url.searchParams.get('next') ?? '/'\n_31\n_31\n/**\n_31\n* Clean up the redirect URL by deleting the Auth flow parameters.\n_31\n*\n_31\n* `next` is preserved for now, because it's needed in the error case.\n_31\n*/\n_31\nconst redirectTo = new URL(url)\n_31\nredirectTo.pathname = next\n_31\nredirectTo.searchParams.delete('token_hash')\n_31\nredirectTo.searchParams.delete('type')\n_31\n_31\nif (token_hash && type) {\n_31\n    const { error } = await supabase.auth.verifyOtp({ type, token_hash })\n_31\n    if (!error) {\n_31\n      redirectTo.searchParams.delete('next')\n_31\n      redirect(303, redirectTo)\n_31\n    }\n_31\n}\n_31\n_31\nredirectTo.pathname = '/auth/error'\n_31\nredirect(303, redirectTo)\n_31\n}\n``\n\n",
      "overlap_text": {
        "previous_chunk_id": "30d571f4-0a46-4e5e-9b65-ce3335d9fae5",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n\n      console.error(error)\n_32\n      redirect(303, '/auth/error')\n_32\n    } else {\n_32\n      redirect(303, '/private')\n_32\n    }\n_32\n},\n_32\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "60b9fb88-00ec-441e-a713-f14d7e9b72a7",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "11\n\n### Create private routes\n\nCreate private routes that can only be accessed by authenticated users. The routes in the `private` directory are protected by the route guard in `hooks.server.ts`.\n\nTo ensure that `hooks.server.ts` runs for every nested path, put a `+layout.server.ts` file in the `private` directory. This file can be empty, but must exist to protect routes that don't have their own `+layout|page.server.ts`.\n\nsrc/routes/private/+layout.server.ts\n\n",
      "overlap_text": {
        "previous_chunk_id": "cdaa6d19-3380-45f6-87cb-5f31c22c7e27",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n('next')\n_31\n      redirect(303, redirectTo)\n_31\n    }\n_31\n}\n_31\n_31\nredirectTo.pathname = '/auth/error'\n_31\nredirect(303, redirectTo)\n_31\n}\n``\n\n"
      }
    }
  },
  {
    "chunk_id": "fad567b5-393f-4e74-9683-aa9da084d7e5",
    "metadata": {
      "token_count": 92,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/sveltekit",
      "page_title": "Setting up Server-Side Auth for SvelteKit | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for SvelteKit"
      },
      "text": "src/routes/private/+layout.svelte\n\nSQL\n\nsrc/routes/private/+page.server.ts\n\nsrc/routes/private/+page.svelte\n\n``\n_10\n/**\n_10\n* This file is necessary to ensure protection of all routes in the `private`\n_10\n* directory. It makes the routes in this directory _dynamic_ routes, which\n_10\n* send a server request, and thus trigger `hooks.server.ts`.\n_10\n**/\n``\n",
      "overlap_text": {
        "previous_chunk_id": "60b9fb88-00ec-441e-a713-f14d7e9b72a7",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for SvelteKit\n\n put a `+layout.server.ts` file in the `private` directory. This file can be empty, but must exist to protect routes that don't have their own `+layout|page.server.ts`.\n\nsrc/routes/private/+layout.server.ts\n\n"
      }
    }
  },
  {
    "chunk_id": "5cb58177-d8a2-4f3a-b95a-d64017986e64",
    "metadata": {
      "token_count": 128,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/custom-access-token-hook",
      "page_title": "Custom Access Token Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Custom Access Token Hook",
        "h2": "Customize the access token issued by Supabase Auth"
      },
      "text": "* * *\n\nThe custom access token hook runs before a token is issued and allows you to add additional claims based on the authentication method used.\n\nClaims returned must conform to our specification. Supabase Auth will check for these claims after the hook is run and return an error if they are not present.\n\nThese are the fields currently available on an access token:\n\nRequired Claims: `aud`, `exp`, `iat`, `sub`, `email`, `phone`, `role`, `aal`, `session_id`\nOptional Claims: `jti`, `iss`, `nbf`, `app_metadata`, `user_metadata`, `amr`\n\n"
    }
  },
  {
    "chunk_id": "7e290d28-a609-458d-8da1-998d2bf5c733",
    "metadata": {
      "token_count": 127,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/custom-access-token-hook",
      "page_title": "Custom Access Token Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Custom Access Token Hook",
        "h2": "Customize the access token issued by Supabase Auth"
      },
      "text": "**Inputs**\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `user_id` | `string` | Unique identifier for the user attempting to sign in. |\n| `claims` | `object` | Claims which are included in the access token. |\n| `authentication_method` | `string` | The authentication method used to request the access token. Possible values include: `oauth`, `password`, `otp`, `totp`, `recovery`, `invite`, `sso/saml`, `magiclink`, `email/signup`, `email_change`, `token_refresh`, `anonymous`. |\n\n",
      "overlap_text": {
        "previous_chunk_id": "5cb58177-d8a2-4f3a-b95a-d64017986e64",
        "text": "Content of the previous chunk for context: h1: Custom Access Token Hook h2: Customize the access token issued by Supabase Auth\n\nexp`, `iat`, `sub`, `email`, `phone`, `role`, `aal`, `session_id`\nOptional Claims: `jti`, `iss`, `nbf`, `app_metadata`, `user_metadata`, `amr`\n\n"
      }
    }
  },
  {
    "chunk_id": "4dfffe86-28ac-4d0c-a747-eba5db9f751a",
    "metadata": {
      "token_count": 234,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/custom-access-token-hook",
      "page_title": "Custom Access Token Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Custom Access Token Hook",
        "h2": "Customize the access token issued by Supabase Auth"
      },
      "text": "JSONJSON Schema\n\n`\n1\n{\n2\n\"user_id\": \"8ccaa7af-909f-44e7-84cb-67cdccb56be6\",\n3\n\"claims\": {\n4\n    \"aud\": \"authenticated\",\n5\n    \"exp\": 1715690221,\n6\n    \"iat\": 1715686621,\n7\n    \"sub\": \"8ccaa7af-909f-44e7-84cb-67cdccb56be6\",\n8\n    \"email\": \"\",\n9\n    \"phone\": \"\",\n10\n    \"app_metadata\": {},\n11\n    \"user_metadata\": {},\n12\n    \"role\": \"authenticated\",\n13\n    \"aal\": \"aal1\",\n14\n    \"amr\": [ { \"method\": \"anonymous\", \"timestamp\": 1715686621 } ],\n15\n    \"session_id\": \"4b938a09-5372-4177-a314-cfa292099ea2\",\n16\n    \"is_anonymous\": true\n17\n},\n18\n\"authentication_method\": \"anonymous\"\n19\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "7e290d28-a609-458d-8da1-998d2bf5c733",
        "text": "Content of the previous chunk for context: h1: Custom Access Token Hook h2: Customize the access token issued by Supabase Auth\n\n Possible values include: `oauth`, `password`, `otp`, `totp`, `recovery`, `invite`, `sso/saml`, `magiclink`, `email/signup`, `email_change`, `token_refresh`, `anonymous`. |\n\n"
      }
    }
  },
  {
    "chunk_id": "0f3114d3-cff6-4f06-9104-a0e40a93e23f",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/custom-access-token-hook",
      "page_title": "Custom Access Token Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Custom Access Token Hook",
        "h2": "Customize the access token issued by Supabase Auth"
      },
      "text": "**Outputs**\n\nReturn these only if your hook processed the input without errors.\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `claims` | `object` | The updated claims after the hook has been run. |\n\nSQLHTTP\n\nAdd admin roleAdd claim via plv8Restrict access to SSO users\n\nYou can allow registered admin users to perform restricted actions by granting an `admin` claim to their token.\n\nCreate a profiles table with an `is_admin` flag:\n",
      "overlap_text": {
        "previous_chunk_id": "4dfffe86-28ac-4d0c-a747-eba5db9f751a",
        "text": "Content of the previous chunk for context: h1: Custom Access Token Hook h2: Customize the access token issued by Supabase Auth\n\nsession_id\": \"4b938a09-5372-4177-a314-cfa292099ea2\",\n16\n    \"is_anonymous\": true\n17\n},\n18\n\"authentication_method\": \"anonymous\"\n19\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "1a83433b-5fc3-4b76-8dd8-2ee34fe606b1",
    "metadata": {
      "token_count": 394,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/custom-access-token-hook",
      "page_title": "Custom Access Token Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Custom Access Token Hook",
        "h2": "Customize the access token issued by Supabase Auth"
      },
      "text": "\n`\n1\ncreate table profiles (\n2\nuser_id uuid not null primary key references auth.users (id),\n3\nis_admin boolean not null default false\n4\n);\n`\n\nCreate a hook:\n\n`\n1\ncreate or replace function public.custom_access_token_hook(event jsonb)\n2\nreturns jsonb\n3\nlanguage plpgsql\n4\nas $$\n5\ndeclare\n6\n    claims jsonb;\n7\n    is_admin boolean;\n8\nbegin\n9\n    -- Check if the user is marked as admin in the profiles table\n10\n    select is_admin into is_admin from profiles where user_id = (event->>'user_id')::uuid;\n11\n12\n    -- Proceed only if the user is an admin\n13\n    if is_admin then\n14\n      claims := event->'claims';\n15\n16\n      -- Check if 'app_metadata' exists in claims\n17\n      if jsonb_typeof(claims->'app_metadata') is null then\n18\n        -- If 'app_metadata' does not exist, create an empty object\n19\n        claims := jsonb_set(claims, '{app_metadata}', '{}');\n20\n      end if;\n21\n22\n      -- Set a claim of 'admin'\n23\n      claims := jsonb_set(claims, '{app_metadata, admin}', 'true');\n24\n25\n      -- Update the 'claims' object in the original event\n26\n      event := jsonb_set(event, '{claims}', claims);\n27\n    end if;\n28\n29\n    -- Return the modified or original event\n30\n    return event;\n31\nend;\n32\n$$;\n33\n34\ngrant all\n35\non table public.profiles\n36\nto supabase_auth_admin;\n37\n38\nrevoke all\n39\non table public.profiles\n40\nfrom authenticated, anon, public;\n`\n",
      "overlap_text": {
        "previous_chunk_id": "0f3114d3-cff6-4f06-9104-a0e40a93e23f",
        "text": "Content of the previous chunk for context: h1: Custom Access Token Hook h2: Customize the access token issued by Supabase Auth\n\nAdd admin roleAdd claim via plv8Restrict access to SSO users\n\nYou can allow registered admin users to perform restricted actions by granting an `admin` claim to their token.\n\nCreate a profiles table with an `is_admin` flag:\n"
      }
    }
  },
  {
    "chunk_id": "02df684f-92f1-43b9-9da8-7d2cc289c1b1",
    "metadata": {
      "token_count": 113,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-email-hook",
      "page_title": "Send Email Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send Email Hook",
        "h2": "Use a custom email provider to send authentication messages"
      },
      "text": "* * *\n\nThe Send Email Hook runs before an email is sent and allows for flexibility around email sending. You can use this hook to configure a back-up email provider or add internationalization to your emails.\n\n**Inputs**\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `user` | [`User`](/docs/guides/auth/users#the-user-object) | The user attempting to sign in. |\n| `email` | `object` | Metadata specific to the email sending process. Includes the OTP and `token_hash`. |\n\n"
    }
  },
  {
    "chunk_id": "e2d90a4a-73ab-4b8a-adb0-081bd3688f9f",
    "metadata": {
      "token_count": 717,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-email-hook",
      "page_title": "Send Email Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send Email Hook",
        "h2": "Use a custom email provider to send authentication messages"
      },
      "text": "JSONJSON Schema\n\n`\n_49\n{\n_49\n\"user\": {\n_49\n    \"id\": \"8484b834-f29e-4af2-bf42-80644d154f76\",\n_49\n    \"aud\": \"authenticated\",\n_49\n    \"role\": \"authenticated\",\n_49\n    \"email\": \"john@soupbase.io\",\n_49\n    \"phone\": \"\",\n_49\n    \"app_metadata\": {\n_49\n      \"provider\": \"email\",\n_49\n      \"providers\": [\"email\"]\n_49\n    },\n_49\n    \"user_metadata\": {\n_49\n      \"email\": \"john@soupbase.io\",\n_49\n      \"email_verified\": false,\n_49\n      \"phone_verified\": false,\n_49\n      \"sub\": \"8484b834-f29e-4af2-bf42-80644d154f76\"\n_49\n    },\n_49\n    \"identities\": [\\\n_49\\\n      {\\\n_49\\\n        \"identity_id\": \"bc26d70b-517d-4826-bce4-413a5ff257e7\",\\\n_49\\\n        \"id\": \"8484b834-f29e-4af2-bf42-80644d154f76\",\\\n_49\\\n        \"user_id\": \"8484b834-f29e-4af2-bf42-80644d154f76\",\\\n_49\\\n        \"identity_data\": {\\\n_49\\\n          \"email\": \"john@soupbase.io\",\\\n_49\\\n          \"email_verified\": false,\\\n_49\\\n          \"phone_verified\": false,\\\n_49\\\n          \"sub\": \"8484b834-f29e-4af2-bf42-80644d154f76\"\\\n_49\\\n        },\\\n_49\\\n        \"provider\": \"email\",\\\n_49\\\n        \"last_sign_in_at\": \"2024-05-14T12:56:33.824231484Z\",\\\n_49\\\n        \"created_at\": \"2024-05-14T12:56:33.824261Z\",\\\n_49\\\n        \"updated_at\": \"2024-05-14T12:56:33.824261Z\",\\\n_49\\\n        \"email\": \"john@soupbase.io\"\\\n_49\\\n      }\\\n_49\\\n    ],\n_49\n    \"created_at\": \"2024-05-14T12:56:33.821567Z\",\n_49\n    \"updated_at\": \"2024-05-14T12:56:33.825595Z\",\n_49\n    \"is_anonymous\": false\n_49\n},\n_49\n\"email_data\": {\n_49\n    \"token\": \"305805\",\n_49\n    \"token_hash\": \"7d5b7b1964cf5d388340a7f04f1dbb5eeb6c7b52ef8270e1737a58d0\",\n_49\n    \"redirect_to\": \"http://localhost:3000/\",\n_49\n    \"email_action_type\": \"signup\",\n_49\n    \"site_url\": \"http://localhost:9999\",\n_49\n    \"token_new\": \"\",\n_49\n    \"token_hash_new\": \"\"\n_49\n}\n_49\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "02df684f-92f1-43b9-9da8-7d2cc289c1b1",
        "text": "Content of the previous chunk for context: h1: Send Email Hook h2: Use a custom email provider to send authentication messages\n\n [`User`](/docs/guides/auth/users#the-user-object) | The user attempting to sign in. |\n| `email` | `object` | Metadata specific to the email sending process. Includes the OTP and `token_hash`. |\n\n"
      }
    }
  },
  {
    "chunk_id": "e268cbc1-e715-4003-8c9b-1effc0f52a2a",
    "metadata": {
      "token_count": 132,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-email-hook",
      "page_title": "Send Email Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send Email Hook",
        "h2": "Use a custom email provider to send authentication messages"
      },
      "text": "**Outputs**\n\n- No outputs are required. An empty response with a status code of 200 is taken as a successful response.\n\nSQLHTTP\n\nUse Resend as an email providerAdd Internationalization for Email Templates\n\nYou can configure [Resend](https://resend.com/) as the custom email provider through the \"Send Email\" hook. This allows you to take advantage of Resend's developer-friendly APIs to send emails and leverage [React Email](https://react.email/) for managing your email templates. For a more advanced React Email tutorial, refer to [this guide](/docs/guides/functions/examples/auth-send-email-hook-react-email-resend).\n",
      "overlap_text": {
        "previous_chunk_id": "e2d90a4a-73ab-4b8a-adb0-081bd3688f9f",
        "text": "Content of the previous chunk for context: h1: Send Email Hook h2: Use a custom email provider to send authentication messages\n\n_action_type\": \"signup\",\n_49\n    \"site_url\": \"http://localhost:9999\",\n_49\n    \"token_new\": \"\",\n_49\n    \"token_hash_new\": \"\"\n_49\n}\n_49\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "31c51b94-0580-4d89-a4ee-334c9161f345",
    "metadata": {
      "token_count": 122,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-email-hook",
      "page_title": "Send Email Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send Email Hook",
        "h2": "Use a custom email provider to send authentication messages"
      },
      "text": "\nIf you want to send emails through the Supabase Resend integration, which uses Resend's SMTP server, check out [this integration](/partners/integrations/resend) instead.\n\nCreate a `.env` file with the following environment variables:\n\n`\n_10\nRESEND_API_KEY=your_resend_api_key\n_10\nSEND_EMAIL_HOOK_SECRET=<base64_secret>\n`\n\nYou can generate the secret in the [Auth Hooks](/dashboard/project/_/auth/hooks) section of the Supabase dashboard. Make sure to remove the `v1,whsec_` prefix!\n\n",
      "overlap_text": {
        "previous_chunk_id": "e268cbc1-e715-4003-8c9b-1effc0f52a2a",
        "text": "Content of the previous chunk for context: h1: Send Email Hook h2: Use a custom email provider to send authentication messages\n\n to send emails and leverage [React Email](https://react.email/) for managing your email templates. For a more advanced React Email tutorial, refer to [this guide](/docs/guides/functions/examples/auth-send-email-hook-react-email-resend).\n"
      }
    }
  },
  {
    "chunk_id": "65672cbd-de10-438d-9c5f-ff6cf944828f",
    "metadata": {
      "token_count": 624,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-email-hook",
      "page_title": "Send Email Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send Email Hook",
        "h2": "Use a custom email provider to send authentication messages"
      },
      "text": "Set the secrets in your Supabase project:\n\n`\n_10\nsupabase secrets set --env-file .env\n`\n\nCreate a new edge function:\n\n`\n_10\nsupabase functions new send-email\n`\n\nAdd the following code to your edge function:\n\n``\n_61\nimport { Webhook } from \"https://esm.sh/standardwebhooks@1.0.0\";\n_61\nimport { Resend } from \"npm:resend\";\n_61\n_61\nconst resend = new Resend(Deno.env.get(\"RESEND_API_KEY\") as string);\n_61\nconst hookSecret = Deno.env.get(\"SEND_EMAIL_HOOK_SECRET\") as string;\n_61\n_61\nDeno.serve(async (req) => {\n_61\nif (req.method !== \"POST\") {\n_61\n    return new Response(\"not allowed\", { status: 400 });\n_61\n}\n_61\n_61\nconst payload = await req.text();\n_61\nconst headers = Object.fromEntries(req.headers);\n_61\nconst wh = new Webhook(hookSecret);\n_61\ntry {\n_61\n    const { user, email_data } = wh.verify(payload, headers) as {\n_61\n      user: {\n_61\n        email: string;\n_61\n      };\n_61\n      email_data: {\n_61\n        token: string;\n_61\n        token_hash: string;\n_61\n        redirect_to: string;\n_61\n        email_action_type: string;\n_61\n        site_url: string;\n_61\n        token_new: string;\n_61\n        token_hash_new: string;\n_61\n      };\n_61\n    };\n_61\n_61\n    const { error } = await resend.emails.send({\n_61\n      from: \"welcome <onboarding@example.com>\",\n_61\n      to: [user.email],\n_61\n      subject: \"Welcome to my site!\",\n_61\n      text: `Confirm you signup with this code: ${email_data.token}`,\n_61\n    });\n_61\n    if (error) {\n_61\n      throw error;\n_61\n    }\n_61\n} catch (error) {\n_61\n    return new Response(\n_61\n      JSON.stringify({\n_61\n        error: {\n_61\n          http_code: error.code,\n_61\n          message: error.message,\n_61\n        },\n_61\n      }),\n_61\n      {\n_61\n        status: 401,\n_61\n        headers: { \"Content-Type\": \"application/json\" },\n_61\n      },\n_61\n    );\n_61\n}\n_61\n_61\nconst responseHeaders = new Headers();\n_61\nresponseHeaders.set(\"Content-Type\", \"application/json\");\n_61\nreturn new Response(JSON.stringify({}), {\n_61\n    status: 200,\n_61\n    headers: responseHeaders,\n_61\n});\n_61\n});\n``\n\n",
      "overlap_text": {
        "previous_chunk_id": "31c51b94-0580-4d89-a4ee-334c9161f345",
        "text": "Content of the previous chunk for context: h1: Send Email Hook h2: Use a custom email provider to send authentication messages\n\n_HOOK_SECRET=<base64_secret>\n`\n\nYou can generate the secret in the [Auth Hooks](/dashboard/project/_/auth/hooks) section of the Supabase dashboard. Make sure to remove the `v1,whsec_` prefix!\n\n"
      }
    }
  },
  {
    "chunk_id": "f1caefc2-b6f4-4d04-a48a-dc2de0660b5c",
    "metadata": {
      "token_count": 39,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-email-hook",
      "page_title": "Send Email Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send Email Hook",
        "h2": "Use a custom email provider to send authentication messages"
      },
      "text": "Deploy your edge function and [configure it as a hook](/dashboard/project/_/auth/hooks):\n\n`\n_10\nsupabase functions deploy send-email --no-verify-jwt\n`\n",
      "overlap_text": {
        "previous_chunk_id": "65672cbd-de10-438d-9c5f-ff6cf944828f",
        "text": "Content of the previous chunk for context: h1: Send Email Hook h2: Use a custom email provider to send authentication messages\n\nresponseHeaders.set(\"Content-Type\", \"application/json\");\n_61\nreturn new Response(JSON.stringify({}), {\n_61\n    status: 200,\n_61\n    headers: responseHeaders,\n_61\n});\n_61\n});\n``\n\n"
      }
    }
  },
  {
    "chunk_id": "a3a85dc8-6c6b-4e81-9c3b-afee47120aea",
    "metadata": {
      "token_count": 131,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-sms-hook",
      "page_title": "Send SMS Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send SMS Hook",
        "h2": "Use a custom SMS provider to send authentication messages"
      },
      "text": "* * *\n\nRuns before a message is sent. Use the hook to:\n\n- Use a regional SMS Provider\n- Use alternate messaging channels such as WhatsApp\n- Adjust the message body to include platform specific fields such as the [AppHash](https://developers.google.com/identity/sms-retriever/overview)\n\n**Inputs**\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `user` | [`User`](/docs/guides/auth/users#the-user-object) | The user attempting to sign in. |\n| `sms` | `object` | Metadata specific to the SMS sending process. Includes the OTP. |\n\n"
    }
  },
  {
    "chunk_id": "99a559f8-845a-44a0-9e73-dfb538b0b2a4",
    "metadata": {
      "token_count": 672,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-sms-hook",
      "page_title": "Send SMS Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send SMS Hook",
        "h2": "Use a custom SMS provider to send authentication messages"
      },
      "text": "JSONJSON Schema\n\n`\n_42\n{\n_42\n\"user\": {\n_42\n    \"id\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\",\n_42\n    \"aud\": \"authenticated\",\n_42\n    \"role\": \"authenticated\",\n_42\n    \"email\": \"\",\n_42\n    \"phone\": \"+1333363128\",\n_42\n    \"phone_confirmed_at\": \"2024-05-13T11:52:48.157306Z\",\n_42\n    \"confirmation_sent_at\": \"2024-05-14T12:31:52.824573Z\",\n_42\n    \"confirmed_at\": \"2024-05-13T11:52:48.157306Z\",\n_42\n    \"phone_change_sent_at\": \"2024-05-13T11:47:02.183064Z\",\n_42\n    \"last_sign_in_at\": \"2024-05-13T11:52:48.162518Z\",\n_42\n    \"app_metadata\": {\n_42\n      \"provider\": \"phone\",\n_42\n      \"providers\": [\"phone\"]\n_42\n    },\n_42\n    \"user_metadata\": {},\n_42\n    \"identities\": [\\\n_42\\\n      {\\\n_42\\\n        \"identity_id\": \"3be5e552-65aa-41d9-9db9-2a502f845459\",\\\n_42\\\n        \"id\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\",\\\n_42\\\n        \"user_id\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\",\\\n_42\\\n        \"identity_data\": {\\\n_42\\\n          \"email_verified\": false,\\\n_42\\\n          \"phone\": \"+1612341244428\",\\\n_42\\\n          \"phone_verified\": true,\\\n_42\\\n          \"sub\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\"\\\n_42\\\n        },\\\n_42\\\n        \"provider\": \"phone\",\\\n_42\\\n        \"last_sign_in_at\": \"2024-05-13T11:52:48.155562Z\",\\\n_42\\\n        \"created_at\": \"2024-05-13T11:52:48.155599Z\",\\\n_42\\\n        \"updated_at\": \"2024-05-13T11:52:48.159391Z\"\\\n_42\\\n      }\\\n_42\\\n    ],\n_42\n    \"created_at\": \"2024-05-13T11:45:33.7738Z\",\n_42\n    \"updated_at\": \"2024-05-14T12:31:52.82475Z\",\n_42\n    \"is_anonymous\": false\n_42\n},\n_42\n\"sms\": {\n_42\n    \"otp\": \"561166\"\n_42\n}\n_42\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "a3a85dc8-6c6b-4e81-9c3b-afee47120aea",
        "text": "Content of the previous chunk for context: h1: Send SMS Hook h2: Use a custom SMS provider to send authentication messages\n\n `user` | [`User`](/docs/guides/auth/users#the-user-object) | The user attempting to sign in. |\n| `sms` | `object` | Metadata specific to the SMS sending process. Includes the OTP. |\n\n"
      }
    }
  },
  {
    "chunk_id": "9fe90075-eac2-4b8b-b94d-2a391d740300",
    "metadata": {
      "token_count": 183,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-sms-hook",
      "page_title": "Send SMS Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send SMS Hook",
        "h2": "Use a custom SMS provider to send authentication messages"
      },
      "text": "**Outputs**\n\n- No outputs are required. An empty response with a status code of 200 is taken as a successful response.\n\nSQLHTTP\n\nQueue SMS Messages\n\nYour company uses a worker to manage all messaging related jobs. For performance reasons, the messaging system sends messages in intervals via a job queue. Instead of sending a message immediately, messages are queued and sent in periodic intervals via `pg_cron`.\n\nCreate a table to store jobs\n\n`\n_10\ncreate table job_queue (\n_10\njob_id uuid primary key default gen_random_uuid(),\n_10\njob_data jsonb not null,\n_10\ncreated_at timestamp default now(),\n_10\nstatus text default 'pending',\n_10\npriority int default 0,\n_10\nretry_count int default 0,\n_10\nmax_retries int default 2,\n_10\nscheduled_at timestamp default now()\n_10\n);\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "99a559f8-845a-44a0-9e73-dfb538b0b2a4",
        "text": "Content of the previous chunk for context: h1: Send SMS Hook h2: Use a custom SMS provider to send authentication messages\n\n31:52.82475Z\",\n_42\n    \"is_anonymous\": false\n_42\n},\n_42\n\"sms\": {\n_42\n    \"otp\": \"561166\"\n_42\n}\n_42\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "28bb6313-452f-466f-852a-470f30f3ea8f",
    "metadata": {
      "token_count": 354,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-sms-hook",
      "page_title": "Send SMS Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send SMS Hook",
        "h2": "Use a custom SMS provider to send authentication messages"
      },
      "text": "Create the hook:\n\n`\n_31\ncreate or replace function send_sms(event jsonb) returns void as $$\n_31\ndeclare\n_31\n    job_data jsonb;\n_31\n    scheduled_time timestamp;\n_31\n    priority int;\n_31\nbegin\n_31\n    -- extract phone and otp from the event json\n_31\n    job_data := jsonb_build_object(\n_31\n        'phone', event->'user'->>'phone',\n_31\n        'otp', event->'sms'->>'otp'\n_31\n    );\n_31\n_31\n    -- calculate the nearest 5-minute window for scheduled_time\n_31\n    scheduled_time := date_trunc('minute', now()) + interval '5 minute' * floor(extract('epoch' from (now() - date_trunc('minute', now())) / 60) / 5);\n_31\n_31\n    -- assign priority dynamically (example logic: higher priority for earlier scheduled time)\n_31\n    priority := extract('epoch' from (scheduled_time - now()))::int;\n_31\n_31\n    -- insert the job into the job_queue table\n_31\n    insert into job_queue (job_data, priority, scheduled_at, max_retries)\n_31\n    values (job_data, priority, scheduled_time, 2);\n_31\nend;\n_31\n$$ language plpgsql;\n_31\n_31\ngrant all\n_31\non table public.job_queue\n_31\nto supabase_auth_admin;\n_31\n_31\nrevoke all\n_31\non table public.job_queue\n_31\nfrom authenticated, anon;\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "9fe90075-eac2-4b8b-b94d-2a391d740300",
        "text": "Content of the previous chunk for context: h1: Send SMS Hook h2: Use a custom SMS provider to send authentication messages\n\nstatus text default 'pending',\n_10\npriority int default 0,\n_10\nretry_count int default 0,\n_10\nmax_retries int default 2,\n_10\nscheduled_at timestamp default now()\n_10\n);\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "1c2f4fba-b58b-46c3-a3b4-5bc1338d6f0d",
    "metadata": {
      "token_count": 128,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-sms-hook",
      "page_title": "Send SMS Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send SMS Hook",
        "h2": "Use a custom SMS provider to send authentication messages"
      },
      "text": "Create a function to periodically run and dequeue all jobs\n\n`\n_42\ncreate or replace function dequeue_and_run_jobs() returns void as $$\n_42\ndeclare\n_42\n    job record;\n_42\nbegin\n_42\n    for job in\n_42\n        select * from job_queue\n_42\n        where status = 'pending'\n_42\n          and scheduled_at <= now()\n_42\n        order by priority desc, created_at\n_42\n        for update skip locked\n_42\n    loop\n_42\n        begin\n_42\n            -- add job processing logic here.\n",
      "overlap_text": {
        "previous_chunk_id": "28bb6313-452f-466f-852a-470f30f3ea8f",
        "text": "Content of the previous chunk for context: h1: Send SMS Hook h2: Use a custom SMS provider to send authentication messages\n\ngrant all\n_31\non table public.job_queue\n_31\nto supabase_auth_admin;\n_31\n_31\nrevoke all\n_31\non table public.job_queue\n_31\nfrom authenticated, anon;\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "fc2f52f6-af90-4740-9072-c637d90c6ce8",
    "metadata": {
      "token_count": 275,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-sms-hook",
      "page_title": "Send SMS Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send SMS Hook",
        "h2": "Use a custom SMS provider to send authentication messages"
      },
      "text": "_42\n            -- for demonstration, we'll just update the job status to 'completed'.\n_42\n            update job_queue\n_42\n            set status = 'completed'\n_42\n            where job_id = job.job_id;\n_42\n_42\n        exception when others then\n_42\n            -- handle job failure and retry logic\n_42\n            if job.retry_count < job.max_retries then\n_42\n                update job_queue\n_42\n                set retry_count = retry_count + 1,\n_42\n                    scheduled_at = now() + interval '1 minute'  -- delay retry by 1 minute\n_42\n                where job_id = job.job_id;\n_42\n            else\n_42\n                update job_queue\n_42\n                set status = 'failed'\n_42\n                where job_id = job.job_id;\n_42\n            end if;\n_42\n        end;\n_42\n    end loop;\n_42\nend;\n_42\n$$ language plpgsql;\n_42\n_42\ngrant execute\n_42\non function public.dequeue_and_run_jobs\n_42\nto supabase_auth_admin;\n_42\n_42\nrevoke execute\n_42\non function public.dequeue_and_run_jobs\n_42\nfrom authenticated, anon;\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "1c2f4fba-b58b-46c3-a3b4-5bc1338d6f0d",
        "text": "Content of the previous chunk for context: h1: Send SMS Hook h2: Use a custom SMS provider to send authentication messages\n\n and scheduled_at <= now()\n_42\n        order by priority desc, created_at\n_42\n        for update skip locked\n_42\n    loop\n_42\n        begin\n_42\n            -- add job processing logic here.\n"
      }
    }
  },
  {
    "chunk_id": "1f0da6e9-5b15-40c8-b304-2c3e721c9ff9",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/send-sms-hook",
      "page_title": "Send SMS Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Send SMS Hook",
        "h2": "Use a custom SMS provider to send authentication messages"
      },
      "text": "Configure `pg_cron` to run the job on an interval. You can use a tool like [crontab.guru](https://crontab.guru/) to check that your job is running on an appropriate schedule. Ensure that `pg_cron` is enabled under `Database > Extensions`\n\n`\n_10\nselect\n_10\ncron.schedule(\n_10\n    '* * * * *', -- this cron expression means every minute.\n_10\n    'select dequeue_and_run_jobs();'\n_10\n);\n`\n",
      "overlap_text": {
        "previous_chunk_id": "fc2f52f6-af90-4740-9072-c637d90c6ce8",
        "text": "Content of the previous chunk for context: h1: Send SMS Hook h2: Use a custom SMS provider to send authentication messages\n\n42\non function public.dequeue_and_run_jobs\n_42\nto supabase_auth_admin;\n_42\n_42\nrevoke execute\n_42\non function public.dequeue_and_run_jobs\n_42\nfrom authenticated, anon;\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "e66252b8-b5d6-441e-8a8d-3eb46d070dd9",
    "metadata": {
      "token_count": 112,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects"
      },
      "text": "* * *\n\nLooking for guides on how to use Single Sign-On with the Supabase dashboard? Head on over to [Enable SSO for Your Organization](/docs/guides/platform/sso).\n\nSupabase Auth supports enterprise-level Single Sign-On (SSO) for any identity providers compatible with the SAML 2.0 protocol. This is a non-exclusive list of supported identity providers:\n\n- Google Workspaces (formerly known as GSuite)\n- Okta, Auth0\n- Microsoft Active Directory, Azure Active Directory, Microsoft Entra\n"
    }
  },
  {
    "chunk_id": "a5523561-643c-488f-8691-ac96398366ce",
    "metadata": {
      "token_count": 39,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects"
      },
      "text": "- PingIdentity\n- OneLogin\n\nIf you're having issues with identity provider software not on this list, please [open a support ticket](https://supabase.com/dashboard/support/new).\n",
      "overlap_text": {
        "previous_chunk_id": "e66252b8-b5d6-441e-8a8d-3eb46d070dd9",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects\n\n SAML 2.0 protocol. This is a non-exclusive list of supported identity providers:\n\n- Google Workspaces (formerly known as GSuite)\n- Okta, Auth0\n- Microsoft Active Directory, Azure Active Directory, Microsoft Entra\n"
      }
    }
  },
  {
    "chunk_id": "2240bc71-f186-457a-8492-aea934ddfcb2",
    "metadata": {
      "token_count": 131,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Prerequisites [\\#](\\#prerequisites)"
      },
      "text": "This guide requires the use of the [Supabase CLI](/docs/guides/cli). Please make sure you're using version v1.46.4 or higher. You can use `supabase -v` to see the currently installed version.\n\nYou can use the `supabase sso` [subcommands](/docs/reference/cli/supabase-sso) to manage your project's configuration.\n\nSAML 2.0 support is disabled by default on Supabase projects. You can configure this on the [Auth Providers](https://supabase.com/dashboard/project/_/auth/providers) page on your project.\n",
      "overlap_text": {
        "previous_chunk_id": "a5523561-643c-488f-8691-ac96398366ce",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects\n\n- PingIdentity\n- OneLogin\n\nIf you're having issues with identity provider software not on this list, please [open a support ticket](https://supabase.com/dashboard/support/new).\n"
      }
    }
  },
  {
    "chunk_id": "a380f2d2-82a9-4ecb-a97b-1e691daf0d1a",
    "metadata": {
      "token_count": 39,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Prerequisites [\\#](\\#prerequisites)"
      },
      "text": "\nPlease note that SAML 2.0 support is offered on plans Pro and above. Check the [Pricing](https://supabase.com/pricing) page for more information.\n",
      "overlap_text": {
        "previous_chunk_id": "2240bc71-f186-457a-8492-aea934ddfcb2",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Prerequisites [\\#](\\#prerequisites)\n\n your project's configuration.\n\nSAML 2.0 support is disabled by default on Supabase projects. You can configure this on the [Auth Providers](https://supabase.com/dashboard/project/_/auth/providers) page on your project.\n"
      }
    }
  },
  {
    "chunk_id": "b06f2a05-0785-4308-82b3-93e09d4e227c",
    "metadata": {
      "token_count": 171,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Terminology [\\#](\\#terminology)"
      },
      "text": "The number of SAML and SSO acronyms can often be overwhelming. Here's a glossary which you can refer back to at any time:\n\n- **Identity Provider**, **IdP**, or **IDP**\nAn identity provider is a service that manages user accounts at a company or organization. It can verify the identity of a user and exchange that information with your Supabase project and other applications. It acts as a single source of truth for user identities and access rights. Commonly used identity providers are: Microsoft Active Directory (Azure AD, Microsoft Entra), Okta, Google Workspaces (GSuite), PingIdentity, OneLogin, and many others. There are also self-hosted and on-prem versions of identity providers, and sometimes they are accessible only by having access to a company VPN or being in a specific building.\n",
      "overlap_text": {
        "previous_chunk_id": "a380f2d2-82a9-4ecb-a97b-1e691daf0d1a",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Prerequisites [\\#](\\#prerequisites)\n\n\nPlease note that SAML 2.0 support is offered on plans Pro and above. Check the [Pricing](https://supabase.com/pricing) page for more information.\n"
      }
    }
  },
  {
    "chunk_id": "7580d8b2-3ca9-4531-bf9c-732457a23648",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Terminology [\\#](\\#terminology)"
      },
      "text": "- **Service Provider**, **SP**\nThis is the software that is asking for user information from an identity provider. In Supabase, this is your project's Auth server.\n- **Assertion**\nAn assertion is a statement issued by an identity provider that contains information about a user.\n- **EntityID**\nA globally unique ID (usually a URL) that identifies an Identity Provider or Service Provider across the world.\n- **NameID**\nA unique ID (usually an email address) that identifies a user at an Identity Provider.\n",
      "overlap_text": {
        "previous_chunk_id": "b06f2a05-0785-4308-82b3-93e09d4e227c",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Terminology [\\#](\\#terminology)\n\nspaces (GSuite), PingIdentity, OneLogin, and many others. There are also self-hosted and on-prem versions of identity providers, and sometimes they are accessible only by having access to a company VPN or being in a specific building.\n"
      }
    }
  },
  {
    "chunk_id": "72f9d65c-3f82-49b2-a8dd-350717efcf48",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Terminology [\\#](\\#terminology)"
      },
      "text": "- **Metadata**\nAn XML document that describes the features and configuration of an Identity Provider or Service Provider. It can be as a standalone document or as a URL. Usually (but not always) the `EntityID` is the URL at which you can access the Metadata.\n- **Certificate**\nSupabase Auth (the Service Provider) trusts assertions from an Identity Provider based on the signature attached to the assertion. The signature is verified according to the certificate present in the Metadata.\n- **Assertion Consumer Service (ACS) URL**\n",
      "overlap_text": {
        "previous_chunk_id": "7580d8b2-3ca9-4531-bf9c-732457a23648",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Terminology [\\#](\\#terminology)\n\n.\n- **EntityID**\nA globally unique ID (usually a URL) that identifies an Identity Provider or Service Provider across the world.\n- **NameID**\nA unique ID (usually an email address) that identifies a user at an Identity Provider.\n"
      }
    }
  },
  {
    "chunk_id": "9c0de38f-e49c-4d97-be91-324c1b2a0951",
    "metadata": {
      "token_count": 139,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Terminology [\\#](\\#terminology)"
      },
      "text": "This is one of the most important SAML URLs. It is the URL where Supabase Auth will accept assertions from an identity provider. Basically, once the identity provider verifies the user's identity it will redirect to this URL and the redirect request will contain the assertion.\n- **Binding (Redirect, POST, or Artifact)**\nThis is a description of the way an identity provider communicates with Supabase Auth. When using the Redirect binding, the communication occurs using HTTP 301 redirects. When it's `POST`, it's using `POST` requests sent with `<form>` elements on a page. When using Artifact, it's using a more secure exchange over a Redirect or `POST`.\n",
      "overlap_text": {
        "previous_chunk_id": "72f9d65c-3f82-49b2-a8dd-350717efcf48",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Terminology [\\#](\\#terminology)\n\n **Certificate**\nSupabase Auth (the Service Provider) trusts assertions from an Identity Provider based on the signature attached to the assertion. The signature is verified according to the certificate present in the Metadata.\n- **Assertion Consumer Service (ACS) URL**\n"
      }
    }
  },
  {
    "chunk_id": "62b6a076-de7f-43cc-a48b-dd8915908b27",
    "metadata": {
      "token_count": 27,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Terminology [\\#](\\#terminology)"
      },
      "text": "- **RelayState**\nState used by Supabase Auth to hold information about a request to verify the identity of a user.\n",
      "overlap_text": {
        "previous_chunk_id": "9c0de38f-e49c-4d97-be91-324c1b2a0951",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Terminology [\\#](\\#terminology)\n\n the communication occurs using HTTP 301 redirects. When it's `POST`, it's using `POST` requests sent with `<form>` elements on a page. When using Artifact, it's using a more secure exchange over a Redirect or `POST`.\n"
      }
    }
  },
  {
    "chunk_id": "3bd01542-c87d-42c3-937b-7bc5a883052f",
    "metadata": {
      "token_count": 186,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Important SAML 2.0 information [\\#](\\#important-saml-20-information)"
      },
      "text": "Below is information about your project's SAML 2.0 configuration which you can share with the company or organization that you're trying to on-board.\n\n| Name | Value |\n| --- | --- |\n| EntityID | `https://<project>.supabase.co/auth/v1/sso/saml/metadata` |\n| Metadata URL | `https://<project>.supabase.co/auth/v1/sso/saml/metadata` |\n| Metadata URL<br>(download) | `https://<project>.supabase.co/auth/v1/sso/saml/metadata?download=true` |\n| ACS URL | `https://<project>.supabase.co/auth/v1/sso/saml/acs` |\n| SLO URL | `https://<project>.supabase.co/auth/v1/sso/slo` |\n| NameID | Required `emailAddress` or `persistent` |\n\n",
      "overlap_text": {
        "previous_chunk_id": "62b6a076-de7f-43cc-a48b-dd8915908b27",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Terminology [\\#](\\#terminology)\n\n- **RelayState**\nState used by Supabase Auth to hold information about a request to verify the identity of a user.\n"
      }
    }
  },
  {
    "chunk_id": "698f50f9-a993-40c6-a51d-47a135723459",
    "metadata": {
      "token_count": 118,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Important SAML 2.0 information [\\#](\\#important-saml-20-information)"
      },
      "text": "Note that SLO (Single Logout) is not supported at this time with Supabase Auth as it is a rarely supported feature by identity providers. However, the URL is registered and advertised for when this does become available.\n\nAppend `?download=true` to the Metadata URL to download the Metadata XML file. This is useful in cases where the identity provider requires a file.\n\nAlternatively, you can use the `supabase sso info --project-ref <your-project>` [command](/docs/reference/cli/supabase-sso-info) to get setup information for your project.\n",
      "overlap_text": {
        "previous_chunk_id": "3bd01542-c87d-42c3-937b-7bc5a883052f",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Important SAML 2.0 information [\\#](\\#important-saml-20-information)\n\n.co/auth/v1/sso/saml/acs` |\n| SLO URL | `https://<project>.supabase.co/auth/v1/sso/slo` |\n| NameID | Required `emailAddress` or `persistent` |\n\n"
      }
    }
  },
  {
    "chunk_id": "c2d56afa-3a60-4f30-89a9-3b9ff3def6aa",
    "metadata": {
      "token_count": 128,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Important SAML 2.0 information [\\#](\\#important-saml-20-information)"
      },
      "text": "\n### User accounts and identities [\\#](\\#user-accounts-and-identities)\n\nUser accounts and identities created via SSO differ from regular (email, phone, password, social login...) accounts in these ways:\n\n- **No automatic linking.**\nEach user account verified using a SSO identity provider will not be automatically linked to existing user accounts in the system. That is, if a user `jane.doe@company.com` had signed up with a password, and then uses their company SSO login with your project, there will be two `jane.doe@company.com` user accounts in the system.\n",
      "overlap_text": {
        "previous_chunk_id": "698f50f9-a993-40c6-a51d-47a135723459",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Important SAML 2.0 information [\\#](\\#important-saml-20-information)\n\n the identity provider requires a file.\n\nAlternatively, you can use the `supabase sso info --project-ref <your-project>` [command](/docs/reference/cli/supabase-sso-info) to get setup information for your project.\n"
      }
    }
  },
  {
    "chunk_id": "2f91258e-cdf9-4a59-a433-e326c5fd521a",
    "metadata": {
      "token_count": 112,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Important SAML 2.0 information [\\#](\\#important-saml-20-information)"
      },
      "text": "- **Emails are not necessarily unique.**\nGiven the behavior with no automatic linking, email addresses are no longer a unique identifier for a user account. Please always use the user's UUID to correctly reference user accounts.\n- **Sessions may have a maximum duration.**\nDepending on the configuration of the identity provider, a login session established with SSO may forcibly log out a user after a certain period of time.\n\n### Row Level Security [\\#](\\#row-level-security)\n\nYou can use information about the SSO identity provider in Row Level Security policies.\n",
      "overlap_text": {
        "previous_chunk_id": "c2d56afa-3a60-4f30-89a9-3b9ff3def6aa",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Important SAML 2.0 information [\\#](\\#important-saml-20-information)\n\n if a user `jane.doe@company.com` had signed up with a password, and then uses their company SSO login with your project, there will be two `jane.doe@company.com` user accounts in the system.\n"
      }
    }
  },
  {
    "chunk_id": "aa1de56e-2725-4be3-972e-a4314f0c38a9",
    "metadata": {
      "token_count": 111,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Important SAML 2.0 information [\\#](\\#important-saml-20-information)"
      },
      "text": "\nHere are some commonly used statements to extract SSO related information from the user's JWT:\n\n- `auth.jwt()#>>'{amr,0,method}'`\nReturns the name of the last method used to verify the identity of this user. With SAML SSO this is `sso/saml`.\n- `auth.jwt()#>>'{amr,0,provider}'`\nReturns the UUID of the SSO identity provider used by the user to sign-in.\n- `auth.jwt()#>>'{user_metadata,iss}'`\n",
      "overlap_text": {
        "previous_chunk_id": "2f91258e-cdf9-4a59-a433-e326c5fd521a",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Important SAML 2.0 information [\\#](\\#important-saml-20-information)\n\n, a login session established with SSO may forcibly log out a user after a certain period of time.\n\n### Row Level Security [\\#](\\#row-level-security)\n\nYou can use information about the SSO identity provider in Row Level Security policies.\n"
      }
    }
  },
  {
    "chunk_id": "1ce43e3f-9cef-4274-8eab-9271206e07e6",
    "metadata": {
      "token_count": 121,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Important SAML 2.0 information [\\#](\\#important-saml-20-information)"
      },
      "text": "Returns the identity provider's SAML 2.0 `EntityID`\n\nIf you use [Multi-Factor Authentication](/docs/guides/auth/auth-mfa) with SSO, the `amr` array may have a different method at index `0`!\n\nA common use case with SSO is to use the UUID of the identity provider as the identifier for the organization the user belongs to -- frequently known as a tenant. By associating the identity provider's UUID with your tenants, you can use restrictive RLS policies to scope down actions and data that a user is able to access.\n",
      "overlap_text": {
        "previous_chunk_id": "aa1de56e-2725-4be3-972e-a4314f0c38a9",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Important SAML 2.0 information [\\#](\\#important-saml-20-information)\n\n/saml`.\n- `auth.jwt()#>>'{amr,0,provider}'`\nReturns the UUID of the SSO identity provider used by the user to sign-in.\n- `auth.jwt()#>>'{user_metadata,iss}'`\n"
      }
    }
  },
  {
    "chunk_id": "3eaed332-1b45-4290-b3dc-c54d96aed922",
    "metadata": {
      "token_count": 108,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Important SAML 2.0 information [\\#](\\#important-saml-20-information)"
      },
      "text": "\nFor example, let's say you have a table like:\n\n`\n_10\ncreate table organization_settings (\n_10\n  -- the organization's unique ID\n_10\nid uuid not null primary key,\n_10\n  -- the organization's SSO identity provider\n_10\nsso_provider_id uuid unique,\n_10\n  -- name of the organization\n_10\nname text,\n_10\n  -- billing plan (paid, Free, Enterprise)\n_10\nbilling_plan text\n_10\n);\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "1ce43e3f-9cef-4274-8eab-9271206e07e6",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Important SAML 2.0 information [\\#](\\#important-saml-20-information)\n\n as the identifier for the organization the user belongs to -- frequently known as a tenant. By associating the identity provider's UUID with your tenants, you can use restrictive RLS policies to scope down actions and data that a user is able to access.\n"
      }
    }
  },
  {
    "chunk_id": "572cfcee-4a9f-4866-afdd-425a2c6a47a5",
    "metadata": {
      "token_count": 93,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Important SAML 2.0 information [\\#](\\#important-saml-20-information)"
      },
      "text": "You can use the information present in the user's JWT to scope down which rows from this table the user can see, without doing any additional user management:\n\n`\n_10\nCREATE POLICY \"View organization settings.\"\n_10\nON organization_settings\n_10\nAS RESTRICTIVE\n_10\nUSING (\n_10\n    sso_provider_id = (select auth.jwt()#>>'{amr,0,provider}')\n_10\n);\n`\n",
      "overlap_text": {
        "previous_chunk_id": "3eaed332-1b45-4290-b3dc-c54d96aed922",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Important SAML 2.0 information [\\#](\\#important-saml-20-information)\n\n\nsso_provider_id uuid unique,\n_10\n  -- name of the organization\n_10\nname text,\n_10\n  -- billing plan (paid, Free, Enterprise)\n_10\nbilling_plan text\n_10\n);\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "8fff73c5-5b14-4e0e-a964-1b040a6e761e",
    "metadata": {
      "token_count": 108,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "Once you've enabled SAML 2.0 support on your project via the [Auth Providers](https://supabase.com/dashboard/project/_/auth/providers) page in the dashboard, you can use the [Supabase CLI](/docs/reference/cli/supabase-sso) to add, update, remove and view information about identity providers.\n\n### Add a connection [\\#](\\#add-a-connection)\n\nTo establish a connection to a SAML 2.0 Identity Provider (IdP) you will need:\n",
      "overlap_text": {
        "previous_chunk_id": "572cfcee-4a9f-4866-afdd-425a2c6a47a5",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Important SAML 2.0 information [\\#](\\#important-saml-20-information)\n\n_10\nON organization_settings\n_10\nAS RESTRICTIVE\n_10\nUSING (\n_10\n    sso_provider_id = (select auth.jwt()#>>'{amr,0,provider}')\n_10\n);\n`\n"
      }
    }
  },
  {
    "chunk_id": "f35c19bc-0ea9-4c13-9d8f-7673ada42f43",
    "metadata": {
      "token_count": 119,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\n- A SAML 2.0 Metadata XML file, or a SAML 2.0 Metadata URL pointing to an XML file\n- (Optional) Email domains that the organization's IdP uses\n- (Optional) Attribute mappings between the user properties of the IdP and the claims stored by Supabase Auth\n\nYou should obtain the SAML 2.0 Metadata XML file or URL from the organization whose IdP you wish to connect. Most SAML 2.0 Identity Providers support the Metadata URL standard, and we recommend using a URL if this is available.\n",
      "overlap_text": {
        "previous_chunk_id": "8fff73c5-5b14-4e0e-a964-1b040a6e761e",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n) to add, update, remove and view information about identity providers.\n\n### Add a connection [\\#](\\#add-a-connection)\n\nTo establish a connection to a SAML 2.0 Identity Provider (IdP) you will need:\n"
      }
    }
  },
  {
    "chunk_id": "e92157c0-ab46-4a32-90e2-834684ee021e",
    "metadata": {
      "token_count": 121,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\nCommonly used SAML 2.0 Identity Providers that support Metadata URLs:\n\n- Okta\n- Azure AD (Microsoft Entra)\n- PingIdentity\n\nCommonly used SAML 2.0 Identity Providers that only support Metadata XML files:\n\n- Google Workspaces (GSuite)\n- Any self-hosted or on-prem identity provider behind a VPN\n\nOnce you've obtained the SAML 2.0 Metadata XML file or URL you can [establish a connection](/docs/reference/cli/supabase-sso-add) with your project's Supabase Auth server by running:\n",
      "overlap_text": {
        "previous_chunk_id": "f35c19bc-0ea9-4c13-9d8f-7673ada42f43",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n obtain the SAML 2.0 Metadata XML file or URL from the organization whose IdP you wish to connect. Most SAML 2.0 Identity Providers support the Metadata URL standard, and we recommend using a URL if this is available.\n"
      }
    }
  },
  {
    "chunk_id": "cf0ed516-0e56-4a49-b26c-f6c476847ab1",
    "metadata": {
      "token_count": 116,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\n`\n_10\nsupabase sso add --type saml --project-ref <your-project> \\\n_10\n  --metadata-url 'https://company.com/idp/saml/metadata' \\\n_10\n  --domains company.com\n`\n\nIf you wish to use a Metadata XML file instead, you can use:\n\n`\n_10\nsupabase sso add --type saml --project-ref <your-project> \\\n_10\n  --metadata-file /path/to/saml/metadata.xml \\\n_10\n  --domains company.com\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "e92157c0-ab46-4a32-90e2-834684ee021e",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n a VPN\n\nOnce you've obtained the SAML 2.0 Metadata XML file or URL you can [establish a connection](/docs/reference/cli/supabase-sso-add) with your project's Supabase Auth server by running:\n"
      }
    }
  },
  {
    "chunk_id": "a9cf5d12-d075-4691-8968-437b69ea86a4",
    "metadata": {
      "token_count": 122,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "This command will register a new identity provider with your project's Auth server. When successful, you will see the details of the provider such as it's SAML information and registered domains.\n\nPlease note that only persons with write access to the project can register, update or remove identity providers.\n\nOnce you've added an identity provider, users who have access to it can sign in to your application. With SAML 2.0 there are two ways that users can sign in to your project:\n\n- By signing-in from your application's user interface, commonly known as **SP (Service Provider) Initiated Flow**\n",
      "overlap_text": {
        "previous_chunk_id": "cf0ed516-0e56-4a49-b26c-f6c476847ab1",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n use:\n\n`\n_10\nsupabase sso add --type saml --project-ref <your-project> \\\n_10\n  --metadata-file /path/to/saml/metadata.xml \\\n_10\n  --domains company.com\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "d98a4814-5a08-4c19-baed-296ab021d60f",
    "metadata": {
      "token_count": 160,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "- By clicking on an icon in the application menu on the company intranet or identity provider page, commonly known as **Identity Provider Initiated (IdP) Flow**\n\nTo initiate a sign-in request from your application's user interface (i.e. the SP Initiated Flow), you can use:\n\nJavaScriptDartSwiftKotlin\n\n`\n_10\nsupabase.auth.signInWithSSO({\n_10\ndomain: 'company.com',\n_10\n})\n`\n\nCalling [`signInWithSSO`](/docs/reference/javascript/auth-signinwithsso) starts the sign-in process using the identity provider registered for the `company.com` domain name. It is not required that identity providers be assigned one or multiple domain names, in which case you can use the provider's unique ID instead.\n",
      "overlap_text": {
        "previous_chunk_id": "a9cf5d12-d075-4691-8968-437b69ea86a4",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n sign in to your application. With SAML 2.0 there are two ways that users can sign in to your project:\n\n- By signing-in from your application's user interface, commonly known as **SP (Service Provider) Initiated Flow**\n"
      }
    }
  },
  {
    "chunk_id": "c2aa93a9-b71f-45a0-9eff-9c4c3d2f8da4",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\n### Understanding attribute mappings [\\#](\\#understanding-attribute-mappings)\n\nWhen a user signs in using the SAML 2.0 Single Sign-On protocol, an XML document called the SAML Assertion is exchanged between the identity provider and Supabase Auth.\n\nThis assertion contains information about the user's identity and other authentication information, such as:\n\n- Unique ID of the user (called `NameID` in SAML)\n- Email address\n- Name of the user\n- Department or organization\n",
      "overlap_text": {
        "previous_chunk_id": "d98a4814-5a08-4c19-baed-296ab021d60f",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\nsso) starts the sign-in process using the identity provider registered for the `company.com` domain name. It is not required that identity providers be assigned one or multiple domain names, in which case you can use the provider's unique ID instead.\n"
      }
    }
  },
  {
    "chunk_id": "c46d341b-e103-4aa6-8672-d3d050da3697",
    "metadata": {
      "token_count": 116,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "- Other attributes present in the users directory managed by the identity provider\n\nWith exception of the unique user ID, SAML does not require any other attributes in the assertion. Identity providers can be configured so that only select user information is shared with your project.\n\nYour project can be configured to recognize these attributes and map them into your project's database using a JSON structure. This process is called attribute mapping, and varies according to the configuration of the identity provider.\n\nFor example, the following JSON structure configures attribute mapping for the `email` and `first_name` user identity properties.\n",
      "overlap_text": {
        "previous_chunk_id": "c2aa93a9-b71f-45a0-9eff-9c4c3d2f8da4",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n Auth.\n\nThis assertion contains information about the user's identity and other authentication information, such as:\n\n- Unique ID of the user (called `NameID` in SAML)\n- Email address\n- Name of the user\n- Department or organization\n"
      }
    }
  },
  {
    "chunk_id": "29abe29e-9c69-4ec8-b150-eaec25d5534a",
    "metadata": {
      "token_count": 119,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\n`\n_10\n{\n_10\n\"keys\": {\n_10\n    \"email\": {\n_10\n      \"name\": \"mail\"\n_10\n    },\n_10\n    \"first_name\": {\n_10\n      \"name\": \"givenName\"\n_10\n    }\n_10\n}\n_10\n}\n`\n\nWhen creating or updating an identity provider with the [Supabase CLI](/docs/guides/cli) you can include this JSON as a file with the `--attribute-mapping-file /path/to/attribute/mapping.json` flag.\n",
      "overlap_text": {
        "previous_chunk_id": "c46d341b-e103-4aa6-8672-d3d050da3697",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n's database using a JSON structure. This process is called attribute mapping, and varies according to the configuration of the identity provider.\n\nFor example, the following JSON structure configures attribute mapping for the `email` and `first_name` user identity properties.\n"
      }
    }
  },
  {
    "chunk_id": "eb86f0aa-2ea4-48c2-812a-9f5efe06cb9c",
    "metadata": {
      "token_count": 305,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\nFor example, to change the attribute mappings to an existing provider you can use:\n\n`\n_10\nsupabase sso update <provider-uuid> --project-ref <your-project> \\\n_10\n  --attribute-mapping-file /path/to/attribute/mapping.json\n`\n\nGiven a SAML 2.0 assertion that includes these attributes:\n\n`\n_21\n<saml:AttributeStatement>\n_21\n<!-- will be mapped to the email key -->\n_21\n<saml:Attribute\n_21\n    Name=\"mail\"\n_21\n    NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n_21\n    >\n_21\n    <saml:AttributeValue xsi:type=\"xs:string\">\n_21\n      jane.doe@company.com\n_21\n    </saml:AttributeValue>\n_21\n</saml:Attribute>\n_21\n_21\n<!-- will be mapped to the first_name key -->\n_21\n<saml:Attribute\n_21\n    Name=\"givenName\"\n_21\n    NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n_21\n    >\n_21\n    <saml:AttributeValue xsi:type=\"xs:string\">\n_21\n      Jane Doe\n_21\n    </saml:AttributeValue>\n_21\n</saml:Attribute>\n_21\n</saml:AttributeStatement>\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "29abe29e-9c69-4ec8-b150-eaec25d5534a",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n`\n\nWhen creating or updating an identity provider with the [Supabase CLI](/docs/guides/cli) you can include this JSON as a file with the `--attribute-mapping-file /path/to/attribute/mapping.json` flag.\n"
      }
    }
  },
  {
    "chunk_id": "8618efc9-2176-4f84-a9d5-af3b51ed8185",
    "metadata": {
      "token_count": 119,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "Will result in the following claims in the user's identity in the database and JWT:\n\n`\n_10\n{\n_10\n\"email\": \"jane.doe@company.com\",\n_10\n\"custom_claims\": {\n_10\n    \"first_name\": \"Jane Doe\"\n_10\n}\n_10\n}\n`\n\nSupabase Auth does not require specifying attribute mappings if you only need access to the user's email. It will attempt to find an email attribute specified in the assertion. All other properties will not be automatically included, and it is those you need to map.\n",
      "overlap_text": {
        "previous_chunk_id": "eb86f0aa-2ea4-48c2-812a-9f5efe06cb9c",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n\n    <saml:AttributeValue xsi:type=\"xs:string\">\n_21\n      Jane Doe\n_21\n    </saml:AttributeValue>\n_21\n</saml:Attribute>\n_21\n</saml:AttributeStatement>\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "63ff02c8-96d5-4f80-92e7-c3721556586b",
    "metadata": {
      "token_count": 105,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\nAt this time it is not possible to have users without an email address, so SAML assertions without one will be rejected.\n\nMost SAML 2.0 identity providers use Lightweight Directory Access Protocol (LDAP) attribute names. However, due to their variability and complexity operators of identity providers are able to customize both the `Name` and attribute value that is sent to Supabase Auth in an assertion. Please refer to the identity provider's documentation and contact the operator for details on what attributes are mapped for your project.\n",
      "overlap_text": {
        "previous_chunk_id": "8618efc9-2176-4f84-a9d5-af3b51ed8185",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\nase Auth does not require specifying attribute mappings if you only need access to the user's email. It will attempt to find an email attribute specified in the assertion. All other properties will not be automatically included, and it is those you need to map.\n"
      }
    }
  },
  {
    "chunk_id": "8b26a57a-2c68-4469-9341-655a30cb6ab0",
    "metadata": {
      "token_count": 120,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\n**Accessing the stored attributes**\n\nThe stored attributes, once mapped, show up in the access token (a JWT) of the user. If you need to look these values up in the database, you can find them in the `auth.identities` table under the `identity_data` JSON column. Identities created for SSO providers have `sso:<uuid-of-provider>` in the `provider` column, while `id` contains the unique NameID of the user account.\n\nFurthermore, you can find the same identity data under `raw_app_meta_data` inside `auth.users`.\n",
      "overlap_text": {
        "previous_chunk_id": "63ff02c8-96d5-4f80-92e7-c3721556586b",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n of identity providers are able to customize both the `Name` and attribute value that is sent to Supabase Auth in an assertion. Please refer to the identity provider's documentation and contact the operator for details on what attributes are mapped for your project.\n"
      }
    }
  },
  {
    "chunk_id": "7487e2ea-2167-4302-9408-44f6ca9abbfc",
    "metadata": {
      "token_count": 130,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\n### Remove a connection [\\#](\\#remove-a-connection)\n\nOnce a connection to an identity provider is established, you can [remove it](/docs/reference/cli/supabase-sso-remove) by running:\n\n`\n_10\nsupabase sso remove <provider-id> --project-ref <your-project>\n`\n\nIf successful, the details of the removed identity provider will be shown. All user accounts from that identity provider will be immediately logged out. User information will remain in the system, but it will no longer be possible for any of those accounts to be accessed in the future, even if you add the connection again.\n",
      "overlap_text": {
        "previous_chunk_id": "8b26a57a-2c68-4469-9341-655a30cb6ab0",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n `sso:<uuid-of-provider>` in the `provider` column, while `id` contains the unique NameID of the user account.\n\nFurthermore, you can find the same identity data under `raw_app_meta_data` inside `auth.users`.\n"
      }
    }
  },
  {
    "chunk_id": "fae3bf53-2b2f-49ba-9d95-05aeef0bc08a",
    "metadata": {
      "token_count": 111,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\nIf you need to reassign those user accounts to another identity provider, please [open a support ticket](https://supabase.com/dashboard/support/new).\n\nA [list of all](/docs/reference/cli/supabase-sso-list) registered identity providers can be displayed by running:\n\n`\n_10\nsupabase sso list --project-ref <your-project>\n`\n\n### Update a connection [\\#](\\#update-a-connection)\n\nYou may wish to update settings about a connection to a SAML 2.0 identity provider.\n",
      "overlap_text": {
        "previous_chunk_id": "7487e2ea-2167-4302-9408-44f6ca9abbfc",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n shown. All user accounts from that identity provider will be immediately logged out. User information will remain in the system, but it will no longer be possible for any of those accounts to be accessed in the future, even if you add the connection again.\n"
      }
    }
  },
  {
    "chunk_id": "e5ba48ec-70a3-4f62-b725-827fb01d5f49",
    "metadata": {
      "token_count": 113,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\nCommonly this is necessary when:\n\n- Cryptographic keys are rotated or have expired\n- Metadata URL has changed, but is the same identity provider\n- Other SAML 2.0 Metadata attributes have changed, but it is still the same identity provider\n- You are updating the domains or attribute mapping\n\nYou can use this command to [update](/docs/reference/cli/supabase-sso-update) the configuration of an identity provider:\n\n`\n_10\nsupabase sso update <provider-id> --project-ref <your-project>\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "fae3bf53-2b2f-49ba-9d95-05aeef0bc08a",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n10\nsupabase sso list --project-ref <your-project>\n`\n\n### Update a connection [\\#](\\#update-a-connection)\n\nYou may wish to update settings about a connection to a SAML 2.0 identity provider.\n"
      }
    }
  },
  {
    "chunk_id": "684ee3fd-439e-491a-a539-ee9910662005",
    "metadata": {
      "token_count": 122,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "Please use `--help` to see all available flags.\n\nIt is not possible to change the unique SAML identifier of the identity provider, known as `EntityID`. Everything else can be updated. If the SAML `EntityID` of your identity provider has changed, it is regarded as a new identity provider and you will have to register it like a new connection.\n\n### Retrieving information about a connection [\\#](\\#retrieving-information-about-a-connection)\n\nYou can always obtain a [list](/docs/reference/cli/supabase-sso-list) of all registered providers using:\n",
      "overlap_text": {
        "previous_chunk_id": "e5ba48ec-70a3-4f62-b725-827fb01d5f49",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\nYou can use this command to [update](/docs/reference/cli/supabase-sso-update) the configuration of an identity provider:\n\n`\n_10\nsupabase sso update <provider-id> --project-ref <your-project>\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "ce06d8a5-a4a3-44ba-88bf-c70c1c992784",
    "metadata": {
      "token_count": 118,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)"
      },
      "text": "\n`\n_10\nsupabase sso list --project-ref <your-project>\n`\n\nThis list will only include basic information about each provider. To see [all of the information](/docs/reference/cli/supabase-sso-show) about a provider you can use:\n\n`\n_10\nsupabase sso show <provider-id> --project-ref <your-project>\n`\n\nYou can use the `-o json` flag to output the information as JSON, should you need to. Other formats may be supported, please use `--help` to see all available options.\n",
      "overlap_text": {
        "previous_chunk_id": "684ee3fd-439e-491a-a539-ee9910662005",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\n new connection.\n\n### Retrieving information about a connection [\\#](\\#retrieving-information-about-a-connection)\n\nYou can always obtain a [list](/docs/reference/cli/supabase-sso-list) of all registered providers using:\n"
      }
    }
  },
  {
    "chunk_id": "50063fbb-247d-4a2e-b0b1-e8f2df6357ad",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "### How do I publish my application to an identity provider's marketplace? [\\#](\\#how-do-i-publish-my-application-to-an-identity-providers-marketplace)\n\nMany cloud-based identity providers offer a marketplace where you can register your application for easy on-boarding with customers. When you use Supabase Auth's SAML 2.0 support you can register your project in any one of these marketplaces.\n\nPlease refer to the relevant documentation for each cloud-based identity provider on how you can do this. Some common marketplaces are:\n",
      "overlap_text": {
        "previous_chunk_id": "ce06d8a5-a4a3-44ba-88bf-c70c1c992784",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Managing SAML 2.0 connections [\\#](\\#managing-saml-20-connections)\n\nprovider-id> --project-ref <your-project>\n`\n\nYou can use the `-o json` flag to output the information as JSON, should you need to. Other formats may be supported, please use `--help` to see all available options.\n"
      }
    }
  },
  {
    "chunk_id": "1ac4514d-9a1b-4623-af40-0259492223d8",
    "metadata": {
      "token_count": 126,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\n- [Okta Integration Network](https://developer.okta.com/docs/guides/build-sso-integration/saml2/main/)\n- [Azure Active Directory App Gallery](https://learn.microsoft.com/en-us/azure/active-directory-b2c/publish-app-to-azure-ad-app-gallery)\n- [Google Workspaces Pre-integrated SAML apps catalog](https://support.google.com/a/table/9217027)\n\n### Why do some users get: SAML assertion does not contain email address? [\\#](\\#why-do-some-users-get-saml-assertion-does-not-contain-email-address)\n\n",
      "overlap_text": {
        "previous_chunk_id": "50063fbb-247d-4a2e-b0b1-e8f2df6357ad",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n Supabase Auth's SAML 2.0 support you can register your project in any one of these marketplaces.\n\nPlease refer to the relevant documentation for each cloud-based identity provider on how you can do this. Some common marketplaces are:\n"
      }
    }
  },
  {
    "chunk_id": "a8f00c93-d9e1-4121-9f34-0e8ef0469b78",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "Identity providers do not have to send back and email address for the user, though they often do. Supabase Auth requires that an email address is present.\n\nThe following list of commonly used SAML attribute names is inspected, in order of appearance, to discover the email address in the assertion:\n\n- `urn:oid:0.9.2342.19200300.100.1.3`\n- `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress`\n",
      "overlap_text": {
        "previous_chunk_id": "1ac4514d-9a1b-4623-af40-0259492223d8",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\nsupport.google.com/a/table/9217027)\n\n### Why do some users get: SAML assertion does not contain email address? [\\#](\\#why-do-some-users-get-saml-assertion-does-not-contain-email-address)\n\n"
      }
    }
  },
  {
    "chunk_id": "0fd2fa64-c4df-4db2-b39b-acde8f90caaa",
    "metadata": {
      "token_count": 119,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "- `http://schemas.xmlsoap.org/claims/EmailAddress`\n- `mail`\n- `email`\n\nFinally if there is no such attribute, it will use the SAML `NameID` value but only if the format is advertised as `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress`.\n\nShould you run into this problem, it is most likely a misconfiguration issue **on the identity provider side.** Please instruct your contact at the company to map the user's email address to one of the above listed attribute names, typically `email`.\n",
      "overlap_text": {
        "previous_chunk_id": "a8f00c93-d9e1-4121-9f34-0e8ef0469b78",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n email address in the assertion:\n\n- `urn:oid:0.9.2342.19200300.100.1.3`\n- `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress`\n"
      }
    }
  },
  {
    "chunk_id": "f3f829c8-462a-48bf-9b62-580f18aabb9b",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\n### How do I access the private key used for SAML in my project? [\\#](\\#how-do-i-access-the-private-key-used-for-saml-in-my-project)\n\nAt this time it is not possible to extract the RSA private key used by your project's Supabase Auth server. This is done to keep the private key as secure as possible, given that SAML does not offer an easy way to rotate keys without disrupting service. (Please use a SAML 2.0 Metadata URL whenever possible for this reason!)\n\n",
      "overlap_text": {
        "previous_chunk_id": "0fd2fa64-c4df-4db2-b39b-acde8f90caaa",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\nShould you run into this problem, it is most likely a misconfiguration issue **on the identity provider side.** Please instruct your contact at the company to map the user's email address to one of the above listed attribute names, typically `email`.\n"
      }
    }
  },
  {
    "chunk_id": "b5cd1267-c87b-49d1-b1dc-19cdbaedfa1f",
    "metadata": {
      "token_count": 38,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml",
      "page_title": "Single Sign-On with SAML 2.0 for Projects | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Single Sign-On with SAML 2.0 for Projects",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "If you really need access to the key, please [open a support ticket](https://supabase.com/dashboard/support/new) and we'll try to support you as best as possible.\n",
      "overlap_text": {
        "previous_chunk_id": "f3f829c8-462a-48bf-9b62-580f18aabb9b",
        "text": "Content of the previous chunk for context: h1: Single Sign-On with SAML 2.0 for Projects h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n server. This is done to keep the private key as secure as possible, given that SAML does not offer an easy way to rotate keys without disrupting service. (Please use a SAML 2.0 Metadata URL whenever possible for this reason!)\n\n"
      }
    }
  },
  {
    "chunk_id": "82e9faf4-1943-49f6-bd54-37b5f861ef8e",
    "metadata": {
      "token_count": 132,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "JSON Web Tokens"
      },
      "text": "* * *\n\nA [JSON Web Token](https://jwt.io/introduction) is a type of data structure, represented as a string, that usually contains identity and authorization information about a user. It encodes information about its lifetime and is signed with a cryptographic key to make it tamper-resistant.\n\nSupabase Access Tokens are JWTs. The JWT is sent along with every request to Supabase services. By verifying the token and inspecting the included claims, you can allow or deny access to resources. [Row Level Security](/docs/guides/database/postgres/row-level-security) policies are based on the information present in JWTs.\n"
    }
  },
  {
    "chunk_id": "9d101e46-ed6b-48ed-a52e-a1b82bdc0f59",
    "metadata": {
      "token_count": 166,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)"
      },
      "text": "JWTs are encoded and signed as follows.\n\nThe JSON object starts out looking something like this:\n\n`\n1\n{\n2\n\"sub\": \"0001\",\n3\n\"name\": \"Sam Vimes\",\n4\n\"iat\": 1516239022,\n5\n\"exp\": 1518239022\n6\n}\n`\n\n`sub` is the \"subject\", which is usually the UUID of the user. `name` is self-explanatory, and `iat` is the Unix timestamp at which the token was created. Many JWTs will also have an `exp`, which is the date at which the token is set to expire and can no longer be used. These are some of the standard fields you may find in a JWT, but you can pretty much store whatever you want in there, for example:\n",
      "overlap_text": {
        "previous_chunk_id": "82e9faf4-1943-49f6-bd54-37b5f861ef8e",
        "text": "Content of the previous chunk for context: h1: JWTs h2: JSON Web Tokens\n\n. By verifying the token and inspecting the included claims, you can allow or deny access to resources. [Row Level Security](/docs/guides/database/postgres/row-level-security) policies are based on the information present in JWTs.\n"
      }
    }
  },
  {
    "chunk_id": "c9e2a720-f9e7-4f03-94f2-3705a382319f",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)"
      },
      "text": "\n`\n1\n{\n2\n\"sub\": \"0002\",\n3\n\"name\": \"V\u011bra Hrab\u00e1nkov\u00e1\",\n4\n\"iat\": 1516239022,\n5\n\"exp\": 1518239022,\n6\n\"theme\": {\n7\n      \"primary\" : \"#D80C14\",\n8\n      \"secondary\" : \"#FFFFFF\"\n9\n}\n10\n}\n`\n\nJust note that the more data you store in your token, the longer the encoded string will be.\n",
      "overlap_text": {
        "previous_chunk_id": "9d101e46-ed6b-48ed-a52e-a1b82bdc0f59",
        "text": "Content of the previous chunk for context: h1: JWTs h2: Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)\n\nexp`, which is the date at which the token is set to expire and can no longer be used. These are some of the standard fields you may find in a JWT, but you can pretty much store whatever you want in there, for example:\n"
      }
    }
  },
  {
    "chunk_id": "b1d1b7b8-1cd7-4a4b-aafb-57755d537eb8",
    "metadata": {
      "token_count": 111,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)"
      },
      "text": "\nWhen we want to send the JWT to the user, we first encode the data using an algorithm such as `HS256`. There are many libraries (and several different algorithms) that can be used to do this encoding/decoding, such as [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken). The signing is as simple as:\n\n`\n1\n// from https://replit.com/@awalias/jsonwebtokens#index.js\n2\nlet token = jwt.sign({ name: 'Sam Vimes' }, 'some-secret')\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "c9e2a720-f9e7-4f03-94f2-3705a382319f",
        "text": "Content of the previous chunk for context: h1: JWTs h2: Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)\n\n7\n      \"primary\" : \"#D80C14\",\n8\n      \"secondary\" : \"#FFFFFF\"\n9\n}\n10\n}\n`\n\nJust note that the more data you store in your token, the longer the encoded string will be.\n"
      }
    }
  },
  {
    "chunk_id": "496b36eb-3ac4-404f-b35c-d8ee13af7838",
    "metadata": {
      "token_count": 126,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)"
      },
      "text": "And the resulting string will look like this:\n\n`\n1\neyJhbGciOiJIUzI1NiJ9\n2\n.eyJzdWIiOiIwMDAxIiwibmFtZSI6IlNhbSBWaW1lcyIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE4MjM5MDIyfQ\n3\n.zMcHjKlkGhuVsiPIkyAkB2rjXzyzJsMMgpvEGvGtjvA\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "b1d1b7b8-1cd7-4a4b-aafb-57755d537eb8",
        "text": "Content of the previous chunk for context: h1: JWTs h2: Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)\n\n/jsonwebtoken). The signing is as simple as:\n\n`\n1\n// from https://replit.com/@awalias/jsonwebtokens#index.js\n2\nlet token = jwt.sign({ name: 'Sam Vimes' }, 'some-secret')\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "bb3eb849-6b35-4850-9862-9bef73167440",
    "metadata": {
      "token_count": 142,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)"
      },
      "text": "You will notice that the string is actually made up of three components:\n\nThe first segment `eyJhbGciOiJIUzI1NiJ9` is known as the \"header\", and when decoded just tells us which algorithm was used to do the encoding:\n\n`\n1\n{\n2\n\"alg\": \"HS256\"\n3\n}\n`\n\nThe second segment `eyJzdWIiOiIwMDAxIiwibmFtZSI6IlNhbSBWaW1lcyIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE4MjM5MDIyfQ` contains our original payload:\n",
      "overlap_text": {
        "previous_chunk_id": "496b36eb-3ac4-404f-b35c-d8ee13af7838",
        "text": "Content of the previous chunk for context: h1: JWTs h2: Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)\n\njoxNTE4MjM5MDIyfQ\n3\n.zMcHjKlkGhuVsiPIkyAkB2rjXzyzJsMMgpvEGvGtjvA\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "fe49e173-8ef9-485a-a68f-32281e7923ea",
    "metadata": {
      "token_count": 132,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)"
      },
      "text": "\n`\n1\n{\n2\n\"sub\": \"0001\",\n3\n\"name\": \"Sam Vimes\",\n4\n\"iat\": 1516239022,\n5\n\"exp\": 1518239022\n6\n}\n`\n\nThe last segment `zMcHjKlkGhuVsiPIkyAkB2rjXzyzJsMMgpvEGvGtjvA` is the signature itself, which is the part used by the website or service provider to verify that a token sent by some user is legitimate. It is produced in the first instance by running the cryptographic function HS256 on the following input:\n",
      "overlap_text": {
        "previous_chunk_id": "bb3eb849-6b35-4850-9862-9bef73167440",
        "text": "Content of the previous chunk for context: h1: JWTs h2: Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)\n\n6IlNhbSBWaW1lcyIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE4MjM5MDIyfQ` contains our original payload:\n"
      }
    }
  },
  {
    "chunk_id": "b74da973-038c-4877-8b62-1a743187ffdd",
    "metadata": {
      "token_count": 112,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)"
      },
      "text": "\n`\n1\nHMACSHA256(\n2\nbase64UrlEncode(header) + \".\" +\n3\nbase64UrlEncode(payload)\n4\n<jwt_secret>\n5\n)\n`\n\nYou can test out minting your own tokens on [https://jwt.io](https://jwt.io).\n\nIt is important to note that anyone who possesses the `jwt_secret` here can create new tokens, and also verify existing ones. More advanced JWT algorithms use two secrets: one for the creation of tokens, and a separate one to verify the validity of signed tokens.\n",
      "overlap_text": {
        "previous_chunk_id": "fe49e173-8ef9-485a-a68f-32281e7923ea",
        "text": "Content of the previous chunk for context: h1: JWTs h2: Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)\n\nvA` is the signature itself, which is the part used by the website or service provider to verify that a token sent by some user is legitimate. It is produced in the first instance by running the cryptographic function HS256 on the following input:\n"
      }
    }
  },
  {
    "chunk_id": "80ad41b6-f459-4ae6-9ff2-ef379845f641",
    "metadata": {
      "token_count": 158,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)"
      },
      "text": "\nYou might wonder why JWTs are so popular all of a sudden. The answer is that with the mass adoption of microservice architecture, we were in a situation where several distinct microservices (APIs, websites, servers, etc.) want to easily validate that a user is who they say they are, or are in other words a \"logged-in\" user. Traditional session tokens are no use here, since they would require each microservice to either maintain a record of currently valid session tokens or to query a central database each time a user wants to access a resource in order to check the validity of the session token \u2013 very inefficient indeed. JWT-based auth in this sense is decentralized, since anyone with the `jwt_secret` can verify a token without needing access to a centralized database.\n",
      "overlap_text": {
        "previous_chunk_id": "b74da973-038c-4877-8b62-1a743187ffdd",
        "text": "Content of the previous chunk for context: h1: JWTs h2: Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)\n\n to note that anyone who possesses the `jwt_secret` here can create new tokens, and also verify existing ones. More advanced JWT algorithms use two secrets: one for the creation of tokens, and a separate one to verify the validity of signed tokens.\n"
      }
    }
  },
  {
    "chunk_id": "7a4b245e-f0a4-4723-ac5a-599eb8bf2bba",
    "metadata": {
      "token_count": 71,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)"
      },
      "text": "\nNote: One downside of JWTs is that they are not easily voidable, like session tokens. If a JWT is leaked to a malicious actor, they will be able to redeem it anywhere until the expiry date is reached \u2013 unless of course the system owner updates the `jwt_secret` (which will of course invalidate _everyone's_ existing tokens).\n",
      "overlap_text": {
        "previous_chunk_id": "80ad41b6-f459-4ae6-9ff2-ef379845f641",
        "text": "Content of the previous chunk for context: h1: JWTs h2: Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)\n\n user wants to access a resource in order to check the validity of the session token \u2013 very inefficient indeed. JWT-based auth in this sense is decentralized, since anyone with the `jwt_secret` can verify a token without needing access to a centralized database.\n"
      }
    }
  },
  {
    "chunk_id": "e308ccae-7320-42c8-b3e3-e4202e7dcdd6",
    "metadata": {
      "token_count": 127,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "JWTs in Supabase [\\#](\\#jwts-in-supabase)"
      },
      "text": "In Supabase we issue JWTs for three different purposes:\n\n1. `anon key`: This key is used to bypass the Supabase API gateway and can be used in your client-side code.\n2. `service role key`: This key has super admin rights and can bypass your Row Level Security. Do not put it in your client-side code. Keep it private.\n3. `user specific jwts`: These are tokens we issue to users who log into your project/service/website. It's the modern equivalent of a session token, and can be used by a user to access content or permissions specific to them.\n",
      "overlap_text": {
        "previous_chunk_id": "7a4b245e-f0a4-4723-ac5a-599eb8bf2bba",
        "text": "Content of the previous chunk for context: h1: JWTs h2: Encoding and signing JWTs [\\#](\\#encoding-and-signing-jwts)\n\n If a JWT is leaked to a malicious actor, they will be able to redeem it anywhere until the expiry date is reached \u2013 unless of course the system owner updates the `jwt_secret` (which will of course invalidate _everyone's_ existing tokens).\n"
      }
    }
  },
  {
    "chunk_id": "0306b41e-9508-43f2-b4d8-8124e86dc310",
    "metadata": {
      "token_count": 202,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "JWTs in Supabase [\\#](\\#jwts-in-supabase)"
      },
      "text": "\nThe first token here, the `anon key` token, is for developers to send along with their API requests whenever they want to interact with their Supabase database.\n\nLet's say you want to read the names of all the rows in a table `colors`. We would make a request like:\n\n`\n1\ncurl 'https://xscduanzzfseqszwzhcy.supabase.co/rest/v1/colors?select=name' \\\n2\n-H \"apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxNDIwNTE3NCwiZXhwIjoxOTI5NzgxMTc0fQ.-NBR1WnZyQGpRLdXJfgfpszoZ0EeE6KHatJsDPLIX8c\"\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "e308ccae-7320-42c8-b3e3-e4202e7dcdd6",
        "text": "Content of the previous chunk for context: h1: JWTs h2: JWTs in Supabase [\\#](\\#jwts-in-supabase)\n\n. `user specific jwts`: These are tokens we issue to users who log into your project/service/website. It's the modern equivalent of a session token, and can be used by a user to access content or permissions specific to them.\n"
      }
    }
  },
  {
    "chunk_id": "3f9d3233-621b-4d7d-a537-c93890d6c56c",
    "metadata": {
      "token_count": 132,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "JWTs in Supabase [\\#](\\#jwts-in-supabase)"
      },
      "text": "If we put this token into [https://jwt.io](https://jwt.io), we see it decodes to:\n\n`\n1\n{\n2\n\"role\": \"anon\",\n3\n\"iss\": \"supabase\",\n4\n\"iat\": 1614205174,\n5\n\"exp\": 1929781174\n6\n}\n`\n\nThis JWT is signed by a `jwt_secret` specific to the developer's Supabase token (you can find this secret alongside this encoded \"anon key\" on your Dashboard under Settings > API page) and is required to get past the Supabase API gateway and access the developer's project.\n",
      "overlap_text": {
        "previous_chunk_id": "0306b41e-9508-43f2-b4d8-8124e86dc310",
        "text": "Content of the previous chunk for context: h1: JWTs h2: JWTs in Supabase [\\#](\\#jwts-in-supabase)\n\nZXhwIjoxOTI5NzgxMTc0fQ.-NBR1WnZyQGpRLdXJfgfpszoZ0EeE6KHatJsDPLIX8c\"\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "4b620056-94fd-4dba-b2c7-84f27c1d373d",
    "metadata": {
      "token_count": 105,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "JWTs in Supabase [\\#](\\#jwts-in-supabase)"
      },
      "text": "\nThe idea with this particular key is that it's safe to put into your client, meaning it's okay if your end users see this key \u2013 but _only_ if you first enable Row Level Security.\n\nThe second key, `service role key`, should only ever be used on one of your own servers or environments, and should never be shared with end users. You might use this token to do things like make batch inserts of data.\n\nThe `user access token` is the JWT issued when you call for example:\n",
      "overlap_text": {
        "previous_chunk_id": "3f9d3233-621b-4d7d-a537-c93890d6c56c",
        "text": "Content of the previous chunk for context: h1: JWTs h2: JWTs in Supabase [\\#](\\#jwts-in-supabase)\n\n specific to the developer's Supabase token (you can find this secret alongside this encoded \"anon key\" on your Dashboard under Settings > API page) and is required to get past the Supabase API gateway and access the developer's project.\n"
      }
    }
  },
  {
    "chunk_id": "02858038-b7e5-48ba-a6ba-733389c79ca3",
    "metadata": {
      "token_count": 453,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "JWTs in Supabase [\\#](\\#jwts-in-supabase)"
      },
      "text": "\n`\n1\nsupabase.auth.signIn({\n2\nemail: 'lao.gimmie@gov.sg',\n3\npassword: 'They_Live_1988!',\n4\n})\n`\n\nThis token should be passed in addition to the `apikey` header as an `Authorization Bearer` header like:\n\n`\n1\ncurl 'https://xscduanzzfseqszwzhcy.supabase.co/rest/v1/colors?select=name' \\\n2\n-H \"apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxNDIwNTE3NCwiZXhwIjoxOTI5NzgxMTc0fQ.-NBR1WnZyQGpRLdXJfgfpszoZ0EeE6KHatJsDPLIX8c\" \\\n3\n-H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjE1ODI0Mzg4LCJzdWIiOiIwMzM0NzQ0YS1mMmEyLTRhYmEtOGM4YS02ZTc0OGY2MmExNzIiLCJlbWFpbCI6InNvbWVvbmVAZW1haWwuY29tIiwiYXBwX21ldGFkYXRhIjp7InByb3ZpZGVyIjoiZW1haWwifSwidXNlcl9tZXRhZGF0YSI6bnVsbCwicm9sZSI6ImF1dGhlbnRpY2F0ZWQifQ.I-_oSsJamtinGxniPETBf-ezAUwDW2sY9bJIThvdX9s\"\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "4b620056-94fd-4dba-b2c7-84f27c1d373d",
        "text": "Content of the previous chunk for context: h1: JWTs h2: JWTs in Supabase [\\#](\\#jwts-in-supabase)\n\n used on one of your own servers or environments, and should never be shared with end users. You might use this token to do things like make batch inserts of data.\n\nThe `user access token` is the JWT issued when you call for example:\n"
      }
    }
  },
  {
    "chunk_id": "d348b4fd-41d4-414c-bcb6-faedd23f3ec2",
    "metadata": {
      "token_count": 128,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "JWTs in Supabase [\\#](\\#jwts-in-supabase)"
      },
      "text": "You'll notice that this token is quite a bit longer, since it contains information specific to the user such as:\n\n`\n1\n{\n2\n\"aud\": \"authenticated\",\n3\n\"exp\": 1615824388,\n4\n\"sub\": \"0334744a-f2a2-4aba-8c8a-6e748f62a172\",\n5\n\"email\": \"d.l.solove@gmail.com\",\n6\n\"app_metadata\": {\n7\n    \"provider\": \"email\"\n8\n},\n9\n\"user_metadata\": null,\n10\n\"role\": \"authenticated\"\n11\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "02858038-b7e5-48ba-a6ba-733389c79ca3",
        "text": "Content of the previous chunk for context: h1: JWTs h2: JWTs in Supabase [\\#](\\#jwts-in-supabase)\n\nSI6ImF1dGhlbnRpY2F0ZWQifQ.I-_oSsJamtinGxniPETBf-ezAUwDW2sY9bJIThvdX9s\"\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "35c2f4aa-b44d-4a8a-bfd8-633b2348dd56",
    "metadata": {
      "token_count": 49,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "JWTs in Supabase [\\#](\\#jwts-in-supabase)"
      },
      "text": "Now that you understand what JWTs are and where they're used in Supabase, you can explore how to use them in combination with Row Level Security to start restricting access to certain tables, rows, and columns in your Postgres database.\n",
      "overlap_text": {
        "previous_chunk_id": "d348b4fd-41d4-414c-bcb6-faedd23f3ec2",
        "text": "Content of the previous chunk for context: h1: JWTs h2: JWTs in Supabase [\\#](\\#jwts-in-supabase)\n\n\n\"email\": \"d.l.solove@gmail.com\",\n6\n\"app_metadata\": {\n7\n    \"provider\": \"email\"\n8\n},\n9\n\"user_metadata\": null,\n10\n\"role\": \"authenticated\"\n11\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "1090ac5b-034a-4317-8c49-4225ef06a0db",
    "metadata": {
      "token_count": 16,
      "source_url": "https://supabase.com/docs/guides/auth/jwts",
      "page_title": "JWTs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "JWTs",
        "h2": "Resources [\\#](\\#resources)"
      },
      "text": "- JWT debugger: [https://jwt.io/](https://jwt.io/)\n",
      "overlap_text": {
        "previous_chunk_id": "35c2f4aa-b44d-4a8a-bfd8-633b2348dd56",
        "text": "Content of the previous chunk for context: h1: JWTs h2: JWTs in Supabase [\\#](\\#jwts-in-supabase)\n\nNow that you understand what JWTs are and where they're used in Supabase, you can explore how to use them in combination with Row Level Security to start restricting access to certain tables, rows, and columns in your Postgres database.\n"
      }
    }
  },
  {
    "chunk_id": "164e43ef-4f75-4473-9499-5929081f300d",
    "metadata": {
      "token_count": 127,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/password-verification-hook",
      "page_title": "Password Verification Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password Verification Hook"
      },
      "text": "* * *\n\nYour company wishes to increase security beyond the requirements of the default password implementation in order to fulfill security or compliance requirements. You plan to track the status of a password sign-in attempt and take action via an email or a restriction on logins where necessary.\n\nAs this hook runs on unauthenticated requests, malicious users can abuse the hook by calling it multiple times. Pay extra care when using the hook as you can unintentionally block legitimate users from accessing your application.\n\nCheck if a password is valid prior to taking any additional action to ensure the user is legitimate. Where possible, send an email or notification instead of blocking the user.\n"
    }
  },
  {
    "chunk_id": "51e575f1-cef7-4fc3-b1ff-bb764ce8df12",
    "metadata": {
      "token_count": 119,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/password-verification-hook",
      "page_title": "Password Verification Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password Verification Hook"
      },
      "text": "\n**Inputs**\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `user_id` | `string` | Unique identifier for the user attempting to sign in. Correlate this to the `auth.users` table. |\n| `valid` | `boolean` | Whether the password verification attempt was valid. |\n\nJSONJSON Schema\n\n`\n_10\n{\n_10\n\"user_id\": \"3919cb6e-4215-4478-a960-6d3454326cec\",\n_10\n\"valid\": true\n_10\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "164e43ef-4f75-4473-9499-5929081f300d",
        "text": "Content of the previous chunk for context: h1: Password Verification Hook\n\n when using the hook as you can unintentionally block legitimate users from accessing your application.\n\nCheck if a password is valid prior to taking any additional action to ensure the user is legitimate. Where possible, send an email or notification instead of blocking the user.\n"
      }
    }
  },
  {
    "chunk_id": "558c3bd6-aaaf-4faa-a407-7710ea3bda1b",
    "metadata": {
      "token_count": 145,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/password-verification-hook",
      "page_title": "Password Verification Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password Verification Hook"
      },
      "text": "**Outputs**\n\nReturn these only if your hook processed the input without errors.\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `decision` | `string` | The decision on whether to allow authentication to move forward. Use `reject` to deny the verification attempt and log the user out of all active sessions. Use `continue` to use the default Supabase Auth behavior. |\n| `message` | `string` | The message to show the user if the decision was `reject`. |\n| `should_logout_user` | `boolean` | Whether to log out the user if a `reject` decision is issued. Has no effect when a `continue` decision is issued. |\n\n",
      "overlap_text": {
        "previous_chunk_id": "51e575f1-cef7-4fc3-b1ff-bb764ce8df12",
        "text": "Content of the previous chunk for context: h1: Password Verification Hook\n\nJSONJSON Schema\n\n`\n_10\n{\n_10\n\"user_id\": \"3919cb6e-4215-4478-a960-6d3454326cec\",\n_10\n\"valid\": true\n_10\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "6eddaa6b-3cef-46d6-95c7-9439b77dd659",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/password-verification-hook",
      "page_title": "Password Verification Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password Verification Hook"
      },
      "text": "`\n_10\n{\n_10\n\"decision\": \"reject\",\n_10\n\"message\": \"You have exceeded maximum number of password sign-in attempts.\",\n_10\n\"should_logout_user\": \"false\"\n_10\n}\n`\n\nSQL\n\nLimit failed password verification attemptsSend email notification on failed password attempts\n\nAs part of new security measures within the company, users can only input an incorrect password every 10 seconds and not more than that. You want to write a hook to enforce this.\n",
      "overlap_text": {
        "previous_chunk_id": "558c3bd6-aaaf-4faa-a407-7710ea3bda1b",
        "text": "Content of the previous chunk for context: h1: Password Verification Hook\n\n show the user if the decision was `reject`. |\n| `should_logout_user` | `boolean` | Whether to log out the user if a `reject` decision is issued. Has no effect when a `continue` decision is issued. |\n\n"
      }
    }
  },
  {
    "chunk_id": "4580013c-717c-441a-bd4a-71ac5f73d0ed",
    "metadata": {
      "token_count": 554,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/password-verification-hook",
      "page_title": "Password Verification Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password Verification Hook"
      },
      "text": "\nCreate a table to record each user's last incorrect password verification attempt.\n\n`\n_10\ncreate table public.password_failed_verification_attempts (\n_10\nuser_id uuid not null,\n_10\nlast_failed_at timestamp not null default now(),\n_10\nprimary key (user_id)\n_10\n);\n`\n\nCreate a hook to read and write information to this table. For example:\n\n`\n_54\ncreate function public.hook_password_verification_attempt(event jsonb)\n_54\nreturns jsonb\n_54\nlanguage plpgsql\n_54\nas $$\n_54\ndeclare\n_54\n    last_failed_at timestamp;\n_54\nbegin\n_54\n    if event->'valid' is true then\n_54\n      -- password is valid, accept it\n_54\n      return jsonb_build_object('decision', 'continue');\n_54\n    end if;\n_54\n_54\n    select last_failed_at into last_failed_at\n_54\n      from public.password_failed_verification_attempts\n_54\n      where\n_54\n        user_id = event->'user_id';\n_54\n_54\n    if last_failed_at is not null and now() - last_failed_at < interval '10 seconds' then\n_54\n      -- last attempt was done too quickly\n_54\n      return jsonb_build_object(\n_54\n        'error', jsonb_build_object(\n_54\n          'http_code', 429,\n_54\n          'message',   'Please wait a moment before trying again.'\n_54\n        )\n_54\n      );\n_54\n    end if;\n_54\n_54\n    -- record this failed attempt\n_54\n    insert into public.password_failed_verification_attempts\n_54\n      (\n_54\n        user_id,\n_54\n        last_failed_at\n_54\n      )\n_54\n      values\n_54\n      (\n_54\n        event->'user_id',\n_54\n        now()\n_54\n      )\n_54\n      on conflict do update\n_54\n        set last_failed_at = now();\n_54\n_54\n    -- finally let Supabase Auth do the default behavior for a failed attempt\n_54\n    return jsonb_build_object('decision', 'continue');\n_54\nend;\n_54\n$$;\n_54\n_54\n-- Assign appropriate permissions\n_54\ngrant all\n_54\non table public.password_failed_verification_attempts\n_54\nto supabase_auth_admin;\n_54\n_54\nrevoke all\n_54\non table public.password_failed_verification_attempts\n_54\nfrom authenticated, anon, public;\n`\n",
      "overlap_text": {
        "previous_chunk_id": "6eddaa6b-3cef-46d6-95c7-9439b77dd659",
        "text": "Content of the previous chunk for context: h1: Password Verification Hook\n\nLimit failed password verification attemptsSend email notification on failed password attempts\n\nAs part of new security measures within the company, users can only input an incorrect password every 10 seconds and not more than that. You want to write a hook to enforce this.\n"
      }
    }
  },
  {
    "chunk_id": "69f4c1c7-532b-4b9e-94c4-f861618895cc",
    "metadata": {
      "token_count": 86,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/remix",
      "page_title": "Supabase Auth with Remix | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Supabase Auth with Remix"
      },
      "text": "* * *\n\nWe generally recommend using the new `@supabase/ssr` package instead of `auth-helpers`. `@supabase/ssr` takes the core concepts of the Auth Helpers package and makes them available to any server framework. Check out the [migration doc](/docs/guides/auth/server-side/migrating-to-ssr-from-auth-helpers) to learn more.\n\nSee legacy docs\n"
    }
  },
  {
    "chunk_id": "cfdc53df-ad21-40eb-bb85-7a74b3a7bec5",
    "metadata": {
      "token_count": 52,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/creating-a-client",
      "page_title": "Creating a Supabase client for SSR | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Creating a Supabase client for SSR",
        "h2": "Configure your Supabase client to use cookies"
      },
      "text": "* * *\n\nTo use Server-Side Rendering (SSR) with Supabase, you need to configure your Supabase client to use cookies. The `@supabase/ssr` package helps you do this for JavaScript/TypeScript applications.\n"
    }
  },
  {
    "chunk_id": "73e88497-a338-43b4-98e6-7e3bdad4bf53",
    "metadata": {
      "token_count": 53,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/creating-a-client",
      "page_title": "Creating a Supabase client for SSR | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Creating a Supabase client for SSR",
        "h2": "Install [\\#](\\#install)"
      },
      "text": "Install the `@supabase/ssr` and `@supabase/supabase-js` packages:\n\nnpmyarnpnpm\n\n`\n_10\nnpm install @supabase/ssr @supabase/supabase-js\n`\n",
      "overlap_text": {
        "previous_chunk_id": "cfdc53df-ad21-40eb-bb85-7a74b3a7bec5",
        "text": "Content of the previous chunk for context: h1: Creating a Supabase client for SSR h2: Configure your Supabase client to use cookies\n\n *\n\nTo use Server-Side Rendering (SSR) with Supabase, you need to configure your Supabase client to use cookies. The `@supabase/ssr` package helps you do this for JavaScript/TypeScript applications.\n"
      }
    }
  },
  {
    "chunk_id": "a5414b43-056e-4f9a-86eb-b5b90d251663",
    "metadata": {
      "token_count": 86,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/creating-a-client",
      "page_title": "Creating a Supabase client for SSR | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Creating a Supabase client for SSR",
        "h2": "Set environment variables [\\#](\\#set-environment-variables)"
      },
      "text": "In your environment variables file, set your Supabase URL and Supabase Anon Key:\n\n###### Project URL\n\nLoading...\n\n###### Anon key\n\nLoading...\n\nNext.jsSvelteKitAstroRemixExpress\n\n.env.local\n\n`\n_10\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url\n_10\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n`\n",
      "overlap_text": {
        "previous_chunk_id": "73e88497-a338-43b4-98e6-7e3bdad4bf53",
        "text": "Content of the previous chunk for context: h1: Creating a Supabase client for SSR h2: Install [\\#](\\#install)\n\n@supabase/ssr` and `@supabase/supabase-js` packages:\n\nnpmyarnpnpm\n\n`\n_10\nnpm install @supabase/ssr @supabase/supabase-js\n`\n"
      }
    }
  },
  {
    "chunk_id": "9f9c5d15-bd7f-4162-ac4a-583f676a1978",
    "metadata": {
      "token_count": 130,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/creating-a-client",
      "page_title": "Creating a Supabase client for SSR | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Creating a Supabase client for SSR",
        "h2": "Create a client [\\#](\\#create-a-client)"
      },
      "text": "You'll need some one-time setup code to configure your Supabase client to use cookies. Once your utility code is set up, you can use your new `createClient` utility functions to get a properly configured Supabase client.\n\nUse the browser client in code that runs on the browser, and the server client in code that runs on the server.\n\nNext.jsSvelteKitAstroRemixExpress\n\nThe following code samples are for App Router. For help with Pages Router, see the [Next.js Server-Side Auth guide](/docs/guides/auth/server-side/nextjs?queryGroups=router&router=pages).\n",
      "overlap_text": {
        "previous_chunk_id": "a5414b43-056e-4f9a-86eb-b5b90d251663",
        "text": "Content of the previous chunk for context: h1: Creating a Supabase client for SSR h2: Set environment variables [\\#](\\#set-environment-variables)\n\nvelteKitAstroRemixExpress\n\n.env.local\n\n`\n_10\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url\n_10\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n`\n"
      }
    }
  },
  {
    "chunk_id": "aab60184-c771-4cc7-ae12-ed7295fe3d3f",
    "metadata": {
      "token_count": 7,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/creating-a-client",
      "page_title": "Creating a Supabase client for SSR | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Creating a Supabase client for SSR",
        "h2": "Create a client [\\#](\\#create-a-client)"
      },
      "text": "\nClient-sideServer-sideMiddleware\n",
      "overlap_text": {
        "previous_chunk_id": "9f9c5d15-bd7f-4162-ac4a-583f676a1978",
        "text": "Content of the previous chunk for context: h1: Creating a Supabase client for SSR h2: Create a client [\\#](\\#create-a-client)\n\nixExpress\n\nThe following code samples are for App Router. For help with Pages Router, see the [Next.js Server-Side Auth guide](/docs/guides/auth/server-side/nextjs?queryGroups=router&router=pages).\n"
      }
    }
  },
  {
    "chunk_id": "3f57c88e-ff1b-4e9f-bf4a-ab7ef9628145",
    "metadata": {
      "token_count": 74,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/creating-a-client",
      "page_title": "Creating a Supabase client for SSR | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Creating a Supabase client for SSR",
        "h2": "Next steps [\\#](\\#next-steps)"
      },
      "text": "- Implement [Authentication using Email and Password](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\n- Implement [Authentication using OAuth](/docs/guides/auth/server-side/oauth-with-pkce-flow-for-ssr)\n- [Learn more about SSR](/docs/guides/auth/server-side-rendering)\n",
      "overlap_text": {
        "previous_chunk_id": "aab60184-c771-4cc7-ae12-ed7295fe3d3f",
        "text": "Content of the previous chunk for context: h1: Creating a Supabase client for SSR h2: Create a client [\\#](\\#create-a-client)\n\n\nClient-sideServer-sideMiddleware\n"
      }
    }
  },
  {
    "chunk_id": "55d1b778-72f2-41bf-aa49-8b6f88c74566",
    "metadata": {
      "token_count": 3,
      "source_url": "https://supabase.com/docs/guides/auth/auth-identity-linking",
      "page_title": "Identity Linking | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Identity Linking",
        "h2": "Manage the identities associated with your user"
      },
      "text": "* * *\n"
    }
  },
  {
    "chunk_id": "fbd7cc8a-1a9c-43d2-9524-050f884d7d4d",
    "metadata": {
      "token_count": 147,
      "source_url": "https://supabase.com/docs/guides/auth/auth-identity-linking",
      "page_title": "Identity Linking | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Identity Linking",
        "h2": "Identity linking strategies [\\#](\\#identity-linking-strategies)"
      },
      "text": "Currently, Supabase Auth supports 2 strategies to link an identity to a user:\n\n1. [Automatic Linking](#automatic-linking)\n2. [Manual Linking](#manual-linking-beta)\n\n### Automatic linking [\\#](\\#automatic-linking)\n\nSupabase Auth automatically links identities with the same email address to a single user. This helps to improve the user experience when multiple OAuth login options are presented since the user does not need to remember which OAuth account they used to sign up with. When a new user signs in with OAuth, Supabase Auth will attempt to look for an existing user that uses the same email address. If a match is found, the new identity is linked to the user.\n",
      "overlap_text": {
        "previous_chunk_id": "55d1b778-72f2-41bf-aa49-8b6f88c74566",
        "text": "Content of the previous chunk for context: h1: Identity Linking h2: Manage the identities associated with your user\n\n* * *\n"
      }
    }
  },
  {
    "chunk_id": "95b355bb-c39f-47fc-9a75-fbf0c4c11435",
    "metadata": {
      "token_count": 129,
      "source_url": "https://supabase.com/docs/guides/auth/auth-identity-linking",
      "page_title": "Identity Linking | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Identity Linking",
        "h2": "Identity linking strategies [\\#](\\#identity-linking-strategies)"
      },
      "text": "\nIn order for automatic linking to correctly identify the user for linking, Supabase Auth needs to ensure that all user emails are unique. It would also be an insecure practice to automatically link an identity to a user with an unverified email address since that could lead to pre-account takeover attacks. To prevent this from happening, when a new identity can be linked to an existing user, Supabase Auth will remove any other unconfirmed identities linked to an existing user.\n\nUsers that signed up with [SAML SSO](/docs/guides/auth/sso/auth-sso-saml) will not be considered as targets for automatic linking.\n",
      "overlap_text": {
        "previous_chunk_id": "fbd7cc8a-1a9c-43d2-9524-050f884d7d4d",
        "text": "Content of the previous chunk for context: h1: Identity Linking h2: Identity linking strategies [\\#](\\#identity-linking-strategies)\n\n they used to sign up with. When a new user signs in with OAuth, Supabase Auth will attempt to look for an existing user that uses the same email address. If a match is found, the new identity is linked to the user.\n"
      }
    }
  },
  {
    "chunk_id": "ba931abd-c9f2-4eb2-b832-6ed80e75b29b",
    "metadata": {
      "token_count": 195,
      "source_url": "https://supabase.com/docs/guides/auth/auth-identity-linking",
      "page_title": "Identity Linking | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Identity Linking",
        "h2": "Identity linking strategies [\\#](\\#identity-linking-strategies)"
      },
      "text": "\n### Manual linking (beta) [\\#](\\#manual-linking-beta)\n\nJavaScriptDartSwiftKotlinPython\n\nSupabase Auth allows a user to initiate identity linking with a different email address when they are logged in. To link an OAuth identity to the user, call [`linkIdentity()`](/docs/reference/javascript/auth-linkidentity):\n\n`\n_10\nconst { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })\n`\n\nIn the example above, the user will be redirected to Google to complete the OAuth2.0 flow. Once the OAuth2.0 flow has completed successfully, the user will be redirected back to the application and the Google identity will be linked to the user. You can enable manual linking from your project's authentication [configuration options](/dashboard/project/_/settings/auth) or by setting the environment variable `GOTRUE_SECURITY_MANUAL_LINKING_ENABLED: true` when self-hosting.\n",
      "overlap_text": {
        "previous_chunk_id": "95b355bb-c39f-47fc-9a75-fbf0c4c11435",
        "text": "Content of the previous chunk for context: h1: Identity Linking h2: Identity linking strategies [\\#](\\#identity-linking-strategies)\n\nase Auth will remove any other unconfirmed identities linked to an existing user.\n\nUsers that signed up with [SAML SSO](/docs/guides/auth/sso/auth-sso-saml) will not be considered as targets for automatic linking.\n"
      }
    }
  },
  {
    "chunk_id": "61baa5fd-a741-4d97-bc7d-45995549a725",
    "metadata": {
      "token_count": 193,
      "source_url": "https://supabase.com/docs/guides/auth/auth-identity-linking",
      "page_title": "Identity Linking | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Identity Linking",
        "h2": "Unlink an identity [\\#](\\#unlink-an-identity)"
      },
      "text": "JavaScriptDartSwiftKotlinPython\n\nYou can use [`getUserIdentities()`](/docs/reference/javascript/auth-getuseridentities) to fetch all the identities linked to a user. Then, call [`unlinkIdentity()`](/docs/reference/javascript/auth-unlinkidentity) to unlink the identity. The user needs to be logged in and have at least 2 linked identities in order to unlink an existing identity.\n\n`\n_10\n// retrieve all identities linked to a user\n_10\nconst {\n_10\ndata: { identities },\n_10\n} = await supabase.auth.getUserIdentities()\n_10\n_10\n// find the google identity linked to the user\n_10\nconst googleIdentity = identities.find((identity) => identity.provider === 'google')\n_10\n_10\n// unlink the google identity from the user\n_10\nconst { data, error } = await supabase.auth.unlinkIdentity(googleIdentity)\n`\n",
      "overlap_text": {
        "previous_chunk_id": "ba931abd-c9f2-4eb2-b832-6ed80e75b29b",
        "text": "Content of the previous chunk for context: h1: Identity Linking h2: Identity linking strategies [\\#](\\#identity-linking-strategies)\n\n the user. You can enable manual linking from your project's authentication [configuration options](/dashboard/project/_/settings/auth) or by setting the environment variable `GOTRUE_SECURITY_MANUAL_LINKING_ENABLED: true` when self-hosting.\n"
      }
    }
  },
  {
    "chunk_id": "21fd4fce-f60d-43a3-b049-1e1d13e31f0d",
    "metadata": {
      "token_count": 104,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "* * *\n\nNext.js comes in two flavors: the [App Router](https://nextjs.org/docs/app) and the [Pages Router](https://nextjs.org/docs/pages). You can set up Server-Side Auth with either strategy. You can even use both in the same application.\n\nApp RouterPages RouterHybrid router strategies\n\n1\n\n### Install Supabase packages\n\nInstall the `@supabase/supabase-js` package and the helper `@supabase/ssr` package.\n"
    }
  },
  {
    "chunk_id": "4808f8de-0758-4912-8745-4b30af85cee1",
    "metadata": {
      "token_count": 123,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "\n`\n_10\nnpm install @supabase/supabase-js @supabase/ssr\n`\n\n2\n\n### Set up environment variables\n\nCreate a `.env.local` file in your project root directory.\n\nFill in your `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY`:\n\n###### Project URL\n\nLoading...\n\n###### Anon key\n\nLoading...\n\n.env.local\n\n`\n_10\nNEXT_PUBLIC_SUPABASE_URL=<your_supabase_project_url>\n_10\nNEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "21fd4fce-f60d-43a3-b049-1e1d13e31f0d",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n in the same application.\n\nApp RouterPages RouterHybrid router strategies\n\n1\n\n### Install Supabase packages\n\nInstall the `@supabase/supabase-js` package and the helper `@supabase/ssr` package.\n"
      }
    }
  },
  {
    "chunk_id": "e993b1db-a021-473c-81a8-0f02d8e3faf3",
    "metadata": {
      "token_count": 120,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "3\n\n### Write utility functions to create Supabase clients\n\nTo access Supabase from your Next.js app, you need 2 types of Supabase clients:\n\n1. **Client Component client** \\- To access Supabase from Client Components, which run in the browser.\n2. **Server Component client** \\- To access Supabase from Server Components, Server Actions, and Route Handlers, which run only on the server.\n\nCreate a `utils/supabase` folder with a file for each type of client. Then copy the utility functions for each client type.\n",
      "overlap_text": {
        "previous_chunk_id": "4808f8de-0758-4912-8745-4b30af85cee1",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n...\n\n###### Anon key\n\nLoading...\n\n.env.local\n\n`\n_10\nNEXT_PUBLIC_SUPABASE_URL=<your_supabase_project_url>\n_10\nNEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "084d6f7e-fcb4-4114-847d-22d3d2842ca8",
    "metadata": {
      "token_count": 116,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "\nWhat does the \\`cookies\\` object do?\n\nDo I need to create a new client for every route?\n\nutils/supabase/client.ts\n\nutils/supabase/server.ts\n\n`\n_10\nimport { createBrowserClient } from '@supabase/ssr'\n_10\n_10\nexport function createClient() {\n_10\nreturn createBrowserClient(\n_10\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n_10\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n_10\n)\n_10\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "e993b1db-a021-473c-81a8-0f02d8e3faf3",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n Supabase from Server Components, Server Actions, and Route Handlers, which run only on the server.\n\nCreate a `utils/supabase` folder with a file for each type of client. Then copy the utility functions for each client type.\n"
      }
    }
  },
  {
    "chunk_id": "7c2e757f-796d-4eae-82c8-71f0cfddafd0",
    "metadata": {
      "token_count": 124,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "4\n\n### Hook up middleware\n\nCreate a `middleware.ts` file at the root of your project.\n\nSince Server Components can't write cookies, you need middleware to refresh expired Auth tokens and store them.\n\nThe middleware is responsible for:\n\n1. Refreshing the Auth token (by calling `supabase.auth.getUser`).\n2. Passing the refreshed Auth token to Server Components, so they don't attempt to refresh the same token themselves. This is accomplished with `request.cookies.set`.\n3. Passing the refreshed Auth token to the browser, so it replaces the old token. This is accomplished with `response.cookies.set`.\n",
      "overlap_text": {
        "previous_chunk_id": "084d6f7e-fcb4-4114-847d-22d3d2842ca8",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\nClient() {\n_10\nreturn createBrowserClient(\n_10\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n_10\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n_10\n)\n_10\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "c5ec9777-038c-467e-8c4b-355d3ab9c3ea",
    "metadata": {
      "token_count": 119,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "\nCopy the middleware code for your app.\n\nAdd a [matcher](https://nextjs.org/docs/app/building-your-application/routing/middleware#matching-paths) so the middleware doesn't run on routes that don't access Supabase.\n\nBe careful when protecting pages. The server gets the user session from the cookies, which can be spoofed by anyone.\n\nAlways use `supabase.auth.getUser()` to protect pages and user data.\n\n_Never_ trust `supabase.auth.getSession()` inside server code such as middleware. It isn't guaranteed to revalidate the Auth token.\n",
      "overlap_text": {
        "previous_chunk_id": "7c2e757f-796d-4eae-82c8-71f0cfddafd0",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n Components, so they don't attempt to refresh the same token themselves. This is accomplished with `request.cookies.set`.\n3. Passing the refreshed Auth token to the browser, so it replaces the old token. This is accomplished with `response.cookies.set`.\n"
      }
    }
  },
  {
    "chunk_id": "fd67c9a8-2ff9-4076-868f-3dd81235c3ed",
    "metadata": {
      "token_count": 255,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "\nIt's safe to trust `getUser()` because it sends a request to the Supabase Auth server every time to revalidate the Auth token.\n\nmiddleware.ts\n\nutils/supabase/middleware.ts\n\n`\n_19\nimport { type NextRequest } from 'next/server'\n_19\nimport { updateSession } from '@/utils/supabase/middleware'\n_19\n_19\nexport async function middleware(request: NextRequest) {\n_19\nreturn await updateSession(request)\n_19\n}\n_19\n_19\nexport const config = {\n_19\nmatcher: [\\\n_19\\\n    /*\\\n_19\\\n     * Match all request paths except for the ones starting with:\\\n_19\\\n     * - _next/static (static files)\\\n_19\\\n     * - _next/image (image optimization files)\\\n_19\\\n     * - favicon.ico (favicon file)\\\n_19\\\n     * Feel free to modify this pattern to include more paths.\\\n_19\\\n     */\\\n_19\\\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\\\n_19\\\n],\n_19\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "c5ec9777-038c-467e-8c4b-355d3ab9c3ea",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n spoofed by anyone.\n\nAlways use `supabase.auth.getUser()` to protect pages and user data.\n\n_Never_ trust `supabase.auth.getSession()` inside server code such as middleware. It isn't guaranteed to revalidate the Auth token.\n"
      }
    }
  },
  {
    "chunk_id": "e01fa380-e83b-4bc5-9c61-5b16b3835c58",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "5\n\n### Create a login page\n\nCreate a login page for your app. Use a Server Action to call the Supabase signup function.\n\nSince Supabase is being called from an Action, use the client defined in `@/utils/supabase/server.ts`.\n\nNote that `cookies` is called before any calls to Supabase, which opts fetch calls out of Next.js's caching. This is important for authenticated data fetches, to ensure that users get access only to their own data.\n",
      "overlap_text": {
        "previous_chunk_id": "fd67c9a8-2ff9-4076-868f-3dd81235c3ed",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n */\\\n_19\\\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\\\n_19\\\n],\n_19\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "2a9678c3-78f3-41eb-996c-41ca681ad46e",
    "metadata": {
      "token_count": 221,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "\nSee the Next.js docs to learn more about [opting out of data caching](https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#opting-out-of-data-caching).\n\napp/login/page.tsx\n\napp/login/actions.ts\n\napp/error/page.tsx\n\n`\n_14\nimport { login, signup } from './actions'\n_14\n_14\nexport default function LoginPage() {\n_14\nreturn (\n_14\n    <form>\n_14\n      <label htmlFor=\"email\">Email:</label>\n_14\n      <input id=\"email\" name=\"email\" type=\"email\" required />\n_14\n      <label htmlFor=\"password\">Password:</label>\n_14\n      <input id=\"password\" name=\"password\" type=\"password\" required />\n_14\n      <button formAction={login}>Log in</button>\n_14\n      <button formAction={signup}>Sign up</button>\n_14\n    </form>\n_14\n)\n_14\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "e01fa380-e83b-4bc5-9c61-5b16b3835c58",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n/server.ts`.\n\nNote that `cookies` is called before any calls to Supabase, which opts fetch calls out of Next.js's caching. This is important for authenticated data fetches, to ensure that users get access only to their own data.\n"
      }
    }
  },
  {
    "chunk_id": "bb7054d4-19a5-4ed3-ae6d-02400b5945fd",
    "metadata": {
      "token_count": 108,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "6\n\n### Change the Auth confirmation path\n\nIf you have email confirmation turned on (the default), a new user will receive an email confirmation after signing up.\n\nChange the email template to support a server-side authentication flow.\n\nGo to the [Auth templates](https://supabase.com/dashboard/project/_/auth/templates) page in your dashboard. In the `Confirm signup` template, change `{{ .ConfirmationURL }}` to `{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=signup`.\n",
      "overlap_text": {
        "previous_chunk_id": "2a9678c3-78f3-41eb-996c-41ca681ad46e",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n required />\n_14\n      <button formAction={login}>Log in</button>\n_14\n      <button formAction={signup}>Sign up</button>\n_14\n    </form>\n_14\n)\n_14\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "7ae05f40-4023-459b-ae7c-b036d51d5012",
    "metadata": {
      "token_count": 356,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "\n7\n\n### Create a route handler for Auth confirmation\n\nCreate a Route Handler for `auth/confirm`. When a user clicks their confirmation email link, exchange their secure code for an Auth token.\n\nSince this is a Router Handler, use the Supabase client from `@/utils/supabase/server.ts`.\n\napp/auth/confirm/route.ts\n\n`\n_28\nimport { type EmailOtpType } from '@supabase/supabase-js'\n_28\nimport { type NextRequest } from 'next/server'\n_28\n_28\nimport { createClient } from '@/utils/supabase/server'\n_28\nimport { redirect } from 'next/navigation'\n_28\n_28\nexport async function GET(request: NextRequest) {\n_28\nconst { searchParams } = new URL(request.url)\n_28\nconst token_hash = searchParams.get('token_hash')\n_28\nconst type = searchParams.get('type') as EmailOtpType | null\n_28\nconst next = searchParams.get('next') ?? '/'\n_28\n_28\nif (token_hash && type) {\n_28\n    const supabase = createClient()\n_28\n_28\n    const { error } = await supabase.auth.verifyOtp({\n_28\n      type,\n_28\n      token_hash,\n_28\n    })\n_28\n    if (!error) {\n_28\n      // redirect user to specified redirect URL or root of app\n_28\n      redirect(next)\n_28\n    }\n_28\n}\n_28\n_28\n// redirect the user to an error page with some instructions\n_28\nredirect('/error')\n_28\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "bb7054d4-19a5-4ed3-ae6d-02400b5945fd",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n/project/_/auth/templates) page in your dashboard. In the `Confirm signup` template, change `{{ .ConfirmationURL }}` to `{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=signup`.\n"
      }
    }
  },
  {
    "chunk_id": "73068682-1c9d-4f6b-bf01-8ba8e4f19fb0",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "8\n\n### Access user info from Server Component\n\nServer Components can read cookies, so you can get the Auth status and user info.\n\nSince you're calling Supabase from a Server Component, use the client created in `@/utils/supabase/server.ts`.\n\nCreate a `private` page that users can only access if they're logged in. The page displays their email.\n\nBe careful when protecting pages. The server gets the user session from the cookies, which can be spoofed by anyone.\n",
      "overlap_text": {
        "previous_chunk_id": "7ae05f40-4023-459b-ae7c-b036d51d5012",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n root of app\n_28\n      redirect(next)\n_28\n    }\n_28\n}\n_28\n_28\n// redirect the user to an error page with some instructions\n_28\nredirect('/error')\n_28\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "c32826b4-f9c5-434a-9ce7-cc6c8882cf08",
    "metadata": {
      "token_count": 203,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js"
      },
      "text": "\nAlways use `supabase.auth.getUser()` to protect pages and user data.\n\n_Never_ trust `supabase.auth.getSession()` inside Server Components. It isn't guaranteed to revalidate the Auth token.\n\nIt's safe to trust `getUser()` because it sends a request to the Supabase Auth server every time to revalidate the Auth token.\n\napp/private/page.tsx\n\n`\n_14\nimport { redirect } from 'next/navigation'\n_14\n_14\nimport { createClient } from '@/utils/supabase/server'\n_14\n_14\nexport default async function PrivatePage() {\n_14\nconst supabase = createClient()\n_14\n_14\nconst { data, error } = await supabase.auth.getUser()\n_14\nif (error || !data?.user) {\n_14\n    redirect('/login')\n_14\n}\n_14\n_14\nreturn <p>Hello {data.user.email}</p>\n_14\n}\n`\n",
      "overlap_text": {
        "previous_chunk_id": "73068682-1c9d-4f6b-bf01-8ba8e4f19fb0",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n/server.ts`.\n\nCreate a `private` page that users can only access if they're logged in. The page displays their email.\n\nBe careful when protecting pages. The server gets the user session from the cookies, which can be spoofed by anyone.\n"
      }
    }
  },
  {
    "chunk_id": "c3b9eb22-7891-40c9-ba5f-6b5d36b1eaac",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/nextjs",
      "page_title": "Setting up Server-Side Auth for Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Setting up Server-Side Auth for Next.js",
        "h2": "Congratulations [\\#](\\#congratulations)"
      },
      "text": "You're done! To recap, you've successfully:\n\n- Called Supabase from a Server Action.\n- Called Supabase from a Server Component.\n- Set up a Supabase client utility to call Supabase from a Client Component. You can use this if you need to call Supabase from a Client Component, for example to set up a realtime subscription.\n- Set up middleware to automatically refresh the Supabase Auth session.\n\nYou can now use any Supabase features from your client or server code!\n",
      "overlap_text": {
        "previous_chunk_id": "c32826b4-f9c5-434a-9ce7-cc6c8882cf08",
        "text": "Content of the previous chunk for context: h1: Setting up Server-Side Auth for Next.js\n\n.auth.getUser()\n_14\nif (error || !data?.user) {\n_14\n    redirect('/login')\n_14\n}\n_14\n_14\nreturn <p>Hello {data.user.email}</p>\n_14\n}\n`\n"
      }
    }
  },
  {
    "chunk_id": "bd59b3c6-4458-44d7-92bc-e4473b725e32",
    "metadata": {
      "token_count": 199,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/mfa-verification-hook",
      "page_title": "MFA Verification Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "MFA Verification Hook"
      },
      "text": "* * *\n\nYou can add additional checks to the [Supabase MFA implementation](/docs/guides/auth/auth-mfa) with hooks. For example, you can:\n\n- Limit the number of verification attempts performed over a period of time.\n- Sign out users who have too many invalid verification attempts.\n- Count, rate limit, or ban sign-ins.\n\n**Inputs**\n\nSupabase Auth will send a payload containing these fields to your hook:\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `factor_id` | `string` | Unique identifier for the MFA factor being verified |\n| `factor_type` | `string` | `totp` or `phone` |\n| `user_id` | `string` | Unique identifier for the user |\n| `valid` | `boolean` | Whether the verification attempt was valid. For TOTP, this means that the six digit code was correct (true) or incorrect (false). |\n\n"
    }
  },
  {
    "chunk_id": "a2a30c42-bac5-494f-9e19-1bd6f8656ac3",
    "metadata": {
      "token_count": 187,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/mfa-verification-hook",
      "page_title": "MFA Verification Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "MFA Verification Hook"
      },
      "text": "JSONJSON Schema\n\n`\n_10\n{\n_10\n\"factor_id\": \"6eab6a69-7766-48bf-95d8-bd8f606894db\",\n_10\n\"user_id\": \"3919cb6e-4215-4478-a960-6d3454326cec\",\n_10\n\"valid\": true\n_10\n}\n`\n\n**Outputs**\n\nReturn this if your hook processed the input without errors.\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `decision` | `string` | The decision on whether to allow authentication to move forward. Use `reject` to deny the verification attempt and log the user out of all active sessions. Use `continue` to use the default Supabase Auth behavior. |\n| `message` | `string` | The message to show the user if the decision was `reject`. |\n\n",
      "overlap_text": {
        "previous_chunk_id": "bd59b3c6-4458-44d7-92bc-e4473b725e32",
        "text": "Content of the previous chunk for context: h1: MFA Verification Hook\n\n` | `string` | Unique identifier for the user |\n| `valid` | `boolean` | Whether the verification attempt was valid. For TOTP, this means that the six digit code was correct (true) or incorrect (false). |\n\n"
      }
    }
  },
  {
    "chunk_id": "3b5ede94-c952-4c21-9f01-80f6a79cd72c",
    "metadata": {
      "token_count": 149,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/mfa-verification-hook",
      "page_title": "MFA Verification Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "MFA Verification Hook"
      },
      "text": "`\n_10\n{\n_10\n\"decision\": \"reject\",\n_10\n\"message\": \"You have exceeded maximum number of MFA attempts.\"\n_10\n}\n`\n\nSQL\n\nLimit failed MFA verification attempts\n\nYour company requires that a user can input an incorrect MFA Verification code no more than once every 2 seconds.\n\nCreate a table to record the last time a user had an incorrect MFA verification attempt for a factor.\n\n`\n_10\ncreate table public.mfa_failed_verification_attempts (\n_10\nuser_id uuid not null,\n_10\nfactor_id uuid not null,\n_10\nlast_failed_at timestamp not null default now(),\n_10\nprimary key (user_id, factor_id)\n_10\n);\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "a2a30c42-bac5-494f-9e19-1bd6f8656ac3",
        "text": "Content of the previous chunk for context: h1: MFA Verification Hook\n\n verification attempt and log the user out of all active sessions. Use `continue` to use the default Supabase Auth behavior. |\n| `message` | `string` | The message to show the user if the decision was `reject`. |\n\n"
      }
    }
  },
  {
    "chunk_id": "b4669fa7-23b3-4ed8-85ed-e78d11ef6fd2",
    "metadata": {
      "token_count": 538,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks/mfa-verification-hook",
      "page_title": "MFA Verification Hook | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "MFA Verification Hook"
      },
      "text": "Create a hook to read and write information to this table. For example:\n\n`\n_58\ncreate function public.hook_mfa_verification_attempt(event jsonb)\n_58\nreturns jsonb\n_58\nlanguage plpgsql\n_58\nas $$\n_58\ndeclare\n_58\n    last_failed_at timestamp;\n_58\nbegin\n_58\n    if event->'valid' is true then\n_58\n      -- code is valid, accept it\n_58\n      return jsonb_build_object('decision', 'continue');\n_58\n    end if;\n_58\n_58\n    select last_failed_at into last_failed_at\n_58\n      from public.mfa_failed_verification_attempts\n_58\n      where\n_58\n        user_id = event->'user_id'\n_58\n          and\n_58\n        factor_id = event->'factor_id';\n_58\n_58\n    if last_failed_at is not null and now() - last_failed_at < interval '2 seconds' then\n_58\n      -- last attempt was done too quickly\n_58\n      return jsonb_build_object(\n_58\n        'error', jsonb_build_object(\n_58\n          'http_code', 429,\n_58\n          'message',   'Please wait a moment before trying again.'\n_58\n        )\n_58\n      );\n_58\n    end if;\n_58\n_58\n    -- record this failed attempt\n_58\n    insert into public.mfa_failed_verification_attempts\n_58\n      (\n_58\n        user_id,\n_58\n        factor_id,\n_58\n        last_refreshed_at\n_58\n      )\n_58\n      values\n_58\n      (\n_58\n        event->'user_id',\n_58\n        event->'factor_id',\n_58\n        now()\n_58\n      )\n_58\n      on conflict do update\n_58\n        set last_refreshed_at = now();\n_58\n_58\n    -- finally let Supabase Auth do the default behavior for a failed attempt\n_58\n    return jsonb_build_object('decision', 'continue');\n_58\nend;\n_58\n$$;\n_58\n_58\n-- Assign appropriate permissions and revoke access\n_58\ngrant all\n_58\non table public.mfa_failed_verification_attempts\n_58\nto supabase_auth_admin;\n_58\n_58\nrevoke all\n_58\non table public.mfa_failed_verification_attempts\n_58\nfrom authenticated, anon, public;\n`\n",
      "overlap_text": {
        "previous_chunk_id": "3b5ede94-c952-4c21-9f01-80f6a79cd72c",
        "text": "Content of the previous chunk for context: h1: MFA Verification Hook\n\n_verification_attempts (\n_10\nuser_id uuid not null,\n_10\nfactor_id uuid not null,\n_10\nlast_failed_at timestamp not null default now(),\n_10\nprimary key (user_id, factor_id)\n_10\n);\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "235d306e-c913-4844-beae-ee531051882a",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication"
      },
      "text": "* * *\n\nMulti-factor authentication (MFA), sometimes called two-factor authentication (2FA), adds an additional layer of security to your application by verifying their identity through additional verification steps.\n\nIt is considered a best practice to use MFA for your applications.\n\nUsers with weak passwords or compromised social login accounts are prone to malicious account takeovers. These can be prevented with MFA because they require the user to provide proof of both of these:\n\n- Something they know.\nPassword, or access to a social-login account.\n"
    }
  },
  {
    "chunk_id": "eb75d2d3-d1d5-4631-8a40-49902e8db4af",
    "metadata": {
      "token_count": 24,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication"
      },
      "text": "- Something they have.\nAccess to an authenticator app (a.k.a. TOTP) or a mobile phone.\n",
      "overlap_text": {
        "previous_chunk_id": "235d306e-c913-4844-beae-ee531051882a",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication\n\n weak passwords or compromised social login accounts are prone to malicious account takeovers. These can be prevented with MFA because they require the user to provide proof of both of these:\n\n- Something they know.\nPassword, or access to a social-login account.\n"
      }
    }
  },
  {
    "chunk_id": "f711093c-50a8-40bb-bca1-6e7f9debb615",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Overview [\\#](\\#overview)"
      },
      "text": "Supabase Auth implements MFA via two methods: App Authenticator, which makes use of a Time based-one Time Password, and phone messaging, which makes use of a code generated by Supabase Auth.\n\nApplications using MFA require two important flows:\n\n1. **Enrollment flow.**\nThis lets users set up and control MFA in your app.\n2. **Authentication flow.**\nThis lets users sign in using any factors after the conventional login step.\n\nSupabase Auth provides:\n",
      "overlap_text": {
        "previous_chunk_id": "eb75d2d3-d1d5-4631-8a40-49902e8db4af",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication\n\n- Something they have.\nAccess to an authenticator app (a.k.a. TOTP) or a mobile phone.\n"
      }
    }
  },
  {
    "chunk_id": "be4310b7-7088-4c73-a06e-83b95c0fbcae",
    "metadata": {
      "token_count": 136,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Overview [\\#](\\#overview)"
      },
      "text": "\n- **Enrollment API** \\- build rich user interfaces for adding and removing factors.\n- **Challenge and Verify APIs** \\- securely verify that the user has access to a factor.\n- **List Factors API** \\- build rich user interfaces for signing in with additional factors.\n\nYou can control access to the Enrollment API as well as the Challenge and Verify APIs via the Supabase Dashboard. A setting of `Verification Disabled` will disable both the challenge API and the verification API.\n\nThese sets of APIs let you control the MFA experience that works for you. You can create flows where MFA is optional, mandatory for all, or only specific groups of users.\n",
      "overlap_text": {
        "previous_chunk_id": "f711093c-50a8-40bb-bca1-6e7f9debb615",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Overview [\\#](\\#overview)\n\n flows:\n\n1. **Enrollment flow.**\nThis lets users set up and control MFA in your app.\n2. **Authentication flow.**\nThis lets users sign in using any factors after the conventional login step.\n\nSupabase Auth provides:\n"
      }
    }
  },
  {
    "chunk_id": "9d20dec7-ca01-4ca5-96b5-4311983e965a",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Overview [\\#](\\#overview)"
      },
      "text": "\nOnce users have enrolled or signed-in with a factor, Supabase Auth adds additional metadata to the user's access token (JWT) that your application can use to allow or deny access.\n\nThis information is represented by an [Authenticator Assurance Level](https://pages.nist.gov/800-63-3-Implementation-Resources/63B/AAL/), a standard measure about the assurance of the user's identity Supabase Auth has for that particular session. There are two levels recognized today:\n",
      "overlap_text": {
        "previous_chunk_id": "be4310b7-7088-4c73-a06e-83b95c0fbcae",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Overview [\\#](\\#overview)\n\n Disabled` will disable both the challenge API and the verification API.\n\nThese sets of APIs let you control the MFA experience that works for you. You can create flows where MFA is optional, mandatory for all, or only specific groups of users.\n"
      }
    }
  },
  {
    "chunk_id": "40f60e54-e7f7-4505-b49b-3e9d6367daa2",
    "metadata": {
      "token_count": 159,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Overview [\\#](\\#overview)"
      },
      "text": "\n1. **Assurance Level 1: `aal1`**\nMeans that the user's identity was verified using a conventional login method\nsuch as email+password, magic link, one-time password, phone auth or social\nlogin.\n2. **Assurance Level 2: `aal2`**\nMeans that the user's identity was additionally verified using at least one\nsecond factor, such as a TOTP code or One-Time Password code.\n\nThis assurance level is encoded in the `aal` claim in the JWT associated with the user. By decoding this value you can create custom authorization rules in your frontend, backend, and database that will enforce the MFA policy that works for your application. JWTs without an `aal` claim are at the `aal1` level.\n",
      "overlap_text": {
        "previous_chunk_id": "9d20dec7-ca01-4ca5-96b5-4311983e965a",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Overview [\\#](\\#overview)\n\n://pages.nist.gov/800-63-3-Implementation-Resources/63B/AAL/), a standard measure about the assurance of the user's identity Supabase Auth has for that particular session. There are two levels recognized today:\n"
      }
    }
  },
  {
    "chunk_id": "491985fd-8fd8-4619-b323-7c7413e46198",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "Adding MFA to your app involves these four steps:\n\n1. **Add enrollment flow.**\nYou need to provide a UI within your app that your users will be able to set-up\nMFA in. You can add this right after sign-up, or as part of a separate flow in\nthe settings portion of your app.\n2. **Add unenroll flow.**\nYou need to support a UI through which users can see existing devices and unenroll\ndevices which are no longer relevant.\n",
      "overlap_text": {
        "previous_chunk_id": "40f60e54-e7f7-4505-b49b-3e9d6367daa2",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Overview [\\#](\\#overview)\n\n user. By decoding this value you can create custom authorization rules in your frontend, backend, and database that will enforce the MFA policy that works for your application. JWTs without an `aal` claim are at the `aal1` level.\n"
      }
    }
  },
  {
    "chunk_id": "4002e326-4c19-47e9-8e53-6c73b6bc11d1",
    "metadata": {
      "token_count": 101,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "3. **Add challenge step to login.**\nIf a user has set-up MFA, your app's login flow needs to present a challenge\nscreen to the user asking them to prove they have access to the additional\nfactor.\n4. **Enforce rules for MFA logins.**\nOnce your users have a way to enroll and log in with MFA, you need to enforce\nauthorization rules across your app: on the frontend, backend, API servers or\nRow-Level Security policies.\n",
      "overlap_text": {
        "previous_chunk_id": "491985fd-8fd8-4619-b323-7c7413e46198",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n as part of a separate flow in\nthe settings portion of your app.\n2. **Add unenroll flow.**\nYou need to support a UI through which users can see existing devices and unenroll\ndevices which are no longer relevant.\n"
      }
    }
  },
  {
    "chunk_id": "4d6bcea8-4325-4b02-9003-b614b44a836d",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "\nThe enrollment flow and the challenge steps differ by factor and are covered on a separate page. Visit the [Phone](/docs/guides/auth/auth-mfa/phone) or [App Authenticator](/docs/guides/auth/auth-mfa/totp) pages to see how to add the flows for the respective factors. You can combine both flows and allow for use of both Phone and App Authenticator Factors.\n\n### Add unenroll flow [\\#](\\#add-unenroll-flow)\n\n",
      "overlap_text": {
        "previous_chunk_id": "4002e326-4c19-47e9-8e53-6c73b6bc11d1",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\nforce rules for MFA logins.**\nOnce your users have a way to enroll and log in with MFA, you need to enforce\nauthorization rules across your app: on the frontend, backend, API servers or\nRow-Level Security policies.\n"
      }
    }
  },
  {
    "chunk_id": "ea4958a5-e66d-4a73-85ab-954ca2a02485",
    "metadata": {
      "token_count": 131,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "The unenroll process is the same for both Phone and TOTP factors.\n\nAn unenroll flow provides a UI for users to manage and unenroll factors linked to their accounts. Most applications do so via a factor management page where users can view and unlink selected factors.\n\nWhen a user unenrolls a factor, call `supabase.auth.mfa.unenroll()` with the ID of the factor. For example, call:\n\n`\n_10\nsupabase.auth.mfa.unenroll({factorId: \"d30fd651-184e-4748-a928-0a4b9be1d429\"})\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "4d6bcea8-4325-4b02-9003-b614b44a836d",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\notp) pages to see how to add the flows for the respective factors. You can combine both flows and allow for use of both Phone and App Authenticator Factors.\n\n### Add unenroll flow [\\#](\\#add-unenroll-flow)\n\n"
      }
    }
  },
  {
    "chunk_id": "fb3012ab-26be-41ff-bd11-91db6d56fe5f",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "to unenroll a factor with ID `d30fd651-184e-4748-a928-0a4b9be1d429`.\n\n### Enforce rules for MFA logins [\\#](\\#enforce-rules-for-mfa-logins)\n\nAdding MFA to your app's UI does not in-and-of-itself offer a higher level of security to your users. You also need to enforce the MFA rules in your application's database, APIs, and server-side rendering.\n",
      "overlap_text": {
        "previous_chunk_id": "ea4958a5-e66d-4a73-85ab-954ca2a02485",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n the factor. For example, call:\n\n`\n_10\nsupabase.auth.mfa.unenroll({factorId: \"d30fd651-184e-4748-a928-0a4b9be1d429\"})\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "469aa77b-336f-4642-a90a-b736439928da",
    "metadata": {
      "token_count": 112,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "\nDepending on your application's needs, there are three ways you can choose to enforce MFA.\n\n1. **Enforce for all users (new and existing).**\nAny user account will have to enroll MFA to continue using your app.\nThe application will not allow access without going through MFA first.\n2. **Enforce for new users only.**\nOnly new users will be forced to enroll MFA, while old users will be encouraged\nto do so.\nThe application will not allow access for new users without going through MFA\nfirst.\n",
      "overlap_text": {
        "previous_chunk_id": "fb3012ab-26be-41ff-bd11-91db6d56fe5f",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n-logins)\n\nAdding MFA to your app's UI does not in-and-of-itself offer a higher level of security to your users. You also need to enforce the MFA rules in your application's database, APIs, and server-side rendering.\n"
      }
    }
  },
  {
    "chunk_id": "52751e33-e57a-4c8d-b07d-cb900b07c820",
    "metadata": {
      "token_count": 110,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "3. **Enforce only for users that have opted-in.**\nUsers that want MFA can enroll in it and the application will not allow access\nwithout going through MFA first.\n\n#### Example: React [\\#](\\#example-react)\n\nBelow is an example that creates a new `UnenrollMFA` component that illustrates the important pieces of the MFA enrollment flow. Note that users can only unenroll a factor after completing the enrollment flow and obtaining an `aal2` JWT claim. Here are some points of note:\n",
      "overlap_text": {
        "previous_chunk_id": "469aa77b-336f-4642-a90a-b736439928da",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n2. **Enforce for new users only.**\nOnly new users will be forced to enroll MFA, while old users will be encouraged\nto do so.\nThe application will not allow access for new users without going through MFA\nfirst.\n"
      }
    }
  },
  {
    "chunk_id": "5dab42dd-d587-45f3-81c3-b9ed3f63fdc7",
    "metadata": {
      "token_count": 135,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "\n- When the component appears on screen, the `supabase.auth.mfa.listFactors()` endpoint\nfetches all existing factors together with their details.\n- The existing factors for a user are displayed in a table.\n- Once the user has selected a factor to unenroll, they can type in the factorId and click **Unenroll**\nwhich creates a confirmation modal.\n\nUnenrolling a factor will downgrade the assurance level from `aal2` to `aal1` only after the refresh interval has lapsed. For an immediate downgrade from `aal2` to `aal1` after enrolling one will need to manually call `refreshSession()`\n\n",
      "overlap_text": {
        "previous_chunk_id": "52751e33-e57a-4c8d-b07d-cb900b07c820",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\nenrollMFA` component that illustrates the important pieces of the MFA enrollment flow. Note that users can only unenroll a factor after completing the enrollment flow and obtaining an `aal2` JWT claim. Here are some points of note:\n"
      }
    }
  },
  {
    "chunk_id": "66ef52eb-30fe-45f9-855f-60b61c90e0b6",
    "metadata": {
      "token_count": 503,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "`\n_46\n/**\n_46\n* UnenrollMFA shows a simple table with the list of factors together with a button to unenroll.\n_46\n* When a user types in the factorId of the factor that they wish to unenroll and clicks unenroll\n_46\n* the corresponding factor will be unenrolled.\n_46\n*/\n_46\nexport function UnenrollMFA() {\n_46\nconst [factorId, setFactorId] = useState('')\n_46\nconst [factors, setFactors] = useState([])\n_46\nconst [error, setError] = useState('') // holds an error message\n_46\n_46\nuseEffect(() => {\n_46\n    ;(async () => {\n_46\n      const { data, error } = await supabase.auth.mfa.listFactors()\n_46\n      if (error) {\n_46\n        throw error\n_46\n      }\n_46\n_46\n      setFactors([...data.totp, ...data.phone])\n_46\n    })()\n_46\n}, [])\n_46\n_46\nreturn (\n_46\n    <>\n_46\n      {error && <div className=\"error\">{error}</div>}\n_46\n      <tbody>\n_46\n        <tr>\n_46\n          <td>Factor ID</td>\n_46\n          <td>Friendly Name</td>\n_46\n          <td>Factor Status</td>\n_46\n          <td>Phone Number</td>\n_46\n        </tr>\n_46\n        {factors.map((factor) => (\n_46\n          <tr>\n_46\n            <td>{factor.id}</td>\n_46\n            <td>{factor.friendly_name}</td>\n_46\n            <td>{factor.factor_type}</td>\n_46\n            <td>{factor.status}</td>\n_46\n            <td>{factor.phone}</td>\n_46\n          </tr>\n_46\n        ))}\n_46\n      </tbody>\n_46\n      <input type=\"text\" value={verifyCode} onChange={(e) => setFactorId(e.target.value.trim())} />\n_46\n      <button onClick={() => supabase.auth.mfa.unenroll({ factorId })}>Unenroll</button>\n_46\n    </>\n_46\n)\n_46\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "5dab42dd-d587-45f3-81c3-b9ed3f63fdc7",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n the assurance level from `aal2` to `aal1` only after the refresh interval has lapsed. For an immediate downgrade from `aal2` to `aal1` after enrolling one will need to manually call `refreshSession()`\n\n"
      }
    }
  },
  {
    "chunk_id": "d59584ea-a017-470b-94ef-6a27586c7084",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "#### Database [\\#](\\#database)\n\nYour app should sufficiently deny or allow access to tables or rows based on the user's current and possible authenticator levels.\n\nPostgreSQL has two types of policies: permissive and restrictive. This guide uses restrictive policies. Make sure you don't omit the `as restrictive` clause.\n\n##### Enforce for all users (new and existing)\n\nIf your app falls under this case, this is a template Row Level Security policy you can apply to all your tables:\n",
      "overlap_text": {
        "previous_chunk_id": "66ef52eb-30fe-45f9-855f-60b61c90e0b6",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n(e.target.value.trim())} />\n_46\n      <button onClick={() => supabase.auth.mfa.unenroll({ factorId })}>Unenroll</button>\n_46\n    </>\n_46\n)\n_46\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "04eddf71-c8b1-41fe-9d62-8f4143f95e6f",
    "metadata": {
      "token_count": 105,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "\n`\n_10\ncreate policy \"Policy name.\"\n_10\non table_name\n_10\nas restrictive\n_10\nto authenticated\n_10\nusing ((select auth.jwt()->>'aal') = 'aal2');\n`\n\n- Here the policy will not accept any JWTs with an `aal` claim other than\n`aal2`, which is the highest authenticator assurance level.\n- **Using `as restrictive` ensures this policy will restrict all commands on the**\n**table regardless of other policies!**\n\n",
      "overlap_text": {
        "previous_chunk_id": "d59584ea-a017-470b-94ef-6a27586c7084",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n policies. Make sure you don't omit the `as restrictive` clause.\n\n##### Enforce for all users (new and existing)\n\nIf your app falls under this case, this is a template Row Level Security policy you can apply to all your tables:\n"
      }
    }
  },
  {
    "chunk_id": "79a843c4-82f7-402d-8006-526447c7d569",
    "metadata": {
      "token_count": 182,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "##### Enforce for new users only\n\nIf your app falls under this case, the rules get more complex. User accounts created past a certain timestamp must have a `aal2` level to access the database.\n\n`\n_13\ncreate policy \"Policy name.\"\n_13\non table_name\n_13\nas restrictive -- very important!\n_13\nto authenticated\n_13\nusing\n_13\n    (array[(select auth.jwt()->>'aal')] <@ (\n_13\n       select\n_13\n         case\n_13\n           when created_at >= '2022-12-12T00:00:00Z' then array['aal2']\n_13\n           else array['aal1', 'aal2']\n_13\n         end as aal\n_13\n       from auth.users\n_13\n       where (select auth.uid()) = id));\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "04eddf71-c8b1-41fe-9d62-8f4143f95e6f",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n any JWTs with an `aal` claim other than\n`aal2`, which is the highest authenticator assurance level.\n- **Using `as restrictive` ensures this policy will restrict all commands on the**\n**table regardless of other policies!**\n\n"
      }
    }
  },
  {
    "chunk_id": "43c784bf-017a-4eda-b87a-059112d125ed",
    "metadata": {
      "token_count": 101,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "- The policy will accept both `aal1` and `aal2` for users with a `created_at`\ntimestamp prior to 12th December 2022 at 00:00 UTC, but will only accept\n`aal2` for all other timestamps.\n- The `<@` operator is PostgreSQL's [\"contained in\"\\\\\noperator.](https://www.postgresql.org/docs/current/functions-array.html)\n- **Using `as restrictive` ensures this policy will restrict all commands on the**\n",
      "overlap_text": {
        "previous_chunk_id": "79a843c4-82f7-402d-8006-526447c7d569",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n array['aal2']\n_13\n           else array['aal1', 'aal2']\n_13\n         end as aal\n_13\n       from auth.users\n_13\n       where (select auth.uid()) = id));\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "e66452ab-68d3-47e9-bd16-f7a77e87ce0e",
    "metadata": {
      "token_count": 187,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "**table regardless of other policies!**\n\n##### Enforce only for users that have opted-in\n\nUsers that have enrolled MFA on their account are expecting that your\napplication only works for them if they've gone through MFA.\n\n`\n_14\ncreate policy \"Policy name.\"\n_14\non table_name\n_14\nas restrictive -- very important!\n_14\nto authenticated\n_14\nusing (\n_14\n    array[(select auth.jwt()->>'aal')] <@ (\n_14\n      select\n_14\n          case\n_14\n            when count(id) > 0 then array['aal2']\n_14\n            else array['aal1', 'aal2']\n_14\n          end as aal\n_14\n        from auth.mfa_factors\n_14\n        where ((select auth.uid()) = user_id) and status = 'verified'\n_14\n    ));\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "43c784bf-017a-4eda-b87a-059112d125ed",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n other timestamps.\n- The `<@` operator is PostgreSQL's [\"contained in\"\\\\\noperator.](https://www.postgresql.org/docs/current/functions-array.html)\n- **Using `as restrictive` ensures this policy will restrict all commands on the**\n"
      }
    }
  },
  {
    "chunk_id": "d6865402-c1e7-47c0-865a-df904144256e",
    "metadata": {
      "token_count": 110,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "- The policy will only accept only `aal2` when the user has at least one MFA\nfactor verified.\n- Otherwise, it will accept both `aal1` and `aal2`.\n- The `<@` operator is PostgreSQL's [\"contained in\"\\\\\noperator.](https://www.postgresql.org/docs/current/functions-array.html)\n- **Using `as restrictive` ensures this policy will restrict all commands on the**\n**table regardless of other policies!**\n\n### Server-Side Rendering [\\#](\\#server-side-rendering)\n\n",
      "overlap_text": {
        "previous_chunk_id": "e66452ab-68d3-47e9-bd16-f7a77e87ce0e",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n', 'aal2']\n_14\n          end as aal\n_14\n        from auth.mfa_factors\n_14\n        where ((select auth.uid()) = user_id) and status = 'verified'\n_14\n    ));\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "add3d7b7-4eed-445f-ac6e-0ada7453af17",
    "metadata": {
      "token_count": 127,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "When using the Supabase JavaScript library in a server-side rendering context, make sure you always create a new object for each request! This will prevent you from accidentally rendering and serving content belonging to different users.\n\nIt is possible to enforce MFA on the Server-Side Rendering level. However, this can be tricky do to well.\n\nYou can use the `supabase.auth.mfa.getAuthenticatorAssuranceLevel()` and `supabase.auth.mfa.listFactors()` APIs to identify the AAL level of the session and any factors that are enabled for a user, similar to how you would use these on the browser.\n",
      "overlap_text": {
        "previous_chunk_id": "d6865402-c1e7-47c0-865a-df904144256e",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\nwww.postgresql.org/docs/current/functions-array.html)\n- **Using `as restrictive` ensures this policy will restrict all commands on the**\n**table regardless of other policies!**\n\n### Server-Side Rendering [\\#](\\#server-side-rendering)\n\n"
      }
    }
  },
  {
    "chunk_id": "7611aacc-0424-47c9-bf8e-c76b21882d94",
    "metadata": {
      "token_count": 120,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "\nHowever, encountering a different AAL level on the server may not actually be a security problem. Consider these likely scenarios:\n\n1. User signed-in with a conventional method but closed their tab on the MFA\nflow.\n2. User forgot a tab open for a very long time. (This happens more often than\nyou might imagine.)\n3. User has lost their authenticator device and is confused about the next\nsteps.\n\nWe thus recommend you redirect users to a page where they can authenticate using their additional factor, instead of rendering a HTTP 401 Unauthorized or HTTP 403 Forbidden content.\n",
      "overlap_text": {
        "previous_chunk_id": "add3d7b7-4eed-445f-ac6e-0ada7453af17",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\nfa.getAuthenticatorAssuranceLevel()` and `supabase.auth.mfa.listFactors()` APIs to identify the AAL level of the session and any factors that are enabled for a user, similar to how you would use these on the browser.\n"
      }
    }
  },
  {
    "chunk_id": "48e4ef16-ea92-4431-8288-d167c57a5a63",
    "metadata": {
      "token_count": 137,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "\n### APIs [\\#](\\#apis)\n\nIf your application uses the Supabase Database, Storage or Edge Functions, just using Row Level Security policies will give you sufficient protection. In the event that you have other APIs that you wish to protect, follow these general guidelines:\n\n1. **Use a good JWT verification and parsing library for your language.**\nThis will let you securely parse JWTs and extract their claims.\n2. **Retrieve the `aal` claim from the JWT and compare its value according to**\n**your needs.**\nIf you've encountered an AAL level that can be increased, ask the user to\ncontinue the login process instead of logging them out.\n",
      "overlap_text": {
        "previous_chunk_id": "7611aacc-0424-47c9-bf8e-c76b21882d94",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n. User has lost their authenticator device and is confused about the next\nsteps.\n\nWe thus recommend you redirect users to a page where they can authenticate using their additional factor, instead of rendering a HTTP 401 Unauthorized or HTTP 403 Forbidden content.\n"
      }
    }
  },
  {
    "chunk_id": "4debaf6d-00ce-4ad1-ac3e-a19a1e3ef679",
    "metadata": {
      "token_count": 50,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Adding to your app [\\#](\\#adding-to-your-app)"
      },
      "text": "3. **Use the `https://<project-ref>.supabase.co/rest/v1/auth/factors` REST**\n**endpoint to identify if the user has enrolled any MFA factors.**\nOnly `verified` factors should be acted upon.\n",
      "overlap_text": {
        "previous_chunk_id": "48e4ef16-ea92-4431-8288-d167c57a5a63",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n **Retrieve the `aal` claim from the JWT and compare its value according to**\n**your needs.**\nIf you've encountered an AAL level that can be increased, ask the user to\ncontinue the login process instead of logging them out.\n"
      }
    }
  },
  {
    "chunk_id": "ec04d024-4f14-4827-967d-7c1a4804d229",
    "metadata": {
      "token_count": 12,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa",
      "page_title": "Multi-Factor Authentication | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "How do I check when a user went through MFA?\n",
      "overlap_text": {
        "previous_chunk_id": "4debaf6d-00ce-4ad1-ac3e-a19a1e3ef679",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication h2: Adding to your app [\\#](\\#adding-to-your-app)\n\n3. **Use the `https://<project-ref>.supabase.co/rest/v1/auth/factors` REST**\n**endpoint to identify if the user has enrolled any MFA factors.**\nOnly `verified` factors should be acted upon.\n"
      }
    }
  },
  {
    "chunk_id": "6df3cfea-8759-4378-bd6d-95cbc9f73f3b",
    "metadata": {
      "token_count": 77,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/nextjs",
      "page_title": "Supabase Auth with the Next.js App Router | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Supabase Auth with the Next.js App Router"
      },
      "text": "* * *\n\nThe `auth-helpers` package has been replaced with the `@supabase/ssr` package. We recommend setting up Auth for your Next.js app with `@supabase/ssr` instead. See the [Next.js Server-Side Auth guide](/docs/guides/auth/server-side/nextjs) to learn how.\n\nSee legacy docs\n"
    }
  },
  {
    "chunk_id": "87acd6d1-87f1-48d8-ac30-8da26afe31b1",
    "metadata": {
      "token_count": 3,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Use HTTP or Postgres Functions to customize your authentication flow"
      },
      "text": "* * *\n"
    }
  },
  {
    "chunk_id": "ee4f2d72-09a7-40ad-937a-bd8ee319af7d",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "What is a hook [\\#](\\#what-is-a-hook)"
      },
      "text": "A hook is an endpoint that allows you to alter the default Supabase Auth flow at specific execution points. Developers can use hooks to add custom behavior that's not supported natively.\n\nHooks help you:\n\n- Track the origin of user signups by adding metadata\n- Improve security by adding additional checks to password and multi-factor authentication\n- Support legacy systems by integrating with identity credentials from external authentication systems\n- Add additional custom claims to your JWT\n- Send authentication emails or SMS messages through a custom provider\n",
      "overlap_text": {
        "previous_chunk_id": "87acd6d1-87f1-48d8-ac30-8da26afe31b1",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Use HTTP or Postgres Functions to customize your authentication flow\n\n* * *\n"
      }
    }
  },
  {
    "chunk_id": "76a29661-8606-4502-a3d9-10b4fe9a1687",
    "metadata": {
      "token_count": 138,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "What is a hook [\\#](\\#what-is-a-hook)"
      },
      "text": "\nThe following hooks are available:\n\n| Hook | Available on Plan |\n| --- | --- |\n| [Custom Access Token](/docs/guides/auth/auth-hooks/custom-access-token-hook) | Free, Pro |\n| [Send SMS](/docs/guides/auth/auth-hooks/send-sms-hook) | Free, Pro |\n| [Send Email](/docs/guides/auth/auth-hooks/send-email-hook) | Free, Pro |\n| [MFA Verification Attempt](/docs/guides/auth/auth-hooks/mfa-verification-hook) | Teams and Enterprise |\n| [Password Verification Attempt](/docs/guides/auth/auth-hooks/password-verification-hook) | Teams and Enterprise |\n\n",
      "overlap_text": {
        "previous_chunk_id": "ee4f2d72-09a7-40ad-937a-bd8ee319af7d",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: What is a hook [\\#](\\#what-is-a-hook)\n\n\n- Improve security by adding additional checks to password and multi-factor authentication\n- Support legacy systems by integrating with identity credentials from external authentication systems\n- Add additional custom claims to your JWT\n- Send authentication emails or SMS messages through a custom provider\n"
      }
    }
  },
  {
    "chunk_id": "a1868a33-6fcf-4a7f-804c-836251baad3f",
    "metadata": {
      "token_count": 93,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "What is a hook [\\#](\\#what-is-a-hook)"
      },
      "text": "Supabase supports 2 ways to [configure a hook](/dashboard/project/_/auth/hooks) in your project:\n\nPostgres FunctionHTTP Endpoint\n\nA [postgres function](/docs/guides/database/functions) can be configured as a hook. The function should take in a single argument -- the event of type JSONB -- and return a JSONB object. Since the postgres function runs on your database, the request does not leave your project's instance.\n",
      "overlap_text": {
        "previous_chunk_id": "76a29661-8606-4502-a3d9-10b4fe9a1687",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: What is a hook [\\#](\\#what-is-a-hook)\n\n| [MFA Verification Attempt](/docs/guides/auth/auth-hooks/mfa-verification-hook) | Teams and Enterprise |\n| [Password Verification Attempt](/docs/guides/auth/auth-hooks/password-verification-hook) | Teams and Enterprise |\n\n"
      }
    }
  },
  {
    "chunk_id": "4b0baa3d-bc1a-4b68-ad21-599d7ce94ea1",
    "metadata": {
      "token_count": 124,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Security Model [\\#](\\#security-model)"
      },
      "text": "Sign the payload and grant permissions selectively in order to guard the integrity of the payload.\n\nSQLHTTP\n\nWhen you configure a postgres function as a hook, Supabase will automatically apply the following grants to the function for these reasons:\n\n- Allow the `supabase_auth_admin` role to execute the function. The `supabase_auth_admin` role is the postgres role that is used by Supabase Auth to make requests to your database.\n- Revoke permissions from other roles (e.g. `anon`, `authenticated`, `public`) to ensure the function is not accessible by Supabase Data APIs.\n",
      "overlap_text": {
        "previous_chunk_id": "a1868a33-6fcf-4a7f-804c-836251baad3f",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: What is a hook [\\#](\\#what-is-a-hook)\n\n) can be configured as a hook. The function should take in a single argument -- the event of type JSONB -- and return a JSONB object. Since the postgres function runs on your database, the request does not leave your project's instance.\n"
      }
    }
  },
  {
    "chunk_id": "f9d47863-bedb-4571-87cb-1156ab14fa62",
    "metadata": {
      "token_count": 112,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Security Model [\\#](\\#security-model)"
      },
      "text": "\n`\n1\n-- Grant access to function to supabase_auth_admin\n2\ngrant execute\n3\non function public.custom_access_token_hook\n4\nto supabase_auth_admin;\n5\n6\n-- Grant access to schema to supabase_auth_admin\n7\ngrant usage on schema public to supabase_auth_admin;\n8\n9\n-- Revoke function permissions from authenticated, anon and public\n10\nrevoke execute\n11\non function public.custom_access_token_hook\n12\nfrom authenticated, anon, public;\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "4b0baa3d-bc1a-4b68-ad21-599d7ce94ea1",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Security Model [\\#](\\#security-model)\n\n role that is used by Supabase Auth to make requests to your database.\n- Revoke permissions from other roles (e.g. `anon`, `authenticated`, `public`) to ensure the function is not accessible by Supabase Data APIs.\n"
      }
    }
  },
  {
    "chunk_id": "a275bdd3-46fc-4aab-ae42-8875ce6d87ee",
    "metadata": {
      "token_count": 81,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Security Model [\\#](\\#security-model)"
      },
      "text": "##### Create postgres functions with security invoker\n\nWe do not recommend creating postgres functions with the `security definer` tag. The `security definer` tag specifies that the function is to be executed with the privileges of the user that owns it. Read more about the `security definer` tag [in our database guide](/docs/guides/database/functions#security-definer-vs-invoker).\n",
      "overlap_text": {
        "previous_chunk_id": "f9d47863-bedb-4571-87cb-1156ab14fa62",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Security Model [\\#](\\#security-model)\n\n public to supabase_auth_admin;\n8\n9\n-- Revoke function permissions from authenticated, anon and public\n10\nrevoke execute\n11\non function public.custom_access_token_hook\n12\nfrom authenticated, anon, public;\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "2161f450-e388-4f00-9b02-72404eb023c1",
    "metadata": {
      "token_count": 242,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "### Developing [\\#](\\#developing)\n\nLet us develop a Hook locally and then deploy it to the cloud. As a recap, here\u2019s a list of available Hooks\n\n| Hook | Suggested Function Name | When it is called | What it Does |\n| --- | --- | --- | --- |\n| Send SMS | `send_sms` | Each time an SMS is sent | Allows you to customize message content and SMS Provider |\n| Send Email | `send_email` | Each time an Email is sent | Allows you to customize message content and Email Provider |\n| Custom Access Token | `custom_access_token` | Each time a new JWT is created | Returns the claims you wish to be present in the JWT. |\n| MFA Verification Attempt | `mfa_verification_attempt` | Each time a user tries to verify an MFA factor. | Returns a decision on whether to reject the attempt and future ones, or to allow the user to keep trying. |\n| Password Verification Attempt | `password_verification_attempt` | Each time a user tries to sign in with a password. | Return a decision whether to allow the user to reject the attempt, or to allow the user to keep trying. |\n\n",
      "overlap_text": {
        "previous_chunk_id": "a275bdd3-46fc-4aab-ae42-8875ce6d87ee",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Security Model [\\#](\\#security-model)\n\n tag specifies that the function is to be executed with the privileges of the user that owns it. Read more about the `security definer` tag [in our database guide](/docs/guides/database/functions#security-definer-vs-invoker).\n"
      }
    }
  },
  {
    "chunk_id": "0b211893-0faf-4942-b6bd-1bc805e40735",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "Edit `config.toml` to set up the Auth Hook locally.\n\nSQLHTTP\n\nModify the `auth.hook.<hook_name>` field and set `uri` to a value of `pg-functions://postgres/<schema>/<function_name>`\n\n`\n1\n[auth.hook.<hook_name>]\n2\nenabled = true\n3\nuri = \"pg-functions://....\"\n`\n\nYou need to assign additional permissions so that Supabase Auth can access the hook as well as the tables it interacts with.\n",
      "overlap_text": {
        "previous_chunk_id": "2161f450-e388-4f00-9b02-72404eb023c1",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\n trying. |\n| Password Verification Attempt | `password_verification_attempt` | Each time a user tries to sign in with a password. | Return a decision whether to allow the user to reject the attempt, or to allow the user to keep trying. |\n\n"
      }
    }
  },
  {
    "chunk_id": "2ddfddf8-ae58-417f-88e7-f1b6c11b2420",
    "metadata": {
      "token_count": 118,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "\nThe `supabase_auth_admin` role does not have permissions to the `public` schema. You need to grant the role permission to execute your hook:\n\n`\n1\ngrant execute\n2\non function public.custom_access_token_hook\n3\nto supabase_auth_admin;\n`\n\nYou also need to grant usage to `supabase_auth_admin`:\n\n`\n1\ngrant usage on schema public to supabase_auth_admin;\n`\n\nAlso revoke permissions from the `authenticated` and `anon` roles to ensure the function is not accessible by Supabase Serverless APIs.\n",
      "overlap_text": {
        "previous_chunk_id": "0b211893-0faf-4942-b6bd-1bc805e40735",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\nauth.hook.<hook_name>]\n2\nenabled = true\n3\nuri = \"pg-functions://....\"\n`\n\nYou need to assign additional permissions so that Supabase Auth can access the hook as well as the tables it interacts with.\n"
      }
    }
  },
  {
    "chunk_id": "34a88181-d938-4166-947e-415ec12c4f67",
    "metadata": {
      "token_count": 104,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "\n`\n1\nrevoke execute\n2\non function public.custom_access_token_hook\n3\nfrom authenticated, anon;\n`\n\nFor security, we recommend against the use the `security definer` tag. The `security definer` tag specifies that the function is to be executed with the privileges of the user that owns it. When a function is created via the Supabase dashboard with the tag, it will have the extensive permissions of the `postgres` role which make it easier for undesirable actions to occur.\n",
      "overlap_text": {
        "previous_chunk_id": "2ddfddf8-ae58-417f-88e7-f1b6c11b2420",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\nabase_auth_admin`:\n\n`\n1\ngrant usage on schema public to supabase_auth_admin;\n`\n\nAlso revoke permissions from the `authenticated` and `anon` roles to ensure the function is not accessible by Supabase Serverless APIs.\n"
      }
    }
  },
  {
    "chunk_id": "d334a496-4275-4d4b-827a-e74bb5035217",
    "metadata": {
      "token_count": 124,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "\nWe recommend that you do not use any tag and explicitly grant permissions to `supabase_auth_admin` as described above.\n\nRead more about `security definer` tag [in our database guide](/docs/guides/database/functions#security-definer-vs-invoker).\n\nThere are no restrictions as to what language can be used to write a Postgres Hook. If [PL/pgSQL](https://www.postgresql.org/docs/current/plpgsql.html) is too difficult consider using the [plv8](/docs/guides/database/extensions/plv8) extension which lets you use JavaScript to define functions.\n",
      "overlap_text": {
        "previous_chunk_id": "34a88181-d938-4166-947e-415ec12c4f67",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\n to be executed with the privileges of the user that owns it. When a function is created via the Supabase dashboard with the tag, it will have the extensive permissions of the `postgres` role which make it easier for undesirable actions to occur.\n"
      }
    }
  },
  {
    "chunk_id": "a4e539ac-d3da-43ba-857d-5eb1e8847ba2",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "\nOnce done, save your Auth Hook as a migration in order to version the Auth Hook and share it with other team members. Run [`supabase migration new`](/docs/reference/cli/supabase-migration-new) to create a migration.\n\nIf you're using the Supabase SQL Editor, there's an issue when using the `?` ( _Does the string exist as a top-level key within the JSON value?_) operator. Use a direct connection to the database if you need to use it when defining a function.\n",
      "overlap_text": {
        "previous_chunk_id": "d334a496-4275-4d4b-827a-e74bb5035217",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\n If [PL/pgSQL](https://www.postgresql.org/docs/current/plpgsql.html) is too difficult consider using the [plv8](/docs/guides/database/extensions/plv8) extension which lets you use JavaScript to define functions.\n"
      }
    }
  },
  {
    "chunk_id": "72b77d40-79f2-4cfb-8d20-6fb93ae26df7",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "\nHere is an example hook signature:\n\n`\n1\ncreate or replace function public.custom_access_token_hook(event jsonb)\n2\nreturns jsonb\n3\nlanguage plpgsql\n4\nas $$\n5\ndeclare\n6\n  -- Insert variables here\n7\nbegin\n8\n  -- Insert logic here\n9\nreturn event;\n10\nend;\n11\n$$;\n`\n\nYou can visit `SQL Editor > Templates` for hook templates.\n\n### Deploying [\\#](\\#deploying)\n\n",
      "overlap_text": {
        "previous_chunk_id": "a4e539ac-d3da-43ba-857d-5eb1e8847ba2",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\n SQL Editor, there's an issue when using the `?` ( _Does the string exist as a top-level key within the JSON value?_) operator. Use a direct connection to the database if you need to use it when defining a function.\n"
      }
    }
  },
  {
    "chunk_id": "1ab0f2e1-99c9-42d7-9e32-f0439ad7df80",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "In the dashboard, navigate to [`Authentication > Hooks`](/dashboard/project/_/auth/hooks) and select the appropriate function type (SQL or HTTP) from the dropdown menu.\n\n### Error Handling [\\#](\\#error-handling)\n\nYou should return an error when facing a runtime error. Runtime errors are specific to your application and arise from specific business rules rather than programmer errors.\n\nRuntime errors could happen when:\n\n- The user does not have appropriate permissions\n- The event payload received does not have required claims.\n",
      "overlap_text": {
        "previous_chunk_id": "72b77d40-79f2-4cfb-8d20-6fb93ae26df7",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\n7\nbegin\n8\n  -- Insert logic here\n9\nreturn event;\n10\nend;\n11\n$$;\n`\n\nYou can visit `SQL Editor > Templates` for hook templates.\n\n### Deploying [\\#](\\#deploying)\n\n"
      }
    }
  },
  {
    "chunk_id": "2e88b1b2-ccc6-48a5-9eb5-a4c296656d18",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "- The user has performed an action which violates a business rule.\n- The email or phone provider used in the webhook returned an error.\n\nSQLHTTP\n\nThe error is a JSON object and has the following properties:\n\n- `error` An object that contains information about the error.\n  - `http_code` A number indicating the HTTP code to be returned. If not set, the code is HTTP 500 Internal Server Error.\n  - `message` A message to be returned in the HTTP response. Required.\n",
      "overlap_text": {
        "previous_chunk_id": "1ab0f2e1-99c9-42d7-9e32-f0439ad7df80",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\n when facing a runtime error. Runtime errors are specific to your application and arise from specific business rules rather than programmer errors.\n\nRuntime errors could happen when:\n\n- The user does not have appropriate permissions\n- The event payload received does not have required claims.\n"
      }
    }
  },
  {
    "chunk_id": "ad1e6c96-9115-4231-a17e-b2094801a510",
    "metadata": {
      "token_count": 115,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "\nHere's an example:\n\n`\n1\n{\n2\n\"error\": {\n3\n    \"http_code\": 429,\n4\n    \"message\": \"You can only verify a factor once every 10 seconds.\"\n5\n}\n6\n}\n`\n\nErrors returned from a Postgres Hook are not retry-able. When an error is returned, the error is propagated from the hook to Supabase Auth and translated into a HTTP error which is returned to your application. Supabase Auth will only take into account the error and disregard the rest of the payload.\n",
      "overlap_text": {
        "previous_chunk_id": "2e88b1b2-ccc6-48a5-9eb5-a4c296656d18",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\n the error.\n  - `http_code` A number indicating the HTTP code to be returned. If not set, the code is HTTP 500 Internal Server Error.\n  - `message` A message to be returned in the HTTP response. Required.\n"
      }
    }
  },
  {
    "chunk_id": "a9075998-e2aa-4e12-bf7d-85cdebf9903e",
    "metadata": {
      "token_count": 62,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Using Hooks [\\#](\\#using-hooks)"
      },
      "text": "\nOutside of runtime errors, both HTTP Hooks and Postgres Hooks return timeout errors. Postgres Hooks have 2 seconds to complete processing while HTTP Hooks should complete in 5 seconds. Both HTTP Hooks and Postgres Hooks are run in a transaction do limit the duration of execution to avoid delays in authentication process.\n",
      "overlap_text": {
        "previous_chunk_id": "ad1e6c96-9115-4231-a17e-b2094801a510",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\n When an error is returned, the error is propagated from the hook to Supabase Auth and translated into a HTTP error which is returned to your application. Supabase Auth will only take into account the error and disregard the rest of the payload.\n"
      }
    }
  },
  {
    "chunk_id": "3d0f3ce5-654d-489a-9802-375f60c68372",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Available Hooks [\\#](\\#available-hooks)"
      },
      "text": "Each Hook description contains an example JSONSchema which you can use in conjunction with [JSONSchema Faker](https://json-schema-faker.js.org/) in order to generate a mock payload. For HTTP Hooks, you can also use [the Standard Webhooks Testing Tool](https://www.standardwebhooks.com/simulate) to simulate a request.\n\n[Custom Access Token\\\\\n\\\\\nCustomize the access token issued by Supabase Auth](/docs/guides/auth/auth-hooks/custom-access-token-hook)\n\n",
      "overlap_text": {
        "previous_chunk_id": "a9075998-e2aa-4e12-bf7d-85cdebf9903e",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Using Hooks [\\#](\\#using-hooks)\n\n Hooks return timeout errors. Postgres Hooks have 2 seconds to complete processing while HTTP Hooks should complete in 5 seconds. Both HTTP Hooks and Postgres Hooks are run in a transaction do limit the duration of execution to avoid delays in authentication process.\n"
      }
    }
  },
  {
    "chunk_id": "8b7ede1e-b197-446e-8786-1ab22d3ba188",
    "metadata": {
      "token_count": 119,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Available Hooks [\\#](\\#available-hooks)"
      },
      "text": "[Send SMS\\\\\n\\\\\nUse a custom SMS provider to send authentication messages](/docs/guides/auth/auth-hooks/send-sms-hook)\n\n[Send Email\\\\\n\\\\\nUse a custom email provider to send authentication messages](/docs/guides/auth/auth-hooks/send-email-hook)\n\n[MFA Verification\\\\\n\\\\\nAdd additional checks to the MFA verification flow](/docs/guides/auth/auth-hooks/mfa-verification-hook)\n\n[Password verification\\\\\n\\\\\nAdd additional checks to the password verification flow](/docs/guides/auth/auth-hooks/password-verification-hook)\n\n",
      "overlap_text": {
        "previous_chunk_id": "3d0f3ce5-654d-489a-9802-375f60c68372",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Available Hooks [\\#](\\#available-hooks)\n\n](https://www.standardwebhooks.com/simulate) to simulate a request.\n\n[Custom Access Token\\\\\n\\\\\nCustomize the access token issued by Supabase Auth](/docs/guides/auth/auth-hooks/custom-access-token-hook)\n\n"
      }
    }
  },
  {
    "chunk_id": "bc341aa3-e07b-40c5-a489-4481cd53260b",
    "metadata": {
      "token_count": 113,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Available Hooks [\\#](\\#available-hooks)"
      },
      "text": "### Is this helpful?\n\nYesNo\n\nThanks for your feedback!\n\nOn this page\n\n- [What is a hook](#what-is-a-hook)\n- [Security Model](#security-model)\n- [Using Hooks](#using-hooks)\n- [Developing](#developing)\n- [Deploying](#deploying)\n- [Error Handling](#error-handling)\n- [Available Hooks](#available-hooks)\n\n1. We only collect analytics essential to ensuring smooth operation of our services. [Learn more](https://supabase.com/privacy)\n\n",
      "overlap_text": {
        "previous_chunk_id": "8b7ede1e-b197-446e-8786-1ab22d3ba188",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Available Hooks [\\#](\\#available-hooks)\n\n to the MFA verification flow](/docs/guides/auth/auth-hooks/mfa-verification-hook)\n\n[Password verification\\\\\n\\\\\nAdd additional checks to the password verification flow](/docs/guides/auth/auth-hooks/password-verification-hook)\n\n"
      }
    }
  },
  {
    "chunk_id": "67c9552f-4cd3-4dd4-857c-4376de385abc",
    "metadata": {
      "token_count": 18,
      "source_url": "https://supabase.com/docs/guides/auth/auth-hooks",
      "page_title": "Auth Hooks | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Hooks",
        "h2": "Available Hooks [\\#](\\#available-hooks)"
      },
      "text": "\n\n\n\n   AcceptOpt out[Learn more](https://supabase.com/privacy)\n",
      "overlap_text": {
        "previous_chunk_id": "bc341aa3-e07b-40c5-a489-4481cd53260b",
        "text": "Content of the previous chunk for context: h1: Auth Hooks h2: Available Hooks [\\#](\\#available-hooks)\n\ndeploying)\n- [Error Handling](#error-handling)\n- [Available Hooks](#available-hooks)\n\n1. We only collect analytics essential to ensuring smooth operation of our services. [Learn more](https://supabase.com/privacy)\n\n"
      }
    }
  },
  {
    "chunk_id": "7f707e4e-b1a9-4c08-b401-2238da8d3a58",
    "metadata": {
      "token_count": 73,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions"
      },
      "text": "* * *\n\nSupabase Auth provides fine-grained control over your user's sessions.\n\nSome security sensitive applications, or those that need to be SOC 2, HIPAA, PCI-DSS or ISO27000 compliant will require some sort of additional session controls to enforce timeouts or provide additional security guarantees. Supabase Auth makes it easy to build compliant applications.\n"
    }
  },
  {
    "chunk_id": "a0f0703c-bf34-4bf5-80c4-8c03c1982014",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "What is a session? [\\#](\\#what-is-a-session)"
      },
      "text": "A session is created when a user signs in. By default, it lasts indefinitely and a user can have an unlimited number of active sessions on as many devices.\n\nA session is represented by the Supabase Auth access token in the form of a JWT, and a refresh token which is a unique string.\n\nAccess tokens are designed to be short lived, usually between 5 minutes and 1 hour while refresh tokens never expire but can only be used once. You can exchange a refresh token only once to get a new access and refresh token pair.\n",
      "overlap_text": {
        "previous_chunk_id": "7f707e4e-b1a9-4c08-b401-2238da8d3a58",
        "text": "Content of the previous chunk for context: h1: User sessions\n\n or those that need to be SOC 2, HIPAA, PCI-DSS or ISO27000 compliant will require some sort of additional session controls to enforce timeouts or provide additional security guarantees. Supabase Auth makes it easy to build compliant applications.\n"
      }
    }
  },
  {
    "chunk_id": "9fcb9272-004b-4d93-bc5c-a50a2a7e283b",
    "metadata": {
      "token_count": 67,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "What is a session? [\\#](\\#what-is-a-session)"
      },
      "text": "\nThis process is called **refreshing the session.**\n\nA session terminates, depending on configuration, when:\n\n- The user clicks sign out.\n- The user changes their password or performs a security sensitive action.\n- It times out due to inactivity.\n- It reaches its maximum lifetime.\n- A user signs in on another device.\n",
      "overlap_text": {
        "previous_chunk_id": "a0f0703c-bf34-4bf5-80c4-8c03c1982014",
        "text": "Content of the previous chunk for context: h1: User sessions h2: What is a session? [\\#](\\#what-is-a-session)\n\n string.\n\nAccess tokens are designed to be short lived, usually between 5 minutes and 1 hour while refresh tokens never expire but can only be used once. You can exchange a refresh token only once to get a new access and refresh token pair.\n"
      }
    }
  },
  {
    "chunk_id": "f5fb93bc-d6f1-4746-a383-99d0f5b13f73",
    "metadata": {
      "token_count": 39,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Access token (JWT) claims [\\#](\\#access-token-jwt-claims)"
      },
      "text": "Every access token contains a `session_id` claim, a UUID, uniquely identifying the session of the user. You can correlate this ID with the primary key of the `auth.sessions` table.\n",
      "overlap_text": {
        "previous_chunk_id": "9fcb9272-004b-4d93-bc5c-a50a2a7e283b",
        "text": "Content of the previous chunk for context: h1: User sessions h2: What is a session? [\\#](\\#what-is-a-session)\n\n on configuration, when:\n\n- The user clicks sign out.\n- The user changes their password or performs a security sensitive action.\n- It times out due to inactivity.\n- It reaches its maximum lifetime.\n- A user signs in on another device.\n"
      }
    }
  },
  {
    "chunk_id": "c763bd33-9b14-43a7-8958-4b2dd55b037c",
    "metadata": {
      "token_count": 82,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Initiating a session [\\#](\\#initiating-a-session)"
      },
      "text": "A session is initiated when a user signs in. The session is stored in the `auth.sessions` table, and your app should receive the access and refresh tokens.\n\nThere are two flows for initiating a session and receiving the tokens:\n\n- [Implicit flow](/docs/guides/auth/sessions/implicit-flow)\n- [PKCE flow](/docs/guides/auth/sessions/pkce-flow)\n",
      "overlap_text": {
        "previous_chunk_id": "f5fb93bc-d6f1-4746-a383-99d0f5b13f73",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Access token (JWT) claims [\\#](\\#access-token-jwt-claims)\n\nEvery access token contains a `session_id` claim, a UUID, uniquely identifying the session of the user. You can correlate this ID with the primary key of the `auth.sessions` table.\n"
      }
    }
  },
  {
    "chunk_id": "f7987c56-8ce2-4be0-925e-0897c9d095e8",
    "metadata": {
      "token_count": 108,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Limiting session lifetime and number of allowed sessions per user [\\#](\\#limiting-session-lifetime-and-number-of-allowed-sessions-per-user)"
      },
      "text": "This feature is only available on Pro Plans and up.\n\nSupabase Auth can be configured to limit the lifetime of a user's session. By default, all sessions are active until the user signs out or performs some other action that terminates a session.\n\nIn some applications, it's useful or required for security to ensure that users authenticate often, or that sessions are not left active on devices for too long.\n\nThere are three ways to limit the lifetime of a session:\n\n- Time-boxed sessions, which terminate after a fixed amount of time.\n",
      "overlap_text": {
        "previous_chunk_id": "c763bd33-9b14-43a7-8958-4b2dd55b037c",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Initiating a session [\\#](\\#initiating-a-session)\n\n.\n\nThere are two flows for initiating a session and receiving the tokens:\n\n- [Implicit flow](/docs/guides/auth/sessions/implicit-flow)\n- [PKCE flow](/docs/guides/auth/sessions/pkce-flow)\n"
      }
    }
  },
  {
    "chunk_id": "65d700fd-ad84-4ae9-8e96-a9aff746658b",
    "metadata": {
      "token_count": 125,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Limiting session lifetime and number of allowed sessions per user [\\#](\\#limiting-session-lifetime-and-number-of-allowed-sessions-per-user)"
      },
      "text": "- Set an inactivity timeout, which terminates sessions that haven't been refreshed within the timeout duration.\n- Enforce a single-session per user, which only keeps the most recently active session.\n\nTo make sure that users are required to re-authenticate periodically, you can set a positive value for the **Time-box user sessions** option in the [Auth settings](/dashboard/project/_/settings/auth) for your project.\n\nTo make sure that sessions expire after a period of inactivity, you can set a positive duration for the **Inactivity timeout** option in the [Auth settings](/dashboard/project/_/settings/auth).\n",
      "overlap_text": {
        "previous_chunk_id": "f7987c56-8ce2-4be0-925e-0897c9d095e8",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Limiting session lifetime and number of allowed sessions per user [\\#](\\#limiting-session-lifetime-and-number-of-allowed-sessions-per-user)\n\n required for security to ensure that users authenticate often, or that sessions are not left active on devices for too long.\n\nThere are three ways to limit the lifetime of a session:\n\n- Time-boxed sessions, which terminate after a fixed amount of time.\n"
      }
    }
  },
  {
    "chunk_id": "14525a8e-dc2f-47de-b9ee-be180810f79c",
    "metadata": {
      "token_count": 157,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Limiting session lifetime and number of allowed sessions per user [\\#](\\#limiting-session-lifetime-and-number-of-allowed-sessions-per-user)"
      },
      "text": "\nYou can also enforce only one active session per user per device or browser. When this is enabled, the session from the most recent sign in will remain active, while the rest are terminated. Enable this via the _Single session per user_ option in the [Auth settings](/dashboard/project/_/settings/auth).\n\nSessions are not proactively destroyed when you change these settings, but rather the check is enforced whenever a session is refreshed next. This can confuse developers because the actual duration of a session is the configured timeout plus the JWT expiration time. For single session per user, the effect will only be noticed at intervals of the JWT expiration time. Please make sure you adjust this setting depending on your needs. We do not recommend going below 5 minutes for the JWT expiration time.\n",
      "overlap_text": {
        "previous_chunk_id": "65d700fd-ad84-4ae9-8e96-a9aff746658b",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Limiting session lifetime and number of allowed sessions per user [\\#](\\#limiting-session-lifetime-and-number-of-allowed-sessions-per-user)\n\n/_/settings/auth) for your project.\n\nTo make sure that sessions expire after a period of inactivity, you can set a positive duration for the **Inactivity timeout** option in the [Auth settings](/dashboard/project/_/settings/auth).\n"
      }
    }
  },
  {
    "chunk_id": "62b0223b-8788-4e91-9a00-4565f821a55e",
    "metadata": {
      "token_count": 43,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Limiting session lifetime and number of allowed sessions per user [\\#](\\#limiting-session-lifetime-and-number-of-allowed-sessions-per-user)"
      },
      "text": "\nOtherwise sessions are progressively deleted from the database 24 hours after they expire, which prevents you from causing a high load on your project by accident and allows you some freedom to undo changes without adversely affecting all users.\n",
      "overlap_text": {
        "previous_chunk_id": "14525a8e-dc2f-47de-b9ee-be180810f79c",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Limiting session lifetime and number of allowed sessions per user [\\#](\\#limiting-session-lifetime-and-number-of-allowed-sessions-per-user)\n\n expiration time. For single session per user, the effect will only be noticed at intervals of the JWT expiration time. Please make sure you adjust this setting depending on your needs. We do not recommend going below 5 minutes for the JWT expiration time.\n"
      }
    }
  },
  {
    "chunk_id": "4904c0de-a38a-4687-8318-19f6469b6085",
    "metadata": {
      "token_count": 116,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "### What are recommended values for access token (JWT) expiration? [\\#](\\#what-are-recommended-values-for-access-token-jwt-expiration)\n\nMost applications should use the default expiration time of 1 hour. This can be customized in your project's [Auth settings](/dashboard/project/_/settings/auth) in the Advanced Settings section.\n\nSetting a value over 1 hour is generally discouraged for security reasons, but it may make sense in certain situations.\n\nValues below 5 minutes, and especially below 2 minutes, should not be used in most situations because:\n",
      "overlap_text": {
        "previous_chunk_id": "62b0223b-8788-4e91-9a00-4565f821a55e",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Limiting session lifetime and number of allowed sessions per user [\\#](\\#limiting-session-lifetime-and-number-of-allowed-sessions-per-user)\n\n\nOtherwise sessions are progressively deleted from the database 24 hours after they expire, which prevents you from causing a high load on your project by accident and allows you some freedom to undo changes without adversely affecting all users.\n"
      }
    }
  },
  {
    "chunk_id": "3bf0a780-158f-4f33-b5de-ba0c26d5962d",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\n- The shorter the expiration time, the more frequently refresh tokens are used, which increases the load on the Auth server.\n- Time is not absolute. Servers can often be off sync for tens of seconds, but user devices like laptops, desktops or mobile devices can sometimes be off by minutes or even hours. Having too short expiration time can cause difficult-to-debug errors due to clock skew.\n- Supabase's client libraries always try to refresh the session ahead of time, which won't be possible if the expiration time is too short.\n",
      "overlap_text": {
        "previous_chunk_id": "4904c0de-a38a-4687-8318-19f6469b6085",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n the Advanced Settings section.\n\nSetting a value over 1 hour is generally discouraged for security reasons, but it may make sense in certain situations.\n\nValues below 5 minutes, and especially below 2 minutes, should not be used in most situations because:\n"
      }
    }
  },
  {
    "chunk_id": "849548ba-3f4b-41e5-911a-781ffb2dd133",
    "metadata": {
      "token_count": 137,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "- Access tokens should generally be valid for at least as long as the longest running request in your application. This helps you avoid issues where the access token becomes invalid midway through processing.\n\n### What is refresh token reuse detection and what does it protect from? [\\#](\\#what-is-refresh-token-reuse-detection-and-what-does-it-protect-from)\n\nAs your users continue using your app, refresh tokens are being constantly exchanged for new access tokens.\n\nThe general rule is that a refresh token can only be used once. However, strictly enforcing this can cause certain issues to arise. There are two exceptions to this design to prevent the early and unexpected termination of user's sessions:\n",
      "overlap_text": {
        "previous_chunk_id": "3bf0a780-158f-4f33-b5de-ba0c26d5962d",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n or even hours. Having too short expiration time can cause difficult-to-debug errors due to clock skew.\n- Supabase's client libraries always try to refresh the session ahead of time, which won't be possible if the expiration time is too short.\n"
      }
    }
  },
  {
    "chunk_id": "fbb5e191-d6af-4453-8399-cbfcb3821b5a",
    "metadata": {
      "token_count": 125,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\n- A refresh token can be used more than once within a defined reuse interval. By default this is 10 seconds and we do not recommend changing this value. This exception is granted for legitimate situations such as:\n  - Using server-side rendering where the same refresh token needs to be reused on the server and soon after on the client\n  - To allow some leeway for bugs or issues with serializing access to the refresh token request\n- If the parent of the currently active refresh token for the user's session is being used, the active token will be returned. This exception solves an important and often common situation:\n",
      "overlap_text": {
        "previous_chunk_id": "849548ba-3f4b-41e5-911a-781ffb2dd133",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n for new access tokens.\n\nThe general rule is that a refresh token can only be used once. However, strictly enforcing this can cause certain issues to arise. There are two exceptions to this design to prevent the early and unexpected termination of user's sessions:\n"
      }
    }
  },
  {
    "chunk_id": "136f2f80-40db-4c66-939f-a71b80fd1dc6",
    "metadata": {
      "token_count": 108,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "  - All clients such as browsers, mobile or desktop apps, and even some servers are inherently unreliable due to network issues. A request does not indicate that they received a response or even processed the response they received.\n  - If a refresh token is revoked after being used only once, and the response wasn't received and processed by the client, when the client comes back online, it will attempt to use the refresh token that was already used. Since this might happen outside of the reuse interval, it can cause sudden and unexpected session termination.\n",
      "overlap_text": {
        "previous_chunk_id": "fbb5e191-d6af-4453-8399-cbfcb3821b5a",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n for bugs or issues with serializing access to the refresh token request\n- If the parent of the currently active refresh token for the user's session is being used, the active token will be returned. This exception solves an important and often common situation:\n"
      }
    }
  },
  {
    "chunk_id": "375c4348-a4aa-4f65-9583-a9d41bfb54e2",
    "metadata": {
      "token_count": 133,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\nShould the reuse attempt not fall under these two exceptions, the whole session is regarded as terminated and all refresh tokens belonging to it are marked as revoked. You can disable this behavior in the Advanced Settings of the [Auth settings](/dashboard/project/_/settings/auth) page, though it is generally not recommended.\n\nThe purpose of this mechanism is to guard against potential security issues where a refresh token could have been stolen from the user, for example by exposing it accidentally in logs that leak (like logging cookies, request bodies or URL params) or via vulnerable third-party servers. It does not guard against the case where a user's session is stolen from their device.\n",
      "overlap_text": {
        "previous_chunk_id": "136f2f80-40db-4c66-939f-a71b80fd1dc6",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n the response wasn't received and processed by the client, when the client comes back online, it will attempt to use the refresh token that was already used. Since this might happen outside of the reuse interval, it can cause sudden and unexpected session termination.\n"
      }
    }
  },
  {
    "chunk_id": "947dcb38-1924-437b-8ec4-2ab9e851e2cd",
    "metadata": {
      "token_count": 104,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\n### What are the benefits of using access and refresh tokens instead of traditional sessions? [\\#](\\#what-are-the-benefits-of-using-access-and-refresh-tokens-instead-of-traditional-sessions)\n\nTraditionally user sessions were implemented by using a unique string stored in cookies that identified the authorization that the user had on a specific browser. Applications would use this unique string to constantly fetch the attached user information on every API call.\n\nThis approach has some tradeoffs compared to using a JWT-based approach:\n",
      "overlap_text": {
        "previous_chunk_id": "375c4348-a4aa-4f65-9583-a9d41bfb54e2",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n from the user, for example by exposing it accidentally in logs that leak (like logging cookies, request bodies or URL params) or via vulnerable third-party servers. It does not guard against the case where a user's session is stolen from their device.\n"
      }
    }
  },
  {
    "chunk_id": "85fb6904-f007-4f88-976a-e00186cb3e61",
    "metadata": {
      "token_count": 175,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\n- If the authentication server or its database crashes or is unavailable for even a few seconds, the whole application goes down. Scheduling maintenance or dealing with transient errors becomes very challenging.\n- A failing authentication server can cause a chain of failures across other systems and APIs, paralyzing the whole application system.\n- All requests that require authentication has to be routed through the authentication, which adds an additional latency overhead to all requests.\n\nSupabase Auth prefers a JWT-based approach using access and refresh tokens are because the session information is encoded in a short-lived token -- the access token -- which can be transferred across APIs and systems without relying on the availability or performance of a central server. An application can thus tolerate transient failures or performance issues a lot better. By trying to refresh the access token ahead of time, your application can safely continue to function even with larger outages.\n",
      "overlap_text": {
        "previous_chunk_id": "947dcb38-1924-437b-8ec4-2ab9e851e2cd",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n unique string stored in cookies that identified the authorization that the user had on a specific browser. Applications would use this unique string to constantly fetch the attached user information on every API call.\n\nThis approach has some tradeoffs compared to using a JWT-based approach:\n"
      }
    }
  },
  {
    "chunk_id": "64337510-8b97-4b9c-9e4d-10e0c39f48ba",
    "metadata": {
      "token_count": 123,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\nIt's better for cost optimization and scaling as well, as the authentication system's servers and database only handle traffic for this use case.\n\n### How do I make sure that an access token (JWT) cannot be used after a user clicks sign out? [\\#](\\#how-do-i-make-sure-that-an-access-token-jwt-cannot-be-used-after-a-user-clicks-sign-out)\n\nMost applications rarely need such strong guarantees. Consider adjusting the JWT expiry time to an acceptable value. If this is still necessary, you should try to use this validation logic only for the most sensitive actions within your application.\n",
      "overlap_text": {
        "previous_chunk_id": "85fb6904-f007-4f88-976a-e00186cb3e61",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n without relying on the availability or performance of a central server. An application can thus tolerate transient failures or performance issues a lot better. By trying to refresh the access token ahead of time, your application can safely continue to function even with larger outages.\n"
      }
    }
  },
  {
    "chunk_id": "5487cd42-a659-4b3f-a870-213d1ee5cc84",
    "metadata": {
      "token_count": 116,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\nWhen a user signs out, the sessions affected by the logout are removed from the database entirely. You can check that the `session_id` claim in the JWT corresponds to a row in the `auth.sessions` table. If such a row does not exist, it means that the user has logged out.\n\nNote that sessions are not proactively terminated when their maximum lifetime (time-box) or inactivity timeout are reached. These sessions are cleaned up progressively 24 hours after reaching that status. This allows you to tweak the values or roll back changes without causing unintended user friction.\n",
      "overlap_text": {
        "previous_chunk_id": "64337510-8b97-4b9c-9e4d-10e0c39f48ba",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n-a-user-clicks-sign-out)\n\nMost applications rarely need such strong guarantees. Consider adjusting the JWT expiry time to an acceptable value. If this is still necessary, you should try to use this validation logic only for the most sensitive actions within your application.\n"
      }
    }
  },
  {
    "chunk_id": "7d4d6956-ac80-4f5c-9b75-8dbb7bb80514",
    "metadata": {
      "token_count": 126,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\n### Can I use HTTP-Only cookies to store the access and refresh tokens? [\\#](\\#can-i-use-http-only-cookies-to-store-the-access-and-refresh-tokens)\n\nThis is possible, but only for apps that use the traditional server-only web app approach where all of the application logic is implemented on the server and it returns rendered HTML only.\n\nIf your app uses any client side JavaScript to build a rich user experience, using HTTP-Only cookies is not feasible since only your server will be able to read and refresh the session of the user. The browser will not have access to the access and refresh tokens.\n",
      "overlap_text": {
        "previous_chunk_id": "5487cd42-a659-4b3f-a870-213d1ee5cc84",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n not proactively terminated when their maximum lifetime (time-box) or inactivity timeout are reached. These sessions are cleaned up progressively 24 hours after reaching that status. This allows you to tweak the values or roll back changes without causing unintended user friction.\n"
      }
    }
  },
  {
    "chunk_id": "5007cb15-7209-4a18-bdef-583d3fd752e0",
    "metadata": {
      "token_count": 123,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\nBecause of this, the Supabase JavaScript libraries provide only limited support. You can override the `storage` option when creating the Supabase client **on the server** to store the values in cookies or your preferred storage choice, for example:\n\n`\n_10\nimport { createClient } from '@supabase/supabase-js'\n_10\n_10\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n_10\nauth: {\n_10\n    storage: customStorageObject,\n_10\n},\n_10\n})\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "7d4d6956-ac80-4f5c-9b75-8dbb7bb80514",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n uses any client side JavaScript to build a rich user experience, using HTTP-Only cookies is not feasible since only your server will be able to read and refresh the session of the user. The browser will not have access to the access and refresh tokens.\n"
      }
    }
  },
  {
    "chunk_id": "fc7cfc15-65e6-4f5a-8464-cb2a8b4c1687",
    "metadata": {
      "token_count": 154,
      "source_url": "https://supabase.com/docs/guides/auth/sessions",
      "page_title": "User sessions | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User sessions",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "The `customStorageObject` should implement the `getItem`, `setItem`, and `removeItem` methods from the [`Storage` interface](https://developer.mozilla.org/en-US/docs/Web/API/Storage). Async versions of these methods are also supported.\n\nWhen using cookies to store access and refresh tokens, make sure that the [`Expires` or `Max-Age` attributes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#attributes) of the cookies is set to a timestamp very far into the future. Browsers will clear the cookies, but the session will remain active in Supabase Auth. Therefore it's best to let Supabase Auth control the validity of these tokens and instruct the browser to always store the cookies indefinitely.\n",
      "overlap_text": {
        "previous_chunk_id": "5007cb15-7209-4a18-bdef-583d3fd752e0",
        "text": "Content of the previous chunk for context: h1: User sessions h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n\n_10\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n_10\nauth: {\n_10\n    storage: customStorageObject,\n_10\n},\n_10\n})\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "d31bf493-4d8a-4072-a94e-24ebfa1e4f99",
    "metadata": {
      "token_count": 120,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Create and use anonymous users to authenticate with Supabase"
      },
      "text": "* * *\n\n[Enable Anonymous Sign-Ins](/dashboard/project/_/settings/auth) to build apps which provide users an authenticated experience without requiring users to enter an email address, password, use an OAuth provider or provide any other PII (Personally Identifiable Information). Later, when ready, the user can link an authentication method to their account.\n\n##### Anonymous user vs the anon key\n\nCalling `signInAnonymously()` creates an anonymous user. It's just like a permanent user, except the user can't access their account if they sign out, clear browsing data, or use another device.\n"
    }
  },
  {
    "chunk_id": "49c21437-077f-4ee9-b3d9-11e6f42e8245",
    "metadata": {
      "token_count": 110,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Create and use anonymous users to authenticate with Supabase"
      },
      "text": "\nLike permanent users, the `authenticated` Postgres role will be used when using the Data APIs to access your project. JWTs for these users will have an `is_anonymous` claim which you can use to distinguish in RLS policies.\n\nThis is different from the `anon` API key which does not create a user and can be used to implement public access to your database as it uses the `anonymous` Postgres role.\n\nAnonymous sign-ins can be used to build:\n\n- E-commerce applications, such as shopping carts before check-out\n",
      "overlap_text": {
        "previous_chunk_id": "d31bf493-4d8a-4072-a94e-24ebfa1e4f99",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Create and use anonymous users to authenticate with Supabase\n\n##### Anonymous user vs the anon key\n\nCalling `signInAnonymously()` creates an anonymous user. It's just like a permanent user, except the user can't access their account if they sign out, clear browsing data, or use another device.\n"
      }
    }
  },
  {
    "chunk_id": "259ff353-a3a6-4926-9aa6-a8e56e5fdfc9",
    "metadata": {
      "token_count": 125,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Create and use anonymous users to authenticate with Supabase"
      },
      "text": "- Full-feature demos without collecting personal information\n- Temporary or throw-away accounts\n\nReview your existing RLS policies before enabling anonymous sign-ins. Anonymous users use the `authenticated` role. To distinguish between anonymous users and permanent users, your policies need to check the `is_anonymous` field of the user's JWT.\n\nSee the [Access control section](#access-control) for more details.\n\n##### Use Dynamic Rendering with Next.js\n\nThe Supabase team has received reports of user metadata being cached across unique anonymous users as a result of Next.js static page rendering. For the best user experience, utilize dynamic page rendering.\n",
      "overlap_text": {
        "previous_chunk_id": "49c21437-077f-4ee9-b3d9-11e6f42e8245",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Create and use anonymous users to authenticate with Supabase\n\n which does not create a user and can be used to implement public access to your database as it uses the `anonymous` Postgres role.\n\nAnonymous sign-ins can be used to build:\n\n- E-commerce applications, such as shopping carts before check-out\n"
      }
    }
  },
  {
    "chunk_id": "8789f833-c731-4291-879e-d98af17c8670",
    "metadata": {
      "token_count": 46,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Create and use anonymous users to authenticate with Supabase"
      },
      "text": "\n##### Self hosting and local development\n\nFor self-hosting, you can update your project configuration using the files and environment variables provided. See the [local development docs](/docs/guides/cli/config) for more details.\n",
      "overlap_text": {
        "previous_chunk_id": "259ff353-a3a6-4926-9aa6-a8e56e5fdfc9",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Create and use anonymous users to authenticate with Supabase\n\n for more details.\n\n##### Use Dynamic Rendering with Next.js\n\nThe Supabase team has received reports of user metadata being cached across unique anonymous users as a result of Next.js static page rendering. For the best user experience, utilize dynamic page rendering.\n"
      }
    }
  },
  {
    "chunk_id": "8d3f545b-5f10-45a4-9469-96750d9770ab",
    "metadata": {
      "token_count": 50,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Sign in anonymously [\\#](\\#sign-in-anonymously)"
      },
      "text": "JavaScriptFlutterSwiftKotlinPython\n\nCall the [`signInAnonymously()`](/docs/reference/javascript/auth-signinanonymously) method:\n\n`\n_10\nconst { data, error } = await supabase.auth.signInAnonymously()\n`\n",
      "overlap_text": {
        "previous_chunk_id": "8789f833-c731-4291-879e-d98af17c8670",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Create and use anonymous users to authenticate with Supabase\n\n\n##### Self hosting and local development\n\nFor self-hosting, you can update your project configuration using the files and environment variables provided. See the [local development docs](/docs/guides/cli/config) for more details.\n"
      }
    }
  },
  {
    "chunk_id": "e1ff8f0a-6445-4c1c-8543-73273b06f1fa",
    "metadata": {
      "token_count": 140,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Convert an anonymous user to a permanent user [\\#](\\#convert-an-anonymous-user-to-a-permanent-user)"
      },
      "text": "Converting an anonymous user to a permanent user requires [linking an identity](/docs/guides/auth/auth-identity-linking#manual-linking-beta) to the user. This requires you to [enable manual linking](/dashboard/project/_/settings/auth) in your Supabase project.\n\n### Link an Email / Phone identity [\\#](\\#link-an-email--phone-identity)\n\nJavaScriptFlutterSwiftKotlinPython\n\nYou can use the [`updateUser()`](/docs/reference/javascript/auth-updateuser) method to link an email or phone identity to the anonymous user. To add a password for the anonymous user, the user's email or phone number needs to be verified first.\n",
      "overlap_text": {
        "previous_chunk_id": "8d3f545b-5f10-45a4-9469-96750d9770ab",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Sign in anonymously [\\#](\\#sign-in-anonymously)\n\nJavaScriptFlutterSwiftKotlinPython\n\nCall the [`signInAnonymously()`](/docs/reference/javascript/auth-signinanonymously) method:\n\n`\n_10\nconst { data, error } = await supabase.auth.signInAnonymously()\n`\n"
      }
    }
  },
  {
    "chunk_id": "4a53c65b-7908-4d37-8d20-fc4b563455ec",
    "metadata": {
      "token_count": 108,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Convert an anonymous user to a permanent user [\\#](\\#convert-an-anonymous-user-to-a-permanent-user)"
      },
      "text": "\n`\n_10\nconst { data, error } = await supabase.auth.updateUser({ email: 'example@email.com' })\n_10\n_10\n// verify the user's email by clicking on the email change link\n_10\n// or entering the 6-digit OTP sent to the email address\n_10\n_10\n// once the user has been verified, update the password\n_10\nconst { data, error } = await supabase.auth.updateUser({ password: 'password' })\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "e1ff8f0a-6445-4c1c-8543-73273b06f1fa",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Convert an anonymous user to a permanent user [\\#](\\#convert-an-anonymous-user-to-a-permanent-user)\n\n use the [`updateUser()`](/docs/reference/javascript/auth-updateuser) method to link an email or phone identity to the anonymous user. To add a password for the anonymous user, the user's email or phone number needs to be verified first.\n"
      }
    }
  },
  {
    "chunk_id": "212abd1b-fe13-4633-a15a-fa039d416491",
    "metadata": {
      "token_count": 78,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Convert an anonymous user to a permanent user [\\#](\\#convert-an-anonymous-user-to-a-permanent-user)"
      },
      "text": "### Link an OAuth identity [\\#](\\#link-an-oauth-identity)\n\nJavaScriptFlutterSwiftKotlinPython\n\nYou can use the [`linkIdentity()`](/docs/reference/javascript/auth-linkidentity) method to link an oauth identity to the anonymous user.\n\n`\n_10\nconst { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })\n`\n",
      "overlap_text": {
        "previous_chunk_id": "4a53c65b-7908-4d37-8d20-fc4b563455ec",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Convert an anonymous user to a permanent user [\\#](\\#convert-an-anonymous-user-to-a-permanent-user)\n\n OTP sent to the email address\n_10\n_10\n// once the user has been verified, update the password\n_10\nconst { data, error } = await supabase.auth.updateUser({ password: 'password' })\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "62853445-338d-4d14-9357-3a3813b5eb3f",
    "metadata": {
      "token_count": 154,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Access control [\\#](\\#access-control)"
      },
      "text": "An anonymous user assumes the `authenticated` role just like a permanent user. You can use row-level security (RLS) policies to differentiate between an anonymous user and a permanent user by checking for the `is_anonymous` claim in the JWT returned by `auth.jwt()`:\n\n`\n_10\ncreate policy \"Only permanent users can post to the news feed\"\n_10\non news_feed as restrictive for insert\n_10\nto authenticated\n_10\nwith check ((select (auth.jwt()->>'is_anonymous')::boolean) is false );\n_10\n_10\ncreate policy \"Anonymous and permanent users can view the news feed\"\n_10\non news_feed for select\n_10\nto authenticated\n_10\nusing ( true );\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "212abd1b-fe13-4633-a15a-fa039d416491",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Convert an anonymous user to a permanent user [\\#](\\#convert-an-anonymous-user-to-a-permanent-user)\n\n [`linkIdentity()`](/docs/reference/javascript/auth-linkidentity) method to link an oauth identity to the anonymous user.\n\n`\n_10\nconst { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })\n`\n"
      }
    }
  },
  {
    "chunk_id": "c0e455bb-478a-48e8-ac29-6c0bde3b774c",
    "metadata": {
      "token_count": 57,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Access control [\\#](\\#access-control)"
      },
      "text": "##### Use restrictive policies\n\nRLS policies are permissive by default, which means that they are combined using an \"OR\" operator when multiple policies are applied. It is important to construct restrictive policies to ensure that the checks for an anonymous user are always enforced when combined with other policies.\n",
      "overlap_text": {
        "previous_chunk_id": "62853445-338d-4d14-9357-3a3813b5eb3f",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Access control [\\#](\\#access-control)\n\nonymous')::boolean) is false );\n_10\n_10\ncreate policy \"Anonymous and permanent users can view the news feed\"\n_10\non news_feed for select\n_10\nto authenticated\n_10\nusing ( true );\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "64d6a67a-2ef4-4332-a15c-acecbe1e3a80",
    "metadata": {
      "token_count": 123,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Resolving identity conflicts [\\#](\\#resolving-identity-conflicts)"
      },
      "text": "Depending on your application requirements, data conflicts can arise when an anonymous user is converted to a permanent user. For example, in the context of an e-commerce application, an anonymous user would be allowed to add items to the shopping cart without signing up / signing in. When they decide to sign-in to an existing account, you will need to decide how you want to resolve data conflicts in the shopping cart:\n\n1. Overwrite the items in the cart with those in the existing account\n2. Overwrite the items in the cart with those from the anonymous user\n3. Merge the items in the cart together\n",
      "overlap_text": {
        "previous_chunk_id": "c0e455bb-478a-48e8-ac29-6c0bde3b774c",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Access control [\\#](\\#access-control)\n\n policies are permissive by default, which means that they are combined using an \"OR\" operator when multiple policies are applied. It is important to construct restrictive policies to ensure that the checks for an anonymous user are always enforced when combined with other policies.\n"
      }
    }
  },
  {
    "chunk_id": "bf9783b3-9abc-4476-8750-717b4f4dee1e",
    "metadata": {
      "token_count": 127,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Abuse prevention and rate limits [\\#](\\#abuse-prevention-and-rate-limits)"
      },
      "text": "Since anonymous users are stored in your database, bad actors can abuse the endpoint to increase your database size drastically. It is strongly recommended to [enable invisible Captcha or Cloudflare Turnstile](/docs/guides/auth/auth-captcha) to prevent abuse for anonymous sign-ins. An IP-based rate limit is enforced at 30 requests per hour which can be modified in your [dashboard](/dashboard/project/_/auth/rate-limits). You can refer to the full list of rate limits [here](/docs/guides/platform/going-into-prod#rate-limiting-resource-allocation--abuse-prevention).\n",
      "overlap_text": {
        "previous_chunk_id": "64d6a67a-2ef4-4332-a15c-acecbe1e3a80",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Resolving identity conflicts [\\#](\\#resolving-identity-conflicts)\n\n resolve data conflicts in the shopping cart:\n\n1. Overwrite the items in the cart with those in the existing account\n2. Overwrite the items in the cart with those from the anonymous user\n3. Merge the items in the cart together\n"
      }
    }
  },
  {
    "chunk_id": "784f82a1-fb4d-4ac6-8db9-a669874c3401",
    "metadata": {
      "token_count": 72,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Automatic cleanup [\\#](\\#automatic-cleanup)"
      },
      "text": "Automatic cleanup of anonymous users is currently not available. Instead, you can delete anonymous users from your project by running the following SQL:\n\n`\n_10\n-- deletes anonymous users created more than 30 days ago\n_10\ndelete from auth.users\n_10\nwhere is_anonymous is true and created_at < now() - interval '30 days';\n`\n",
      "overlap_text": {
        "previous_chunk_id": "bf9783b3-9abc-4476-8750-717b4f4dee1e",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Abuse prevention and rate limits [\\#](\\#abuse-prevention-and-rate-limits)\n\n](/dashboard/project/_/auth/rate-limits). You can refer to the full list of rate limits [here](/docs/guides/platform/going-into-prod#rate-limiting-resource-allocation--abuse-prevention).\n"
      }
    }
  },
  {
    "chunk_id": "b0de911c-f3f2-4317-a280-43e2cf7464fb",
    "metadata": {
      "token_count": 87,
      "source_url": "https://supabase.com/docs/guides/auth/auth-anonymous",
      "page_title": "Anonymous Sign-Ins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Anonymous Sign-Ins",
        "h2": "Resources [\\#](\\#resources)"
      },
      "text": "- [Supabase - Get started for free](https://supabase.com)\n- [Supabase JS Client](https://github.com/supabase/supabase-js)\n- [Supabase Flutter Client](https://github.com/supabase/supabase-flutter)\n- [Supabase Kotlin Client](https://github.com/supabase-community/supabase-kt)\n",
      "overlap_text": {
        "previous_chunk_id": "784f82a1-fb4d-4ac6-8db9-a669874c3401",
        "text": "Content of the previous chunk for context: h1: Anonymous Sign-Ins h2: Automatic cleanup [\\#](\\#automatic-cleanup)\n\n the following SQL:\n\n`\n_10\n-- deletes anonymous users created more than 30 days ago\n_10\ndelete from auth.users\n_10\nwhere is_anonymous is true and created_at < now() - interval '30 days';\n`\n"
      }
    }
  },
  {
    "chunk_id": "608aab03-f381-4eda-862f-d21b51a4f243",
    "metadata": {
      "token_count": 105,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI"
      },
      "text": "* * *\n\nAs of 7th Feb 2024, [this repository](https://github.com/supabase-community/auth-ui) is no longer maintained by the Supabase Team. At the moment, the team does not have capacity to give the expected level of care to this repository. We may revisit Auth UI in the future but regrettably have to leave it on hold for now as we focus on other priorities such as improving the Server-Side Rendering (SSR) package and advanced Auth primitives.\n"
    }
  },
  {
    "chunk_id": "9b9c1b51-0f13-4746-99cd-9c5f527f543b",
    "metadata": {
      "token_count": 29,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI"
      },
      "text": "\nAuth UI is a pre-built React component for authenticating users.\nIt supports custom themes and extensible styles to match your brand and aesthetic.\n",
      "overlap_text": {
        "previous_chunk_id": "608aab03-f381-4eda-862f-d21b51a4f243",
        "text": "Content of the previous chunk for context: h1: Auth UI\n\n of care to this repository. We may revisit Auth UI in the future but regrettably have to leave it on hold for now as we focus on other priorities such as improving the Server-Side Rendering (SSR) package and advanced Auth primitives.\n"
      }
    }
  },
  {
    "chunk_id": "986d70bb-218c-4dc6-a0f3-9571b6abf041",
    "metadata": {
      "token_count": 184,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Set up Auth UI [\\#](\\#set-up-auth-ui)"
      },
      "text": "Install the latest version of [supabase-js](/docs/reference/javascript) and the Auth UI package:\n\n`\n_10\nnpm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared\n`\n\n### Import the Auth component [\\#](\\#import-the-auth-component)\n\nPass `supabaseClient` from `@supabase/supabase-js` as a prop to the component.\n\n/src/index.js\n\n`\n_10\nimport { createClient } from '@supabase/supabase-js'\n_10\nimport { Auth } from '@supabase/auth-ui-react'\n_10\n_10\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_10\n_10\nconst App = () => <Auth supabaseClient={supabase} />\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "9b9c1b51-0f13-4746-99cd-9c5f527f543b",
        "text": "Content of the previous chunk for context: h1: Auth UI\n\n\nAuth UI is a pre-built React component for authenticating users.\nIt supports custom themes and extensible styles to match your brand and aesthetic.\n"
      }
    }
  },
  {
    "chunk_id": "8acd3c02-2638-4d65-8940-94dd76ca02ce",
    "metadata": {
      "token_count": 188,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Set up Auth UI [\\#](\\#set-up-auth-ui)"
      },
      "text": "This renders the Auth component without any styling.\nWe recommend using one of the predefined themes to style the UI.\nImport the theme you want to use and pass it to the `appearance.theme` prop.\n\n`\n_18\nimport { Auth } from '@supabase/auth-ui-react'\n_18\nimport {\n_18\n// Import predefined theme\n_18\nThemeSupa,\n_18\n} from '@supabase/auth-ui-shared'\n_18\n_18\nconst supabase = createClient(\n_18\n'<INSERT PROJECT URL>',\n_18\n'<INSERT PROJECT ANON API KEY>'\n_18\n)\n_18\n_18\nconst App = () => (\n_18\n<Auth\n_18\n    supabaseClient={supabase}\n_18\n    {/* Apply predefined theme */}\n_18\n    appearance={{ theme: ThemeSupa }}\n_18\n/>\n_18\n)\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "986d70bb-218c-4dc6-a0f3-9571b6abf041",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Set up Auth UI [\\#](\\#set-up-auth-ui)\n\n_10\n_10\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_10\n_10\nconst App = () => <Auth supabaseClient={supabase} />\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "027a5485-2974-490f-b6b5-529a2474ee58",
    "metadata": {
      "token_count": 175,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Set up Auth UI [\\#](\\#set-up-auth-ui)"
      },
      "text": "### Social providers [\\#](\\#social-providers)\n\nThe Auth component also supports login with [official social providers](../../auth#providers).\n\n`\n_13\nimport { createClient } from '@supabase/supabase-js'\n_13\nimport { Auth } from '@supabase/auth-ui-react'\n_13\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n_13\n_13\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_13\n_13\nconst App = () => (\n_13\n<Auth\n_13\n    supabaseClient={supabase}\n_13\n    appearance={{ theme: ThemeSupa }}\n_13\n    providers={['google', 'facebook', 'twitter']}\n_13\n/>\n_13\n)\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "8acd3c02-2638-4d65-8940-94dd76ca02ce",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Set up Auth UI [\\#](\\#set-up-auth-ui)\n\n (\n_18\n<Auth\n_18\n    supabaseClient={supabase}\n_18\n    {/* Apply predefined theme */}\n_18\n    appearance={{ theme: ThemeSupa }}\n_18\n/>\n_18\n)\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "98a6a6ef-e36c-41b9-a5c8-2cfb133c960d",
    "metadata": {
      "token_count": 107,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Set up Auth UI [\\#](\\#set-up-auth-ui)"
      },
      "text": "### Options [\\#](\\#options)\n\nOptions are available via `queryParams`:\n\n`\n_10\n<Auth\n_10\nsupabaseClient={supabase}\n_10\nproviders={['google']}\n_10\nqueryParams={{\n_10\n    access_type: 'offline',\n_10\n    prompt: 'consent',\n_10\n    hd: 'domain.com',\n_10\n}}\n_10\nonlyThirdPartyProviders\n_10\n/>\n`\n\n### Provider scopes [\\#](\\#provider-scopes)\n\n",
      "overlap_text": {
        "previous_chunk_id": "027a5485-2974-490f-b6b5-529a2474ee58",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Set up Auth UI [\\#](\\#set-up-auth-ui)\n\nAuth\n_13\n    supabaseClient={supabase}\n_13\n    appearance={{ theme: ThemeSupa }}\n_13\n    providers={['google', 'facebook', 'twitter']}\n_13\n/>\n_13\n)\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "e48c560b-ef87-414f-833b-6a43ae142261",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Set up Auth UI [\\#](\\#set-up-auth-ui)"
      },
      "text": "Provider Scopes can be requested through `providerScope`;\n\n`\n_12\n<Auth\n_12\nsupabaseClient={supabase}\n_12\nproviders={['google']}\n_12\nqueryParams={{\n_12\n    access_type: 'offline',\n_12\n    prompt: 'consent',\n_12\n    hd: 'domain.com',\n_12\n}}\n_12\nproviderScopes={{\n_12\n    google: 'https://www.googleapis.com/auth/calendar.readonly',\n_12\n}}\n_12\n/>\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "98a6a6ef-e36c-41b9-a5c8-2cfb133c960d",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Set up Auth UI [\\#](\\#set-up-auth-ui)\n\n',\n_10\n    prompt: 'consent',\n_10\n    hd: 'domain.com',\n_10\n}}\n_10\nonlyThirdPartyProviders\n_10\n/>\n`\n\n### Provider scopes [\\#](\\#provider-scopes)\n\n"
      }
    }
  },
  {
    "chunk_id": "33c5175d-3860-496d-95a4-25712a3b6acc",
    "metadata": {
      "token_count": 90,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Set up Auth UI [\\#](\\#set-up-auth-ui)"
      },
      "text": "### Supported views [\\#](\\#supported-views)\n\nThe Auth component is currently shipped with the following views:\n\n- [Email Login](../auth-email)\n- [Magic Link login](../auth-magic-link)\n- [Social Login](../social-login)\n- Update password\n- Forgotten password\n\nWe are planning on adding more views in the future. Follow along on that [repo](https://github.com/supabase/auth-ui).\n",
      "overlap_text": {
        "previous_chunk_id": "e48c560b-ef87-414f-833b-6a43ae142261",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Set up Auth UI [\\#](\\#set-up-auth-ui)\n\nconsent',\n_12\n    hd: 'domain.com',\n_12\n}}\n_12\nproviderScopes={{\n_12\n    google: 'https://www.googleapis.com/auth/calendar.readonly',\n_12\n}}\n_12\n/>\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "e5a6894c-cdeb-4380-b22d-fd034797d49d",
    "metadata": {
      "token_count": 101,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "There are several ways to customize Auth UI:\n\n- Use one of the [predefined themes](#predefined-themes) that comes with Auth UI\n- Extend a theme by [overriding the variable tokens](#override-themes) in a theme\n- [Create your own theme](#create-theme)\n- [Use your own CSS classes](#custom-css-classes)\n- [Use inline styles](#custom-inline-styles)\n- [Use your own labels](#custom-labels)\n",
      "overlap_text": {
        "previous_chunk_id": "33c5175d-3860-496d-95a4-25712a3b6acc",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Set up Auth UI [\\#](\\#set-up-auth-ui)\n\n-magic-link)\n- [Social Login](../social-login)\n- Update password\n- Forgotten password\n\nWe are planning on adding more views in the future. Follow along on that [repo](https://github.com/supabase/auth-ui).\n"
      }
    }
  },
  {
    "chunk_id": "d3694b27-1f5d-4e1d-b945-b660fb057f15",
    "metadata": {
      "token_count": 232,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "\n### Predefined themes [\\#](\\#predefined-themes)\n\nAuth UI comes with several themes to customize the appearance. Each predefined theme comes with at least two variations, a `default` variation, and a `dark` variation. You can switch between these themes using the `theme` prop. Import the theme you want to use and pass it to the `appearance.theme` prop.\n\n`\n_16\nimport { createClient } from '@supabase/supabase-js'\n_16\nimport { Auth } from '@supabase/auth-ui-react'\n_16\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n_16\n_16\nconst supabase = createClient(\n_16\n'<INSERT PROJECT URL>',\n_16\n'<INSERT PROJECT ANON API KEY>'\n_16\n)\n_16\n_16\nconst App = () => (\n_16\n<Auth\n_16\n    supabaseClient={supabase}\n_16\n    {/* Apply predefined theme */}\n_16\n    appearance={{ theme: ThemeSupa }}\n_16\n/>\n_16\n)\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "e5a6894c-cdeb-4380-b22d-fd034797d49d",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n\n- [Create your own theme](#create-theme)\n- [Use your own CSS classes](#custom-css-classes)\n- [Use inline styles](#custom-inline-styles)\n- [Use your own labels](#custom-labels)\n"
      }
    }
  },
  {
    "chunk_id": "e88660ea-4917-4593-9d84-31f6a0471bf4",
    "metadata": {
      "token_count": 219,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "Currently there is only one predefined theme available, but we plan to add more.\n\n### Switch theme variations [\\#](\\#switch-theme-variations)\n\nAuth UI comes with two theme variations: `default` and `dark`. You can switch between these themes with the `theme` prop.\n\n`\n_17\nimport { createClient } from '@supabase/supabase-js'\n_17\nimport { Auth } from '@supabase/auth-ui-react'\n_17\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n_17\n_17\nconst supabase = createClient(\n_17\n'<INSERT PROJECT URL>',\n_17\n'<INSERT PROJECT ANON API KEY>'\n_17\n)\n_17\n_17\nconst App = () => (\n_17\n<Auth\n_17\n    supabaseClient={supabase}\n_17\n    appearance={{ theme: ThemeSupa }}\n_17\n    {/* Set theme to dark */}\n_17\n    theme=\"dark\"\n_17\n/>\n_17\n)\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "d3694b27-1f5d-4e1d-b945-b660fb057f15",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n (\n_16\n<Auth\n_16\n    supabaseClient={supabase}\n_16\n    {/* Apply predefined theme */}\n_16\n    appearance={{ theme: ThemeSupa }}\n_16\n/>\n_16\n)\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "a1d9f4ef-976a-4238-b679-8047ed66dc51",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "If you don't pass a value to `theme` it uses the `\"default\"` theme. You can pass `\"dark\"` to the theme prop to switch to the `dark` theme. If your theme has other variations, use the name of the variation in this prop.\n\n### Override themes [\\#](\\#override-themes)\n\nAuth UI themes can be overridden using variable tokens. See the [list of variable tokens](https://github.com/supabase/auth-ui/blob/main/packages/shared/src/theming/Themes.ts).\n",
      "overlap_text": {
        "previous_chunk_id": "e88660ea-4917-4593-9d84-31f6a0471bf4",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n\n    supabaseClient={supabase}\n_17\n    appearance={{ theme: ThemeSupa }}\n_17\n    {/* Set theme to dark */}\n_17\n    theme=\"dark\"\n_17\n/>\n_17\n)\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "b7be48e4-775c-46be-87c5-1161ee3d1b82",
    "metadata": {
      "token_count": 198,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "\n`\n_22\nimport { createClient } from '@supabase/supabase-js'\n_22\nimport { Auth } from '@supabase/auth-ui-react'\n_22\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n_22\n_22\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_22\n_22\nconst App = () => (\n_22\n<Auth\n_22\n    supabaseClient={supabase}\n_22\n    appearance={{\n_22\n      theme: ThemeSupa,\n_22\n      variables: {\n_22\n        default: {\n_22\n          colors: {\n_22\n            brand: 'red',\n_22\n            brandAccent: 'darkred',\n_22\n          },\n_22\n        },\n_22\n      },\n_22\n    }}\n_22\n/>\n_22\n)\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "a1d9f4ef-976a-4238-b679-8047ed66dc51",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n Override themes [\\#](\\#override-themes)\n\nAuth UI themes can be overridden using variable tokens. See the [list of variable tokens](https://github.com/supabase/auth-ui/blob/main/packages/shared/src/theming/Themes.ts).\n"
      }
    }
  },
  {
    "chunk_id": "8ba19e82-8389-4558-ade2-0b35e0903df4",
    "metadata": {
      "token_count": 231,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "If you created your own theme, you may not need to override any of them.\n\n### Create your own theme [\\#](\\#create-theme)\n\nYou can create your own theme by following the same structure within a `appearance.theme` property.\nSee the list of [tokens within a theme](https://github.com/supabase/auth-ui/blob/main/packages/shared/src/theming/Themes.ts).\n\n/src/index.js\n\n`\n_40\nimport { createClient } from '@supabase/supabase-js'\n_40\nimport { Auth } from '@supabase/auth-ui-react'\n_40\n_40\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_40\n_40\nconst customTheme = {\n_40\ndefault: {\n_40\n    colors: {\n_40\n      brand: 'hsl(153 60.0% 53.0%)',\n_40\n      brandAccent: 'hsl(154 54.8% 45.1%)',\n_40\n      brandButtonText: 'white',\n_40\n      // ..\n",
      "overlap_text": {
        "previous_chunk_id": "b7be48e4-775c-46be-87c5-1161ee3d1b82",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n {\n_22\n            brand: 'red',\n_22\n            brandAccent: 'darkred',\n_22\n          },\n_22\n        },\n_22\n      },\n_22\n    }}\n_22\n/>\n_22\n)\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "30993ad9-6291-48b4-b3c5-eae5c8a28d4f",
    "metadata": {
      "token_count": 159,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "_40\n    },\n_40\n},\n_40\ndark: {\n_40\n    colors: {\n_40\n      brandButtonText: 'white',\n_40\n      defaultButtonBackground: '#2e2e2e',\n_40\n      defaultButtonBackgroundHover: '#3e3e3e',\n_40\n      //..\n_40\n    },\n_40\n},\n_40\n// You can also add more theme variations with different names.\n_40\nevenDarker: {\n_40\n    colors: {\n_40\n      brandButtonText: 'white',\n_40\n      defaultButtonBackground: '#1e1e1e',\n_40\n      defaultButtonBackgroundHover: '#2e2e2e',\n_40\n      //..\n",
      "overlap_text": {
        "previous_chunk_id": "8ba19e82-8389-4558-ade2-0b35e0903df4",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n 60.0% 53.0%)',\n_40\n      brandAccent: 'hsl(154 54.8% 45.1%)',\n_40\n      brandButtonText: 'white',\n_40\n      // ..\n"
      }
    }
  },
  {
    "chunk_id": "ddd99e60-a7b7-4198-921d-4df815bcfde2",
    "metadata": {
      "token_count": 107,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "_40\n    },\n_40\n},\n_40\n}\n_40\n_40\nconst App = () => (\n_40\n<Auth\n_40\n    supabaseClient={supabase}\n_40\n    theme=\"default\" // can also be \"dark\" or \"evenDarker\"\n_40\n    appearance={{ theme: customTheme }}\n_40\n/>\n_40\n)\n`\n\nYou can switch between different variations of your theme with the [\"theme\" prop](#switch-theme-variations).\n",
      "overlap_text": {
        "previous_chunk_id": "30993ad9-6291-48b4-b3c5-eae5c8a28d4f",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n {\n_40\n      brandButtonText: 'white',\n_40\n      defaultButtonBackground: '#1e1e1e',\n_40\n      defaultButtonBackgroundHover: '#2e2e2e',\n_40\n      //..\n"
      }
    }
  },
  {
    "chunk_id": "5b223401-84fd-4e7e-85dc-81af7037f193",
    "metadata": {
      "token_count": 237,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "\n### Custom CSS classes [\\#](\\#custom-css-classes)\n\nYou can use custom CSS classes for the following elements:\n`\"button\"`, `\"container\"`, `\"anchor\"`, `\"divider\"`, `\"label\"`, `\"input\"`, `\"loader\"`, `\"message\"`.\n\n/src/index.js\n\n`\n_20\nimport { createClient } from '@supabase/supabase-js'\n_20\nimport { Auth } from '@supabase/auth-ui-react'\n_20\n_20\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_20\n_20\nconst App = () => (\n_20\n<Auth\n_20\n    supabaseClient={supabase}\n_20\n    appearance={{\n_20\n      // If you want to extend the default styles instead of overriding it, set this to true\n_20\n      extend: false,\n_20\n      // Your custom classes\n_20\n      className: {\n_20\n        anchor: 'my-awesome-anchor',\n_20\n        button: 'my-awesome-button',\n_20\n        //..\n",
      "overlap_text": {
        "previous_chunk_id": "ddd99e60-a7b7-4198-921d-4df815bcfde2",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\ndark\" or \"evenDarker\"\n_40\n    appearance={{ theme: customTheme }}\n_40\n/>\n_40\n)\n`\n\nYou can switch between different variations of your theme with the [\"theme\" prop](#switch-theme-variations).\n"
      }
    }
  },
  {
    "chunk_id": "39875bd3-a40b-4c5f-b0f8-c4607a6d82d9",
    "metadata": {
      "token_count": 225,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "_20\n      },\n_20\n    }}\n_20\n/>\n_20\n)\n`\n\n### Custom inline CSS [\\#](\\#custom-inline-styles)\n\nYou can use custom CSS inline styles for the following elements:\n`\"button\"`, `\"container\"`, `\"anchor\"`, `\"divider\"`, `\"label\"`, `\"input\"`, `\"loader\"`, `\"message\"`.\n\n/src/index.js\n\n`\n_17\nimport { createClient } from '@supabase/supabase-js'\n_17\nimport { Auth } from '@supabase/auth-ui-react'\n_17\n_17\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_17\n_17\nconst App = () => (\n_17\n<Auth\n_17\n    supabaseClient={supabase}\n_17\n    appearance={{\n_17\n      style: {\n_17\n        button: { background: 'red', color: 'white' },\n_17\n        anchor: { color: 'blue' },\n_17\n        //..\n",
      "overlap_text": {
        "previous_chunk_id": "5b223401-84fd-4e7e-85dc-81af7037f193",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n\n      extend: false,\n_20\n      // Your custom classes\n_20\n      className: {\n_20\n        anchor: 'my-awesome-anchor',\n_20\n        button: 'my-awesome-button',\n_20\n        //..\n"
      }
    }
  },
  {
    "chunk_id": "5515980a-9794-4157-98f2-a5168df25557",
    "metadata": {
      "token_count": 207,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "_17\n      },\n_17\n    }}\n_17\n/>\n_17\n)\n`\n\n### Custom labels [\\#](\\#custom-labels)\n\nYou can use custom labels with `localization.variables` like so:\n\n`\n_18\nimport { createClient } from '@supabase/supabase-js'\n_18\nimport { Auth } from '@supabase/auth-ui-react'\n_18\n_18\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_18\n_18\nconst App = () => (\n_18\n<Auth\n_18\n    supabaseClient={supabase}\n_18\n    localization={{\n_18\n      variables: {\n_18\n        sign_in: {\n_18\n          email_label: 'Your email address',\n_18\n          password_label: 'Your strong password',\n_18\n        },\n_18\n      },\n_18\n    }}\n_18\n/>\n_18\n)\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "39875bd3-a40b-4c5f-b0f8-c4607a6d82d9",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n_17\n    appearance={{\n_17\n      style: {\n_17\n        button: { background: 'red', color: 'white' },\n_17\n        anchor: { color: 'blue' },\n_17\n        //..\n"
      }
    }
  },
  {
    "chunk_id": "af62c84e-93e4-409a-921a-91ebe7986198",
    "metadata": {
      "token_count": 141,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "A full list of the available variables is below:\n\nSign UpSign InMagic LinkForgotten PasswordUpdate PasswordVerify OTP\n\n| Label Tag | Default Label |\n| --- | --- |\n| `email_label` | Email address |\n| `password_label` | Create a Password |\n| `email_input_placeholder` | Your email address |\n| `password_input_placeholder` | Your password |\n| `button_label` | Sign up |\n| `loading_button_label` | Signing up ... |\n| `social_provider_text` | Sign in with `{{provider}}` |\n| `link_text` | Don't have an account? Sign up |\n| `confirmation_text` | Check your email for the confirmation link |\n\n",
      "overlap_text": {
        "previous_chunk_id": "5515980a-9794-4157-98f2-a5168df25557",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n: {\n_18\n          email_label: 'Your email address',\n_18\n          password_label: 'Your strong password',\n_18\n        },\n_18\n      },\n_18\n    }}\n_18\n/>\n_18\n)\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "8918a63f-937a-4289-9ce3-514ac35465ed",
    "metadata": {
      "token_count": 157,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "Currently, translating error messages (e.g. \"Invalid credentials\") is not supported. Check [related issue.](https://github.com/supabase/auth-ui/issues/86)\n\n### Hiding links [\\#](\\#hiding-links)\n\nYou can hide links by setting the `showLinks` prop to `false`\n\n`\n_10\nimport { createClient } from '@supabase/supabase-js'\n_10\nimport { Auth } from '@supabase/auth-ui-react'\n_10\n_10\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_10\n_10\nconst App = () => <Auth supabaseClient={supabase} showLinks={false} />\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "af62c84e-93e4-409a-921a-91ebe7986198",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n | Signing up ... |\n| `social_provider_text` | Sign in with `{{provider}}` |\n| `link_text` | Don't have an account? Sign up |\n| `confirmation_text` | Check your email for the confirmation link |\n\n"
      }
    }
  },
  {
    "chunk_id": "25ddf85c-dd62-40d9-b0bf-dd8c5b39bfaa",
    "metadata": {
      "token_count": 116,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/auth-ui",
      "page_title": "Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth UI",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "Setting `showLinks` to `false` will hide the following links:\n\n- Don't have an account? Sign up\n- Already have an account? Sign in\n- Send a magic link email\n- Forgot your password?\n\n### Sign in and Sign up views [\\#](\\#sign-in-and-sign-up-views)\n\nAdd `sign_in` or `sign_up` views with the `view` prop:\n\n`\n_10\n<Auth\n_10\nsupabaseClient={supabase}\n_10\nview=\"sign_up\"\n_10\n/>\n`\n",
      "overlap_text": {
        "previous_chunk_id": "8918a63f-937a-4289-9ce3-514ac35465ed",
        "text": "Content of the previous chunk for context: h1: Auth UI h2: Customization [\\#](\\#customization)\n\n\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n_10\n_10\nconst App = () => <Auth supabaseClient={supabase} showLinks={false} />\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "239e0e9a-8617-474e-b994-76a070d302c6",
    "metadata": {
      "token_count": 105,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "Email logins using Magic Links or One-Time Passwords (OTPs)"
      },
      "text": "* * *\n\nSupabase Auth provides several passwordless login methods. Passwordless logins allow users to sign in without a password, by clicking a confirmation link or entering a verification code.\n\nPasswordless login can:\n\n- Improve the user experience by not requiring users to create and remember a password\n- Increase security by reducing the risk of password-related security breaches\n- Reduce support burden of dealing with password resets and other password-related flows\n\nSupabase Auth offers two passwordless login methods that use the user's email address:\n"
    }
  },
  {
    "chunk_id": "2e35f1de-6d09-4bcf-9d0c-48b1d4f4df55",
    "metadata": {
      "token_count": 21,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "Email logins using Magic Links or One-Time Passwords (OTPs)"
      },
      "text": "\n- [Magic Link](#with-magic-link)\n- [OTP](#with-otp)\n",
      "overlap_text": {
        "previous_chunk_id": "239e0e9a-8617-474e-b994-76a070d302c6",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: Email logins using Magic Links or One-Time Passwords (OTPs)\n\n remember a password\n- Increase security by reducing the risk of password-related security breaches\n- Reduce support burden of dealing with password resets and other password-related flows\n\nSupabase Auth offers two passwordless login methods that use the user's email address:\n"
      }
    }
  },
  {
    "chunk_id": "d8a2cc9a-2081-4e09-b797-68f7de138bfb",
    "metadata": {
      "token_count": 149,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With Magic Link [\\#](\\#with-magic-link)"
      },
      "text": "Magic Links are a form of passwordless login where users click on a link sent to their email address to log in to their accounts. Magic Links only work with email addresses and are one-time use only.\n\n### Enabling Magic Link [\\#](\\#enabling-magic-link)\n\nEmail authentication methods, including Magic Links, are enabled by default.\n\nConfigure the Site URL and any additional redirect URLs. These are the only URLs that are allowed as redirect destinations after the user clicks a Magic Link. You can change the URLs on the [Auth Providers page](/dashboard/project/_/auth/providers) for hosted projects, or in the [configuration file](/docs/guides/cli/config#auth.additional_redirect_urls) for self-hosted projects.\n",
      "overlap_text": {
        "previous_chunk_id": "2e35f1de-6d09-4bcf-9d0c-48b1d4f4df55",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: Email logins using Magic Links or One-Time Passwords (OTPs)\n\n\n- [Magic Link](#with-magic-link)\n- [OTP](#with-otp)\n"
      }
    }
  },
  {
    "chunk_id": "b944f346-0788-4635-9262-2c1d09ab44e6",
    "metadata": {
      "token_count": 124,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With Magic Link [\\#](\\#with-magic-link)"
      },
      "text": "\nBy default, a user can only request a magic link once every 60 seconds and they expire after 1 hour.\n\n### Signing in with Magic Link [\\#](\\#signing-in-with-magic-link)\n\nCall the \"sign in with OTP\" method from the client library.\n\nThough the method is labelled \"OTP\", it sends a Magic Link by default. The two methods differ only in the content of the confirmation email sent to the user.\n\nIf the user hasn't signed up yet, they are automatically signed up by default. To prevent this, set the `shouldCreateUser` option to `false`.\n",
      "overlap_text": {
        "previous_chunk_id": "d8a2cc9a-2081-4e09-b797-68f7de138bfb",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: With Magic Link [\\#](\\#with-magic-link)\n\n You can change the URLs on the [Auth Providers page](/dashboard/project/_/auth/providers) for hosted projects, or in the [configuration file](/docs/guides/cli/config#auth.additional_redirect_urls) for self-hosted projects.\n"
      }
    }
  },
  {
    "chunk_id": "52b65238-aabf-4be5-9e7b-7f0e035ea4f4",
    "metadata": {
      "token_count": 122,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With Magic Link [\\#](\\#with-magic-link)"
      },
      "text": "\nJavaScriptExpo React NativeDartSwiftKotlinPython\n\n`\n_10\nasync function signInWithEmail() {\n_10\nconst { data, error } = await supabase.auth.signInWithOtp({\n_10\n    email: 'example@email.com',\n_10\n    options: {\n_10\n      // set this to false if you do not want the user to be automatically signed up\n_10\n      shouldCreateUser: false,\n_10\n      emailRedirectTo: 'https://example.com/welcome',\n_10\n    },\n_10\n})\n_10\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "b944f346-0788-4635-9262-2c1d09ab44e6",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: With Magic Link [\\#](\\#with-magic-link)\n\n The two methods differ only in the content of the confirmation email sent to the user.\n\nIf the user hasn't signed up yet, they are automatically signed up by default. To prevent this, set the `shouldCreateUser` option to `false`.\n"
      }
    }
  },
  {
    "chunk_id": "b44ae266-4a80-4ebf-a52a-80a8aec8c8fc",
    "metadata": {
      "token_count": 107,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With Magic Link [\\#](\\#with-magic-link)"
      },
      "text": "That's it for the implicit flow.\n\nIf you're using PKCE flow, edit the Magic Link [email template](/docs/guides/auth/auth-email-templates) to send a token hash:\n\n`\n_10\n<h2>Magic Link</h2>\n_10\n_10\n<p>Follow this link to login:</p>\n_10\n<p><a href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=magiclink\">Log In</a></p>\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "52b65238-aabf-4be5-9e7b-7f0e035ea4f4",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: With Magic Link [\\#](\\#with-magic-link)\n\n do not want the user to be automatically signed up\n_10\n      shouldCreateUser: false,\n_10\n      emailRedirectTo: 'https://example.com/welcome',\n_10\n    },\n_10\n})\n_10\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "1c67480c-7c90-46fd-b1a8-56a131e3fe76",
    "metadata": {
      "token_count": 40,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With Magic Link [\\#](\\#with-magic-link)"
      },
      "text": "At the `/auth/confirm` endpoint, exchange the hash for the session:\n\n`\n_10\nconst { error } = await supabase.auth.verifyOtp({ token_hash, type })\n`\n",
      "overlap_text": {
        "previous_chunk_id": "b44ae266-4a80-4ebf-a52a-80a8aec8c8fc",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: With Magic Link [\\#](\\#with-magic-link)\n\n_10\n<p>Follow this link to login:</p>\n_10\n<p><a href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=magiclink\">Log In</a></p>\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "960bf6f5-a676-461d-9af5-c6b908990aa0",
    "metadata": {
      "token_count": 147,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With OTP [\\#](\\#with-otp)"
      },
      "text": "Email one-time passwords (OTP) are a form of passwordless login where users key in a six digit code sent to their email address to log in to their accounts.\n\n### Enabling Email OTP [\\#](\\#enabling-email-otp)\n\nEmail authentication methods, including Email OTPs, are enabled by default.\n\nEmail OTPs share an implementation with Magic Links. To send an OTP instead of a Magic Link, alter the **Magic Link** email template. For a hosted Supabase project, go to [Email Templates](/dashboard/project/_/auth/templates) in the Dashboard. For a self-hosted project or local development, see the [Email Templates guide](/docs/guides/auth/auth-email-templates).\n",
      "overlap_text": {
        "previous_chunk_id": "1c67480c-7c90-46fd-b1a8-56a131e3fe76",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: With Magic Link [\\#](\\#with-magic-link)\n\nAt the `/auth/confirm` endpoint, exchange the hash for the session:\n\n`\n_10\nconst { error } = await supabase.auth.verifyOtp({ token_hash, type })\n`\n"
      }
    }
  },
  {
    "chunk_id": "8a4bffba-b842-4451-8b3e-6a70ed78ec57",
    "metadata": {
      "token_count": 158,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With OTP [\\#](\\#with-otp)"
      },
      "text": "\nModify the template to include the `{{ .Token }}` variable, for example:\n\n`\n_10\n<h2>One time login code</h2>\n_10\n_10\n<p>Please enter this code: {{ .Token }}</p>\n`\n\nBy default, a user can only request an OTP once every 60 seconds and they expire after 1 hour. This is configurable via `Auth > Providers > Email > Email OTP Expiration`. An expiry duration of more than 86400 seconds (one day) is disallowed to guard against brute force attacks. The longer an OTP remains valid, the more time an attacker has to attempt brute force attacks. If the OTP is valid for several days, an attacker might have more opportunities to guess the correct OTP through repeated attempts.\n",
      "overlap_text": {
        "previous_chunk_id": "960bf6f5-a676-461d-9af5-c6b908990aa0",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: With OTP [\\#](\\#with-otp)\n\nabase project, go to [Email Templates](/dashboard/project/_/auth/templates) in the Dashboard. For a self-hosted project or local development, see the [Email Templates guide](/docs/guides/auth/auth-email-templates).\n"
      }
    }
  },
  {
    "chunk_id": "2d37b476-1105-4a3a-9bda-65fee073769f",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With OTP [\\#](\\#with-otp)"
      },
      "text": "\n### Signing in with Email OTP [\\#](\\#signing-in-with-email-otp)\n\n#### Step 1: Send the user an OTP code [\\#](\\#step-1-send-the-user-an-otp-code)\n\nGet the user's email and call the \"sign in with OTP\" method from your client library.\n\nIf the user hasn't signed up yet, they are automatically signed up by default. To prevent this, set the `shouldCreateUser` option to `false`.\n",
      "overlap_text": {
        "previous_chunk_id": "8a4bffba-b842-4451-8b3e-6a70ed78ec57",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: With OTP [\\#](\\#with-otp)\n\n to guard against brute force attacks. The longer an OTP remains valid, the more time an attacker has to attempt brute force attacks. If the OTP is valid for several days, an attacker might have more opportunities to guess the correct OTP through repeated attempts.\n"
      }
    }
  },
  {
    "chunk_id": "3c7253bc-5728-4f0f-a0c4-a0c8950ba7ce",
    "metadata": {
      "token_count": 131,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With OTP [\\#](\\#with-otp)"
      },
      "text": "\nJavaScriptDartSwiftKotlinPython\n\n`\n_10\nconst { data, error } = await supabase.auth.signInWithOtp({\n_10\nemail: 'example@email.com',\n_10\noptions: {\n_10\n    // set this to false if you do not want the user to be automatically signed up\n_10\n    shouldCreateUser: false,\n_10\n},\n_10\n})\n`\n\nIf the request is successful, you receive a response with `error: null` and a `data` object where both `user` and `session` are null. Let the user know to check their email inbox.\n",
      "overlap_text": {
        "previous_chunk_id": "2d37b476-1105-4a3a-9bda-65fee073769f",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: With OTP [\\#](\\#with-otp)\n\n's email and call the \"sign in with OTP\" method from your client library.\n\nIf the user hasn't signed up yet, they are automatically signed up by default. To prevent this, set the `shouldCreateUser` option to `false`.\n"
      }
    }
  },
  {
    "chunk_id": "51791fe4-6c2c-4d27-aed2-5ac64503fa9d",
    "metadata": {
      "token_count": 120,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With OTP [\\#](\\#with-otp)"
      },
      "text": "\n`\n_10\n{\n_10\n\"data\": {\n_10\n    \"user\": null,\n_10\n    \"session\": null\n_10\n},\n_10\n\"error\": null\n_10\n}\n`\n\n#### Step 2: Verify the OTP to create a session [\\#](\\#step-2-verify-the-otp-to-create-a-session)\n\nProvide an input field for the user to enter their one-time code.\n\nCall the \"verify OTP\" method from your client library with the user's email address, the code, and a type of `email`:\n",
      "overlap_text": {
        "previous_chunk_id": "3c7253bc-5728-4f0f-a0c4-a0c8950ba7ce",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: With OTP [\\#](\\#with-otp)\n\n},\n_10\n})\n`\n\nIf the request is successful, you receive a response with `error: null` and a `data` object where both `user` and `session` are null. Let the user know to check their email inbox.\n"
      }
    }
  },
  {
    "chunk_id": "931560bf-2fdf-4e07-802d-4da794addb94",
    "metadata": {
      "token_count": 400,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-passwordless",
      "page_title": "Passwordless email logins | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Passwordless email logins",
        "h2": "With OTP [\\#](\\#with-otp)"
      },
      "text": "\nJavaScriptSwiftKotlinPython\n\n`\n_10\nconst {\n_10\ndata: { session },\n_10\nerror,\n_10\n} = await supabase.auth.verifyOtp({\n_10\nemail,\n_10\ntoken: '123456',\n_10\ntype: 'email',\n_10\n})\n`\n\nIf successful, the user is now logged in, and you receive a valid session that looks like:\n\n`\n_10\n{\n_10\n\"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjI3MjkxNTc3LCJzdWIiOiJmYTA2NTQ1Zi1kYmI1LTQxY2EtYjk1NC1kOGUyOTg4YzcxOTEiLCJlbWFpbCI6IiIsInBob25lIjoiNjU4NzUyMjAyOSIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6InBob25lIn0sInVzZXJfbWV0YWRhdGEiOnt9LCJyb2xlIjoiYXV0aGVudGljYXRlZCJ9.1BqRi0NbS_yr1f6hnr4q3s1ylMR3c1vkiJ4e_N55dhM\",\n_10\n\"token_type\": \"bearer\",\n_10\n\"expires_in\": 3600,\n_10\n\"refresh_token\": \"LSp8LglPPvf0DxGMSj-vaQ\",\n_10\n\"user\": {...}\n_10\n}\n`\n",
      "overlap_text": {
        "previous_chunk_id": "51791fe4-6c2c-4d27-aed2-5ac64503fa9d",
        "text": "Content of the previous chunk for context: h1: Passwordless email logins h2: With OTP [\\#](\\#with-otp)\n\n-otp-to-create-a-session)\n\nProvide an input field for the user to enter their one-time code.\n\nCall the \"verify OTP\" method from your client library with the user's email address, the code, and a type of `email`:\n"
      }
    }
  },
  {
    "chunk_id": "8a4e3ad3-2cfd-4f63-8f43-b315eac02656",
    "metadata": {
      "token_count": 84,
      "source_url": "https://supabase.com/docs/guides/auth/signout",
      "page_title": "Signing out | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Signing out",
        "h2": "Signing out a user"
      },
      "text": "* * *\n\nSigning out a user works the same way no matter what method they used to sign in.\n\nCall the sign out method from the client library. It removes the active session and clears Auth data from the storage medium.\n\nJavaScriptDartSwiftKotlinPython\n\n`\n_10\nasync function signOut() {\n_10\nconst { error } = await supabase.auth.signOut()\n_10\n}\n`\n"
    }
  },
  {
    "chunk_id": "3f53bf4f-1114-4822-9639-f079d9bce0c8",
    "metadata": {
      "token_count": 101,
      "source_url": "https://supabase.com/docs/guides/auth/signout",
      "page_title": "Signing out | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Signing out",
        "h2": "Sign out and scopes [\\#](\\#sign-out-and-scopes)"
      },
      "text": "Supabase Auth allows you to specify three different scopes for when a user invokes the [sign out API](/docs/reference/javascript/auth-signout) in your application:\n\n- `global` (default) when all sessions active for the user are terminated.\n- `local` which only terminates the current session for the user but keep sessions on other devices or browsers active.\n- `others` to terminate all but the current session for the user.\n\nYou can invoke these by providing the `scope` option:\n",
      "overlap_text": {
        "previous_chunk_id": "8a4e3ad3-2cfd-4f63-8f43-b315eac02656",
        "text": "Content of the previous chunk for context: h1: Signing out h2: Signing out a user\n\n active session and clears Auth data from the storage medium.\n\nJavaScriptDartSwiftKotlinPython\n\n`\n_10\nasync function signOut() {\n_10\nconst { error } = await supabase.auth.signOut()\n_10\n}\n`\n"
      }
    }
  },
  {
    "chunk_id": "09339a05-ef80-4734-b7df-7528b9f38c9f",
    "metadata": {
      "token_count": 135,
      "source_url": "https://supabase.com/docs/guides/auth/signout",
      "page_title": "Signing out | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Signing out",
        "h2": "Sign out and scopes [\\#](\\#sign-out-and-scopes)"
      },
      "text": "\nJavaScriptDartKotlin\n\n`\n_10\n// defaults to the global scope\n_10\nawait supabase.auth.signOut()\n_10\n_10\n// sign out from the current session only\n_10\nawait supabase.auth.signOut({ scope: 'local' })\n`\n\nUpon sign out, all refresh tokens and potentially other database objects related to the affected sessions are destroyed and the client library removes the session stored in the local storage medium.\n\nAccess Tokens of revoked sessions remain valid until their expiry time, encoded in the `exp` claim. The user won't be immediately logged out and will only be logged out when the Access Token expires.\n",
      "overlap_text": {
        "previous_chunk_id": "3f53bf4f-1114-4822-9639-f079d9bce0c8",
        "text": "Content of the previous chunk for context: h1: Signing out h2: Sign out and scopes [\\#](\\#sign-out-and-scopes)\n\n- `local` which only terminates the current session for the user but keep sessions on other devices or browsers active.\n- `others` to terminate all but the current session for the user.\n\nYou can invoke these by providing the `scope` option:\n"
      }
    }
  },
  {
    "chunk_id": "3f67fe6b-7cf3-4043-89f0-55bcb17d7217",
    "metadata": {
      "token_count": 117,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/advanced-guide",
      "page_title": "Advanced guide | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Advanced guide",
        "h2": "Details about SSR Auth flows and implementation for advanced users."
      },
      "text": "* * *\n\nWhen a user authenticates with Supabase Auth, two pieces of information are issued by the server:\n\n1. **Access token** in the form of a JWT.\n2. **Refresh token** which is a randomly generated string.\n\nThe default behavior if you're not using SSR is to store this information in local storage. Local storage isn't accessible by the server, so for SSR, the tokens instead need to be stored in a secure cookie. The cookie can then be passed back and forth between your app code in the client and your app code in the server.\n"
    }
  },
  {
    "chunk_id": "cbe639b6-d3aa-4918-83d3-19b70dabaacc",
    "metadata": {
      "token_count": 141,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/advanced-guide",
      "page_title": "Advanced guide | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Advanced guide",
        "h2": "Details about SSR Auth flows and implementation for advanced users."
      },
      "text": "\nIf you're not using SSR, you might also be using the [implicit flow](/docs/guides/auth/sessions/implicit-flow) to get the access and refresh tokens. The server can't access the tokens in this flow, so for SSR, you should change to the [PKCE flow](/docs/guides/auth/sessions/pkce-flow). You can change the flow type when initiating your Supabase client if your client library provides this option.\n\nIn the `@supabase/ssr` package, Supabase clients are initiated to use the PKCE flow by default. They are also automatically configured to handle the saving and retrieval of session information in cookies.\n",
      "overlap_text": {
        "previous_chunk_id": "3f67fe6b-7cf3-4043-89f0-55bcb17d7217",
        "text": "Content of the previous chunk for context: h1: Advanced guide h2: Details about SSR Auth flows and implementation for advanced users.\n\n. Local storage isn't accessible by the server, so for SSR, the tokens instead need to be stored in a secure cookie. The cookie can then be passed back and forth between your app code in the client and your app code in the server.\n"
      }
    }
  },
  {
    "chunk_id": "583ff721-bcf3-44b6-b9a9-7236a8f9d519",
    "metadata": {
      "token_count": 122,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/advanced-guide",
      "page_title": "Advanced guide | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Advanced guide",
        "h2": "How it works [\\#](\\#how-it-works)"
      },
      "text": "In the PKCE flow, a redirect is made to your app, with an Auth Code contained in the URL. When you exchange this code using `exchangeCodeForSession`, you receive the session information, which contains the access and refresh tokens.\n\nTo maintain the session, these tokens must be stored in a storage medium securely shared between client and server, which is traditionally cookies. Whenever the session is refreshed, the auth and refresh tokens in the shared storage medium must be updated. Supabase client libraries provide a customizable `storage` option when a client is initiated, allowing you to change where tokens are stored.\n",
      "overlap_text": {
        "previous_chunk_id": "cbe639b6-d3aa-4918-83d3-19b70dabaacc",
        "text": "Content of the previous chunk for context: h1: Advanced guide h2: Details about SSR Auth flows and implementation for advanced users.\n\n client library provides this option.\n\nIn the `@supabase/ssr` package, Supabase clients are initiated to use the PKCE flow by default. They are also automatically configured to handle the saving and retrieval of session information in cookies.\n"
      }
    }
  },
  {
    "chunk_id": "8e1c9a77-2f40-49a0-80ee-c432fef364b0",
    "metadata": {
      "token_count": 37,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/advanced-guide",
      "page_title": "Advanced guide | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Advanced guide",
        "h2": "How it works [\\#](\\#how-it-works)"
      },
      "text": "\nFor an implementation example, see the [@supabase/ssr](https://github.com/supabase/auth-helpers/blob/main/packages/ssr/src/index.ts) package.\n",
      "overlap_text": {
        "previous_chunk_id": "583ff721-bcf3-44b6-b9a9-7236a8f9d519",
        "text": "Content of the previous chunk for context: h1: Advanced guide h2: How it works [\\#](\\#how-it-works)\n\n traditionally cookies. Whenever the session is refreshed, the auth and refresh tokens in the shared storage medium must be updated. Supabase client libraries provide a customizable `storage` option when a client is initiated, allowing you to change where tokens are stored.\n"
      }
    }
  },
  {
    "chunk_id": "945d51eb-a61c-4901-95da-e42d5331fdde",
    "metadata": {
      "token_count": 161,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/advanced-guide",
      "page_title": "Advanced guide | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Advanced guide",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "### No session on the server side with Next.js route prefetching? [\\#](\\#no-session-on-the-server-side-with-nextjs-route-prefetching)\n\nWhen you use route prefetching in Next.js using `<Link href=\"/...\">` components or the `Router.push()` APIs can send server-side requests before the browser processes the access and refresh tokens. This means that those requests may not have any cookies set and your server code will render unauthenticated content.\n\nTo improve experience for your users, we recommend redirecting users to one specific page after sign-in that does not include any route prefetching from Next.js. Once the Supabase client library running in the browser has obtained the access and refresh tokens from the URL fragment, you can send users to any pages that use prefetching.\n",
      "overlap_text": {
        "previous_chunk_id": "8e1c9a77-2f40-49a0-80ee-c432fef364b0",
        "text": "Content of the previous chunk for context: h1: Advanced guide h2: How it works [\\#](\\#how-it-works)\n\n\nFor an implementation example, see the [@supabase/ssr](https://github.com/supabase/auth-helpers/blob/main/packages/ssr/src/index.ts) package.\n"
      }
    }
  },
  {
    "chunk_id": "0cf1f364-c28d-42b7-abfe-064c99cad989",
    "metadata": {
      "token_count": 111,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/advanced-guide",
      "page_title": "Advanced guide | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Advanced guide",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\n### How do I make the cookies `HttpOnly`? [\\#](\\#how-do-i-make-the-cookies-httponly-)\n\nThis is not necessary. Both the access token and refresh token are designed to be passed around to different components in your application. The browser-based side of your application needs access to the refresh token to properly maintain a browser session anyway.\n\n### My server is getting invalid refresh token errors. What's going on? [\\#](\\#my-server-is-getting-invalid-refresh-token-errors-whats-going-on)\n\n",
      "overlap_text": {
        "previous_chunk_id": "945d51eb-a61c-4901-95da-e42d5331fdde",
        "text": "Content of the previous chunk for context: h1: Advanced guide h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n after sign-in that does not include any route prefetching from Next.js. Once the Supabase client library running in the browser has obtained the access and refresh tokens from the URL fragment, you can send users to any pages that use prefetching.\n"
      }
    }
  },
  {
    "chunk_id": "9c1b43dd-6649-445f-b467-51e9e2c617cb",
    "metadata": {
      "token_count": 116,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/advanced-guide",
      "page_title": "Advanced guide | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Advanced guide",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "It is likely that the refresh token sent from the browser to your server is stale. Make sure the `onAuthStateChange` listener callback is free of bugs and is registered relatively early in your application's lifetime\n\nWhen you receive this error on the server-side, try to defer rendering to the browser where the client library can access an up-to-date refresh token and present the user with a better experience.\n\n### Should I set a shorter `Max-Age` parameter on the cookies? [\\#](\\#should-i-set-a-shorter-max-age-parameter-on-the-cookies)\n\n",
      "overlap_text": {
        "previous_chunk_id": "0cf1f364-c28d-42b7-abfe-064c99cad989",
        "text": "Content of the previous chunk for context: h1: Advanced guide h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n your application needs access to the refresh token to properly maintain a browser session anyway.\n\n### My server is getting invalid refresh token errors. What's going on? [\\#](\\#my-server-is-getting-invalid-refresh-token-errors-whats-going-on)\n\n"
      }
    }
  },
  {
    "chunk_id": "45634184-fcf4-4c89-97cc-dc05c8163a97",
    "metadata": {
      "token_count": 123,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/advanced-guide",
      "page_title": "Advanced guide | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Advanced guide",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "The `Max-Age` or `Expires` cookie parameters only control whether the browser sends the value to the server. Since a refresh token represents the long-lived authentication session of the user on that browser, setting a short `Max-Age` or `Expires` parameter on the cookies only results in a degraded user experience.\n\nThe only way to ensure that a user has logged out or their session has ended is to get the user's details with `getUser()`.\n\n### What should I use for the `SameSite` property? [\\#](\\#what-should-i-use-for-the-samesite-property)\n\n",
      "overlap_text": {
        "previous_chunk_id": "9c1b43dd-6649-445f-b467-51e9e2c617cb",
        "text": "Content of the previous chunk for context: h1: Advanced guide h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n an up-to-date refresh token and present the user with a better experience.\n\n### Should I set a shorter `Max-Age` parameter on the cookies? [\\#](\\#should-i-set-a-shorter-max-age-parameter-on-the-cookies)\n\n"
      }
    }
  },
  {
    "chunk_id": "8e20e30c-bd64-49e0-b282-dcbf2f9ced95",
    "metadata": {
      "token_count": 126,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/advanced-guide",
      "page_title": "Advanced guide | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Advanced guide",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "Make sure you [understand the behavior of the property in different situations](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite) as some properties can degrade the user experience.\n\nA good default is to use `Lax` which sends cookies when users are navigating to your site. Cookies typically require the `Secure` attribute, which only sends them over HTTPS. However, this can be a problem when developing on `localhost`.\n\n### Can I use server-side rendering with a CDN or cache? [\\#](\\#can-i-use-server-side-rendering-with-a-cdn-or-cache)\n\n",
      "overlap_text": {
        "previous_chunk_id": "45634184-fcf4-4c89-97cc-dc05c8163a97",
        "text": "Content of the previous chunk for context: h1: Advanced guide h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n has logged out or their session has ended is to get the user's details with `getUser()`.\n\n### What should I use for the `SameSite` property? [\\#](\\#what-should-i-use-for-the-samesite-property)\n\n"
      }
    }
  },
  {
    "chunk_id": "9e4c98d8-1a84-4b5e-a948-17bac0dc02fa",
    "metadata": {
      "token_count": 177,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/advanced-guide",
      "page_title": "Advanced guide | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Advanced guide",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "Yes, but you need to be careful to include at least the refresh token cookie value in the cache key. Otherwise you may be accidentally serving pages with data belonging to different users!\n\nAlso be sure you set proper cache control headers. We recommend invalidating cache keys every hour or less.\n\n### Which authentication flows have PKCE support? [\\#](\\#which-authentication-flows-have-pkce-support)\n\nAt present, PKCE is supported on the Magic Link, OAuth, Sign Up, and Password Recovery routes. These correspond to the `signInWithOtp`, `signInWithOAuth`, `signUp`, and `resetPasswordForEmail` methods on the Supabase client library. When using PKCE with Phone and Email OTPs, there is no behavior change with respect to the implicit flow - an access token will be returned in the body when a request is successful.\n",
      "overlap_text": {
        "previous_chunk_id": "8e20e30c-bd64-49e0-b282-dcbf2f9ced95",
        "text": "Content of the previous chunk for context: h1: Advanced guide h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n sends them over HTTPS. However, this can be a problem when developing on `localhost`.\n\n### Can I use server-side rendering with a CDN or cache? [\\#](\\#can-i-use-server-side-rendering-with-a-cdn-or-cache)\n\n"
      }
    }
  },
  {
    "chunk_id": "77a7a614-a51a-4d69-b733-6a8333eaa922",
    "metadata": {
      "token_count": 69,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "Allow users to sign in with a password connected to their email or phone number."
      },
      "text": "* * *\n\nUsers often expect to sign in to your site with a password. Supabase Auth helps you implement password-based auth safely, using secure configuration options and best practices for storing and verifying passwords.\n\nUsers can associate a password with their identity using their [email address](#with-email) or a [phone number](#with-phone).\n"
    }
  },
  {
    "chunk_id": "d79b1023-d4bd-4097-ae64-7365e0d82251",
    "metadata": {
      "token_count": 121,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With email [\\#](\\#with-email)"
      },
      "text": "### Enabling email and password-based authentication [\\#](\\#enabling-email-and-password-based-authentication)\n\nEmail authentication is enabled by default.\n\nYou can configure whether users need to verify their email to sign in. On hosted Supabase projects, this is true by default. On self-hosted projects or in local development, this is false by default.\n\nChange this setting on the [Auth Providers page](/dashboard/project/_/auth/providers) for hosted projects, or in the [configuration file](/docs/guides/cli/config#auth.email.enable_confirmations) for self-hosted projects.\n",
      "overlap_text": {
        "previous_chunk_id": "77a7a614-a51a-4d69-b733-6a8333eaa922",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: Allow users to sign in with a password connected to their email or phone number.\n\n Auth helps you implement password-based auth safely, using secure configuration options and best practices for storing and verifying passwords.\n\nUsers can associate a password with their identity using their [email address](#with-email) or a [phone number](#with-phone).\n"
      }
    }
  },
  {
    "chunk_id": "dd1bff38-9833-4abe-baba-d7c73cbb047f",
    "metadata": {
      "token_count": 120,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With email [\\#](\\#with-email)"
      },
      "text": "\n### Signing up with an email and password [\\#](\\#signing-up-with-an-email-and-password)\n\nThere are two possible flows for email signup: [implicit flow](/docs/guides/auth/sessions#implicit-flow) and [PKCE flow](/docs/guides/auth/sessions#pkce-flow). If you're using SSR, you're using the PKCE flow. If you're using client-only code, the default flow depends upon the client library. The implicit flow is the default in JavaScript and Dart, and the PKCE flow is the default in Swift.\n",
      "overlap_text": {
        "previous_chunk_id": "d79b1023-d4bd-4097-ae64-7365e0d82251",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With email [\\#](\\#with-email)\n\n.\n\nChange this setting on the [Auth Providers page](/dashboard/project/_/auth/providers) for hosted projects, or in the [configuration file](/docs/guides/cli/config#auth.email.enable_confirmations) for self-hosted projects.\n"
      }
    }
  },
  {
    "chunk_id": "758c3b8b-8452-460b-9318-d803a107a15b",
    "metadata": {
      "token_count": 167,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With email [\\#](\\#with-email)"
      },
      "text": "\nThe instructions in this section assume that email confirmations are enabled.\n\nImplicit flowPKCE flow\n\nThe implicit flow only works for client-only apps. Your site directly receives the access token after the user confirms their email.\n\nJavaScriptDartSwiftKotlinPython\n\nTo sign up the user, call [signUp()](/docs/reference/javascript/auth-signup) with their email address and password.\n\nYou can optionally specify a URL to redirect to after the user clicks the confirmation link. This URL must be configured as a [Redirect URL](/docs/guides/auth/redirect-urls), which you can do in the [dashboard](/dashboard/project/_/auth/url-configuration) for hosted projects, or in the [configuration file](/docs/guides/cli/config#auth.additional_redirect_urls) for self-hosted projects.\n",
      "overlap_text": {
        "previous_chunk_id": "dd1bff38-9833-4abe-baba-d7c73cbb047f",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With email [\\#](\\#with-email)\n\n using SSR, you're using the PKCE flow. If you're using client-only code, the default flow depends upon the client library. The implicit flow is the default in JavaScript and Dart, and the PKCE flow is the default in Swift.\n"
      }
    }
  },
  {
    "chunk_id": "3a945f55-40c7-45ad-ba7d-fe3340e2ba9c",
    "metadata": {
      "token_count": 122,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With email [\\#](\\#with-email)"
      },
      "text": "\nIf you don't specify a redirect URL, the user is automatically redirected to your site URL. This defaults to `localhost:3000`, but you can also configure this.\n\n`\n_10\nasync function signUpNewUser() {\n_10\nconst { data, error } = await supabase.auth.signUp({\n_10\n    email: 'example@email.com',\n_10\n    password: 'example-password',\n_10\n    options: {\n_10\n      emailRedirectTo: 'https://example.com/welcome',\n_10\n    },\n_10\n})\n_10\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "758c3b8b-8452-460b-9318-d803a107a15b",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With email [\\#](\\#with-email)\n\n), which you can do in the [dashboard](/dashboard/project/_/auth/url-configuration) for hosted projects, or in the [configuration file](/docs/guides/cli/config#auth.additional_redirect_urls) for self-hosted projects.\n"
      }
    }
  },
  {
    "chunk_id": "20e470ce-3320-47e9-a348-f4e5dde89067",
    "metadata": {
      "token_count": 119,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With email [\\#](\\#with-email)"
      },
      "text": "### Signing in with an email and password [\\#](\\#signing-in-with-an-email-and-password)\n\nJavaScriptDartSwiftKotlinPython\n\nWhen your user signs in, call [signInWithPassword()](/docs/reference/javascript/auth-signinwithpassword) with their email address and password:\n\n`\n_10\nasync function signInWithEmail() {\n_10\nconst { data, error } = await supabase.auth.signInWithPassword({\n_10\n    email: 'example@email.com',\n_10\n    password: 'example-password',\n_10\n})\n_10\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "3a945f55-40c7-45ad-ba7d-fe3340e2ba9c",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With email [\\#](\\#with-email)\n\nexample@email.com',\n_10\n    password: 'example-password',\n_10\n    options: {\n_10\n      emailRedirectTo: 'https://example.com/welcome',\n_10\n    },\n_10\n})\n_10\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "21b5842b-12f3-4803-a47f-4887cdf19cdd",
    "metadata": {
      "token_count": 115,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With email [\\#](\\#with-email)"
      },
      "text": "### Resetting a password [\\#](\\#resetting-a-password)\n\nImplicit flowPKCE flow\n\n#### Step 1: Create a reset password page [\\#](\\#step-1-create-a-reset-password-page)\n\nCreate a **reset password** page. This page should be publicly accessible.\n\nCollect the user's email address and request a password reset email. Specify the redirect URL, which should point to the URL of a **change password** page. This URL needs to be configured in your [redirect URLs](/docs/guides/auth/redirect-urls).\n",
      "overlap_text": {
        "previous_chunk_id": "20e470ce-3320-47e9-a348-f4e5dde89067",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With email [\\#](\\#with-email)\n\n {\n_10\nconst { data, error } = await supabase.auth.signInWithPassword({\n_10\n    email: 'example@email.com',\n_10\n    password: 'example-password',\n_10\n})\n_10\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "56041704-851e-4116-b811-055386d627a8",
    "metadata": {
      "token_count": 113,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With email [\\#](\\#with-email)"
      },
      "text": "\nJavaScriptSwiftKotlinPython\n\n`\n_10\nawait supabase.auth.resetPasswordForEmail('hello@example.com', {\n_10\nredirectTo: 'http://example.com/account/update-password',\n_10\n})\n`\n\n#### Step 2: Create a change password page [\\#](\\#step-2-create-a-change-password-page)\n\nCreate a **change password** page at the URL you specified in the previous step. This page should be accessible only to authenticated users.\n\nCollect the user's new password and call `updateUser` to update their password.\n",
      "overlap_text": {
        "previous_chunk_id": "21b5842b-12f3-4803-a47f-4887cdf19cdd",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With email [\\#](\\#with-email)\n\n address and request a password reset email. Specify the redirect URL, which should point to the URL of a **change password** page. This URL needs to be configured in your [redirect URLs](/docs/guides/auth/redirect-urls).\n"
      }
    }
  },
  {
    "chunk_id": "dce8d1f3-0dcc-404d-9e9e-f677f85608fd",
    "metadata": {
      "token_count": 107,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With email [\\#](\\#with-email)"
      },
      "text": "\nJavaScriptSwiftKotlinPython\n\n`\n_10\nawait supabase.auth.updateUser({ password: new_password })\n`\n\n### Email sending [\\#](\\#email-sending)\n\nThe signup confirmation and password reset flows require an SMTP server to send emails.\n\nThe Supabase platform comes with a default email-sending service for you to try out. The service has a rate limit of 2 emails per hour, and availability is on a best-effort basis. For production use, you should consider configuring a custom SMTP server.\n",
      "overlap_text": {
        "previous_chunk_id": "56041704-851e-4116-b811-055386d627a8",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With email [\\#](\\#with-email)\n\n-create-a-change-password-page)\n\nCreate a **change password** page at the URL you specified in the previous step. This page should be accessible only to authenticated users.\n\nCollect the user's new password and call `updateUser` to update their password.\n"
      }
    }
  },
  {
    "chunk_id": "2fc81920-b2ad-4fbc-b2d5-8932abad0737",
    "metadata": {
      "token_count": 117,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With email [\\#](\\#with-email)"
      },
      "text": "\nConsider configuring a custom SMTP server for production.\n\nSee the [Custom SMTP guide](/docs/guides/auth/auth-smtp) for instructions.\n\n#### Local development with Inbucket [\\#](\\#local-development-with-inbucket)\n\nYou can test email flows on your local machine. The Supabase CLI automatically captures emails sent locally by using [Inbucket](https://github.com/inbucket/inbucket).\n\nIn your terminal, run `supabase status` to get the Inbucket URL. Go to this URL in your browser, and follow the instructions to find your emails.\n",
      "overlap_text": {
        "previous_chunk_id": "dce8d1f3-0dcc-404d-9e9e-f677f85608fd",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With email [\\#](\\#with-email)\n\n comes with a default email-sending service for you to try out. The service has a rate limit of 2 emails per hour, and availability is on a best-effort basis. For production use, you should consider configuring a custom SMTP server.\n"
      }
    }
  },
  {
    "chunk_id": "29b5b9ef-881b-4db4-a5fe-8cefa73b4bf5",
    "metadata": {
      "token_count": 115,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With phone [\\#](\\#with-phone)"
      },
      "text": "You can use a user's mobile phone number as an identifier, instead of an email address, when they sign up with a password.\n\nThis practice is usually discouraged because phone networks recycle mobile phone numbers. Anyone receiving a recycled phone number gets access to the original user's account. To mitigate this risk, [implement MFA](/docs/guides/auth/auth-mfa).\n\nProtect users who use a phone number as a password-based auth identifier by enabling MFA.\n\n### Enabling phone and password-based authentication [\\#](\\#enabling-phone-and-password-based-authentication)\n\n",
      "overlap_text": {
        "previous_chunk_id": "2fc81920-b2ad-4fbc-b2d5-8932abad0737",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With email [\\#](\\#with-email)\n\n by using [Inbucket](https://github.com/inbucket/inbucket).\n\nIn your terminal, run `supabase status` to get the Inbucket URL. Go to this URL in your browser, and follow the instructions to find your emails.\n"
      }
    }
  },
  {
    "chunk_id": "3bfae609-e83f-41f3-b457-aba2cd7422e8",
    "metadata": {
      "token_count": 111,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With phone [\\#](\\#with-phone)"
      },
      "text": "Enable phone authentication on the [Auth Providers page](/dashboard/project/_/auth/providers) for hosted Supabase projects.\n\nFor self-hosted projects or local development, use the [configuration file](/docs/guides/cli/config#auth.sms.enable_signup). See the configuration variables namespaced under `auth.sms`.\n\nIf you want users to confirm their phone number on signup, you need to set up an SMS provider. Each provider has its own configuration. Supported providers include MessageBird, Twilio, Vonage, and TextLocal (community-supported).\n",
      "overlap_text": {
        "previous_chunk_id": "29b5b9ef-881b-4db4-a5fe-8cefa73b4bf5",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With phone [\\#](\\#with-phone)\n\n/docs/guides/auth/auth-mfa).\n\nProtect users who use a phone number as a password-based auth identifier by enabling MFA.\n\n### Enabling phone and password-based authentication [\\#](\\#enabling-phone-and-password-based-authentication)\n\n"
      }
    }
  },
  {
    "chunk_id": "ded15446-c0ab-43b3-bb41-2c1927796907",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With phone [\\#](\\#with-phone)"
      },
      "text": "\n### Configuring SMS Providers\n\n![MessageBird Icon](https://supabase.com/docs/img/icons/messagebird-icon.svg)\n\n##### MessageBird\n\n![Twilio Icon](https://supabase.com/docs/img/icons/twilio-icon.svg)\n\n##### Twilio\n\n![Vonage Icon](https://supabase.com/docs/img/icons/vonage-icon-light.svg)\n\n##### Vonage\n\n![Textlocal (Community Supported) Icon](https://supabase.com/docs/guides/auth/Community%20Supported)\n\n",
      "overlap_text": {
        "previous_chunk_id": "3bfae609-e83f-41f3-b457-aba2cd7422e8",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With phone [\\#](\\#with-phone)\n\nauth.sms`.\n\nIf you want users to confirm their phone number on signup, you need to set up an SMS provider. Each provider has its own configuration. Supported providers include MessageBird, Twilio, Vonage, and TextLocal (community-supported).\n"
      }
    }
  },
  {
    "chunk_id": "3b68cd78-12a1-41a1-8b92-296aea695d38",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With phone [\\#](\\#with-phone)"
      },
      "text": "##### Textlocal (Community Supported)\n\n### Signing up with a phone number and password [\\#](\\#signing-up-with-a-phone-number-and-password)\n\nTo sign up the user, call [`signUp()`](/docs/reference/javascript/auth-signup) with their phone number and password:\n\nJavaScriptSwiftKotlinPythonHTTP\n\n`\n_10\nconst { data, error } = await supabase.auth.signUp({\n_10\nphone: '+13334445555',\n_10\npassword: 'some-password',\n_10\n})\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "ded15446-c0ab-43b3-bb41-2c1927796907",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With phone [\\#](\\#with-phone)\n\nonage Icon](https://supabase.com/docs/img/icons/vonage-icon-light.svg)\n\n##### Vonage\n\n![Textlocal (Community Supported) Icon](https://supabase.com/docs/guides/auth/Community%20Supported)\n\n"
      }
    }
  },
  {
    "chunk_id": "85a84dbf-a449-421e-a7e7-7d39c3aa036a",
    "metadata": {
      "token_count": 134,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With phone [\\#](\\#with-phone)"
      },
      "text": "If you have phone verification turned on, the user receives an SMS with a 6-digit pin that you must verify within 60 seconds:\n\nJavaScriptSwiftKotlinPythonHTTP\n\nYou should present a form to the user so they can input the 6 digit pin, then send it along with the phone number to `verifyOtp`:\n\n`\n_10\nconst {\n_10\ndata: { session },\n_10\nerror,\n_10\n} = await supabase.auth.verifyOtp({\n_10\nphone: '+13334445555',\n_10\ntoken: '123456',\n_10\ntype: 'sms',\n_10\n})\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "3b68cd78-12a1-41a1-8b92-296aea695d38",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With phone [\\#](\\#with-phone)\n\nSwiftKotlinPythonHTTP\n\n`\n_10\nconst { data, error } = await supabase.auth.signUp({\n_10\nphone: '+13334445555',\n_10\npassword: 'some-password',\n_10\n})\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "d29b30e6-0033-43a6-b8a8-b33fe99266d6",
    "metadata": {
      "token_count": 93,
      "source_url": "https://supabase.com/docs/guides/auth/passwords",
      "page_title": "Password-based Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password-based Auth",
        "h2": "With phone [\\#](\\#with-phone)"
      },
      "text": "### Signing in a with a phone number and password [\\#](\\#signing-in-a-with-a-phone-number-and-password)\n\nCall the function to sign in with the user's phone number and password:\n\nJavaScriptSwiftKotlinPythonHTTP\n\n`\n_10\nconst { user, error } = await supabase.auth.signInWithPassword({\n_10\nphone: '+13334445555',\n_10\npassword: 'some-password',\n_10\n})\n`\n",
      "overlap_text": {
        "previous_chunk_id": "85a84dbf-a449-421e-a7e7-7d39c3aa036a",
        "text": "Content of the previous chunk for context: h1: Password-based Auth h2: With phone [\\#](\\#with-phone)\n\n\nerror,\n_10\n} = await supabase.auth.verifyOtp({\n_10\nphone: '+13334445555',\n_10\ntoken: '123456',\n_10\ntype: 'sms',\n_10\n})\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "28b23c70-5535-4492-8dd1-15ae9428edcd",
    "metadata": {
      "token_count": 81,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/nextjs-pages",
      "page_title": "Supabase Auth with Next.js Pages Directory | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Supabase Auth with Next.js Pages Directory"
      },
      "text": "* * *\n\nThe `auth-helpers` package has been replaced with the `@supabase/ssr` package. We recommend setting up Auth for your Next.js app with `@supabase/ssr` instead. See the [Next.js Server-Side Auth guide](/docs/guides/auth/server-side/nextjs?router=pages) to learn how.\n\nSee legacy docs\n"
    }
  },
  {
    "chunk_id": "89a486ce-7f54-4a26-8dde-93ab1c439726",
    "metadata": {
      "token_count": 3,
      "source_url": "https://supabase.com/docs/guides/auth/redirect-urls",
      "page_title": "Redirect URLs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Redirect URLs",
        "h2": "Set up redirect urls with Supabase Auth."
      },
      "text": "* * *\n"
    }
  },
  {
    "chunk_id": "13424b1f-43b0-4355-b3e2-b9a3d89819be",
    "metadata": {
      "token_count": 144,
      "source_url": "https://supabase.com/docs/guides/auth/redirect-urls",
      "page_title": "Redirect URLs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Redirect URLs",
        "h2": "Overview [\\#](\\#overview)"
      },
      "text": "When using [passwordless sign-ins](/docs/reference/javascript/auth-signinwithotp) or [third-party providers](/docs/reference/javascript/auth-signinwithoauth#sign-in-using-a-third-party-provider-with-redirect), the Supabase client library methods provide a `redirectTo` parameter to specify where to redirect the user to after authentication. By default, the user will be redirected to the [`SITE_URL`](/docs/guides/auth/redirect-urls) but you can modify the `SITE_URL` or add additional redirect URLs to the allow list. Once you've added necessary URLs to the allow list, you can specify the URL you want the user to be redirected to in the `redirectTo` parameter.\n",
      "overlap_text": {
        "previous_chunk_id": "89a486ce-7f54-4a26-8dde-93ab1c439726",
        "text": "Content of the previous chunk for context: h1: Redirect URLs h2: Set up redirect urls with Supabase Auth.\n\n* * *\n"
      }
    }
  },
  {
    "chunk_id": "da47f62c-a526-48e2-a299-200554b3e37e",
    "metadata": {
      "token_count": 54,
      "source_url": "https://supabase.com/docs/guides/auth/redirect-urls",
      "page_title": "Redirect URLs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Redirect URLs",
        "h2": "Overview [\\#](\\#overview)"
      },
      "text": "\nTo edit the allow list, go to the [URL Configuration](/dashboard/project/_/auth/url-configuration) page. In local development or self-hosted projects, use the [configuration file](/docs/guides/cli/config#auth.additional_redirect_urls).\n",
      "overlap_text": {
        "previous_chunk_id": "13424b1f-43b0-4355-b3e2-b9a3d89819be",
        "text": "Content of the previous chunk for context: h1: Redirect URLs h2: Overview [\\#](\\#overview)\n\n but you can modify the `SITE_URL` or add additional redirect URLs to the allow list. Once you've added necessary URLs to the allow list, you can specify the URL you want the user to be redirected to in the `redirectTo` parameter.\n"
      }
    }
  },
  {
    "chunk_id": "969179de-50b9-4d9c-9e03-0d3e5b8562da",
    "metadata": {
      "token_count": 645,
      "source_url": "https://supabase.com/docs/guides/auth/redirect-urls",
      "page_title": "Redirect URLs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Redirect URLs",
        "h2": "Use wildcards in redirect URLs [\\#](\\#use-wildcards-in-redirect-urls)"
      },
      "text": "Supabase allows you to specify wildcards when adding redirect URLs to the [allow list](https://supabase.com/dashboard/project/_/auth/url-configuration). You can use wildcard match patterns to support preview URLs from providers like Netlify and Vercel.\n\n| Wildcard | Description |\n| --- | --- |\n| `*` | matches any sequence of non-separator characters |\n| `**` | matches any sequence of characters |\n| `?` | matches any single non-separator character |\n| `c` | matches character c (c != `*`, `**`, `?`, `\\`, `[`, `{`, `}`) |\\\n| `\\c` | matches character c |\\\n| `[!{ character-range }]` | matches any sequence of characters not in the `{ character-range }`. For example, `[!a-z]` will not match any characters ranging from a-z. |\\\n\\\nThe separator characters in a URL are defined as `.` and `/`. Use [this tool](https://www.digitalocean.com/community/tools/glob?comments=true&glob=http%3A%2F%2Flocalhost%3A3000%2F%2A%2A&matches=false&tests=http%3A%2F%2Flocalhost%3A3000&tests=http%3A%2F%2Flocalhost%3A3000%2F&tests=http%3A%2F%2Flocalhost%3A3000%2F%3Ftest%3Dtest&tests=http%3A%2F%2Flocalhost%3A3000%2Ftest-test%3Ftest%3Dtest&tests=http%3A%2F%2Flocalhost%3A3000%2Ftest%2Ftest%3Ftest%3Dtest) to test your patterns.\\\n\\\n##### Recommendation\\\n\\\nWhile the \"globstar\" ( `**`) is useful for local development and preview URLs, we recommend setting the exact redirect URL path for your site URL in production.\\\n\\\n### Redirect URL examples with wildcards [\\#](\\#redirect-url-examples-with-wildcards)\\\n\\\n| Redirect URL | Description |\\\n| --- | --- |\\\n| `http://localhost:3000/*` | matches `http://localhost:3000/foo`, `http://localhost:3000/bar` but not `http://localhost:3000/foo/bar` or `http://localhost:3000/foo/` (note the trailing slash) |\\\n| `http://localhost:3000/**` | matches `http://localhost:3000/foo`, `http://localhost:3000/bar` and `http://localhost:3000/foo/bar` |\\\n| `http://localhost:3000/?` | matches `http://localhost:3000/a` but not `http://localhost:3000/foo` |\\\n| `http://localhost:3000/[!a-z]` | matches `http://localhost:3000/1` but not `http://localhost:3000/a` |\\\n\\\n",
      "overlap_text": {
        "previous_chunk_id": "da47f62c-a526-48e2-a299-200554b3e37e",
        "text": "Content of the previous chunk for context: h1: Redirect URLs h2: Overview [\\#](\\#overview)\n\n allow list, go to the [URL Configuration](/dashboard/project/_/auth/url-configuration) page. In local development or self-hosted projects, use the [configuration file](/docs/guides/cli/config#auth.additional_redirect_urls).\n"
      }
    }
  },
  {
    "chunk_id": "811f658b-67a6-4f77-9966-6b93b125d247",
    "metadata": {
      "token_count": 60,
      "source_url": "https://supabase.com/docs/guides/auth/redirect-urls",
      "page_title": "Redirect URLs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Redirect URLs",
        "h2": "Netlify preview URLs [\\#](\\#netlify-preview-urls)\\"
      },
      "text": "\\\nFor deployments with Netlify, set the `SITE_URL` to your official site URL. Add the following additional redirect URLs for local development and deployment previews:\\\n\\\n- `http://localhost:3000/**`\\\n- `https://**--my_org.netlify.app/**`\\\n\\\n",
      "overlap_text": {
        "previous_chunk_id": "969179de-50b9-4d9c-9e03-0d3e5b8562da",
        "text": "Content of the previous chunk for context: h1: Redirect URLs h2: Use wildcards in redirect URLs [\\#](\\#use-wildcards-in-redirect-urls)\n\nhttp://localhost:3000/foo` |\\\n| `http://localhost:3000/[!a-z]` | matches `http://localhost:3000/1` but not `http://localhost:3000/a` |\\\n\\\n"
      }
    }
  },
  {
    "chunk_id": "ebbdc0a1-16e8-43ef-ae9f-aba957c7cd83",
    "metadata": {
      "token_count": 380,
      "source_url": "https://supabase.com/docs/guides/auth/redirect-urls",
      "page_title": "Redirect URLs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Redirect URLs",
        "h2": "Vercel preview URLs [\\#](\\#vercel-preview-urls)\\"
      },
      "text": "\\\nFor deployments with Vercel, set the `SITE_URL` to your official site URL. Add the following additional redirect URLs for local development and deployment previews:\\\n\\\n- `http://localhost:3000/**`\\\n- `https://*-username.vercel.app/**`\\\n\\\nVercel provides an environment variable for the URL of the deployment called `NEXT_PUBLIC_VERCEL_URL`. See the [Vercel docs](https://vercel.com/docs/concepts/projects/environment-variables#system-environment-variables) for more details. You can use this variable to dynamically redirect depending on the environment. You should also set the value of the environment variable called NEXT\\_PUBLIC\\_SITE\\_URL, this should be set to your site URL in production environment to ensure that redirects function correctly.\\\n\\\n``\\\n_18\\\nconst getURL = () => {\\\n_18\\\nlet url =\\\n_18\\\n    process?.env?.NEXT_PUBLIC_SITE_URL ?? // Set this to your site URL in production env.\\\n_18\\\n    process?.env?.NEXT_PUBLIC_VERCEL_URL ?? // Automatically set by Vercel.\\\n_18\\\n    'http://localhost:3000/'\\\n_18\\\n// Make sure to include `https://` when not localhost.\\\n_18\\\nurl = url.startsWith('http') ? url : `https://${url}`\\\n_18\\\n// Make sure to include a trailing `/`.\\\n_18\\\nurl = url.endsWith('/') ? url : `${url}/`\\\n_18\\\nreturn url\\\n_18\\\n}\\\n_18\\\n_18\\\nconst { data, error } = await supabase.auth.signInWithOAuth({\\\n_18\\\nprovider: 'github',\\\n_18\\\noptions: {\\\n_18\\\n    redirectTo: getURL(),\\\n_18\\\n},\\\n_18\\\n})\\\n``\\\n\\\n",
      "overlap_text": {
        "previous_chunk_id": "811f658b-67a6-4f77-9966-6b93b125d247",
        "text": "Content of the previous chunk for context: h1: Redirect URLs h2: Netlify preview URLs [\\#](\\#netlify-preview-urls)\\\n\nSITE_URL` to your official site URL. Add the following additional redirect URLs for local development and deployment previews:\\\n\\\n- `http://localhost:3000/**`\\\n- `https://**--my_org.netlify.app/**`\\\n\\\n"
      }
    }
  },
  {
    "chunk_id": "2c9a3255-30e4-4310-96b1-6ae92ae9eafd",
    "metadata": {
      "token_count": 162,
      "source_url": "https://supabase.com/docs/guides/auth/redirect-urls",
      "page_title": "Redirect URLs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Redirect URLs",
        "h2": "Email templates when using `redirectTo` [\\#](\\#email-templates-when-using-redirectto)\\"
      },
      "text": "\\\nWhen using a `redirectTo` option, you may need to replace the `{{ .SiteURL }}` with `{{ .RedirectTo }}` in your email templates. See the [Email Templates guide](/docs/guides/auth/auth-email-templates) for more information.\\\n\\\nFor example, change the following:\\\n\\\n`\\\n_10\\\n<!-- Old -->\\\n_10\\\n<a href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=signup\">Confirm your mail</a>\\\n_10\\\n_10\\\n<!-- New -->\\\n_10\\\n<a href=\"{{ .RedirectTo }}/auth/confirm?token_hash={{ .TokenHash }}&type=signup\"\\\n_10\\\n>Confirm your mail</a\\\n_10\\\n>\\\n`\\\n\\\n",
      "overlap_text": {
        "previous_chunk_id": "ebbdc0a1-16e8-43ef-ae9f-aba957c7cd83",
        "text": "Content of the previous chunk for context: h1: Redirect URLs h2: Vercel preview URLs [\\#](\\#vercel-preview-urls)\\\n\n } = await supabase.auth.signInWithOAuth({\\\n_18\\\nprovider: 'github',\\\n_18\\\noptions: {\\\n_18\\\n    redirectTo: getURL(),\\\n_18\\\n},\\\n_18\\\n})\\\n``\\\n\\\n"
      }
    }
  },
  {
    "chunk_id": "7b292bcb-d2e1-444b-995a-193bb65f12d3",
    "metadata": {
      "token_count": 92,
      "source_url": "https://supabase.com/docs/guides/auth/redirect-urls",
      "page_title": "Redirect URLs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Redirect URLs",
        "h2": "Mobile deep linking URIs [\\#](\\#mobile-deep-linking-uris)\\"
      },
      "text": "\\\nFor mobile applications you can use deep linking URIs. For example, for your `SITE_URL` you can specify something like `com.supabase://login-callback/` and for additional redirect URLs something like `com.supabase.staging://login-callback/` if needed.\\\n\\\nRead more about deep linking and find code examples for different frameworks [here](/docs/guides/auth/native-mobile-deep-linking).\\\n\\\n",
      "overlap_text": {
        "previous_chunk_id": "2c9a3255-30e4-4310-96b1-6ae92ae9eafd",
        "text": "Content of the previous chunk for context: h1: Redirect URLs h2: Email templates when using `redirectTo` [\\#](\\#email-templates-when-using-redirectto)\\\n\n_10\\\n<!-- New -->\\\n_10\\\n<a href=\"{{ .RedirectTo }}/auth/confirm?token_hash={{ .TokenHash }}&type=signup\"\\\n_10\\\n>Confirm your mail</a\\\n_10\\\n>\\\n`\\\n\\\n"
      }
    }
  },
  {
    "chunk_id": "782b19a0-1773-466b-95f2-8628c8b3733c",
    "metadata": {
      "token_count": 123,
      "source_url": "https://supabase.com/docs/guides/auth/redirect-urls",
      "page_title": "Redirect URLs | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Redirect URLs",
        "h2": "Error Handling [\\#](\\#error-handling)\\"
      },
      "text": "\\\nWhen authentication fails, the user will still be redirected to the redirect URL provided. However, the error details will be returned as query fragments in the URL. You can parse these query fragments and show a custom error message to the user. For example:\\\n\\\n`\\\n_10\\\nconst params = new URLSearchParams(window.location.hash.slice())\\\n_10\\\n_10\\\nif (params.get('error_code').startsWith('4')) {\\\n_10\\\n// show error message if error is a 4xx error\\\n_10\\\nwindow.alert(params.get('error_description'))\\\n_10\\\n}\\\n`\n",
      "overlap_text": {
        "previous_chunk_id": "7b292bcb-d2e1-444b-995a-193bb65f12d3",
        "text": "Content of the previous chunk for context: h1: Redirect URLs h2: Mobile deep linking URIs [\\#](\\#mobile-deep-linking-uris)\\\n\n something like `com.supabase.staging://login-callback/` if needed.\\\n\\\nRead more about deep linking and find code examples for different frameworks [here](/docs/guides/auth/native-mobile-deep-linking).\\\n\\\n"
      }
    }
  },
  {
    "chunk_id": "fe34f94d-af7c-4f51-a443-02ca639bd264",
    "metadata": {
      "token_count": 3,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)"
      },
      "text": "* * *\n"
    }
  },
  {
    "chunk_id": "822a0b1c-05b9-4a82-a1a5-553238cea391",
    "metadata": {
      "token_count": 175,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "App Authenticator (TOTP) multi-factor authentication involves a timed one-time password generated from an authenticator app in the control of users. It uses a QR Code which to transmit a shared secret used to generate a One Time Password. A user can scan a QR code with their phone to capture a shared secret required for subsequent authentication.\n\nThe use of a QR code was [initially introduced by Google Authenticator](https://github.com/google/google-authenticator/wiki/Key-Uri-Format) but is now universally accepted by all authenticator apps. The QR code has an alternate representation in URI form following the `otpauth` scheme such as: `otpauth://totp/supabase:alice@supabase.com?secret=<secret>&issuer=supabase` which a user can manually input in cases where there is difficulty rendering a QR Code.\n",
      "overlap_text": {
        "previous_chunk_id": "fe34f94d-af7c-4f51-a443-02ca639bd264",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP)\n\n* * *\n"
      }
    }
  },
  {
    "chunk_id": "29c1ede6-0c46-4a3b-82f9-76be44c32669",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "\nBelow is a flow chart illustrating how the Enrollment, Challenge, and Verify APIs work in the context of MFA (TOTP).\n\n[TOTP MFA API](/docs/reference/javascript/auth-mfa-api) is free to use and is enabled on all Supabase projects by default.\n\n### Add enrollment flow [\\#](\\#add-enrollment-flow)\n\nAn enrollment flow provides a UI for users to set up additional authentication factors. Most applications add the enrollment flow in two places within their app:\n",
      "overlap_text": {
        "previous_chunk_id": "822a0b1c-05b9-4a82-a1a5-553238cea391",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n` scheme such as: `otpauth://totp/supabase:alice@supabase.com?secret=<secret>&issuer=supabase` which a user can manually input in cases where there is difficulty rendering a QR Code.\n"
      }
    }
  },
  {
    "chunk_id": "391e0f13-bb80-400e-beda-5d8eebef6094",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "\n1. Right after login or sign up.\nThis lets users quickly set up MFA immediately after they log in or create an\naccount. We recommend encouraging all users to set up MFA if that makes sense\nfor your application. Many applications offer this as an opt-in step in an\neffort to reduce onboarding friction.\n2. From within a settings page.\nAllows users to set up, disable or modify their MFA settings.\n\nEnrolling a factor for use with MFA takes three steps:\n",
      "overlap_text": {
        "previous_chunk_id": "29c1ede6-0c46-4a3b-82f9-76be44c32669",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n all Supabase projects by default.\n\n### Add enrollment flow [\\#](\\#add-enrollment-flow)\n\nAn enrollment flow provides a UI for users to set up additional authentication factors. Most applications add the enrollment flow in two places within their app:\n"
      }
    }
  },
  {
    "chunk_id": "add39204-8831-429c-a853-58ed532a41e6",
    "metadata": {
      "token_count": 129,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "\n1. Call `supabase.auth.mfa.enroll()`.\nThis method returns a QR code and a secret. Display the QR\ncode to the user and ask them to scan it with their authenticator application.\nIf they are unable to scan the QR code, show the secret in plain text which\nthey can type or paste into their authenticator app.\n2. Calling the `supabase.auth.mfa.challenge()` API.\nThis prepares Supabase Auth to accept a verification code from the user\nand returns a challenge ID. In the case of Phone MFA this step also sends the verification code to the user.\n",
      "overlap_text": {
        "previous_chunk_id": "391e0f13-bb80-400e-beda-5d8eebef6094",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n an opt-in step in an\neffort to reduce onboarding friction.\n2. From within a settings page.\nAllows users to set up, disable or modify their MFA settings.\n\nEnrolling a factor for use with MFA takes three steps:\n"
      }
    }
  },
  {
    "chunk_id": "d5c29f0a-6500-487b-90a5-cd13156915b6",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "3. Calling the `supabase.auth.mfa.verify()` API.\nThis verifies that the user has indeed added the secret from step (1) into\ntheir app and is working correctly. If the verification succeeds, the factor\nimmediately becomes active for the user account. If not, you should repeat\nsteps 2 and 3.\n\n#### Example: React [\\#](\\#example-react)\n\nBelow is an example that creates a new `EnrollMFA` component that illustrates the important pieces of the MFA enrollment flow.\n",
      "overlap_text": {
        "previous_chunk_id": "add39204-8831-429c-a853-58ed532a41e6",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\nsupabase.auth.mfa.challenge()` API.\nThis prepares Supabase Auth to accept a verification code from the user\nand returns a challenge ID. In the case of Phone MFA this step also sends the verification code to the user.\n"
      }
    }
  },
  {
    "chunk_id": "3eae9cf5-7af3-43e0-b0b9-e25abd00f596",
    "metadata": {
      "token_count": 112,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "\n- When the component appears on screen, the `supabase.auth.mfa.enroll()` API is\ncalled once to start the process of enrolling a new factor for the current\nuser.\n- This API returns a QR code in the SVG format, which is shown on screen using\na normal `<img>` tag by encoding the SVG as a data URL.\n- Once the user has scanned the QR code with their authenticator app, they\nshould enter the verification code within the `verifyCode` input field and\nclick on `Enable`.\n",
      "overlap_text": {
        "previous_chunk_id": "d5c29f0a-6500-487b-90a5-cd13156915b6",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n you should repeat\nsteps 2 and 3.\n\n#### Example: React [\\#](\\#example-react)\n\nBelow is an example that creates a new `EnrollMFA` component that illustrates the important pieces of the MFA enrollment flow.\n"
      }
    }
  },
  {
    "chunk_id": "2f2e7f24-4a50-4687-9c1d-5576e89004c7",
    "metadata": {
      "token_count": 838,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "- A challenge is created using the `supabase.auth.mfa.challenge()` API and the\ncode from the user is submitted for verification using the\n`supabase.auth.mfa.verify()` challenge.\n- `onEnabled` is a callback that notifies the other components that enrollment\nhas completed.\n- `onCancelled` is a callback that notifies the other components that the user\nhas clicked the `Cancel` button.\n\n``\n_76\n/**\n_76\n* EnrollMFA shows a simple enrollment dialog. When shown on screen it calls\n_76\n* the `enroll` API. Each time a user clicks the Enable button it calls the\n_76\n* `challenge` and `verify` APIs to check if the code provided by the user is\n_76\n* valid.\n_76\n* When enrollment is successful, it calls `onEnrolled`. When the user clicks\n_76\n* Cancel the `onCancelled` callback is called.\n_76\n*/\n_76\nexport function EnrollMFA({\n_76\nonEnrolled,\n_76\nonCancelled,\n_76\n}: {\n_76\nonEnrolled: () => void\n_76\nonCancelled: () => void\n_76\n}) {\n_76\nconst [factorId, setFactorId] = useState('')\n_76\nconst [qr, setQR] = useState('') // holds the QR code image SVG\n_76\nconst [verifyCode, setVerifyCode] = useState('') // contains the code entered by the user\n_76\nconst [error, setError] = useState('') // holds an error message\n_76\n_76\nconst onEnableClicked = () => {\n_76\n    setError('')\n_76\n    ;(async () => {\n_76\n      const challenge = await supabase.auth.mfa.challenge({ factorId })\n_76\n      if (challenge.error) {\n_76\n        setError(challenge.error.message)\n_76\n        throw challenge.error\n_76\n      }\n_76\n_76\n      const challengeId = challenge.data.id\n_76\n_76\n      const verify = await supabase.auth.mfa.verify({\n_76\n        factorId,\n_76\n        challengeId,\n_76\n        code: verifyCode,\n_76\n      })\n_76\n      if (verify.error) {\n_76\n        setError(verify.error.message)\n_76\n        throw verify.error\n_76\n      }\n_76\n_76\n      onEnrolled()\n_76\n    })()\n_76\n}\n_76\n_76\nuseEffect(() => {\n_76\n    ;(async () => {\n_76\n      const { data, error } = await supabase.auth.mfa.enroll({\n_76\n        factorType: 'totp',\n_76\n      })\n_76\n      if (error) {\n_76\n        throw error\n_76\n      }\n_76\n_76\n      setFactorId(data.id)\n_76\n_76\n      // Supabase Auth returns an SVG QR code which you can convert into a data\n_76\n      // URL that you can place in an <img> tag.\n_76\n      setQR(data.totp.qr_code)\n_76\n    })()\n_76\n}, [])\n_76\n_76\nreturn (\n_76\n    <>\n_76\n      {error && <div className=\"error\">{error}</div>}\n_76\n      <img src={qr} />\n_76\n      <input\n_76\n        type=\"text\"\n_76\n        value={verifyCode}\n_76\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n_76\n      />\n_76\n      <input type=\"button\" value=\"Enable\" onClick={onEnableClicked} />\n_76\n      <input type=\"button\" value=\"Cancel\" onClick={onCancelled} />\n_76\n    </>\n_76\n)\n_76\n}\n",
      "overlap_text": {
        "previous_chunk_id": "3eae9cf5-7af3-43e0-b0b9-e25abd00f596",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n `<img>` tag by encoding the SVG as a data URL.\n- Once the user has scanned the QR code with their authenticator app, they\nshould enter the verification code within the `verifyCode` input field and\nclick on `Enable`.\n"
      }
    }
  },
  {
    "chunk_id": "eda19a60-4510-4eff-ba5e-99d0c82611a1",
    "metadata": {
      "token_count": 120,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "``\n\n### Add a challenge step to login [\\#](\\#add-a-challenge-step-to-login)\n\nOnce a user has logged in via their first factor (email+password, magic link, one time password, social login etc.) you need to perform a check if any additional factors need to be verified.\n\nThis can be done by using the `supabase.auth.mfa.getAuthenticatorAssuranceLevel()` API. When the user signs in and is redirected back to your app, you should call this method to extract the user's current and next authenticator assurance level (AAL).\n",
      "overlap_text": {
        "previous_chunk_id": "2f2e7f24-4a50-4687-9c1d-5576e89004c7",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n <input type=\"button\" value=\"Enable\" onClick={onEnableClicked} />\n_76\n      <input type=\"button\" value=\"Cancel\" onClick={onCancelled} />\n_76\n    </>\n_76\n)\n_76\n}\n"
      }
    }
  },
  {
    "chunk_id": "c47a0c41-53c3-4c0c-8c22-d0d7f601ee8f",
    "metadata": {
      "token_count": 159,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "\nTherefore if you receive a `currentLevel` which is `aal1` but a `nextLevel` of `aal2`, the user should be given the option to go through MFA.\n\nBelow is a table that explains the combined meaning.\n\n| Current Level | Next Level | Meaning |\n| --: | :-- | :-- |\n| `aal1` | `aal1` | User does not have MFA enrolled. |\n| `aal1` | `aal2` | User has an MFA factor enrolled but has not verified it. |\n| `aal2` | `aal2` | User has verified their MFA factor. |\n| `aal2` | `aal1` | User has disabled their MFA factor. (Stale JWT.) |\n\n",
      "overlap_text": {
        "previous_chunk_id": "eda19a60-4510-4eff-ba5e-99d0c82611a1",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n `supabase.auth.mfa.getAuthenticatorAssuranceLevel()` API. When the user signs in and is redirected back to your app, you should call this method to extract the user's current and next authenticator assurance level (AAL).\n"
      }
    }
  },
  {
    "chunk_id": "a983210e-34ed-4169-8884-4c6a653ba395",
    "metadata": {
      "token_count": 370,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "#### Example: React [\\#](\\#example-react)\n\nAdding the challenge step to login depends heavily on the architecture of your app. However, a fairly common way to structure React apps is to have a large component (often named `App`) which contains most of the authenticated application logic.\n\nThis example will wrap this component with logic that will show an MFA challenge screen if necessary, before showing the full application. This is illustrated in the `AppWithMFA` example below.\n\n`\n_33\nfunction AppWithMFA() {\n_33\nconst [readyToShow, setReadyToShow] = useState(false)\n_33\nconst [showMFAScreen, setShowMFAScreen] = useState(false)\n_33\n_33\nuseEffect(() => {\n_33\n    ;(async () => {\n_33\n      try {\n_33\n        const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()\n_33\n        if (error) {\n_33\n          throw error\n_33\n        }\n_33\n_33\n        console.log(data)\n_33\n_33\n        if (data.nextLevel === 'aal2' && data.nextLevel !== data.currentLevel) {\n_33\n          setShowMFAScreen(true)\n_33\n        }\n_33\n      } finally {\n_33\n        setReadyToShow(true)\n_33\n      }\n_33\n    })()\n_33\n}, [])\n_33\n_33\nif (readyToShow) {\n_33\n    if (showMFAScreen) {\n_33\n      return <AuthMFA />\n_33\n    }\n_33\n_33\n    return <App />\n_33\n}\n_33\n_33\nreturn <></>\n_33\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "c47a0c41-53c3-4c0c-8c22-d0d7f601ee8f",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n not verified it. |\n| `aal2` | `aal2` | User has verified their MFA factor. |\n| `aal2` | `aal1` | User has disabled their MFA factor. (Stale JWT.) |\n\n"
      }
    }
  },
  {
    "chunk_id": "c9ae81ee-5116-4530-a3bf-848511346f14",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "- `supabase.auth.mfa.getAuthenticatorAssuranceLevel()` does return a promise.\nDon't worry, this is a very fast method (microseconds) as it rarely uses the\nnetwork.\n- `readyToShow` only makes sure the AAL check completes before showing any\napplication UI to the user.\n- If the current level can be upgraded to the next one, the MFA screen is\nshown.\n- Once the challenge is successful, the `App` component is finally rendered on\n",
      "overlap_text": {
        "previous_chunk_id": "a983210e-34ed-4169-8884-4c6a653ba395",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\nMFAScreen) {\n_33\n      return <AuthMFA />\n_33\n    }\n_33\n_33\n    return <App />\n_33\n}\n_33\n_33\nreturn <></>\n_33\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "ff776509-cc43-4667-913c-edfbef2139d2",
    "metadata": {
      "token_count": 480,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "screen.\n\nBelow is the component that implements the challenge and verify logic.\n\n`\n_53\nfunction AuthMFA() {\n_53\nconst [verifyCode, setVerifyCode] = useState('')\n_53\nconst [error, setError] = useState('')\n_53\n_53\nconst onSubmitClicked = () => {\n_53\n    setError('')\n_53\n    ;(async () => {\n_53\n      const factors = await supabase.auth.mfa.listFactors()\n_53\n      if (factors.error) {\n_53\n        throw factors.error\n_53\n      }\n_53\n_53\n      const totpFactor = factors.data.totp[0]\n_53\n_53\n      if (!totpFactor) {\n_53\n        throw new Error('No TOTP factors found!')\n_53\n      }\n_53\n_53\n      const factorId = totpFactor.id\n_53\n_53\n      const challenge = await supabase.auth.mfa.challenge({ factorId })\n_53\n      if (challenge.error) {\n_53\n        setError(challenge.error.message)\n_53\n        throw challenge.error\n_53\n      }\n_53\n_53\n      const challengeId = challenge.data.id\n_53\n_53\n      const verify = await supabase.auth.mfa.verify({\n_53\n        factorId,\n_53\n        challengeId,\n_53\n        code: verifyCode,\n_53\n      })\n_53\n      if (verify.error) {\n_53\n        setError(verify.error.message)\n_53\n        throw verify.error\n_53\n      }\n_53\n    })()\n_53\n}\n_53\n_53\nreturn (\n_53\n    <>\n_53\n      <div>Please enter the code from your authenticator app.</div>\n_53\n      {error && <div className=\"error\">{error}</div>}\n_53\n      <input\n_53\n        type=\"text\"\n_53\n        value={verifyCode}\n_53\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n_53\n      />\n_53\n      <input type=\"button\" value=\"Submit\" onClick={onSubmitClicked} />\n_53\n    </>\n_53\n)\n_53\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "c9ae81ee-5116-4530-a3bf-848511346f14",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n check completes before showing any\napplication UI to the user.\n- If the current level can be upgraded to the next one, the MFA screen is\nshown.\n- Once the challenge is successful, the `App` component is finally rendered on\n"
      }
    }
  },
  {
    "chunk_id": "58d12c93-1cd8-4805-b65a-d662f7e2c11d",
    "metadata": {
      "token_count": 125,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "- You can extract the available MFA factors for the user by calling\n`supabase.auth.mfa.listFactors()`. Don't worry this method is also very quick\nand rarely uses the network.\n- If `listFactors()` returns more than one factor (or of a different type) you\nshould present the user with a choice. For simplicity this is not shown in\nthe example.\n- Each time the user presses the \"Submit\" button a new challenge is created for\nthe chosen factor (in this case the first one) and it is immediately\nverified. Any errors are displayed to the user.\n",
      "overlap_text": {
        "previous_chunk_id": "ff776509-cc43-4667-913c-edfbef2139d2",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n => setVerifyCode(e.target.value.trim())}\n_53\n      />\n_53\n      <input type=\"button\" value=\"Submit\" onClick={onSubmitClicked} />\n_53\n    </>\n_53\n)\n_53\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "b6827403-dae4-4367-8e68-c5344bf153c4",
    "metadata": {
      "token_count": 40,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)"
      },
      "text": "- On successful verification, the client library will refresh the session in\nthe background automatically and finally call the `onSuccess` callback, which\nwill show the authenticated `App` component on screen.\n",
      "overlap_text": {
        "previous_chunk_id": "58d12c93-1cd8-4805-b65a-d662f7e2c11d",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n shown in\nthe example.\n- Each time the user presses the \"Submit\" button a new challenge is created for\nthe chosen factor (in this case the first one) and it is immediately\nverified. Any errors are displayed to the user.\n"
      }
    }
  },
  {
    "chunk_id": "25395d72-33a3-497b-bdb1-753a00c118c0",
    "metadata": {
      "token_count": 17,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/totp",
      "page_title": "Multi-Factor Authentication (TOTP) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (TOTP)",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "What's inside the QR code?\n\nHow long is the TOTP code valid for?\n",
      "overlap_text": {
        "previous_chunk_id": "b6827403-dae4-4367-8e68-c5344bf153c4",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (TOTP) h2: How does app authenticator multi-factor authentication work? [\\#](\\#how-does-app-authenticator-multi-factor-authentication-work)\n\n- On successful verification, the client library will refresh the session in\nthe background automatically and finally call the `onSuccess` callback, which\nwill show the authenticated `App` component on screen.\n"
      }
    }
  },
  {
    "chunk_id": "74db0b36-f582-4985-9dee-d99216e92f6c",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/react-native",
      "page_title": "Use Supabase Auth with React Native | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with React Native",
        "h2": "Learn how to use Supabase Auth with React Native"
      },
      "text": "* * *\n\n1\n\n### Create a new Supabase project\n\n[Launch a new project](https://supabase.com/dashboard) in the Supabase Dashboard.\n\nYour new database has a table for storing your users. You can see that this table is currently empty by running some SQL in the [SQL Editor](https://supabase.com/dashboard/project/_/sql).\n\nSQL\\_EDITOR\n\n`\n_10\nselect * from auth.users;\n`\n\n2\n\n### Create a React app\n\n"
    }
  },
  {
    "chunk_id": "2ba15ed0-88fb-4388-a33a-8191143a2d3e",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/react-native",
      "page_title": "Use Supabase Auth with React Native | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with React Native",
        "h2": "Learn how to use Supabase Auth with React Native"
      },
      "text": "Create a React app using the `create-expo-app` command.\n\nTerminal\n\n`\n_10\nnpx create-expo-app -t expo-template-blank-typescript my-app\n`\n\n3\n\n### Install the Supabase client library\n\nInstall `supabase-js` and the required dependencies.\n\nTerminal\n\n`\n_10\ncd my-app && npx expo install @supabase/supabase-js @react-native-async-storage/async-storage @rneui/themed react-native-url-polyfill\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "74db0b36-f582-4985-9dee-d99216e92f6c",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with React Native h2: Learn how to use Supabase Auth with React Native\n\n this table is currently empty by running some SQL in the [SQL Editor](https://supabase.com/dashboard/project/_/sql).\n\nSQL\\_EDITOR\n\n`\n_10\nselect * from auth.users;\n`\n\n2\n\n### Create a React app\n\n"
      }
    }
  },
  {
    "chunk_id": "09b58f65-30ac-4e95-85b3-f04ad84ac376",
    "metadata": {
      "token_count": 401,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/react-native",
      "page_title": "Use Supabase Auth with React Native | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with React Native",
        "h2": "Learn how to use Supabase Auth with React Native"
      },
      "text": "4\n\n### Set up your login component\n\nCreate a helper file `lib/supabase.ts` that exports a Supabase client using your [Project URL and public API (anon) key](https://supabase.com/dashboard/project/_/settings/api).\n\nlib/supabase.ts\n\n``\n_29\nimport { AppState } from 'react-native'\n_29\nimport 'react-native-url-polyfill/auto'\n_29\nimport AsyncStorage from '@react-native-async-storage/async-storage'\n_29\nimport { createClient } from '@supabase/supabase-js'\n_29\n_29\nconst supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL\n_29\nconst supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY\n_29\n_29\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n_29\nauth: {\n_29\n    storage: AsyncStorage,\n_29\n    autoRefreshToken: true,\n_29\n    persistSession: true,\n_29\n    detectSessionInUrl: false,\n_29\n},\n_29\n})\n_29\n_29\n// Tells Supabase Auth to continuously refresh the session automatically\n_29\n// if the app is in the foreground. When this is added, you will continue\n_29\n// to receive `onAuthStateChange` events with the `TOKEN_REFRESHED` or\n_29\n// `SIGNED_OUT` event if the user's session is terminated. This should\n_29\n// only be registered once.\n_29\nAppState.addEventListener('change', (state) => {\n_29\nif (state === 'active') {\n_29\n    supabase.auth.startAutoRefresh()\n_29\n} else {\n_29\n    supabase.auth.stopAutoRefresh()\n_29\n}\n_29\n})\n``\n\n",
      "overlap_text": {
        "previous_chunk_id": "2ba15ed0-88fb-4388-a33a-8191143a2d3e",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with React Native h2: Learn how to use Supabase Auth with React Native\n\n and the required dependencies.\n\nTerminal\n\n`\n_10\ncd my-app && npx expo install @supabase/supabase-js @react-native-async-storage/async-storage @rneui/themed react-native-url-polyfill\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "2ee8f70b-51da-4e56-b608-6660468f3d76",
    "metadata": {
      "token_count": 792,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/react-native",
      "page_title": "Use Supabase Auth with React Native | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with React Native",
        "h2": "Learn how to use Supabase Auth with React Native"
      },
      "text": "5\n\n### Create a login component\n\nLet's set up a React Native component to manage logins and sign ups.\n\ncomponents/Auth.tsx\n\n`\n_83\nimport React, { useState } from 'react'\n_83\nimport { Alert, StyleSheet, View } from 'react-native'\n_83\nimport { supabase } from '../lib/supabase'\n_83\nimport { Button, Input } from '@rneui/themed'\n_83\n_83\nexport default function Auth() {\n_83\nconst [email, setEmail] = useState('')\n_83\nconst [password, setPassword] = useState('')\n_83\nconst [loading, setLoading] = useState(false)\n_83\n_83\nasync function signInWithEmail() {\n_83\n    setLoading(true)\n_83\n    const { error } = await supabase.auth.signInWithPassword({\n_83\n      email: email,\n_83\n      password: password,\n_83\n    })\n_83\n_83\n    if (error) Alert.alert(error.message)\n_83\n    setLoading(false)\n_83\n}\n_83\n_83\nasync function signUpWithEmail() {\n_83\n    setLoading(true)\n_83\n    const {\n_83\n      data: { session },\n_83\n      error,\n_83\n    } = await supabase.auth.signUp({\n_83\n      email: email,\n_83\n      password: password,\n_83\n    })\n_83\n_83\n    if (error) Alert.alert(error.message)\n_83\n    if (!session) Alert.alert('Please check your inbox for email verification!')\n_83\n    setLoading(false)\n_83\n}\n_83\n_83\nreturn (\n_83\n    <View style={styles.container}>\n_83\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n_83\n        <Input\n_83\n          label=\"Email\"\n_83\n          leftIcon={{ type: 'font-awesome', name: 'envelope' }}\n_83\n          onChangeText={(text) => setEmail(text)}\n_83\n          value={email}\n_83\n          placeholder=\"email@address.com\"\n_83\n          autoCapitalize={'none'}\n_83\n        />\n_83\n      </View>\n_83\n      <View style={styles.verticallySpaced}>\n_83\n        <Input\n_83\n          label=\"Password\"\n_83\n          leftIcon={{ type: 'font-awesome', name: 'lock' }}\n_83\n          onChangeText={(text) => setPassword(text)}\n_83\n          value={password}\n_83\n          secureTextEntry={true}\n_83\n          placeholder=\"Password\"\n_83\n          autoCapitalize={'none'}\n_83\n        />\n_83\n      </View>\n_83\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n_83\n        <Button title=\"Sign in\" disabled={loading} onPress={() => signInWithEmail()} />\n_83\n      </View>\n_83\n      <View style={styles.verticallySpaced}>\n_83\n        <Button title=\"Sign up\" disabled={loading} onPress={() => signUpWithEmail()} />\n_83\n      </View>\n_83\n    </View>\n_83\n)\n_83\n}\n_83\n_83\nconst styles = StyleSheet.create({\n_83\ncontainer: {\n_83\n    marginTop: 40,\n_83\n    padding: 12,\n_83\n},\n_83\nverticallySpaced: {\n_83\n    paddingTop: 4,\n_83\n    paddingBottom: 4,\n_83\n    alignSelf: 'stretch',\n_83\n},\n_83\nmt20: {\n_83\n    marginTop: 20,\n_83\n},\n_83\n})\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "09b58f65-30ac-4e95-85b3-f04ad84ac376",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with React Native h2: Learn how to use Supabase Auth with React Native\n\n29\nif (state === 'active') {\n_29\n    supabase.auth.startAutoRefresh()\n_29\n} else {\n_29\n    supabase.auth.stopAutoRefresh()\n_29\n}\n_29\n})\n``\n\n"
      }
    }
  },
  {
    "chunk_id": "abf3ae86-e2a7-49af-8dce-4f9e8df90cc1",
    "metadata": {
      "token_count": 314,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/react-native",
      "page_title": "Use Supabase Auth with React Native | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with React Native",
        "h2": "Learn how to use Supabase Auth with React Native"
      },
      "text": "6\n\n### Add the Auth component to your app\n\nAdd the `Auth` component to your `App.tsx` file. If the user is logged in, print the user id to the screen.\n\nApp.tsx\n\n`\n_28\nimport 'react-native-url-polyfill/auto'\n_28\nimport { useState, useEffect } from 'react'\n_28\nimport { supabase } from './lib/supabase'\n_28\nimport Auth from './components/Auth'\n_28\nimport Account from './components/Account'\n_28\nimport { View, Text } from 'react-native'\n_28\nimport { Session } from '@supabase/supabase-js'\n_28\n_28\nexport default function App() {\n_28\nconst [session, setSession] = useState<Session | null>(null)\n_28\n_28\nuseEffect(() => {\n_28\n    supabase.auth.getSession().then(({ data: { session } }) => {\n_28\n      setSession(session)\n_28\n    })\n_28\n_28\n    supabase.auth.onAuthStateChange((_event, session) => {\n_28\n      setSession(session)\n_28\n    })\n_28\n}, [])\n_28\n_28\nreturn (\n_28\n    <View>\n_28\n      <Auth />\n_28\n      {session && session.user && <Text>{session.user.id}</Text>}\n_28\n    </View>\n_28\n)\n_28\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "2ee8f70b-51da-4e56-b608-6660468f3d76",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with React Native h2: Learn how to use Supabase Auth with React Native\n\n  paddingTop: 4,\n_83\n    paddingBottom: 4,\n_83\n    alignSelf: 'stretch',\n_83\n},\n_83\nmt20: {\n_83\n    marginTop: 20,\n_83\n},\n_83\n})\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "933076c8-101d-43c4-948e-57264f71c20c",
    "metadata": {
      "token_count": 29,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/react-native",
      "page_title": "Use Supabase Auth with React Native | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with React Native",
        "h2": "Learn how to use Supabase Auth with React Native"
      },
      "text": "7\n\n### Start the app\n\nStart the app, and follow the instructions in the terminal.\n\nTerminal\n\n`\n_10\nnpm start\n`\n",
      "overlap_text": {
        "previous_chunk_id": "abf3ae86-e2a7-49af-8dce-4f9e8df90cc1",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with React Native h2: Learn how to use Supabase Auth with React Native\n\n (\n_28\n    <View>\n_28\n      <Auth />\n_28\n      {session && session.user && <Text>{session.user.id}</Text>}\n_28\n    </View>\n_28\n)\n_28\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "21dfb2e4-efe6-4309-a673-3e7201f442db",
    "metadata": {
      "token_count": 44,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Learn how to manage the email templates in Supabase."
      },
      "text": "* * *\n\nYou can customize the email messages used for the authentication flows. You can edit the following email templates:\n\n- Confirm signup\n- Invite user\n- Magic Link\n- Change Email Address\n- Reset Password\n"
    }
  },
  {
    "chunk_id": "64f0afd3-633f-4bcb-bcc3-b5d9208df71c",
    "metadata": {
      "token_count": 291,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Terminology [\\#](\\#terminology)"
      },
      "text": "The templating system provides the following variables for use:\n\n| Name | Description |\n| --- | --- |\n| `{{ .ConfirmationURL }}` | Contains the confirmation URL. For example, a signup confirmation URL would look like: `https://project-ref.supabase.co/auth/v1/verify?token={{ .TokenHash }}&type=signup&redirect_to=https://example.com/path` . |\n| `{{ .Token }}` | Contains a 6-digit One-Time-Password (OTP) that can be used instead of the `{{. ConfirmationURL }}` . |\n| `{{ .TokenHash }}` | Contains a hashed version of the `{{ .Token }}`. This is useful for constructing your own email link in the email template. |\n| `{{ .SiteURL }}` | Contains your application's Site URL. This can be configured in your project's [authentication settings](/dashboard/project/_/auth/url-configuration). |\n| `{{ .RedirectTo }}` | Contains the redirect URL passed when `signUp`, `signInWithOtp`, `signInWithOAuth`, `resetPasswordForEmail` or `inviteUserByEmail` is called. The redirect URL allow list can be configured in your project's [authentication settings](/dashboard/project/_/auth/url-configuration). |\n| `{{ .Data }}` | Contains metadata from `auth.users.user_metadata`. Use this to personalize the email message. |\n",
      "overlap_text": {
        "previous_chunk_id": "21dfb2e4-efe6-4309-a673-3e7201f442db",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Learn how to manage the email templates in Supabase.\n\n* * *\n\nYou can customize the email messages used for the authentication flows. You can edit the following email templates:\n\n- Confirm signup\n- Invite user\n- Magic Link\n- Change Email Address\n- Reset Password\n"
      }
    }
  },
  {
    "chunk_id": "bb85e893-2060-4348-9216-ba0e3162fabf",
    "metadata": {
      "token_count": 55,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Editing email templates [\\#](\\#editing-email-templates)"
      },
      "text": "On hosted Supabase projects, edit your email templates on the [Email Templates](/dashboard/project/_/auth/templates) page. On self-hosted projects or in local development, edit your [configuration files](/docs/guides/cli/customizing-email-templates).\n",
      "overlap_text": {
        "previous_chunk_id": "64f0afd3-633f-4bcb-bcc3-b5d9208df71c",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Terminology [\\#](\\#terminology)\n\n allow list can be configured in your project's [authentication settings](/dashboard/project/_/auth/url-configuration). |\n| `{{ .Data }}` | Contains metadata from `auth.users.user_metadata`. Use this to personalize the email message. |\n"
      }
    }
  },
  {
    "chunk_id": "15526595-5fd0-420b-8a0d-ded53cbcea24",
    "metadata": {
      "token_count": 46,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Mobile Deep Linking [\\#](\\#mobile-deep-linking)"
      },
      "text": "For mobile applications, you might need to link or redirect to a specific page within your app. See the [Mobile Deep Linking guide](/docs/guides/auth/native-mobile-deep-linking) to set this up.\n",
      "overlap_text": {
        "previous_chunk_id": "bb85e893-2060-4348-9216-ba0e3162fabf",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Editing email templates [\\#](\\#editing-email-templates)\n\n projects, edit your email templates on the [Email Templates](/dashboard/project/_/auth/templates) page. On self-hosted projects or in local development, edit your [configuration files](/docs/guides/cli/customizing-email-templates).\n"
      }
    }
  },
  {
    "chunk_id": "981a88be-46fb-4b4e-990f-d15bf8c3c479",
    "metadata": {
      "token_count": 107,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Limitations [\\#](\\#limitations)"
      },
      "text": "### Email prefetching [\\#](\\#email-prefetching)\n\nCertain email providers may have spam detection or other security features that prefetch URL links from incoming emails (e.g. [Safe Links in Microsoft Defender for Office 365](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/safe-links-about?view=o365-worldwide)).\nIn this scenario, the `{{ .ConfirmationURL }}` sent will be consumed instantly which leads to a \"Token has expired or is invalid\" error.\n",
      "overlap_text": {
        "previous_chunk_id": "15526595-5fd0-420b-8a0d-ded53cbcea24",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Mobile Deep Linking [\\#](\\#mobile-deep-linking)\n\nFor mobile applications, you might need to link or redirect to a specific page within your app. See the [Mobile Deep Linking guide](/docs/guides/auth/native-mobile-deep-linking) to set this up.\n"
      }
    }
  },
  {
    "chunk_id": "52ebc444-1eaf-4178-af21-66faf78f78ad",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Limitations [\\#](\\#limitations)"
      },
      "text": "To guard against this:\n\n- Use an email OTP instead by including `{{ .Token }}` in the email template.\n\n- Create your own custom email link to redirect the user to a page where they can click on a button to confirm the action.\nFor example, you can include the following in your email template:\n\n\n\n`\n_10\n<a href=\"{{ .SiteURL }}/confirm-signup?confirmation_url={{ .ConfirmationURL }}\"\n_10\n>Confirm your signup\n_10\n</a>\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "981a88be-46fb-4b4e-990f-d15bf8c3c479",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Limitations [\\#](\\#limitations)\n\n-365/security/office-365-security/safe-links-about?view=o365-worldwide)).\nIn this scenario, the `{{ .ConfirmationURL }}` sent will be consumed instantly which leads to a \"Token has expired or is invalid\" error.\n"
      }
    }
  },
  {
    "chunk_id": "7adcf998-7550-40b2-8264-44a8bdbdfde9",
    "metadata": {
      "token_count": 110,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Limitations [\\#](\\#limitations)"
      },
      "text": "\n\nThe user should be brought to a page on your site where they can confirm the action by clicking a button.\nThe button should contain the actual confirmation link which can be obtained from parsing the `confirmation_url={{ .ConfirmationURL }}` query parameter in the URL.\n\n\n### Email tracking [\\#](\\#email-tracking)\n\nIf you are using an external email provider that enables \"email tracking\", the links inside the Supabase email templates will be overwritten and won't perform as expected. We recommend disabling email tracking to ensure email links are not overwritten.\n",
      "overlap_text": {
        "previous_chunk_id": "52ebc444-1eaf-4178-af21-66faf78f78ad",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Limitations [\\#](\\#limitations)\n\nFor example, you can include the following in your email template:\n\n\n\n`\n_10\n<a href=\"{{ .SiteURL }}/confirm-signup?confirmation_url={{ .ConfirmationURL }}\"\n_10\n>Confirm your signup\n_10\n</a>\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "9278f72d-0631-4a59-8396-a849dac89358",
    "metadata": {
      "token_count": 123,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Limitations [\\#](\\#limitations)"
      },
      "text": "\n### Redirecting the user to a server-side endpoint [\\#](\\#redirecting-the-user-to-a-server-side-endpoint)\n\nIf you intend to use [Server-side rendering](/docs/guides/auth/server-side-rendering), you might want the email link to redirect the user to a server-side endpoint to check if they are authenticated before returning the page. However, the default email link will redirect the user after verification to the redirect URL with the session in the query fragments. Since the session is returned in the query fragments by default, you won't be able to access it on the server-side.\n",
      "overlap_text": {
        "previous_chunk_id": "7adcf998-7550-40b2-8264-44a8bdbdfde9",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Limitations [\\#](\\#limitations)\n\n#email-tracking)\n\nIf you are using an external email provider that enables \"email tracking\", the links inside the Supabase email templates will be overwritten and won't perform as expected. We recommend disabling email tracking to ensure email links are not overwritten.\n"
      }
    }
  },
  {
    "chunk_id": "4ea544ed-5eb3-4f37-8fad-9c69e72f49d8",
    "metadata": {
      "token_count": 208,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Limitations [\\#](\\#limitations)"
      },
      "text": "\nYou can customize the email link in the email template to redirect the user to a server-side endpoint successfully. For example:\n\n`\n_10\n<a\n_10\nhref=\"https://api.example.com/v1/authenticate?token_hash={{ .TokenHash }}&type=invite&redirect_to={{ .RedirectTo }}\"\n_10\n>Accept the invite\n_10\n</a>\n`\n\nWhen the user clicks on the link, the request will hit `https://api.example.com/v1/authenticate` and you can grab the `token_hash`, `type` and `redirect_to` query parameters from the URL. Then, you can call the [`verifyOtp`](/docs/reference/javascript/auth-verifyotp) method to get back an authenticated session before redirecting the user back to the client. Since the `verifyOtp` method makes a `POST` request to Supabase Auth to verify the user, the session will be returned in the response body, which can be read by the server. For example:\n",
      "overlap_text": {
        "previous_chunk_id": "9278f72d-0631-4a59-8396-a849dac89358",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Limitations [\\#](\\#limitations)\n\n. However, the default email link will redirect the user after verification to the redirect URL with the session in the query fragments. Since the session is returned in the query fragments by default, you won't be able to access it on the server-side.\n"
      }
    }
  },
  {
    "chunk_id": "094ab0b2-86d8-4700-ae73-b4d7f302c366",
    "metadata": {
      "token_count": 87,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Limitations [\\#](\\#limitations)"
      },
      "text": "\n`\n_10\nconst { token_hash, type } = Object.fromEntries(new URLSearchParams(window.location.search))\n_10\nconst {\n_10\ndata: { session },\n_10\nerror,\n_10\n} = await supabase.auth.verifyOtp({ token_hash, type })\n_10\n_10\n// subsequently redirect the user back to the client using the redirect_to param\n_10\n// ...\n`\n",
      "overlap_text": {
        "previous_chunk_id": "4ea544ed-5eb3-4f37-8fad-9c69e72f49d8",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Limitations [\\#](\\#limitations)\n\n back to the client. Since the `verifyOtp` method makes a `POST` request to Supabase Auth to verify the user, the session will be returned in the response body, which can be read by the server. For example:\n"
      }
    }
  },
  {
    "chunk_id": "5aed90a6-d388-4d99-a5a6-42aa0482c079",
    "metadata": {
      "token_count": 113,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "Supabase Auth makes use of [Go Templates](https://pkg.go.dev/text/template). This means it is possible to conditionally render information based on template properties.You may wish to checkout this [guide by Hugo](https://gohugo.io/templates/introduction/) for a guide on the templating language.\n\n### Send different email to early access users [\\#](\\#send-different-email-to-early-access-users)\n\nSend a different email to users who signed up via an early access domain ( `https://www.earlyaccess.trial.com`).\n",
      "overlap_text": {
        "previous_chunk_id": "094ab0b2-86d8-4700-ae73-b4d7f302c366",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Limitations [\\#](\\#limitations)\n\n10\nerror,\n_10\n} = await supabase.auth.verifyOtp({ token_hash, type })\n_10\n_10\n// subsequently redirect the user back to the client using the redirect_to param\n_10\n// ...\n`\n"
      }
    }
  },
  {
    "chunk_id": "a7f61a1e-73c4-4253-ad18-bde597a6daa6",
    "metadata": {
      "token_count": 186,
      "source_url": "https://supabase.com/docs/guides/auth/auth-email-templates",
      "page_title": "Email Templates | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Email Templates",
        "h2": "Customization [\\#](\\#customization)"
      },
      "text": "\n`\n_14\n{{ if eq .Data.Domain \"https://www.example.com\" }}\n_14\n<h1>Welcome to Our Database Service!</h1>\n_14\n<p>Dear Developer,</p>\n_14\n<p>Welcome to Billy, the scalable developer platform!</p>\n_14\n<p>Best Regards,<br>\n_14\nBilly Team</p>\n_14\n{{ else if eq .Data.Domain \"https://www.earlyaccess.trial.com\" }}\n_14\n<h1>Welcome to Our Database Service!</h1>\n_14\n<p>Dear Developer,</p>\n_14\n<p>Welcome Billy, the scalable developer platform!</p>\n_14\n<p> As an early access member, you have access to select features like Point To Space Restoration.</p>\n_14\n<p>Best Regards,<br>\n_14\nBilly Team</p>\n_14\n{{ end }}\n`\n",
      "overlap_text": {
        "previous_chunk_id": "5aed90a6-d388-4d99-a5a6-42aa0482c079",
        "text": "Content of the previous chunk for context: h1: Email Templates h2: Customization [\\#](\\#customization)\n\n### Send different email to early access users [\\#](\\#send-different-email-to-early-access-users)\n\nSend a different email to users who signed up via an early access domain ( `https://www.earlyaccess.trial.com`).\n"
      }
    }
  },
  {
    "chunk_id": "96f63508-d24b-4bfe-88f1-9e4cb985eb2d",
    "metadata": {
      "token_count": 115,
      "source_url": "https://supabase.com/docs/guides/auth/server-side",
      "page_title": "Server-Side Rendering | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Server-Side Rendering",
        "h2": "How SSR works with Supabase Auth."
      },
      "text": "* * *\n\nSSR frameworks move rendering and data fetches to the server, to reduce client bundle size and execution time.\n\nSupabase Auth is fully compatible with SSR. You need to make a few changes to the configuration of your Supabase client, to store the user session in cookies instead of local storage. After setting up your Supabase client, follow the instructions for any flow in the How-To guides.\n\nMake sure to use the PKCE flow instructions where those differ from the implicit flow instructions. If no difference is mentioned, don't worry about this.\n"
    }
  },
  {
    "chunk_id": "669ad9a0-9152-4edb-905b-a0e675878abc",
    "metadata": {
      "token_count": 136,
      "source_url": "https://supabase.com/docs/guides/auth/server-side",
      "page_title": "Server-Side Rendering | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Server-Side Rendering",
        "h2": "`@supabase/ssr` [\\#](\\#supabasessr)"
      },
      "text": "We have developed an [`@supabase/ssr`](https://www.npmjs.com/package/@supabase/ssr) package to make setting up the Supabase client as simple as possible. This package is currently in beta. Adoption is recommended but be aware that the API is still unstable and may have breaking changes in the future.\n\nIf you're currently using the [Auth Helpers package](https://github.com/supabase/auth-helpers), the [docs are still available](/docs/guides/auth/auth-helpers), however we recommend migrating to the new `@supabase/ssr` package as this will be the recommended path moving forward.\n",
      "overlap_text": {
        "previous_chunk_id": "96f63508-d24b-4bfe-88f1-9e4cb985eb2d",
        "text": "Content of the previous chunk for context: h1: Server-Side Rendering h2: How SSR works with Supabase Auth.\n\n setting up your Supabase client, follow the instructions for any flow in the How-To guides.\n\nMake sure to use the PKCE flow instructions where those differ from the implicit flow instructions. If no difference is mentioned, don't worry about this.\n"
      }
    }
  },
  {
    "chunk_id": "31ad23a0-4ea4-41c7-8d81-137035c3d4c7",
    "metadata": {
      "token_count": 140,
      "source_url": "https://supabase.com/docs/guides/auth/server-side",
      "page_title": "Server-Side Rendering | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Server-Side Rendering",
        "h2": "Framework quickstarts [\\#](\\#framework-quickstarts)"
      },
      "text": "[![Next.js](https://supabase.com/docs/img/icons/nextjs-icon.svg)\\\\\n\\\\\nNext.js\\\\\n\\\\\nAutomatically configure Supabase in Next.js to use cookies, making your user and their session available on the client and server.](/docs/guides/auth/server-side/nextjs) [![SvelteKit](https://supabase.com/docs/img/icons/svelte-icon.svg)\\\\\n\\\\\nSvelteKit\\\\\n\\\\\nAutomatically configure Supabase in SvelteKit to use cookies, making your user and their session available on the client and server.](/docs/guides/auth/server-side/sveltekit)\n",
      "overlap_text": {
        "previous_chunk_id": "669ad9a0-9152-4edb-905b-a0e675878abc",
        "text": "Content of the previous chunk for context: h1: Server-Side Rendering h2: `@supabase/ssr` [\\#](\\#supabasessr)\n\nupabase/auth-helpers), the [docs are still available](/docs/guides/auth/auth-helpers), however we recommend migrating to the new `@supabase/ssr` package as this will be the recommended path moving forward.\n"
      }
    }
  },
  {
    "chunk_id": "02889d30-ddf9-4947-b5c5-70a1044eae06",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/react",
      "page_title": "Use Supabase Auth with React | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with React",
        "h2": "Learn how to use Supabase Auth with React.js."
      },
      "text": "* * *\n\n1\n\n### Create a new Supabase project\n\n[Launch a new project](https://supabase.com/dashboard) in the Supabase Dashboard.\n\nYour new database has a table for storing your users. You can see that this table is currently empty by running some SQL in the [SQL Editor](https://supabase.com/dashboard/project/_/sql).\n\nSQL\\_EDITOR\n\n`\n_10\nselect * from auth.users;\n`\n\n2\n\n### Create a React app\n\n"
    }
  },
  {
    "chunk_id": "6eb9bffa-b518-4c7d-94f9-56448cc29127",
    "metadata": {
      "token_count": 125,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/react",
      "page_title": "Use Supabase Auth with React | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with React",
        "h2": "Learn how to use Supabase Auth with React.js."
      },
      "text": "Create a React app using the `create-react-app` command.\n\nTerminal\n\n`\n_10\nnpx create-react-app my-app\n`\n\n3\n\n### Install the Supabase client library\n\nThe fastest way to get started is to use Supabase's `auth-ui-react` library which provides a convenient interface for working with Supabase Auth from a React app.\n\nNavigate to the React app and install the Supabase libraries.\n\nTerminal\n\n`\n_10\ncd my-app && npm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "02889d30-ddf9-4947-b5c5-70a1044eae06",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with React h2: Learn how to use Supabase Auth with React.js.\n\n this table is currently empty by running some SQL in the [SQL Editor](https://supabase.com/dashboard/project/_/sql).\n\nSQL\\_EDITOR\n\n`\n_10\nselect * from auth.users;\n`\n\n2\n\n### Create a React app\n\n"
      }
    }
  },
  {
    "chunk_id": "014f8afb-4ca1-4c92-b57c-a9d1de074241",
    "metadata": {
      "token_count": 390,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/react",
      "page_title": "Use Supabase Auth with React | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with React",
        "h2": "Learn how to use Supabase Auth with React.js."
      },
      "text": "4\n\n### Set up your login component\n\nIn `index.js`, create a Supabase client using your [Project URL and public API (anon) key](https://supabase.com/dashboard/project/_/settings/api).\n\nYou can configure the Auth component to display whenever there is no session inside `supabase.auth.getSession()`\n\nsrc/index.js\n\n`\n_32\nimport './index.css'\n_32\nimport { useState, useEffect } from 'react'\n_32\nimport { createClient } from '@supabase/supabase-js'\n_32\nimport { Auth } from '@supabase/auth-ui-react'\n_32\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n_32\n_32\nconst supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n_32\n_32\nexport default function App() {\n_32\n    const [session, setSession] = useState(null)\n_32\n_32\n    useEffect(() => {\n_32\n      supabase.auth.getSession().then(({ data: { session } }) => {\n_32\n        setSession(session)\n_32\n      })\n_32\n_32\n      const {\n_32\n        data: { subscription },\n_32\n      } = supabase.auth.onAuthStateChange((_event, session) => {\n_32\n        setSession(session)\n_32\n      })\n_32\n_32\n      return () => subscription.unsubscribe()\n_32\n    }, [])\n_32\n_32\n    if (!session) {\n_32\n      return (<Auth supabaseClient={supabase} appearance={{ theme: ThemeSupa }} />)\n_32\n    }\n_32\n    else {\n_32\n      return (<div>Logged in!</div>)\n_32\n    }\n_32\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "6eb9bffa-b518-4c7d-94f9-56448cc29127",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with React h2: Learn how to use Supabase Auth with React.js.\n\nNavigate to the React app and install the Supabase libraries.\n\nTerminal\n\n`\n_10\ncd my-app && npm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "242883ce-f99f-4a40-beac-924795ebe830",
    "metadata": {
      "token_count": 56,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/react",
      "page_title": "Use Supabase Auth with React | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with React",
        "h2": "Learn how to use Supabase Auth with React.js."
      },
      "text": "5\n\n### Start the app\n\nStart the app, go to [http://localhost:3000](http://localhost:3000) in a browser, and open the browser console and you should be able to log in.\n\nTerminal\n\n`\n_10\nnpm start\n`\n",
      "overlap_text": {
        "previous_chunk_id": "014f8afb-4ca1-4c92-b57c-a9d1de074241",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with React h2: Learn how to use Supabase Auth with React.js.\n\naseClient={supabase} appearance={{ theme: ThemeSupa }} />)\n_32\n    }\n_32\n    else {\n_32\n      return (<div>Logged in!</div>)\n_32\n    }\n_32\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "64311b36-0a66-4866-a359-4389cbf26209",
    "metadata": {
      "token_count": 3,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)"
      },
      "text": "* * *\n"
    }
  },
  {
    "chunk_id": "eb4a4dfe-e9c7-48fb-8e1a-56f7133d6a22",
    "metadata": {
      "token_count": 133,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "Phone multi-factor authentication involves a shared code generated by Supabase Auth and the end user. The code is delivered via a messaging channel, such as SMS or WhatsApp, and the user uses the code to authenticate to Supabase Auth.\n\nThe phone messaging configuration for MFA is shared with [phone auth login](/docs/guides/auth/phone-login). The same provider configuration that is used for phone login is used for MFA. You can also use the [Send SMS Hook](/docs/guides/auth/auth-hooks/send-sms-hook) if you need to use an MFA (Phone) messaging provider different from what is supported natively.\n",
      "overlap_text": {
        "previous_chunk_id": "64311b36-0a66-4866-a359-4389cbf26209",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone)\n\n* * *\n"
      }
    }
  },
  {
    "chunk_id": "af58c9d7-769e-42ed-93e3-30d95d2b9979",
    "metadata": {
      "token_count": 104,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "\nBelow is a flow chart illustrating how the Enrollment and Verify APIs work in the context of MFA (Phone).\n\nPhone MFA is part of the Auth Advanced MFA Add-on and costs an additional $75 per month for the first project in the organization and an additional $10 per month for additional projects.\n\n### Add enrollment flow [\\#](\\#add-enrollment-flow)\n\nAn enrollment flow provides a UI for users to set up additional authentication factors. Most applications add the enrollment flow in two places within their app:\n",
      "overlap_text": {
        "previous_chunk_id": "eb4a4dfe-e9c7-48fb-8e1a-56f7133d6a22",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\n is used for MFA. You can also use the [Send SMS Hook](/docs/guides/auth/auth-hooks/send-sms-hook) if you need to use an MFA (Phone) messaging provider different from what is supported natively.\n"
      }
    }
  },
  {
    "chunk_id": "1db143e3-bc06-4340-9ff4-43234c045171",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "\n1. Right after login or sign up.\nThis allows users quickly set up Multi Factor Authentication (MFA) post login or account creation. Where possible, encourage all users to set up MFA. Many applications offer this as an opt-in step in an\neffort to reduce onboarding friction.\n2. From within a settings page.\nAllows users to set up, disable or modify their MFA settings.\n\nAs far as possible, maintain a generic flow that you can reuse in both cases with minor modifications.\n",
      "overlap_text": {
        "previous_chunk_id": "af58c9d7-769e-42ed-93e3-30d95d2b9979",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\n $10 per month for additional projects.\n\n### Add enrollment flow [\\#](\\#add-enrollment-flow)\n\nAn enrollment flow provides a UI for users to set up additional authentication factors. Most applications add the enrollment flow in two places within their app:\n"
      }
    }
  },
  {
    "chunk_id": "44c2f798-95ae-4456-a68a-3082ef13be91",
    "metadata": {
      "token_count": 101,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "\nEnrolling a factor for use with MFA takes three steps for phone MFA:\n\n1. Call `supabase.auth.mfa.enroll()`.\n2. Calling the `supabase.auth.mfa.challenge()` API. This sends a code via SMS or WhatsApp and prepares Supabase Auth to accept a verification code from the user.\n3. Calling the `supabase.auth.mfa.verify()` API. `supabase.auth.mfa.challenge()` returns a challenge ID.\n",
      "overlap_text": {
        "previous_chunk_id": "1db143e3-bc06-4340-9ff4-43234c045171",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\neffort to reduce onboarding friction.\n2. From within a settings page.\nAllows users to set up, disable or modify their MFA settings.\n\nAs far as possible, maintain a generic flow that you can reuse in both cases with minor modifications.\n"
      }
    }
  },
  {
    "chunk_id": "61d5119e-8745-49a9-a11a-8d494dcefbae",
    "metadata": {
      "token_count": 111,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "This verifies that the code issued by Supabase Auth matches the code input by the user. If the verification succeeds, the factor\nimmediately becomes active for the user account. If not, you should repeat\nsteps 2 and 3.\n\n#### Example: React [\\#](\\#example-react)\n\nBelow is an example that creates a new `EnrollMFA` component that illustrates the important pieces of the MFA enrollment flow.\n\n- When the component appears on screen, the `supabase.auth.mfa.enroll()` API is\n",
      "overlap_text": {
        "previous_chunk_id": "44c2f798-95ae-4456-a68a-3082ef13be91",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\n code via SMS or WhatsApp and prepares Supabase Auth to accept a verification code from the user.\n3. Calling the `supabase.auth.mfa.verify()` API. `supabase.auth.mfa.challenge()` returns a challenge ID.\n"
      }
    }
  },
  {
    "chunk_id": "4fc25df5-61b5-4fe8-8e11-4257ae8ea6b6",
    "metadata": {
      "token_count": 105,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "called once to start the process of enrolling a new factor for the current\nuser.\n- A challenge is created using the `supabase.auth.mfa.challenge()` API and the\ncode from the user is submitted for verification using the\n`supabase.auth.mfa.verify()` challenge.\n- `onEnabled` is a callback that notifies the other components that enrollment\nhas completed.\n- `onCancelled` is a callback that notifies the other components that the user\nhas clicked the `Cancel` button.\n",
      "overlap_text": {
        "previous_chunk_id": "61d5119e-8745-49a9-a11a-8d494dcefbae",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\n)\n\nBelow is an example that creates a new `EnrollMFA` component that illustrates the important pieces of the MFA enrollment flow.\n\n- When the component appears on screen, the `supabase.auth.mfa.enroll()` API is\n"
      }
    }
  },
  {
    "chunk_id": "1c78bc99-2863-45c5-ac0b-012fd0d50b8e",
    "metadata": {
      "token_count": 758,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "\n`\n_84\nexport function EnrollMFA({\n_84\nonEnrolled,\n_84\nonCancelled,\n_84\n}: {\n_84\nonEnrolled: () => void\n_84\nonCancelled: () => void\n_84\n}) {\n_84\nconst [phoneNumber, setPhoneNumber] = useState('')\n_84\nconst [factorId, setFactorId] = useState('')\n_84\nconst [verifyCode, setVerifyCode] = useState('')\n_84\nconst [error, setError] = useState('')\n_84\nconst [challengeId, setChallengeId] = useState('')\n_84\n_84\nconst onEnableClicked = () => {\n_84\n    setError('')\n_84\n    ;(async () => {\n_84\n      const verify = await auth.mfa.verify({\n_84\n        factorId,\n_84\n        challengeId,\n_84\n        code: verifyCode,\n_84\n      })\n_84\n      if (verify.error) {\n_84\n        setError(verify.error.message)\n_84\n        throw verify.error\n_84\n      }\n_84\n_84\n      onEnrolled()\n_84\n    })()\n_84\n}\n_84\nconst onEnrollClicked = async () => {\n_84\n    setError('')\n_84\n    try {\n_84\n      const factor = await auth.mfa.enroll({\n_84\n        phone: phoneNumber,\n_84\n        factorType: 'phone',\n_84\n      })\n_84\n      if (factor.error) {\n_84\n        setError(factor.error.message)\n_84\n        throw factor.error\n_84\n      }\n_84\n_84\n      setFactorId(factor.data.id)\n_84\n    } catch (error) {\n_84\n      setError('Failed to Enroll the Factor.')\n_84\n    }\n_84\n}\n_84\n_84\nconst onSendOTPClicked = async () => {\n_84\n    setError('')\n_84\n    try {\n_84\n      const challenge = await auth.mfa.challenge({ factorId })\n_84\n      if (challenge.error) {\n_84\n        setError(challenge.error.message)\n_84\n        throw challenge.error\n_84\n      }\n_84\n_84\n      setChallengeId(challenge.data.id)\n_84\n    } catch (error) {\n_84\n      setError('Failed to resend the code.')\n_84\n    }\n_84\n}\n_84\n_84\nreturn (\n_84\n    <>\n_84\n      {error && <div className=\"error\">{error}</div>}\n_84\n      <input\n_84\n        type=\"text\"\n_84\n        placeholder=\"Phone Number\"\n_84\n        value={phoneNumber}\n_84\n        onChange={(e) => setPhoneNumber(e.target.value.trim())}\n_84\n      />\n_84\n      <input\n_84\n        type=\"text\"\n_84\n        placeholder=\"Verification Code\"\n_84\n        value={verifyCode}\n_84\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n_84\n      />\n_84\n      <input type=\"button\" value=\"Enroll\" onClick={onEnrollClicked} />\n_84\n      <input type=\"button\" value=\"Submit Code\" onClick={onEnableClicked} />\n_84\n      <input type=\"button\" value=\"Send OTP Code\" onClick={onSendOTPClicked} />\n_84\n      <input type=\"button\" value=\"Cancel\" onClick={onCancelled} />\n_84\n    </>\n_84\n)\n_84\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "4fc25df5-61b5-4fe8-8e11-4257ae8ea6b6",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\n.mfa.verify()` challenge.\n- `onEnabled` is a callback that notifies the other components that enrollment\nhas completed.\n- `onCancelled` is a callback that notifies the other components that the user\nhas clicked the `Cancel` button.\n"
      }
    }
  },
  {
    "chunk_id": "8277e5e4-0082-44eb-a8d0-fed90f641b8f",
    "metadata": {
      "token_count": 118,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "### Add a challenge step to login [\\#](\\#add-a-challenge-step-to-login)\n\nOnce a user has logged in via their first factor (email+password, magic link, one time password, social login etc.) you need to perform a check if any additional factors need to be verified.\n\nThis can be done by using the `supabase.auth.mfa.getAuthenticatorAssuranceLevel()` API. When the user signs in and is redirected back to your app, you should call this method to extract the user's current and next authenticator assurance level (AAL).\n",
      "overlap_text": {
        "previous_chunk_id": "1c78bc99-2863-45c5-ac0b-012fd0d50b8e",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\nbutton\" value=\"Send OTP Code\" onClick={onSendOTPClicked} />\n_84\n      <input type=\"button\" value=\"Cancel\" onClick={onCancelled} />\n_84\n    </>\n_84\n)\n_84\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "01e3ada8-19f8-452a-945d-bd295455a0a6",
    "metadata": {
      "token_count": 159,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "\nTherefore if you receive a `currentLevel` which is `aal1` but a `nextLevel` of `aal2`, the user should be given the option to go through MFA.\n\nBelow is a table that explains the combined meaning.\n\n| Current Level | Next Level | Meaning |\n| --: | :-- | :-- |\n| `aal1` | `aal1` | User does not have MFA enrolled. |\n| `aal1` | `aal2` | User has an MFA factor enrolled but has not verified it. |\n| `aal2` | `aal2` | User has verified their MFA factor. |\n| `aal2` | `aal1` | User has disabled their MFA factor. (Stale JWT.) |\n\n",
      "overlap_text": {
        "previous_chunk_id": "8277e5e4-0082-44eb-a8d0-fed90f641b8f",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\n `supabase.auth.mfa.getAuthenticatorAssuranceLevel()` API. When the user signs in and is redirected back to your app, you should call this method to extract the user's current and next authenticator assurance level (AAL).\n"
      }
    }
  },
  {
    "chunk_id": "07d71e5b-d76d-42eb-9904-af872e85cef7",
    "metadata": {
      "token_count": 370,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "#### Example: React [\\#](\\#example-react)\n\nAdding the challenge step to login depends heavily on the architecture of your app. However, a fairly common way to structure React apps is to have a large component (often named `App`) which contains most of the authenticated application logic.\n\nThis example will wrap this component with logic that will show an MFA challenge screen if necessary, before showing the full application. This is illustrated in the `AppWithMFA` example below.\n\n`\n_33\nfunction AppWithMFA() {\n_33\nconst [readyToShow, setReadyToShow] = useState(false)\n_33\nconst [showMFAScreen, setShowMFAScreen] = useState(false)\n_33\n_33\nuseEffect(() => {\n_33\n    ;(async () => {\n_33\n      try {\n_33\n        const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()\n_33\n        if (error) {\n_33\n          throw error\n_33\n        }\n_33\n_33\n        console.log(data)\n_33\n_33\n        if (data.nextLevel === 'aal2' && data.nextLevel !== data.currentLevel) {\n_33\n          setShowMFAScreen(true)\n_33\n        }\n_33\n      } finally {\n_33\n        setReadyToShow(true)\n_33\n      }\n_33\n    })()\n_33\n}, [])\n_33\n_33\nif (readyToShow) {\n_33\n    if (showMFAScreen) {\n_33\n      return <AuthMFA />\n_33\n    }\n_33\n_33\n    return <App />\n_33\n}\n_33\n_33\nreturn <></>\n_33\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "01e3ada8-19f8-452a-945d-bd295455a0a6",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\n not verified it. |\n| `aal2` | `aal2` | User has verified their MFA factor. |\n| `aal2` | `aal1` | User has disabled their MFA factor. (Stale JWT.) |\n\n"
      }
    }
  },
  {
    "chunk_id": "17ebb8a7-6ead-463c-b069-4307e8a0d4c1",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "- `supabase.auth.mfa.getAuthenticatorAssuranceLevel()` does return a promise.\nDon't worry, this is a very fast method (microseconds) as it rarely uses the\nnetwork.\n- `readyToShow` only makes sure the AAL check completes before showing any\napplication UI to the user.\n- If the current level can be upgraded to the next one, the MFA screen is\nshown.\n- Once the challenge is successful, the `App` component is finally rendered on\n",
      "overlap_text": {
        "previous_chunk_id": "07d71e5b-d76d-42eb-9904-af872e85cef7",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\nMFAScreen) {\n_33\n      return <AuthMFA />\n_33\n    }\n_33\n_33\n    return <App />\n_33\n}\n_33\n_33\nreturn <></>\n_33\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "29cc530b-2017-4e3d-b1f9-7247ab129cb1",
    "metadata": {
      "token_count": 661,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "screen.\n\nBelow is the component that implements the challenge and verify logic.\n\n`\n_72\nfunction AuthMFA() {\n_72\nconst [verifyCode, setVerifyCode] = useState('')\n_72\nconst [error, setError] = useState('')\n_72\nconst [factorId, setFactorId] = useState('')\n_72\nconst [challengeId, setChallengeId] = useState('')\n_72\nconst [phoneNumber, setPhoneNumber] = useState('')\n_72\n_72\nconst startChallenge = async () => {\n_72\n    setError('')\n_72\n    try {\n_72\n      const factors = await supabase.auth.mfa.listFactors()\n_72\n      if (factors.error) {\n_72\n        throw factors.error\n_72\n      }\n_72\n_72\n      const phoneFactor = factors.data.phone[0]\n_72\n_72\n      if (!phoneFactor) {\n_72\n        throw new Error('No phone factors found!')\n_72\n      }\n_72\n_72\n      const factorId = phoneFactor.id\n_72\n      setFactorId(factorId)\n_72\n      setPhoneNumber(phoneFactor.phone)\n_72\n_72\n      const challenge = await supabase.auth.mfa.challenge({ factorId })\n_72\n      if (challenge.error) {\n_72\n        setError(challenge.error.message)\n_72\n        throw challenge.error\n_72\n      }\n_72\n_72\n      setChallengeId(challenge.data.id)\n_72\n    } catch (error) {\n_72\n      setError(error.message)\n_72\n    }\n_72\n}\n_72\n_72\nconst verifyCode = async () => {\n_72\n    setError('')\n_72\n    try {\n_72\n      const verify = await supabase.auth.mfa.verify({\n_72\n        factorId,\n_72\n        challengeId,\n_72\n        code: verifyCode,\n_72\n      })\n_72\n      if (verify.error) {\n_72\n        setError(verify.error.message)\n_72\n        throw verify.error\n_72\n      }\n_72\n    } catch (error) {\n_72\n      setError(error.message)\n_72\n    }\n_72\n}\n_72\n_72\nreturn (\n_72\n    <>\n_72\n      <div>Please enter the code sent to your phone.</div>\n_72\n      {phoneNumber && <div>Phone number: {phoneNumber}</div>}\n_72\n      {error && <div className=\"error\">{error}</div>}\n_72\n      <input\n_72\n        type=\"text\"\n_72\n        value={verifyCode}\n_72\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n_72\n      />\n_72\n      {!challengeId ? (\n_72\n        <input type=\"button\" value=\"Start Challenge\" onClick={startChallenge} />\n_72\n      ) : (\n_72\n        <input type=\"button\" value=\"Verify Code\" onClick={verifyCode} />\n_72\n      )}\n_72\n    </>\n_72\n)\n_72\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "17ebb8a7-6ead-463c-b069-4307e8a0d4c1",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\n check completes before showing any\napplication UI to the user.\n- If the current level can be upgraded to the next one, the MFA screen is\nshown.\n- Once the challenge is successful, the `App` component is finally rendered on\n"
      }
    }
  },
  {
    "chunk_id": "9f143575-ee37-42da-8e57-b0cc0910c0d3",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "- You can extract the available MFA factors for the user by calling\n`supabase.auth.mfa.listFactors()`. Don't worry this method is also very quick\nand rarely uses the network.\n- If `listFactors()` returns more than one factor (or of a different type) you\nshould present the user with a choice. For simplicity this is not shown in\nthe example.\n- Phone numbers are unique per user. Users can only have one verified phone factor with a given phone number.\n",
      "overlap_text": {
        "previous_chunk_id": "29cc530b-2017-4e3d-b1f9-7247ab129cb1",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\nChallenge} />\n_72\n      ) : (\n_72\n        <input type=\"button\" value=\"Verify Code\" onClick={verifyCode} />\n_72\n      )}\n_72\n    </>\n_72\n)\n_72\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "17f7cd4a-7c41-4d5d-b866-92d3288dc147",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "Attempting to enroll a new phone factor alongside an existing verified factor with the same number will result in an error.\n- Each time the user presses the \"Submit\" button a new challenge is created for\nthe chosen factor (in this case the first one)\n- On successful verification, the client library will refresh the session in\nthe background automatically and finally call the `onSuccess` callback, which\nwill show the authenticated `App` component on screen.\n\n### Security Configuration [\\#](\\#security-configuration)\n\n",
      "overlap_text": {
        "previous_chunk_id": "9f143575-ee37-42da-8e57-b0cc0910c0d3",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\n (or of a different type) you\nshould present the user with a choice. For simplicity this is not shown in\nthe example.\n- Phone numbers are unique per user. Users can only have one verified phone factor with a given phone number.\n"
      }
    }
  },
  {
    "chunk_id": "02266994-19bf-4e45-927e-88a5109c9490",
    "metadata": {
      "token_count": 150,
      "source_url": "https://supabase.com/docs/guides/auth/auth-mfa/phone",
      "page_title": "Multi-Factor Authentication (Phone) | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Multi-Factor Authentication (Phone)",
        "h2": "How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)"
      },
      "text": "Each code is valid for up to 5 minutes, after which a new one can be sent. Successive codes remain valid until expiry. When possible choose the longest code length acceptable to your use case, at a minimum of 6. This can be configured in the [Authentication Settings](/dashboard/project/_/settings/auth).\n\nPlease be aware that Phone MFA is vulnerable to SIM swap attacks where an attacker will call a mobile provider and ask to port the target's phone number to a new SIM card and then use the said SIM card to intercept an MFA code. Please evaluate the your application's tolerance for such an attack. You can read more about SIM swapping attacks [here](https://en.wikipedia.org/wiki/SIM_swap_scam)\n",
      "overlap_text": {
        "previous_chunk_id": "17f7cd4a-7c41-4d5d-b866-92d3288dc147",
        "text": "Content of the previous chunk for context: h1: Multi-Factor Authentication (Phone) h2: How does phone multi-factor-authentication work? [\\#](\\#how-does-phone-multi-factor-authentication-work)\n\n successful verification, the client library will refresh the session in\nthe background automatically and finally call the `onSuccess` callback, which\nwill show the authenticated `App` component on screen.\n\n### Security Configuration [\\#](\\#security-configuration)\n\n"
      }
    }
  },
  {
    "chunk_id": "bb77a8b4-4231-4aae-8277-df112137b8e5",
    "metadata": {
      "token_count": 104,
      "source_url": "https://supabase.com/docs/guides/auth/phone-login",
      "page_title": "Phone Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Phone Login"
      },
      "text": "* * *\n\nPhone Login is a method of authentication that allows users to log in to a website or application without using a password. The user authenticates through a one-time code sent via SMS.\n\nUsers can also log in with their phones using Native Mobile Login with the built-in identity provider. For Native Mobile Login with Android and iOS, see the [Social Login guides](/docs/guides/auth/social-login).\n\nPhone OTP login can:\n\n- Improve the user experience by not requiring users to create and remember a password\n"
    }
  },
  {
    "chunk_id": "98a1ba2e-4100-44a4-a19c-82a1e6615fb7",
    "metadata": {
      "token_count": 123,
      "source_url": "https://supabase.com/docs/guides/auth/phone-login",
      "page_title": "Phone Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Phone Login"
      },
      "text": "- Increase security by reducing the risk of password-related security breaches\n- Reduce support burden of dealing with password resets and other password-related flows\n\nTo keep SMS sending costs under control, make sure you adjust your project's rate limits and [configure CAPTCHA](/docs/guides/auth/auth-captcha). See the [Production Checklist](/docs/guides/platform/going-into-prod) to learn more.\n\nSome countries have special regulations for services that send SMS messages to users, for example, India's TRAI DLT regulations. Remember to look up and follow the regulations of countries where you operate.\n",
      "overlap_text": {
        "previous_chunk_id": "bb77a8b4-4231-4aae-8277-df112137b8e5",
        "text": "Content of the previous chunk for context: h1: Phone Login\n\n-in identity provider. For Native Mobile Login with Android and iOS, see the [Social Login guides](/docs/guides/auth/social-login).\n\nPhone OTP login can:\n\n- Improve the user experience by not requiring users to create and remember a password\n"
      }
    }
  },
  {
    "chunk_id": "4d6185de-433d-46dc-80ee-0731d915a967",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/phone-login",
      "page_title": "Phone Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Phone Login",
        "h2": "Enabling Phone Login [\\#](\\#enabling-phone-login)"
      },
      "text": "Enable phone authentication on the [Auth Providers page](/dashboard/project/_/auth/providers) for hosted Supabase projects.\n\nFor self-hosted projects or local development, use the [configuration file](/docs/guides/cli/config#auth.sms.enable_signup). See the configuration variables namespaced under `auth.sms`.\n\nYou also need to set up an SMS provider. Each provider has its own configuration. Supported providers include MessageBird, Twilio, Vonage, and TextLocal (community-supported).\n",
      "overlap_text": {
        "previous_chunk_id": "98a1ba2e-4100-44a4-a19c-82a1e6615fb7",
        "text": "Content of the previous chunk for context: h1: Phone Login\n\n/going-into-prod) to learn more.\n\nSome countries have special regulations for services that send SMS messages to users, for example, India's TRAI DLT regulations. Remember to look up and follow the regulations of countries where you operate.\n"
      }
    }
  },
  {
    "chunk_id": "235c1a86-9753-4b42-b329-17017c874338",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/phone-login",
      "page_title": "Phone Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Phone Login",
        "h2": "Enabling Phone Login [\\#](\\#enabling-phone-login)"
      },
      "text": "\n### Configuring SMS Providers\n\n![MessageBird Icon](https://supabase.com/docs/img/icons/messagebird-icon.svg)\n\n##### MessageBird\n\n![Twilio Icon](https://supabase.com/docs/img/icons/twilio-icon.svg)\n\n##### Twilio\n\n![Vonage Icon](https://supabase.com/docs/img/icons/vonage-icon-light.svg)\n\n##### Vonage\n\n![Textlocal (Community Supported) Icon](https://supabase.com/docs/guides/auth/Community%20Supported)\n\n",
      "overlap_text": {
        "previous_chunk_id": "4d6185de-433d-46dc-80ee-0731d915a967",
        "text": "Content of the previous chunk for context: h1: Phone Login h2: Enabling Phone Login [\\#](\\#enabling-phone-login)\n\n.enable_signup). See the configuration variables namespaced under `auth.sms`.\n\nYou also need to set up an SMS provider. Each provider has its own configuration. Supported providers include MessageBird, Twilio, Vonage, and TextLocal (community-supported).\n"
      }
    }
  },
  {
    "chunk_id": "c1eafce9-0f78-4ac1-b3ea-6b45b55117be",
    "metadata": {
      "token_count": 30,
      "source_url": "https://supabase.com/docs/guides/auth/phone-login",
      "page_title": "Phone Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Phone Login",
        "h2": "Enabling Phone Login [\\#](\\#enabling-phone-login)"
      },
      "text": "##### Textlocal (Community Supported)\n\nBy default, a user can only request an OTP once every 60 seconds and they expire after 1 hour.\n",
      "overlap_text": {
        "previous_chunk_id": "235c1a86-9753-4b42-b329-17017c874338",
        "text": "Content of the previous chunk for context: h1: Phone Login h2: Enabling Phone Login [\\#](\\#enabling-phone-login)\n\nonage Icon](https://supabase.com/docs/img/icons/vonage-icon-light.svg)\n\n##### Vonage\n\n![Textlocal (Community Supported) Icon](https://supabase.com/docs/guides/auth/Community%20Supported)\n\n"
      }
    }
  },
  {
    "chunk_id": "da5472d7-2c4b-4a1c-95f2-7d71d974cbab",
    "metadata": {
      "token_count": 93,
      "source_url": "https://supabase.com/docs/guides/auth/phone-login",
      "page_title": "Phone Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Phone Login",
        "h2": "Signing in with phone OTP [\\#](\\#signing-in-with-phone-otp)"
      },
      "text": "With OTP, a user can sign in without setting a password on their account. They need to verify their phone number each time they sign in.\n\nJavaScriptSwiftKotlinPythonHTTP\n\n`\n_10\nconst { data, error } = await supabase.auth.signInWithOtp({\n_10\nphone: '+13334445555',\n_10\n})\n`\n\nThe user receives an SMS with a 6-digit pin that you must verify within 60 seconds.\n",
      "overlap_text": {
        "previous_chunk_id": "c1eafce9-0f78-4ac1-b3ea-6b45b55117be",
        "text": "Content of the previous chunk for context: h1: Phone Login h2: Enabling Phone Login [\\#](\\#enabling-phone-login)\n\n##### Textlocal (Community Supported)\n\nBy default, a user can only request an OTP once every 60 seconds and they expire after 1 hour.\n"
      }
    }
  },
  {
    "chunk_id": "94b5d40d-15ae-469a-b569-c0b0e0c2bf11",
    "metadata": {
      "token_count": 146,
      "source_url": "https://supabase.com/docs/guides/auth/phone-login",
      "page_title": "Phone Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Phone Login",
        "h2": "Verifying a phone OTP [\\#](\\#verifying-a-phone-otp)"
      },
      "text": "To verify the one-time password (OTP) sent to the user's phone number, call [`verifyOtp()`](/docs/reference/javascript/auth-verifyotp) with the phone number and OTP:\n\nJavaScriptSwiftKotlinPythonHTTP\n\nYou should present a form to the user so they can input the 6 digit pin, then send it along with the phone number to `verifyOtp`:\n\n`\n_10\nconst {\n_10\ndata: { session },\n_10\nerror,\n_10\n} = await supabase.auth.verifyOtp({\n_10\nphone: '13334445555',\n_10\ntoken: '123456',\n_10\ntype: 'sms',\n_10\n})\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "da5472d7-2c4b-4a1c-95f2-7d71d974cbab",
        "text": "Content of the previous chunk for context: h1: Phone Login h2: Signing in with phone OTP [\\#](\\#signing-in-with-phone-otp)\n\n, error } = await supabase.auth.signInWithOtp({\n_10\nphone: '+13334445555',\n_10\n})\n`\n\nThe user receives an SMS with a 6-digit pin that you must verify within 60 seconds.\n"
      }
    }
  },
  {
    "chunk_id": "0f953340-db57-45a7-9d64-586e85943860",
    "metadata": {
      "token_count": 128,
      "source_url": "https://supabase.com/docs/guides/auth/phone-login",
      "page_title": "Phone Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Phone Login",
        "h2": "Verifying a phone OTP [\\#](\\#verifying-a-phone-otp)"
      },
      "text": "If successful the user will now be logged in and you should receive a valid session like:\n\n`\n_10\n{\n_10\n\"access_token\": \"<ACCESS_TOKEN>\",\n_10\n\"token_type\": \"bearer\",\n_10\n\"expires_in\": 3600,\n_10\n\"refresh_token\": \"<REFRESH_TOKEN>\"\n_10\n}\n`\n\nThe access token can be sent in the Authorization header as a Bearer token for any CRUD operations on supabase-js. See our guide on [Row Level Security](/docs/guides/auth#row-level-security) for more info on restricting access on a user basis.\n",
      "overlap_text": {
        "previous_chunk_id": "94b5d40d-15ae-469a-b569-c0b0e0c2bf11",
        "text": "Content of the previous chunk for context: h1: Phone Login h2: Verifying a phone OTP [\\#](\\#verifying-a-phone-otp)\n\n\nerror,\n_10\n} = await supabase.auth.verifyOtp({\n_10\nphone: '13334445555',\n_10\ntoken: '123456',\n_10\ntype: 'sms',\n_10\n})\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "e2040663-8bbb-4c53-95d9-4babd318d4d2",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/phone-login",
      "page_title": "Phone Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Phone Login",
        "h2": "Updating a phone number [\\#](\\#updating-a-phone-number)"
      },
      "text": "To update a user's phone number, the user must be logged in. Call [`updateUser()`](/docs/reference/javascript/auth-updateuser) with their phone number:\n\nJavaScriptSwiftPython\n\n`\n_10\nconst { data, error } = await supabase.auth.updateUser({\n_10\nphone: '123456789',\n_10\n})\n`\n\nThe user receives an SMS with a 6-digit pin that you must [verify](#verifying-a-phone-otp) within 60 seconds.\n",
      "overlap_text": {
        "previous_chunk_id": "0f953340-db57-45a7-9d64-586e85943860",
        "text": "Content of the previous chunk for context: h1: Phone Login h2: Verifying a phone OTP [\\#](\\#verifying-a-phone-otp)\n\n in the Authorization header as a Bearer token for any CRUD operations on supabase-js. See our guide on [Row Level Security](/docs/guides/auth#row-level-security) for more info on restricting access on a user basis.\n"
      }
    }
  },
  {
    "chunk_id": "e89d53df-c91d-4378-ac32-70e2c5740bfe",
    "metadata": {
      "token_count": 21,
      "source_url": "https://supabase.com/docs/guides/auth/phone-login",
      "page_title": "Phone Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Phone Login",
        "h2": "Updating a phone number [\\#](\\#updating-a-phone-number)"
      },
      "text": "Use the `phone_change` type when calling `verifyOTP` to update a user\u2019s phone number.\n",
      "overlap_text": {
        "previous_chunk_id": "e2040663-8bbb-4c53-95d9-4babd318d4d2",
        "text": "Content of the previous chunk for context: h1: Phone Login h2: Updating a phone number [\\#](\\#updating-a-phone-number)\n\nase.auth.updateUser({\n_10\nphone: '123456789',\n_10\n})\n`\n\nThe user receives an SMS with a 6-digit pin that you must [verify](#verifying-a-phone-otp) within 60 seconds.\n"
      }
    }
  },
  {
    "chunk_id": "bd6e413e-481e-4ab6-b2a3-a136ec77263d",
    "metadata": {
      "token_count": 60,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
      "page_title": "Flutter Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Flutter Auth UI"
      },
      "text": "* * *\n\nFlutter Auth UI is a Flutter package containing pre-built widgets for authenticating users.\nIt is unstyled and can match your brand and aesthetic.\n\n![Flutter Auth UI](https://raw.githubusercontent.com/supabase-community/flutter-auth-ui/main/screenshots/supabase_auth_ui.png)\n"
    }
  },
  {
    "chunk_id": "4379bf5c-4619-4cc2-bee4-c67603bff96c",
    "metadata": {
      "token_count": 153,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
      "page_title": "Flutter Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Flutter Auth UI",
        "h2": "Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)"
      },
      "text": "Add the latest version of the package [supabase-auth-ui](https://pub.dev/packages/supabase_auth_ui) to pubspec.yaml:\n\n`\n1\nflutter pub add supabase_auth_ui\n`\n\n### Initialize the Flutter Auth package [\\#](\\#initialize-the-flutter-auth-package)\n\n`\n1\nimport 'package:flutter/material.dart';\n2\nimport 'package:supabase_auth_ui/supabase_auth_ui.dart';\n3\n4\nvoid main() async {\n5\nawait Supabase.initialize(\n6\n    url: dotenv.get('SUPABASE_URL'),\n7\n    anonKey: dotenv.get('SUPABASE_ANON_KEY'),\n8\n);\n9\n10\nrunApp(const MyApp());\n11\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "bd6e413e-481e-4ab6-b2a3-a136ec77263d",
        "text": "Content of the previous chunk for context: h1: Flutter Auth UI\n\n containing pre-built widgets for authenticating users.\nIt is unstyled and can match your brand and aesthetic.\n\n![Flutter Auth UI](https://raw.githubusercontent.com/supabase-community/flutter-auth-ui/main/screenshots/supabase_auth_ui.png)\n"
      }
    }
  },
  {
    "chunk_id": "361f47a5-d933-46f9-9931-432569281f4b",
    "metadata": {
      "token_count": 217,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
      "page_title": "Flutter Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Flutter Auth UI",
        "h2": "Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)"
      },
      "text": "### Email Auth [\\#](\\#email-auth)\n\nUse a SupaEmailAuth widget to create an email and password signin and signup form. It also contains a button to toggle to display a forgot password form.\n\nYou can pass metadataFields to add additional fields to the form to pass as metadata to Supabase.\n\n`\n1\nSupaEmailAuth(\n2\nredirectTo: kIsWeb ? null : 'io.mydomain.myapp://callback',\n3\nonSignInComplete: (response) {},\n4\nonSignUpComplete: (response) {},\n5\nmetadataFields: [\\\n6\\\n    MetaDataField(\\\n7\\\n    prefixIcon: const Icon(Icons.person),\\\n8\\\n    label: 'Username',\\\n9\\\n    key: 'username',\\\n10\\\n    validator: (val) {\\\n11\\\n            if (val == null || val.isEmpty) {\\\n12\\\n            return 'Please enter something';\\\n13\\\n            }\\\n14\\\n            return null;\\\n15\\\n          },\\\n16\\\n        ),\\\n17\\\n    ],\n18\n)\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "4379bf5c-4619-4cc2-bee4-c67603bff96c",
        "text": "Content of the previous chunk for context: h1: Flutter Auth UI h2: Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)\n\n Supabase.initialize(\n6\n    url: dotenv.get('SUPABASE_URL'),\n7\n    anonKey: dotenv.get('SUPABASE_ANON_KEY'),\n8\n);\n9\n10\nrunApp(const MyApp());\n11\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "4dd39af2-7bc9-4290-9dd6-40f3542c5e59",
    "metadata": {
      "token_count": 101,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
      "page_title": "Flutter Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Flutter Auth UI",
        "h2": "Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)"
      },
      "text": "### Magic link Auth [\\#](\\#magic-link-auth)\n\nUse SupaMagicAuth widget to create a magic link signIn form.\n\n`\n1\nSupaMagicAuth(\n2\nredirectUrl: kIsWeb ? null : 'io.mydomain.myapp://callback',\n3\nonSuccess: (Session response) {},\n4\nonError: (error) {},\n5\n)\n`\n\n### Reset password [\\#](\\#reset-password)\n\nUse SupaResetPassword to create a password reset form.\n",
      "overlap_text": {
        "previous_chunk_id": "361f47a5-d933-46f9-9931-432569281f4b",
        "text": "Content of the previous chunk for context: h1: Flutter Auth UI h2: Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)\n\n            if (val == null || val.isEmpty) {\\\n12\\\n            return 'Please enter something';\\\n13\\\n            }\\\n14\\\n            return null;\\\n15\\\n          },\\\n16\\\n        ),\\\n17\\\n    ],\n18\n)\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "4f03d26d-0b6f-4dcf-94b5-c76cbc259855",
    "metadata": {
      "token_count": 104,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
      "page_title": "Flutter Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Flutter Auth UI",
        "h2": "Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)"
      },
      "text": "\n`\n1\nSupaResetPassword(\n2\naccessToken: supabase.auth.currentSession?.accessToken,\n3\nonSuccess: (UserResponse response) {},\n4\nonError: (error) {},\n5\n)\n`\n\n### Phone Auth [\\#](\\#phone-auth)\n\nUse SupaPhoneAuth to create a phone authentication form.\n\n`\n1\nSupaPhoneAuth(\n2\nauthAction: SupaAuthAction.signUp,\n3\nonSuccess: (AuthResponse response) {},\n4\n),\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "4dd39af2-7bc9-4290-9dd6-40f3542c5e59",
        "text": "Content of the previous chunk for context: h1: Flutter Auth UI h2: Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)\n\napp://callback',\n3\nonSuccess: (Session response) {},\n4\nonError: (error) {},\n5\n)\n`\n\n### Reset password [\\#](\\#reset-password)\n\nUse SupaResetPassword to create a password reset form.\n"
      }
    }
  },
  {
    "chunk_id": "9e39641b-c014-4b73-b593-9b4025bffcff",
    "metadata": {
      "token_count": 131,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
      "page_title": "Flutter Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Flutter Auth UI",
        "h2": "Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)"
      },
      "text": "### Social Auth [\\#](\\#social-auth)\n\nThe package supports login with [official social providers](../../auth#providers).\n\nUse SupaSocialsAuth to create list of social login buttons.\n\n`\n1\nSupaSocialsAuth(\n2\nsocialProviders: [\\\n3\\\n    OAuthProvider.apple,\\\n4\\\n    OAuthProvider.google,\\\n5\\\n],\n6\ncolored: true,\n7\nredirectUrl: kIsWeb\n8\n    ? null\n9\n    : 'io.mydomain.myapp://callback',\n10\nonSuccess: (Session response) {},\n11\nonError: (error) {},\n12\n)\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "4f03d26d-0b6f-4dcf-94b5-c76cbc259855",
        "text": "Content of the previous chunk for context: h1: Flutter Auth UI h2: Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)\n\nphone-auth)\n\nUse SupaPhoneAuth to create a phone authentication form.\n\n`\n1\nSupaPhoneAuth(\n2\nauthAction: SupaAuthAction.signUp,\n3\nonSuccess: (AuthResponse response) {},\n4\n),\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "99276edb-f485-4bbd-9be2-e7587bfea396",
    "metadata": {
      "token_count": 107,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
      "page_title": "Flutter Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Flutter Auth UI",
        "h2": "Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)"
      },
      "text": "### Theming [\\#](\\#theming)\n\nThis package uses plain Flutter components allowing you to control the appearance of the components using your own theme.\n\n### Is this helpful?\n\nYesNo\n\nThanks for your feedback!\n\nOn this page\n\n- [Add Flutter Auth UI](#add-flutter-auth-ui)\n- [Initialize the Flutter Auth package](#initialize-the-flutter-auth-package)\n- [Email Auth](#email-auth)\n- [Magic link Auth](#magic-link-auth)\n- [Reset password](#reset-password)\n",
      "overlap_text": {
        "previous_chunk_id": "9e39641b-c014-4b73-b593-9b4025bffcff",
        "text": "Content of the previous chunk for context: h1: Flutter Auth UI h2: Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)\n\n\nredirectUrl: kIsWeb\n8\n    ? null\n9\n    : 'io.mydomain.myapp://callback',\n10\nonSuccess: (Session response) {},\n11\nonError: (error) {},\n12\n)\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "fb1ea4ca-f010-4b54-8f78-f408b22ed61f",
    "metadata": {
      "token_count": 72,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers/flutter-auth-ui",
      "page_title": "Flutter Auth UI | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Flutter Auth UI",
        "h2": "Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)"
      },
      "text": "- [Phone Auth](#phone-auth)\n- [Social Auth](#social-auth)\n- [Theming](#theming)\n\n1. We only collect analytics essential to ensuring smooth operation of our services. [Learn more](https://supabase.com/privacy)\n\n\n\n\n\n   AcceptOpt out[Learn more](https://supabase.com/privacy)\n",
      "overlap_text": {
        "previous_chunk_id": "99276edb-f485-4bbd-9be2-e7587bfea396",
        "text": "Content of the previous chunk for context: h1: Flutter Auth UI h2: Add Flutter Auth UI [\\#](\\#add-flutter-auth-ui)\n\n-flutter-auth-ui)\n- [Initialize the Flutter Auth package](#initialize-the-flutter-auth-package)\n- [Email Auth](#email-auth)\n- [Magic link Auth](#magic-link-auth)\n- [Reset password](#reset-password)\n"
      }
    }
  },
  {
    "chunk_id": "252c50b3-963e-42db-89e9-806782e176e6",
    "metadata": {
      "token_count": 104,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/migrating-to-ssr-from-auth-helpers",
      "page_title": "Migrating to the SSR package from Auth Helpers | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Migrating to the SSR package from Auth Helpers"
      },
      "text": "* * *\n\nThe new `ssr` package takes the core concepts of the Auth Helpers and makes them available to any server language or framework. This page will guide you through migrating from the Auth Helpers package to `ssr`.\n\n### Replacing Supabase packages [\\#](\\#replacing-supabase-packages)\n\nNext.jsSvelteKitRemix\n\n`\n_10\nnpm uninstall @supabase/auth-helpers-nextjs\n`\n\n`\n_10\nnpm install @supabase/ssr\n`\n\n"
    }
  },
  {
    "chunk_id": "58c5cb13-dd7a-4ad8-9462-43ac2e491551",
    "metadata": {
      "token_count": 90,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/migrating-to-ssr-from-auth-helpers",
      "page_title": "Migrating to the SSR package from Auth Helpers | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Migrating to the SSR package from Auth Helpers"
      },
      "text": "### Creating a client [\\#](\\#creating-a-client)\n\nThe new `ssr` package exports two functions for creating a Supabase client. The `createBrowserClient` function is used in the client, and the `createServerClient` function is used in the server.\n\nCheck out the [Creating a client](/docs/guides/auth/server-side/creating-a-client) page for examples of creating a client in your framework.\n",
      "overlap_text": {
        "previous_chunk_id": "252c50b3-963e-42db-89e9-806782e176e6",
        "text": "Content of the previous chunk for context: h1: Migrating to the SSR package from Auth Helpers\n\n#](\\#replacing-supabase-packages)\n\nNext.jsSvelteKitRemix\n\n`\n_10\nnpm uninstall @supabase/auth-helpers-nextjs\n`\n\n`\n_10\nnpm install @supabase/ssr\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "92cc149a-08b3-4266-b64e-ba2370d37f32",
    "metadata": {
      "token_count": 74,
      "source_url": "https://supabase.com/docs/guides/auth/server-side/migrating-to-ssr-from-auth-helpers",
      "page_title": "Migrating to the SSR package from Auth Helpers | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Migrating to the SSR package from Auth Helpers",
        "h2": "Next steps [\\#](\\#next-steps)"
      },
      "text": "- Implement [Authentication using Email and Password](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\n- Implement [Authentication using OAuth](/docs/guides/auth/server-side/oauth-with-pkce-flow-for-ssr)\n- [Learn more about SSR](/docs/guides/auth/server-side-rendering)\n",
      "overlap_text": {
        "previous_chunk_id": "58c5cb13-dd7a-4ad8-9462-43ac2e491551",
        "text": "Content of the previous chunk for context: h1: Migrating to the SSR package from Auth Helpers\n\n in the client, and the `createServerClient` function is used in the server.\n\nCheck out the [Creating a client](/docs/guides/auth/server-side/creating-a-client) page for examples of creating a client in your framework.\n"
      }
    }
  },
  {
    "chunk_id": "03a0ddd3-9ee6-4394-b2e5-598b59ab115d",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/nextjs",
      "page_title": "Use Supabase Auth with Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with Next.js",
        "h2": "Learn how to configure Supabase Auth for the Next.js App Router."
      },
      "text": "* * *\n\n1\n\n### Create a new Supabase project\n\nHead over to [database.new](https://database.new) and create a new Supabase project.\n\nYour new database has a table for storing your users. You can see that this table is currently empty by running some SQL in the [SQL Editor](https://supabase.com/dashboard/project/_/sql/new).\n\nSQL\\_EDITOR\n\n`\n_10\nselect * from auth.users;\n`\n\n2\n\n### Create a Next.js app\n\n"
    }
  },
  {
    "chunk_id": "2fb46f9f-0f03-4b02-911f-f4bdbebf02e6",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/nextjs",
      "page_title": "Use Supabase Auth with Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with Next.js",
        "h2": "Learn how to configure Supabase Auth for the Next.js App Router."
      },
      "text": "Use the `create-next-app` command and the `with-supabase` template, to create a Next.js app pre-configured with:\n\n- [Cookie-based Auth](https://supabase.com/docs/guides/auth/auth-helpers/nextjs)\n- [TypeScript](https://www.typescriptlang.org/)\n- [Tailwind CSS](https://tailwindcss.com/)\n\n[See GitHub repo](https://github.com/vercel/next.js/tree/canary/examples/with-supabase)\n\n",
      "overlap_text": {
        "previous_chunk_id": "03a0ddd3-9ee6-4394-b2e5-598b59ab115d",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with Next.js h2: Learn how to configure Supabase Auth for the Next.js App Router.\n\n is currently empty by running some SQL in the [SQL Editor](https://supabase.com/dashboard/project/_/sql/new).\n\nSQL\\_EDITOR\n\n`\n_10\nselect * from auth.users;\n`\n\n2\n\n### Create a Next.js app\n\n"
      }
    }
  },
  {
    "chunk_id": "dc8437ca-2cc9-49c9-95c7-dddfd52eba59",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/nextjs",
      "page_title": "Use Supabase Auth with Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with Next.js",
        "h2": "Learn how to configure Supabase Auth for the Next.js App Router."
      },
      "text": "Terminal\n\n`\n_10\nnpx create-next-app -e with-supabase\n`\n\n3\n\n### Declare Supabase Environment Variables\n\nRename `.env.local.example` to `.env.local` and populate with [your project's URL and Anon Key](https://supabase.com/dashboard/project/_/settings/api).\n\n.env.local\n\n`\n_10\nNEXT_PUBLIC_SUPABASE_URL=your-project-url\n_10\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "2fb46f9f-0f03-4b02-911f-f4bdbebf02e6",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with Next.js h2: Learn how to configure Supabase Auth for the Next.js App Router.\n\nScript](https://www.typescriptlang.org/)\n- [Tailwind CSS](https://tailwindcss.com/)\n\n[See GitHub repo](https://github.com/vercel/next.js/tree/canary/examples/with-supabase)\n\n"
      }
    }
  },
  {
    "chunk_id": "510781b6-39cd-4531-a139-904f004572b9",
    "metadata": {
      "token_count": 108,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/nextjs",
      "page_title": "Use Supabase Auth with Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with Next.js",
        "h2": "Learn how to configure Supabase Auth for the Next.js App Router."
      },
      "text": "4\n\n### Start the app\n\nStart the development server, go to [http://localhost:3000](http://localhost:3000) in a browser, and you should see the contents of `app/page.tsx`.\n\nTo Sign Up a new user, navigate to [http://localhost:3000/login](http://localhost:3000/login), and click `Sign Up Now`.\n\nCheck out the [Supabase Auth docs](https://supabase.com/docs/guides/auth#authentication) for more authentication methods.\n",
      "overlap_text": {
        "previous_chunk_id": "dc8437ca-2cc9-49c9-95c7-dddfd52eba59",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with Next.js h2: Learn how to configure Supabase Auth for the Next.js App Router.\n\n](https://supabase.com/dashboard/project/_/settings/api).\n\n.env.local\n\n`\n_10\nNEXT_PUBLIC_SUPABASE_URL=your-project-url\n_10\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "2416b185-5a8d-43c7-bf52-0a69a0d4b7da",
    "metadata": {
      "token_count": 12,
      "source_url": "https://supabase.com/docs/guides/auth/quickstarts/nextjs",
      "page_title": "Use Supabase Auth with Next.js | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Use Supabase Auth with Next.js",
        "h2": "Learn how to configure Supabase Auth for the Next.js App Router."
      },
      "text": "\nTerminal\n\n`\n_10\nnpm run dev\n`\n",
      "overlap_text": {
        "previous_chunk_id": "510781b6-39cd-4531-a139-904f004572b9",
        "text": "Content of the previous chunk for context: h1: Use Supabase Auth with Next.js h2: Learn how to configure Supabase Auth for the Next.js App Router.\n\nlocalhost:3000/login](http://localhost:3000/login), and click `Sign Up Now`.\n\nCheck out the [Supabase Auth docs](https://supabase.com/docs/guides/auth#authentication) for more authentication methods.\n"
      }
    }
  },
  {
    "chunk_id": "1f0e3c33-da8b-4c4c-9036-c4a6b6e98d22",
    "metadata": {
      "token_count": 157,
      "source_url": "https://supabase.com/docs/guides/auth/password-security",
      "page_title": "Password security | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password security",
        "h2": "Help your users to protect their password security"
      },
      "text": "* * *\n\nA password is more secure if it is harder to guess or brute-force. In theory, a password is harder to guess if it is longer. It is also harder to guess if it uses a larger set of characters (for example, digits, lowercase and uppercase letters, and symbols).\n\nThis table shows the _minimum_ number of guesses that need to be tried to access a user's account:\n\n| Required characters | Length | Guesses |\n| --- | --- | --- |\n| Digits only | 8 | ~ 227 |\n| Digits and letters | 8 | ~ 241 |\n| Digits, lower and uppercase letters | 8 | ~ 248 |\n| Digits, lower and uppercase letters, symbols | 8 | ~ 252 |\n\n"
    }
  },
  {
    "chunk_id": "e8205184-0161-4910-a1b6-a48d5dced6bd",
    "metadata": {
      "token_count": 84,
      "source_url": "https://supabase.com/docs/guides/auth/password-security",
      "page_title": "Password security | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password security",
        "h2": "Help your users to protect their password security"
      },
      "text": "In reality though, passwords are not always generated at random. They often contain variations of names, words, dates, and common phrases. Malicious actors can use these properties to guess a password in fewer attempts.\n\nThere are hundreds of millions (and growing!) known passwords out there. Malicious actors can use these lists of leaked passwords to automate login attempts (known as credential stuffing) and steal or access sensitive user data.\n",
      "overlap_text": {
        "previous_chunk_id": "1f0e3c33-da8b-4c4c-9036-c4a6b6e98d22",
        "text": "Content of the previous chunk for context: h1: Password security h2: Help your users to protect their password security\n\n 227 |\n| Digits and letters | 8 | ~ 241 |\n| Digits, lower and uppercase letters | 8 | ~ 248 |\n| Digits, lower and uppercase letters, symbols | 8 | ~ 252 |\n\n"
      }
    }
  },
  {
    "chunk_id": "00e5d140-892d-4022-a8d7-c3182fe1118a",
    "metadata": {
      "token_count": 155,
      "source_url": "https://supabase.com/docs/guides/auth/password-security",
      "page_title": "Password security | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password security",
        "h2": "Password strength and leaked password protection [\\#](\\#password-strength-and-leaked-password-protection)"
      },
      "text": "To help protect your users, Supabase Auth allows you fine-grained control over the strength of the passwords used on your project. You can configure these in your project's [Auth settings](/dashboard/project/_/settings/auth):\n\n- Set a large minimum password length. Anything less than 8 characters is not recommended.\n- Set the required characters that must appear at least once in a user's password. Use the strongest option of requiring digits, lowercase and uppercase letters, and symbols.\n- Prevent the use of leaked passwords. Supabase Auth uses the open-source [HaveIBeenPwned.org Pwned Passwords API](https://haveibeenpwned.com/Passwords) to reject passwords that have been leaked and are known by malicious actors.\n",
      "overlap_text": {
        "previous_chunk_id": "e8205184-0161-4910-a1b6-a48d5dced6bd",
        "text": "Content of the previous chunk for context: h1: Password security h2: Help your users to protect their password security\n\n to guess a password in fewer attempts.\n\nThere are hundreds of millions (and growing!) known passwords out there. Malicious actors can use these lists of leaked passwords to automate login attempts (known as credential stuffing) and steal or access sensitive user data.\n"
      }
    }
  },
  {
    "chunk_id": "c1e41e92-38b1-468e-9edf-e93f21423287",
    "metadata": {
      "token_count": 68,
      "source_url": "https://supabase.com/docs/guides/auth/password-security",
      "page_title": "Password security | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password security",
        "h2": "Additional recommendations [\\#](\\#additional-recommendations)"
      },
      "text": "In addition to choosing suitable password strength settings and preventing the use of leaked passwords, consider asking your users to:\n\n- Use a password manager to store and generate passwords.\n- Avoid password reuse across websites and apps.\n- Avoid using personal information in passwords.\n- Use [Multi-Factor Authentication](/docs/guides/auth/auth-mfa).\n",
      "overlap_text": {
        "previous_chunk_id": "00e5d140-892d-4022-a8d7-c3182fe1118a",
        "text": "Content of the previous chunk for context: h1: Password security h2: Password strength and leaked password protection [\\#](\\#password-strength-and-leaked-password-protection)\n\n. Supabase Auth uses the open-source [HaveIBeenPwned.org Pwned Passwords API](https://haveibeenpwned.com/Passwords) to reject passwords that have been leaked and are known by malicious actors.\n"
      }
    }
  },
  {
    "chunk_id": "1c5c1dab-505b-4e96-9560-ff86b33a75bf",
    "metadata": {
      "token_count": 124,
      "source_url": "https://supabase.com/docs/guides/auth/password-security",
      "page_title": "Password security | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password security",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "### How are passwords stored? [\\#](\\#how-are-passwords-stored)\n\nSupabase Auth uses [bcrypt](https://en.wikipedia.org/wiki/Bcrypt), a strong password hashing function, to store hashes of users' passwords. Only hashed passwords are stored. You cannot impersonate a user with the password hash. Each hash is accompanied by a randomly generated salt parameter for extra security.\n\nThe hash is stored in the `encrypted_password` column of the `auth.users` table. The column's name is a misnomer (cryptographic hashing is not encryption), but is kept for backward compatibility.\n",
      "overlap_text": {
        "previous_chunk_id": "c1e41e92-38b1-468e-9edf-e93f21423287",
        "text": "Content of the previous chunk for context: h1: Password security h2: Additional recommendations [\\#](\\#additional-recommendations)\n\n your users to:\n\n- Use a password manager to store and generate passwords.\n- Avoid password reuse across websites and apps.\n- Avoid using personal information in passwords.\n- Use [Multi-Factor Authentication](/docs/guides/auth/auth-mfa).\n"
      }
    }
  },
  {
    "chunk_id": "fd49d8e2-0907-4a70-97e1-dea5ac7bbcb8",
    "metadata": {
      "token_count": 116,
      "source_url": "https://supabase.com/docs/guides/auth/password-security",
      "page_title": "Password security | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Password security",
        "h2": "Frequently asked questions [\\#](\\#frequently-asked-questions)"
      },
      "text": "\n### How will strengthened password requirements affect current users? [\\#](\\#how-will-strengthened-password-requirements-affect-current-users)\n\nExisting users can still sign in with their current password even if it doesn't meet the new, strengthened password requirements. However, if their password falls short of these updated standards, they will encounter a `WeakPasswordError` during the `signInWithPassword` process, explaining why it's considered weak. This change is also applicable to new users and existing users changing their passwords, ensuring everyone adheres to the enhanced security standards.\n",
      "overlap_text": {
        "previous_chunk_id": "1c5c1dab-505b-4e96-9560-ff86b33a75bf",
        "text": "Content of the previous chunk for context: h1: Password security h2: Frequently asked questions [\\#](\\#frequently-asked-questions)\n\n generated salt parameter for extra security.\n\nThe hash is stored in the `encrypted_password` column of the `auth.users` table. The column's name is a misnomer (cryptographic hashing is not encryption), but is kept for backward compatibility.\n"
      }
    }
  },
  {
    "chunk_id": "6145cad5-d0b4-4bba-abd3-56b33b115d51",
    "metadata": {
      "token_count": 88,
      "source_url": "https://supabase.com/docs/guides/auth/social-login",
      "page_title": "Social Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Social Login"
      },
      "text": "* * *\n\nSocial Login (OAuth) is an open standard for authentication that allows users to log in to one website or application using their credentials from another website or application. OAuth allows users to grant third-party applications access to their online accounts without sharing their passwords.\nOAuth is commonly used for things like logging in to a social media account from a third-party app. It is a secure and convenient way to authenticate users and share information between applications.\n"
    }
  },
  {
    "chunk_id": "6678b9c2-b2bc-49bd-8559-a50ad4d3cf3c",
    "metadata": {
      "token_count": 120,
      "source_url": "https://supabase.com/docs/guides/auth/social-login",
      "page_title": "Social Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Social Login",
        "h2": "Benefits [\\#](\\#benefits)"
      },
      "text": "There are several reasons why you might want to add social login to your applications:\n\n- **Improved user experience**: Users can register and log in to your application using their existing social media accounts, which can be faster and more convenient than creating a new account from scratch. This makes it easier for users to access your application, improving their overall experience.\n\n- **Better user engagement**: You can access additional data and insights about your users, such as their interests, demographics, and social connections. This can help you tailor your content and marketing efforts to better engage with your users and provide a more personalized experience.\n",
      "overlap_text": {
        "previous_chunk_id": "6145cad5-d0b4-4bba-abd3-56b33b115d51",
        "text": "Content of the previous chunk for context: h1: Social Login\n\n grant third-party applications access to their online accounts without sharing their passwords.\nOAuth is commonly used for things like logging in to a social media account from a third-party app. It is a secure and convenient way to authenticate users and share information between applications.\n"
      }
    }
  },
  {
    "chunk_id": "277efe58-ac3a-4237-870f-05b7d40e5fac",
    "metadata": {
      "token_count": 48,
      "source_url": "https://supabase.com/docs/guides/auth/social-login",
      "page_title": "Social Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Social Login",
        "h2": "Benefits [\\#](\\#benefits)"
      },
      "text": "\n- **Increased security**: Social login can improve the security of your application by leveraging the security measures and authentication protocols of the social media platforms that your users are logging in with. This can help protect against unauthorized access and account takeovers.\n",
      "overlap_text": {
        "previous_chunk_id": "6678b9c2-b2bc-49bd-8559-a50ad4d3cf3c",
        "text": "Content of the previous chunk for context: h1: Social Login h2: Benefits [\\#](\\#benefits)\n\n **Better user engagement**: You can access additional data and insights about your users, such as their interests, demographics, and social connections. This can help you tailor your content and marketing efforts to better engage with your users and provide a more personalized experience.\n"
      }
    }
  },
  {
    "chunk_id": "dd7e7b70-8857-4e39-b9d2-baa7559f60cd",
    "metadata": {
      "token_count": 790,
      "source_url": "https://supabase.com/docs/guides/auth/social-login",
      "page_title": "Social Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Social Login",
        "h2": "Set up a social provider with Supabase Auth [\\#](\\#set-up-a-social-provider-with-supabase-auth)"
      },
      "text": "Supabase supports a suite of social providers. Follow these guides to configure a social provider for your platform.\n\n[![Google Icon](https://supabase.com/docs/img/icons/google-icon.svg)\\\\\n\\\\\n**Google**](/docs/guides/auth/social-login/auth-google) [![Facebook Icon](https://supabase.com/docs/img/icons/facebook-icon.svg)\\\\\n\\\\\n**Facebook**](/docs/guides/auth/social-login/auth-facebook) [![Apple Icon](https://supabase.com/docs/img/icons/apple-icon.svg)\\\\\n\\\\\n**Apple**](/docs/guides/auth/social-login/auth-apple) [![Azure (Microsoft) Icon](https://supabase.com/docs/guides/auth/Microsoft)\\\\\n\\\\\n**Azure (Microsoft)**](/docs/guides/auth/social-login/auth-azure) [![Twitter Icon](https://supabase.com/docs/img/icons/twitter-icon-light.svg)\\\\\n\\\\\n**Twitter**](/docs/guides/auth/social-login/auth-twitter) [![GitHub Icon](https://supabase.com/docs/img/icons/github-icon-light.svg)\\\\\n\\\\\n**GitHub**](/docs/guides/auth/social-login/auth-github) [![Gitlab Icon](https://supabase.com/docs/img/icons/gitlab-icon.svg)\\\\\n\\\\\n**Gitlab**](/docs/guides/auth/social-login/auth-gitlab) [![Bitbucket Icon](https://supabase.com/docs/img/icons/bitbucket-icon.svg)\\\\\n\\\\\n**Bitbucket**](/docs/guides/auth/social-login/auth-bitbucket) [![Discord Icon](https://supabase.com/docs/img/icons/discord-icon.svg)\\\\\n\\\\\n**Discord**](/docs/guides/auth/social-login/auth-discord) [![Figma Icon](https://supabase.com/docs/img/icons/figma-icon.svg)\\\\\n\\\\\n**Figma**](/docs/guides/auth/social-login/auth-figma) [![Kakao Icon](https://supabase.com/docs/img/icons/kakao-icon.svg)\\\\\n\\\\\n**Kakao**](/docs/guides/auth/social-login/auth-kakao) [![Keycloak Icon](https://supabase.com/docs/img/icons/keycloak-icon.svg)\\\\\n\\\\\n**Keycloak**](/docs/guides/auth/social-login/auth-keycloak) [![LinkedIn Icon](https://supabase.com/docs/img/icons/linkedin-icon.svg)\\\\\n\\\\\n**LinkedIn**](/docs/guides/auth/social-login/auth-linkedin) [![Notion Icon](https://supabase.com/docs/img/icons/notion-icon.svg)\\\\\n\\\\\n**Notion**](/docs/guides/auth/social-login/auth-notion) [![Slack Icon](https://supabase.com/docs/img/icons/slack-icon.svg)\\\\\n\\\\\n**Slack**](/docs/guides/auth/social-login/auth-slack) [![Spotify Icon](https://supabase.com/docs/img/icons/spotify-icon.svg)\\\\\n\\\\\n**Spotify**](/docs/guides/auth/social-login/auth-spotify) [![Twitch Icon](https://supabase.com/docs/img/icons/twitch-icon.svg)\\\\\n\\\\\n**Twitch**](/docs/guides/auth/social-login/auth-twitch) [![WorkOS Icon](https://supabase.com/docs/img/icons/workos-icon.svg)\\\\\n\\\\\n**WorkOS**](/docs/guides/auth/social-login/auth-workos) [![Zoom Icon](https://supabase.com/docs/img/icons/zoom-icon.svg)\\\\\n\\\\\n**Zoom**](/docs/guides/auth/social-login/auth-zoom)\n",
      "overlap_text": {
        "previous_chunk_id": "277efe58-ac3a-4237-870f-05b7d40e5fac",
        "text": "Content of the previous chunk for context: h1: Social Login h2: Benefits [\\#](\\#benefits)\n\n\n- **Increased security**: Social login can improve the security of your application by leveraging the security measures and authentication protocols of the social media platforms that your users are logging in with. This can help protect against unauthorized access and account takeovers.\n"
      }
    }
  },
  {
    "chunk_id": "d519fdfe-f2c5-4993-a733-459ade62e112",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/social-login",
      "page_title": "Social Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Social Login",
        "h2": "Provider tokens [\\#](\\#provider-tokens)"
      },
      "text": "You can use the provider token and provider refresh token returned to make API calls to the OAuth provider. For example, you can use the Google provider token to access Google APIs on behalf of your user.\n\nSupabase Auth does not manage refreshing the provider token for the user. Your application will need to use the provider refresh token to obtain a new provider token. If no provider refresh token is returned, then it could mean one of the following:\n\n- The OAuth provider does not return a refresh token\n",
      "overlap_text": {
        "previous_chunk_id": "dd7e7b70-8857-4e39-b9d2-baa7559f60cd",
        "text": "Content of the previous chunk for context: h1: Social Login h2: Set up a social provider with Supabase Auth [\\#](\\#set-up-a-social-provider-with-supabase-auth)\n\ndocs/guides/auth/social-login/auth-workos) [![Zoom Icon](https://supabase.com/docs/img/icons/zoom-icon.svg)\\\\\n\\\\\n**Zoom**](/docs/guides/auth/social-login/auth-zoom)\n"
      }
    }
  },
  {
    "chunk_id": "c91ada51-a6ed-480d-bc45-9002a61f68df",
    "metadata": {
      "token_count": 102,
      "source_url": "https://supabase.com/docs/guides/auth/social-login",
      "page_title": "Social Login | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Social Login",
        "h2": "Provider tokens [\\#](\\#provider-tokens)"
      },
      "text": "- Additional scopes need to be specified in order for the OAuth provider to return a refresh token.\n\nProvider tokens are intentionally not stored in your project's database. This is because provider tokens give access to potentially sensitive user data in third-party systems. Different applications have different needs, and one application's OAuth scopes may be significantly more permissive than another. If you want to use the provider token outside of the browser that completed the OAuth flow, it is recommended to send it to a trusted and secure server you control.\n",
      "overlap_text": {
        "previous_chunk_id": "d519fdfe-f2c5-4993-a733-459ade62e112",
        "text": "Content of the previous chunk for context: h1: Social Login h2: Provider tokens [\\#](\\#provider-tokens)\n\n token for the user. Your application will need to use the provider refresh token to obtain a new provider token. If no provider refresh token is returned, then it could mean one of the following:\n\n- The OAuth provider does not return a refresh token\n"
      }
    }
  },
  {
    "chunk_id": "10ee054a-9940-4cbc-bdb5-6524e6bbe9ef",
    "metadata": {
      "token_count": 74,
      "source_url": "https://supabase.com/docs/guides/auth/auth-captcha",
      "page_title": "Enable Captcha Protection | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Enable Captcha Protection"
      },
      "text": "* * *\n\nSupabase provides you with the option of adding captcha to your sign-in, sign-up, and password reset forms. This keeps your website safe from bots and malicious scripts. Supabase authentication has support for [hCaptcha](https://www.hcaptcha.com/) and [Cloudflare Turnstile](https://www.cloudflare.com/products/turnstile/).\n"
    }
  },
  {
    "chunk_id": "e52b0d5e-45c4-45c2-8d68-c731346aaef8",
    "metadata": {
      "token_count": 100,
      "source_url": "https://supabase.com/docs/guides/auth/auth-captcha",
      "page_title": "Enable Captcha Protection | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Enable Captcha Protection",
        "h2": "Sign up for Captcha [\\#](\\#sign-up-for-captcha)"
      },
      "text": "HCaptchaTurnstile\n\nGo to the [hCaptcha](https://www.hcaptcha.com/) website and sign up for an account. On the Welcome page, copy the **Sitekey** and **Secret key**.\n\nIf you have already signed up and didn't copy this information from the Welcome page, you can get the **Secret key** from the Settings page.\n\n![site_secret_settings.png](https://supabase.com/docs/img/guides/auth-captcha/site_secret_settings.png)\n\n",
      "overlap_text": {
        "previous_chunk_id": "10ee054a-9940-4cbc-bdb5-6524e6bbe9ef",
        "text": "Content of the previous chunk for context: h1: Enable Captcha Protection\n\n reset forms. This keeps your website safe from bots and malicious scripts. Supabase authentication has support for [hCaptcha](https://www.hcaptcha.com/) and [Cloudflare Turnstile](https://www.cloudflare.com/products/turnstile/).\n"
      }
    }
  },
  {
    "chunk_id": "2ff85d0d-a5ae-4931-a2b3-d3ac9a60b81a",
    "metadata": {
      "token_count": 86,
      "source_url": "https://supabase.com/docs/guides/auth/auth-captcha",
      "page_title": "Enable Captcha Protection | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Enable Captcha Protection",
        "h2": "Sign up for Captcha [\\#](\\#sign-up-for-captcha)"
      },
      "text": "The **Sitekey** can be found in the **Settings** of the active site you created.\n\n![sites_dashboard.png](https://supabase.com/docs/img/guides/auth-captcha/sites_dashboard.png)\n\nIn the Settings page, look for the **Sitekey** section and copy the key.\n\n![sitekey_settings.png](https://supabase.com/docs/img/guides/auth-captcha/sitekey_settings.png)\n",
      "overlap_text": {
        "previous_chunk_id": "e52b0d5e-45c4-45c2-8d68-c731346aaef8",
        "text": "Content of the previous chunk for context: h1: Enable Captcha Protection h2: Sign up for Captcha [\\#](\\#sign-up-for-captcha)\n\n up and didn't copy this information from the Welcome page, you can get the **Secret key** from the Settings page.\n\n![site_secret_settings.png](https://supabase.com/docs/img/guides/auth-captcha/site_secret_settings.png)\n\n"
      }
    }
  },
  {
    "chunk_id": "9b838a10-e930-4830-bac7-226876a7cf8c",
    "metadata": {
      "token_count": 79,
      "source_url": "https://supabase.com/docs/guides/auth/auth-captcha",
      "page_title": "Enable Captcha Protection | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Enable Captcha Protection",
        "h2": "Enable Captcha protection for your Supabase project [\\#](\\#enable-captcha-protection-for-your-supabase-project)"
      },
      "text": "Navigate to the **[Auth](https://supabase.com/dashboard/project/_/settings/auth)** section of your Project Settings in the Supabase Dashboard and find the **Enable Captcha protection** toggle under Settings > Authentication > Bot and Abuse Protection > Enable Captcha protection.\n\nSelect your CAPTCHA provider from the dropdown, enter your Captcha **Secret key**, and click **Save**.\n",
      "overlap_text": {
        "previous_chunk_id": "2ff85d0d-a5ae-4931-a2b3-d3ac9a60b81a",
        "text": "Content of the previous chunk for context: h1: Enable Captcha Protection h2: Sign up for Captcha [\\#](\\#sign-up-for-captcha)\n\n/auth-captcha/sites_dashboard.png)\n\nIn the Settings page, look for the **Sitekey** section and copy the key.\n\n![sitekey_settings.png](https://supabase.com/docs/img/guides/auth-captcha/sitekey_settings.png)\n"
      }
    }
  },
  {
    "chunk_id": "b02a752e-bfa7-4c50-a46e-39dccb0e4349",
    "metadata": {
      "token_count": 111,
      "source_url": "https://supabase.com/docs/guides/auth/auth-captcha",
      "page_title": "Enable Captcha Protection | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Enable Captcha Protection",
        "h2": "Add the Captcha frontend component [\\#](\\#add-the-captcha-frontend-component)"
      },
      "text": "The frontend requires some changes to provide the captcha on-screen for the user. This example uses React and the corresponding Captcha React component, but both Captcha providers can be used with any JavaScript framework.\n\nHCaptchaTurnstile\n\nInstall `@hcaptcha/react-hcaptcha` in your project as a dependency.\n\n`\n_10\nnpm install @hcaptcha/react-hcaptcha\n`\n\nNow import the `HCaptcha` component from the `@hcaptcha/react-hcaptcha` library.\n\n`\n_10\nimport HCaptcha from '@hcaptcha/react-hcaptcha'\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "9b838a10-e930-4830-bac7-226876a7cf8c",
        "text": "Content of the previous chunk for context: h1: Enable Captcha Protection h2: Enable Captcha protection for your Supabase project [\\#](\\#enable-captcha-protection-for-your-supabase-project)\n\nase Dashboard and find the **Enable Captcha protection** toggle under Settings > Authentication > Bot and Abuse Protection > Enable Captcha protection.\n\nSelect your CAPTCHA provider from the dropdown, enter your Captcha **Secret key**, and click **Save**.\n"
      }
    }
  },
  {
    "chunk_id": "ff3dd4a0-1c9f-469e-83c6-aa10f0fcf79f",
    "metadata": {
      "token_count": 112,
      "source_url": "https://supabase.com/docs/guides/auth/auth-captcha",
      "page_title": "Enable Captcha Protection | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Enable Captcha Protection",
        "h2": "Add the Captcha frontend component [\\#](\\#add-the-captcha-frontend-component)"
      },
      "text": "Let's create a empty state to store our `captchaToken`\n\n`\n_10\nconst [captchaToken, setCaptchaToken] = useState()\n`\n\nNow lets add the HCaptcha component to the JSX section of our code\n\n`\n_10\n<HCaptcha />\n`\n\nWe will pass it the sitekey we copied from the hCaptcha website as a property along with a onVerify property which takes a callback function. This callback function will have a token as one of its properties. Let's set the token in the state using `setCaptchaToken`\n\n",
      "overlap_text": {
        "previous_chunk_id": "b02a752e-bfa7-4c50-a46e-39dccb0e4349",
        "text": "Content of the previous chunk for context: h1: Enable Captcha Protection h2: Add the Captcha frontend component [\\#](\\#add-the-captcha-frontend-component)\n\n`\n_10\nnpm install @hcaptcha/react-hcaptcha\n`\n\nNow import the `HCaptcha` component from the `@hcaptcha/react-hcaptcha` library.\n\n`\n_10\nimport HCaptcha from '@hcaptcha/react-hcaptcha'\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "8d8f822e-7740-46a4-86de-d61ba434b8ff",
    "metadata": {
      "token_count": 118,
      "source_url": "https://supabase.com/docs/guides/auth/auth-captcha",
      "page_title": "Enable Captcha Protection | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Enable Captcha Protection",
        "h2": "Add the Captcha frontend component [\\#](\\#add-the-captcha-frontend-component)"
      },
      "text": "`\n_10\n<HCaptcha\n_10\nsitekey=\"your-sitekey\"\n_10\nonVerify={(token) => {\n_10\n    setCaptchaToken(token)\n_10\n}}\n_10\n/>\n`\n\nNow lets use the captcha token we receive in our Supabase signUp function.\n\n`\n_10\nawait supabase.auth.signUp({\n_10\nemail,\n_10\npassword,\n_10\noptions: { captchaToken },\n_10\n})\n`\n\nWe will also need to reset the captcha challenge after we have made a call to the function above.\n",
      "overlap_text": {
        "previous_chunk_id": "ff3dd4a0-1c9f-469e-83c6-aa10f0fcf79f",
        "text": "Content of the previous chunk for context: h1: Enable Captcha Protection h2: Add the Captcha frontend component [\\#](\\#add-the-captcha-frontend-component)\n\n copied from the hCaptcha website as a property along with a onVerify property which takes a callback function. This callback function will have a token as one of its properties. Let's set the token in the state using `setCaptchaToken`\n\n"
      }
    }
  },
  {
    "chunk_id": "41950a50-81fd-4f05-a61a-2527eca05a17",
    "metadata": {
      "token_count": 114,
      "source_url": "https://supabase.com/docs/guides/auth/auth-captcha",
      "page_title": "Enable Captcha Protection | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Enable Captcha Protection",
        "h2": "Add the Captcha frontend component [\\#](\\#add-the-captcha-frontend-component)"
      },
      "text": "\nCreate a ref to use on our HCaptcha component.\n\n`\n_10\nconst captcha = useRef()\n`\n\nLet's add a ref attribute on the `HCaptcha` component and assign the `captcha` constant to it.\n\n`\n_10\n<HCaptcha\n_10\nref={captcha}\n_10\nsitekey=\"your-sitekey\"\n_10\nonVerify={(token) => {\n_10\n    setCaptchaToken(token)\n_10\n}}\n_10\n/>\n`\n\nReset the `captcha` after the signUp function is called using the following code:\n",
      "overlap_text": {
        "previous_chunk_id": "8d8f822e-7740-46a4-86de-d61ba434b8ff",
        "text": "Content of the previous chunk for context: h1: Enable Captcha Protection h2: Add the Captcha frontend component [\\#](\\#add-the-captcha-frontend-component)\n\nabase.auth.signUp({\n_10\nemail,\n_10\npassword,\n_10\noptions: { captchaToken },\n_10\n})\n`\n\nWe will also need to reset the captcha challenge after we have made a call to the function above.\n"
      }
    }
  },
  {
    "chunk_id": "6616c292-dfe5-4cdc-a93c-c8fe07e0c600",
    "metadata": {
      "token_count": 84,
      "source_url": "https://supabase.com/docs/guides/auth/auth-captcha",
      "page_title": "Enable Captcha Protection | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Enable Captcha Protection",
        "h2": "Add the Captcha frontend component [\\#](\\#add-the-captcha-frontend-component)"
      },
      "text": "\n`\n_10\ncaptcha.current.resetCaptcha()\n`\n\nIn order to test that this works locally we will need to use something like [ngrok](https://ngrok.com/) or add an entry to your hosts file. You can read more about this in the [hCaptcha docs](https://docs.hcaptcha.com/#local-development).\n\nRun the application and you should now be provided with a captcha challenge.\n",
      "overlap_text": {
        "previous_chunk_id": "41950a50-81fd-4f05-a61a-2527eca05a17",
        "text": "Content of the previous chunk for context: h1: Enable Captcha Protection h2: Add the Captcha frontend component [\\#](\\#add-the-captcha-frontend-component)\n\nkey=\"your-sitekey\"\n_10\nonVerify={(token) => {\n_10\n    setCaptchaToken(token)\n_10\n}}\n_10\n/>\n`\n\nReset the `captcha` after the signUp function is called using the following code:\n"
      }
    }
  },
  {
    "chunk_id": "5fa937fe-c4d6-4e58-859d-1190b0adf00e",
    "metadata": {
      "token_count": 105,
      "source_url": "https://supabase.com/docs/guides/auth/architecture",
      "page_title": "Auth architecture | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth architecture",
        "h2": "The architecture behind Supabase Auth."
      },
      "text": "* * *\n\nThere are four major layers to Supabase Auth:\n\n1. [Client layer.](#client-layer) This can be one of the Supabase client SDKs, or manually made HTTP requests using the HTTP client of your choice.\n2. Kong API gateway. This is shared between all Supabase products.\n3. [Auth service](#auth-service) (formerly known as GoTrue).\n4. [Postgres database.](#postgres) This is shared between all Supabase products.\n"
    }
  },
  {
    "chunk_id": "a4186c83-b3eb-4e86-8e96-2847d2776d19",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/architecture",
      "page_title": "Auth architecture | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth architecture",
        "h2": "Client layer [\\#](\\#client-layer)"
      },
      "text": "The client layer runs in your app. This could be running in many places, including:\n\n- Your frontend browser code\n- Your backend server code\n- Your native application\n\nThe client layer provides the functions that you use to sign in and manage users. We recommend using the Supabase client SDKs, which handle:\n\n- Configuration and authentication of HTTP calls to the Supabase Auth backend\n- Persistence, refresh, and removal of Auth Tokens in your app's storage medium\n- Integration with other Supabase products\n",
      "overlap_text": {
        "previous_chunk_id": "5fa937fe-c4d6-4e58-859d-1190b0adf00e",
        "text": "Content of the previous chunk for context: h1: Auth architecture h2: The architecture behind Supabase Auth.\n\n gateway. This is shared between all Supabase products.\n3. [Auth service](#auth-service) (formerly known as GoTrue).\n4. [Postgres database.](#postgres) This is shared between all Supabase products.\n"
      }
    }
  },
  {
    "chunk_id": "329f55b1-e131-42c1-9052-b38c3d82374b",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/architecture",
      "page_title": "Auth architecture | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth architecture",
        "h2": "Client layer [\\#](\\#client-layer)"
      },
      "text": "\nBut at its core, this layer manages the making of HTTP calls, so you could write your own client layer if you wanted to.\n\nSee the Client SDKs for more information:\n\n- [JavaScript](/docs/reference/javascript/introduction)\n- [Flutter](/docs/reference/dart/introduction)\n- [Swift](/docs/reference/swift/introduction)\n- [Python](/docs/reference/python/introduction)\n- [C#](/docs/reference/csharp/introduction)\n- [Kotlin](/docs/reference/kotlin/introduction)\n",
      "overlap_text": {
        "previous_chunk_id": "a4186c83-b3eb-4e86-8e96-2847d2776d19",
        "text": "Content of the previous chunk for context: h1: Auth architecture h2: Client layer [\\#](\\#client-layer)\n\nabase client SDKs, which handle:\n\n- Configuration and authentication of HTTP calls to the Supabase Auth backend\n- Persistence, refresh, and removal of Auth Tokens in your app's storage medium\n- Integration with other Supabase products\n"
      }
    }
  },
  {
    "chunk_id": "9de45535-b1a9-43b8-8e3b-d0b733a16028",
    "metadata": {
      "token_count": 108,
      "source_url": "https://supabase.com/docs/guides/auth/architecture",
      "page_title": "Auth architecture | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth architecture",
        "h2": "Auth service [\\#](\\#auth-service)"
      },
      "text": "The [Auth service](https://github.com/supabase/auth) is an Auth API server written and maintained by Supabase. It is a fork of the GoTrue project, originally created by Netlify.\n\nWhen you deploy a new Supabase project, we deploy an instance of this server alongside your database, and inject your database with the required Auth schema.\n\nThe Auth service is responsible for:\n\n- Validating, issuing, and refreshing JWTs\n- Serving as the intermediary between your app and Auth information in the database\n",
      "overlap_text": {
        "previous_chunk_id": "329f55b1-e131-42c1-9052-b38c3d82374b",
        "text": "Content of the previous chunk for context: h1: Auth architecture h2: Client layer [\\#](\\#client-layer)\n\n)\n- [Swift](/docs/reference/swift/introduction)\n- [Python](/docs/reference/python/introduction)\n- [C#](/docs/reference/csharp/introduction)\n- [Kotlin](/docs/reference/kotlin/introduction)\n"
      }
    }
  },
  {
    "chunk_id": "b091b536-bcd1-42b8-be1b-1deed602b000",
    "metadata": {
      "token_count": 13,
      "source_url": "https://supabase.com/docs/guides/auth/architecture",
      "page_title": "Auth architecture | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth architecture",
        "h2": "Auth service [\\#](\\#auth-service)"
      },
      "text": "- Communicating with external providers for Social Login and SSO\n",
      "overlap_text": {
        "previous_chunk_id": "9de45535-b1a9-43b8-8e3b-d0b733a16028",
        "text": "Content of the previous chunk for context: h1: Auth architecture h2: Auth service [\\#](\\#auth-service)\n\n of this server alongside your database, and inject your database with the required Auth schema.\n\nThe Auth service is responsible for:\n\n- Validating, issuing, and refreshing JWTs\n- Serving as the intermediary between your app and Auth information in the database\n"
      }
    }
  },
  {
    "chunk_id": "ca22e564-1871-4bdc-8323-c7b6ed52b9cf",
    "metadata": {
      "token_count": 132,
      "source_url": "https://supabase.com/docs/guides/auth/architecture",
      "page_title": "Auth architecture | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth architecture",
        "h2": "Postgres [\\#](\\#postgres)"
      },
      "text": "Supabase Auth uses the `auth` schema in your Postgres database to store user tables and other information. For security, this schema is not exposed on the auto-generated API.\n\nYou can connect Auth information to your own objects using [database triggers](/docs/guides/database/postgres/triggers) and [foreign keys](https://www.postgresql.org/docs/current/tutorial-fk.html). Make sure that any views you create for Auth data are adequately protected by [enabling RLS](/docs/guides/database/postgres/row-level-security) or [revoking grants](https://www.postgresql.org/docs/current/sql-revoke.html).\n",
      "overlap_text": {
        "previous_chunk_id": "b091b536-bcd1-42b8-be1b-1deed602b000",
        "text": "Content of the previous chunk for context: h1: Auth architecture h2: Auth service [\\#](\\#auth-service)\n\n- Communicating with external providers for Social Login and SSO\n"
      }
    }
  },
  {
    "chunk_id": "266b9f15-f973-4572-ae17-af4e049daea0",
    "metadata": {
      "token_count": 67,
      "source_url": "https://supabase.com/docs/guides/auth/architecture",
      "page_title": "Auth architecture | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth architecture",
        "h2": "Postgres [\\#](\\#postgres)"
      },
      "text": "\nMake sure any views you create for Auth data are protected.\n\nStarting in Postgres version 15, views inherit the RLS policies of the underlying tables if created with `security_invoker`. Views in earlier versions, or those created without `security_invoker`, inherit the permissions of the owner, who can bypass RLS policies.\n",
      "overlap_text": {
        "previous_chunk_id": "ca22e564-1871-4bdc-8323-c7b6ed52b9cf",
        "text": "Content of the previous chunk for context: h1: Auth architecture h2: Postgres [\\#](\\#postgres)\n\n that any views you create for Auth data are adequately protected by [enabling RLS](/docs/guides/database/postgres/row-level-security) or [revoking grants](https://www.postgresql.org/docs/current/sql-revoke.html).\n"
      }
    }
  },
  {
    "chunk_id": "c1f3eead-ad17-492f-a98f-9fa082d12afe",
    "metadata": {
      "token_count": 61,
      "source_url": "https://supabase.com/docs/guides/auth/identities",
      "page_title": "Identities | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Identities"
      },
      "text": "* * *\n\nAn identity is an authentication method associated with a user. Supabase Auth supports the following types of identity:\n\n- Email\n- Phone\n- OAuth\n- SAML\n\nA user can have more than one identity. Anonymous users have no identity until they link an identity to their user.\n"
    }
  },
  {
    "chunk_id": "aaa7e062-6923-47e3-b602-383a7e570c2b",
    "metadata": {
      "token_count": 255,
      "source_url": "https://supabase.com/docs/guides/auth/identities",
      "page_title": "Identities | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Identities",
        "h2": "The user identity object [\\#](\\#the-user-identity-object)"
      },
      "text": "The user identity object contains the following attributes:\n\n| Attributes | Type | Description |\n| --- | --- | --- |\n| provider\\_id | `string` | The provider id returned by the provider. If the provider is an OAuth provider, the id refers to the user's account with the OAuth provider. If the provider is `email` or `phone`, the id is the user's id from the `auth.users` table. |\n| user\\_id | `string` | The user's id that the identity is linked to. |\n| identity\\_data | `object` | The identity metadata. For OAuth and SAML identities, this contains information about the user from the provider. |\n| id | `string` | The unique id of the identity. |\n| provider | `string` | The provider name. |\n| email | `string` | The email is a generated column that references the optional email property in the identity\\_data |\n| created\\_at | `string` | The timestamp that the identity was created. |\n| last\\_sign\\_in\\_at | `string` | The timestamp that the identity was last used to sign in. |\n| updated\\_at | `string` | The timestamp that the identity was last updated. |\n",
      "overlap_text": {
        "previous_chunk_id": "c1f3eead-ad17-492f-a98f-9fa082d12afe",
        "text": "Content of the previous chunk for context: h1: Identities\n\n a user. Supabase Auth supports the following types of identity:\n\n- Email\n- Phone\n- OAuth\n- SAML\n\nA user can have more than one identity. Anonymous users have no identity until they link an identity to their user.\n"
      }
    }
  },
  {
    "chunk_id": "cfd4f2c9-60e8-4054-9593-e13a94ef2bc6",
    "metadata": {
      "token_count": 3,
      "source_url": "https://supabase.com/docs/guides/auth/auth-smtp",
      "page_title": "Configure a Custom SMTP | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Configure a Custom SMTP"
      },
      "text": "* * *\n"
    }
  },
  {
    "chunk_id": "618bf74f-9f08-4ecf-8ea7-5db016f80ee5",
    "metadata": {
      "token_count": 115,
      "source_url": "https://supabase.com/docs/guides/auth/auth-smtp",
      "page_title": "Configure a Custom SMTP | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Configure a Custom SMTP",
        "h2": "Auth SMTP [\\#](\\#auth-smtp)"
      },
      "text": "At present, you can trial the Supabase platform by sending up to **3** emails per hour via the built-in service. The default email service as a whole is offered on a best effort basis: we will do our best to maintain it and will review usage of the service on a regular basis to see if the email service should be continued.\n\nAs you progress toward production, you may find yourself wanting for a custom SMTP service in order to increase your limits. A custom SMTP server will allow you to set your own cap on the number of emails sent per hour.\n",
      "overlap_text": {
        "previous_chunk_id": "cfd4f2c9-60e8-4054-9593-e13a94ef2bc6",
        "text": "Content of the previous chunk for context: h1: Configure a Custom SMTP\n\n* * *\n"
      }
    }
  },
  {
    "chunk_id": "9a778d84-e0e6-4d1f-88f6-58009987b271",
    "metadata": {
      "token_count": 36,
      "source_url": "https://supabase.com/docs/guides/auth/auth-smtp",
      "page_title": "Configure a Custom SMTP | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Configure a Custom SMTP",
        "h2": "Auth SMTP [\\#](\\#auth-smtp)"
      },
      "text": "\nBeyond rate limits, an SMTP server might also help with:\n\n- Deliverability and Reputation Management\n- Scalability\n- Analytics and Tracking\n- Compliance and Anti Spam measures\n",
      "overlap_text": {
        "previous_chunk_id": "618bf74f-9f08-4ecf-8ea7-5db016f80ee5",
        "text": "Content of the previous chunk for context: h1: Configure a Custom SMTP h2: Auth SMTP [\\#](\\#auth-smtp)\n\n email service should be continued.\n\nAs you progress toward production, you may find yourself wanting for a custom SMTP service in order to increase your limits. A custom SMTP server will allow you to set your own cap on the number of emails sent per hour.\n"
      }
    }
  },
  {
    "chunk_id": "3e935ef5-f4ef-4946-ac83-4273f3231215",
    "metadata": {
      "token_count": 71,
      "source_url": "https://supabase.com/docs/guides/auth/auth-smtp",
      "page_title": "Configure a Custom SMTP | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Configure a Custom SMTP",
        "h2": "How to set up SMTP [\\#](\\#how-to-set-up-smtp)"
      },
      "text": "Head over to [Auth Settings Page](https://supabase.com/dashboard/project/_/settings/auth) and hit \"Enable Custom SMTP\" under the SMTP Provider section.\n\nFill in fields below with the relevant details obtained from your custom SMTP provider:\n\n![SMTP settings](https://supabase.com/docs/img/guides/auth-smtp/smtp.png)\n",
      "overlap_text": {
        "previous_chunk_id": "9a778d84-e0e6-4d1f-88f6-58009987b271",
        "text": "Content of the previous chunk for context: h1: Configure a Custom SMTP h2: Auth SMTP [\\#](\\#auth-smtp)\n\n\nBeyond rate limits, an SMTP server might also help with:\n\n- Deliverability and Reputation Management\n- Scalability\n- Analytics and Tracking\n- Compliance and Anti Spam measures\n"
      }
    }
  },
  {
    "chunk_id": "e76d1e37-e72c-462a-8efe-4a256ab8a480",
    "metadata": {
      "token_count": 109,
      "source_url": "https://supabase.com/docs/guides/auth/auth-smtp",
      "page_title": "Configure a Custom SMTP | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Configure a Custom SMTP",
        "h2": "How to update email rate limits [\\#](\\#how-to-update-email-rate-limits)"
      },
      "text": "After adding a custom SMTP provider, you can head over to [Auth > Rate Limits](https://supabase.com/dashboard/project/_/auth/rate-limits) to configure the rate limits for sending emails.\n\n### SMTP providers [\\#](\\#smtp-providers)\n\nYou can use Supabase Auth with any major SMTP provider of your choosing. Some SMTP providers you could consider using are:\n\n- [Twilio SendGrid](https://docs.sendgrid.com/for-developers/sending-email/integrating-with-the-smtp-api)\n",
      "overlap_text": {
        "previous_chunk_id": "3e935ef5-f4ef-4946-ac83-4273f3231215",
        "text": "Content of the previous chunk for context: h1: Configure a Custom SMTP h2: How to set up SMTP [\\#](\\#how-to-set-up-smtp)\n\n and hit \"Enable Custom SMTP\" under the SMTP Provider section.\n\nFill in fields below with the relevant details obtained from your custom SMTP provider:\n\n![SMTP settings](https://supabase.com/docs/img/guides/auth-smtp/smtp.png)\n"
      }
    }
  },
  {
    "chunk_id": "8e1cac8b-8100-4184-a4a8-897f078091b0",
    "metadata": {
      "token_count": 39,
      "source_url": "https://supabase.com/docs/guides/auth/auth-smtp",
      "page_title": "Configure a Custom SMTP | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Configure a Custom SMTP",
        "h2": "How to update email rate limits [\\#](\\#how-to-update-email-rate-limits)"
      },
      "text": "- [AWS SES](https://docs.aws.amazon.com/ses/latest/dg/send-email-smtp.html)\n- [Resend](https://resend.com/docs/dashboard/emails/introduction)\n",
      "overlap_text": {
        "previous_chunk_id": "e76d1e37-e72c-462a-8efe-4a256ab8a480",
        "text": "Content of the previous chunk for context: h1: Configure a Custom SMTP h2: How to update email rate limits [\\#](\\#how-to-update-email-rate-limits)\n\nabase Auth with any major SMTP provider of your choosing. Some SMTP providers you could consider using are:\n\n- [Twilio SendGrid](https://docs.sendgrid.com/for-developers/sending-email/integrating-with-the-smtp-api)\n"
      }
    }
  },
  {
    "chunk_id": "e4b3dbe2-8697-4d42-83c2-0f996e1581c3",
    "metadata": {
      "token_count": 44,
      "source_url": "https://supabase.com/docs/guides/auth/enterprise-sso",
      "page_title": "Enterprise Single Sign-On | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Enterprise Single Sign-On"
      },
      "text": "* * *\n\nSupabase Auth supports building enterprise applications that require Single Sign-On (SSO) authentication [with SAML 2.0](/docs/guides/auth/sso/auth-sso-saml).\n"
    }
  },
  {
    "chunk_id": "28d3b28f-4bda-4953-b4a2-8971805684bd",
    "metadata": {
      "token_count": 105,
      "source_url": "https://supabase.com/docs/guides/auth/general-configuration",
      "page_title": "General configuration | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "General configuration",
        "h2": "General configuration options for Supabase Auth"
      },
      "text": "* * *\n\nThis section covers the [general configuration options](/dashboard/project/_/settings/auth) for Supabase Auth. If you are looking for another type of configuration, you may be interested in one of the following sections:\n\n- [Provider-specific configuration](/dashboard/project/_/auth/providers)\n- [Rate limits](/dashboard/project/_/auth/rate-limits)\n- [Email Templates](/dashboard/project/_/auth/templates)\n- [Redirect URLs](/dashboard/project/_/auth/url-configuration)\n"
    }
  },
  {
    "chunk_id": "3e47bfda-6e27-4c50-8fad-6cc29634df81",
    "metadata": {
      "token_count": 126,
      "source_url": "https://supabase.com/docs/guides/auth/general-configuration",
      "page_title": "General configuration | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "General configuration",
        "h2": "General configuration options for Supabase Auth"
      },
      "text": "- [Auth Hooks](/dashboard/project/_/auth/hooks)\n\nSupabase Auth provides these [general configuration options](/dashboard/project/_/settings/auth) to control user access to your application:\n\n- **Allow new users to sign up**: Users will be able to sign up. If this config is disabled, only existing users can sign in.\n\n- **Confirm Email**: Users will need to confirm their email address before signing in for the first time.\n  - Having **Confirm Email** disabled assumes that the user's email does not need to be verified in order to login and implicitly confirms the user's email in the database.\n",
      "overlap_text": {
        "previous_chunk_id": "28d3b28f-4bda-4953-b4a2-8971805684bd",
        "text": "Content of the previous chunk for context: h1: General configuration h2: General configuration options for Supabase Auth\n\n/project/_/auth/providers)\n- [Rate limits](/dashboard/project/_/auth/rate-limits)\n- [Email Templates](/dashboard/project/_/auth/templates)\n- [Redirect URLs](/dashboard/project/_/auth/url-configuration)\n"
      }
    }
  },
  {
    "chunk_id": "2582e767-49b3-4af2-a8e9-5dc363b5ddb2",
    "metadata": {
      "token_count": 45,
      "source_url": "https://supabase.com/docs/guides/auth/general-configuration",
      "page_title": "General configuration | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "General configuration",
        "h2": "General configuration options for Supabase Auth"
      },
      "text": "  - This option can be found in the email provider under the provider-specific configuration.\n- **Allow anonymous sign-ins**: Allow anonymous users to be created.\n\n- **Allow manual linking**: Allow users to link their accounts manually.\n",
      "overlap_text": {
        "previous_chunk_id": "3e47bfda-6e27-4c50-8fad-6cc29634df81",
        "text": "Content of the previous chunk for context: h1: General configuration h2: General configuration options for Supabase Auth\n\n will need to confirm their email address before signing in for the first time.\n  - Having **Confirm Email** disabled assumes that the user's email does not need to be verified in order to login and implicitly confirms the user's email in the database.\n"
      }
    }
  },
  {
    "chunk_id": "3881bb16-ff31-4521-bbda-67cc5f8f1928",
    "metadata": {
      "token_count": 49,
      "source_url": "https://supabase.com/docs/guides/auth/managing-user-data",
      "page_title": "User Management | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User Management",
        "h2": "View, delete, and export user information."
      },
      "text": "* * *\n\nYou can view your users on the [Users page](/dashboard/project/_/auth/users) of the Dashboard. You can also view the contents of the Auth schema in the [Table Editor](/dashboard/project/_/editor).\n"
    }
  },
  {
    "chunk_id": "c155e073-04ce-414f-a3cd-776065103dfa",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/managing-user-data",
      "page_title": "User Management | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User Management",
        "h2": "Accessing user data via API [\\#](\\#accessing-user-data-via-api)"
      },
      "text": "For security, the Auth schema is not exposed in the auto-generated API. If you want to access users data via the API, you can create your own user tables in the `public` schema.\n\nMake sure to protect the table by enabling [Row Level Security](/docs/guides/database/postgres/row-level-security). Reference the `auth.users` table to ensure data integrity. Specify `on delete cascade` in the reference. For example, a `public.profiles` table might look like this:\n",
      "overlap_text": {
        "previous_chunk_id": "3881bb16-ff31-4521-bbda-67cc5f8f1928",
        "text": "Content of the previous chunk for context: h1: User Management h2: View, delete, and export user information.\n\n* * *\n\nYou can view your users on the [Users page](/dashboard/project/_/auth/users) of the Dashboard. You can also view the contents of the Auth schema in the [Table Editor](/dashboard/project/_/editor).\n"
      }
    }
  },
  {
    "chunk_id": "1a521204-55a8-4d82-97af-e83f68986c8a",
    "metadata": {
      "token_count": 132,
      "source_url": "https://supabase.com/docs/guides/auth/managing-user-data",
      "page_title": "User Management | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User Management",
        "h2": "Accessing user data via API [\\#](\\#accessing-user-data-via-api)"
      },
      "text": "\n`\n_10\ncreate table public.profiles (\n_10\nid uuid not null references auth.users on delete cascade,\n_10\nfirst_name text,\n_10\nlast_name text,\n_10\n_10\nprimary key (id)\n_10\n);\n_10\n_10\nalter table public.profiles enable row level security;\n`\n\nOnly use primary keys as [foreign key references](https://www.postgresql.org/docs/current/tutorial-fk.html) for schemas and tables like `auth.users` which are managed by Supabase. PostgreSQL lets you specify a foreign key reference for columns backed by a unique index (not necessarily primary keys).\n",
      "overlap_text": {
        "previous_chunk_id": "c155e073-04ce-414f-a3cd-776065103dfa",
        "text": "Content of the previous chunk for context: h1: User Management h2: Accessing user data via API [\\#](\\#accessing-user-data-via-api)\n\n/docs/guides/database/postgres/row-level-security). Reference the `auth.users` table to ensure data integrity. Specify `on delete cascade` in the reference. For example, a `public.profiles` table might look like this:\n"
      }
    }
  },
  {
    "chunk_id": "28422b19-f317-44dc-a538-f81bf0013b51",
    "metadata": {
      "token_count": 253,
      "source_url": "https://supabase.com/docs/guides/auth/managing-user-data",
      "page_title": "User Management | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User Management",
        "h2": "Accessing user data via API [\\#](\\#accessing-user-data-via-api)"
      },
      "text": "\nPrimary keys are **guaranteed not to change**. Columns, indices, constraints or other database objects managed by Supabase **may change at any time** and you should be careful when referencing them directly.\n\nTo update your `public.profiles` table every time a user signs up, set up a trigger. If the trigger fails, it could block signups, so test your code thoroughly.\n\n`\n_17\n-- inserts a row into public.profiles\n_17\ncreate function public.handle_new_user()\n_17\nreturns trigger\n_17\nlanguage plpgsql\n_17\nsecurity definer set search_path = ''\n_17\nas $$\n_17\nbegin\n_17\ninsert into public.profiles (id, first_name, last_name)\n_17\nvalues (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name');\n_17\nreturn new;\n_17\nend;\n_17\n$$;\n_17\n_17\n-- trigger the function every time a user is created\n_17\ncreate trigger on_auth_user_created\n_17\nafter insert on auth.users\n_17\nfor each row execute procedure public.handle_new_user();\n`\n",
      "overlap_text": {
        "previous_chunk_id": "1a521204-55a8-4d82-97af-e83f68986c8a",
        "text": "Content of the previous chunk for context: h1: User Management h2: Accessing user data via API [\\#](\\#accessing-user-data-via-api)\n\n://www.postgresql.org/docs/current/tutorial-fk.html) for schemas and tables like `auth.users` which are managed by Supabase. PostgreSQL lets you specify a foreign key reference for columns backed by a unique index (not necessarily primary keys).\n"
      }
    }
  },
  {
    "chunk_id": "29677230-1aca-419f-8ff2-0c91dfe6a15a",
    "metadata": {
      "token_count": 101,
      "source_url": "https://supabase.com/docs/guides/auth/managing-user-data",
      "page_title": "User Management | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User Management",
        "h2": "Adding and retrieving user metadata [\\#](\\#adding-and-retrieving-user-metadata)"
      },
      "text": "You can assign metadata to users on sign up:\n\nJavaScriptDartSwiftKotlin\n\n`\n_10\nconst { data, error } = await supabase.auth.signUp({\n_10\nemail: 'example@email.com',\n_10\npassword: 'example-password',\n_10\noptions: {\n_10\n    data: {\n_10\n      first_name: 'John',\n_10\n      age: 27,\n_10\n    },\n_10\n},\n_10\n})\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "28422b19-f317-44dc-a538-f81bf0013b51",
        "text": "Content of the previous chunk for context: h1: User Management h2: Accessing user data via API [\\#](\\#accessing-user-data-via-api)\n\n_17\n_17\n-- trigger the function every time a user is created\n_17\ncreate trigger on_auth_user_created\n_17\nafter insert on auth.users\n_17\nfor each row execute procedure public.handle_new_user();\n`\n"
      }
    }
  },
  {
    "chunk_id": "c389b085-cdd0-48d3-9345-ddc69509a91d",
    "metadata": {
      "token_count": 70,
      "source_url": "https://supabase.com/docs/guides/auth/managing-user-data",
      "page_title": "User Management | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User Management",
        "h2": "Adding and retrieving user metadata [\\#](\\#adding-and-retrieving-user-metadata)"
      },
      "text": "User metadata is stored on the `raw_user_meta_data` column of the `auth.users` table. To view the metadata:\n\nJavaScriptDartSwiftKotlin\n\n`\n_10\nconst {\n_10\ndata: { user },\n_10\n} = await supabase.auth.getUser()\n_10\nlet metadata = user.user_metadata\n`\n",
      "overlap_text": {
        "previous_chunk_id": "29677230-1aca-419f-8ff2-0c91dfe6a15a",
        "text": "Content of the previous chunk for context: h1: User Management h2: Adding and retrieving user metadata [\\#](\\#adding-and-retrieving-user-metadata)\n\n 'example-password',\n_10\noptions: {\n_10\n    data: {\n_10\n      first_name: 'John',\n_10\n      age: 27,\n_10\n    },\n_10\n},\n_10\n})\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "b89b2679-3d22-4118-8661-e7cdeae58e03",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/managing-user-data",
      "page_title": "User Management | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User Management",
        "h2": "Deleting users [\\#](\\#deleting-users)"
      },
      "text": "You may delete users directly or via the management console at Authentication > Users. Note that deleting a user from the `auth.users` table does not automatically sign out a user. As Supabase makes use of JSON Web Tokens (JWT), a user's JWT will remain \"valid\" until it has expired. Should you wish to immediately revoke access for a user, do consider making use of a Row Level Security policy as described below.\n\nYou cannot delete a user if they are the owner of any objects in Supabase Storage.\n",
      "overlap_text": {
        "previous_chunk_id": "c389b085-cdd0-48d3-9345-ddc69509a91d",
        "text": "Content of the previous chunk for context: h1: User Management h2: Adding and retrieving user metadata [\\#](\\#adding-and-retrieving-user-metadata)\n\n. To view the metadata:\n\nJavaScriptDartSwiftKotlin\n\n`\n_10\nconst {\n_10\ndata: { user },\n_10\n} = await supabase.auth.getUser()\n_10\nlet metadata = user.user_metadata\n`\n"
      }
    }
  },
  {
    "chunk_id": "f4ee51f7-6d77-4adc-a5a9-56fe9317ba56",
    "metadata": {
      "token_count": 41,
      "source_url": "https://supabase.com/docs/guides/auth/managing-user-data",
      "page_title": "User Management | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User Management",
        "h2": "Deleting users [\\#](\\#deleting-users)"
      },
      "text": "\nYou will encounter an error when you try to delete an Auth user that owns any Storage objects. If this happens, try deleting all the objects for that user, or reassign ownership to another user.\n",
      "overlap_text": {
        "previous_chunk_id": "b89b2679-3d22-4118-8661-e7cdeae58e03",
        "text": "Content of the previous chunk for context: h1: User Management h2: Deleting users [\\#](\\#deleting-users)\n\n\" until it has expired. Should you wish to immediately revoke access for a user, do consider making use of a Row Level Security policy as described below.\n\nYou cannot delete a user if they are the owner of any objects in Supabase Storage.\n"
      }
    }
  },
  {
    "chunk_id": "8de4baaa-f9fb-4b8e-a6de-29788fdf135b",
    "metadata": {
      "token_count": 59,
      "source_url": "https://supabase.com/docs/guides/auth/managing-user-data",
      "page_title": "User Management | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "User Management",
        "h2": "Exporting users [\\#](\\#exporting-users)"
      },
      "text": "As Supabase is built on top of Postgres, you can query the `auth.users` and `auth.identities` table via the `SQL Editor` tab to extract all users:\n\n`\n_10\nselect * from auth.users;\n`\n\nYou can then export the results as CSV.\n",
      "overlap_text": {
        "previous_chunk_id": "f4ee51f7-6d77-4adc-a5a9-56fe9317ba56",
        "text": "Content of the previous chunk for context: h1: User Management h2: Deleting users [\\#](\\#deleting-users)\n\n\nYou will encounter an error when you try to delete an Auth user that owns any Storage objects. If this happens, try deleting all the objects for that user, or reassign ownership to another user.\n"
      }
    }
  },
  {
    "chunk_id": "a8622c9a-655b-4988-b263-5450d9c7aada",
    "metadata": {
      "token_count": 95,
      "source_url": "https://supabase.com/docs/guides/auth/native-mobile-deep-linking",
      "page_title": "Native Mobile Deep Linking | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Native Mobile Deep Linking",
        "h2": "Set up Deep Linking for mobile applications."
      },
      "text": "* * *\n\nMany Auth methods involve a redirect to your app. For example:\n\n- Signup confirmation emails, Magic Link signins, and password reset emails contain a link that redirects to your app.\n- In OAuth signins, an automatic redirect occurs to your app.\n\nWith Deep Linking, you can configure this redirect to open a specific page. This is necessary if, for example, you need to display a form for password reset, or to manually exchange a token hash.\n"
    }
  },
  {
    "chunk_id": "b067d25c-4a19-4b6f-862b-96b9107d92c4",
    "metadata": {
      "token_count": 132,
      "source_url": "https://supabase.com/docs/guides/auth/native-mobile-deep-linking",
      "page_title": "Native Mobile Deep Linking | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Native Mobile Deep Linking",
        "h2": "Setting up Deep Linking [\\#](\\#setting-up-deep-linking)"
      },
      "text": "Expo React NativeFlutterSwiftAndroid Kotlin\n\nTo link to your development build or standalone app, you need to specify a custom URL scheme for your app. You can register a scheme in your app config (app.json, app.config.js) by adding a string under the `scheme` key:\n\n`\n_10\n{\n_10\n\"expo\": {\n_10\n    \"scheme\": \"com.supabase\"\n_10\n}\n_10\n}\n`\n\nIn your project's [auth settings](https://supabase.com/dashboard/project/_/auth/url-configuration) add the redirect URL, e.g. `com.supabase://**`.\n",
      "overlap_text": {
        "previous_chunk_id": "a8622c9a-655b-4988-b263-5450d9c7aada",
        "text": "Content of the previous chunk for context: h1: Native Mobile Deep Linking h2: Set up Deep Linking for mobile applications.\n\n an automatic redirect occurs to your app.\n\nWith Deep Linking, you can configure this redirect to open a specific page. This is necessary if, for example, you need to display a form for password reset, or to manually exchange a token hash.\n"
      }
    }
  },
  {
    "chunk_id": "48ce83cf-dc08-407a-9987-c29680eb8c93",
    "metadata": {
      "token_count": 573,
      "source_url": "https://supabase.com/docs/guides/auth/native-mobile-deep-linking",
      "page_title": "Native Mobile Deep Linking | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Native Mobile Deep Linking",
        "h2": "Setting up Deep Linking [\\#](\\#setting-up-deep-linking)"
      },
      "text": "\nFinally, implement the OAuth and linking handlers. See the [supabase-js reference](/docs/reference/javascript/initializing?example=react-native-options-async-storage) for instructions on initializing the supabase-js client in React Native.\n\n./components/Auth.tsx\n\n`\n_71\nimport { Button } from \"react-native\";\n_71\nimport { makeRedirectUri } from \"expo-auth-session\";\n_71\nimport * as QueryParams from \"expo-auth-session/build/QueryParams\";\n_71\nimport * as WebBrowser from \"expo-web-browser\";\n_71\nimport * as Linking from \"expo-linking\";\n_71\nimport { supabase } from \"app/utils/supabase\";\n_71\n_71\nWebBrowser.maybeCompleteAuthSession(); // required for web only\n_71\nconst redirectTo = makeRedirectUri();\n_71\n_71\nconst createSessionFromUrl = async (url: string) => {\n_71\nconst { params, errorCode } = QueryParams.getQueryParams(url);\n_71\n_71\nif (errorCode) throw new Error(errorCode);\n_71\nconst { access_token, refresh_token } = params;\n_71\n_71\nif (!access_token) return;\n_71\n_71\nconst { data, error } = await supabase.auth.setSession({\n_71\n    access_token,\n_71\n    refresh_token,\n_71\n});\n_71\nif (error) throw error;\n_71\nreturn data.session;\n_71\n};\n_71\n_71\nconst performOAuth = async () => {\n_71\nconst { data, error } = await supabase.auth.signInWithOAuth({\n_71\n    provider: \"github\",\n_71\n    options: {\n_71\n      redirectTo,\n_71\n      skipBrowserRedirect: true,\n_71\n    },\n_71\n});\n_71\nif (error) throw error;\n_71\n_71\nconst res = await WebBrowser.openAuthSessionAsync(\n_71\n    data?.url ?? \"\",\n_71\n    redirectTo\n_71\n);\n_71\n_71\nif (res.type === \"success\") {\n_71\n    const { url } = res;\n_71\n    await createSessionFromUrl(url);\n_71\n}\n_71\n};\n_71\n_71\nconst sendMagicLink = async () => {\n_71\nconst { error } = await supabase.auth.signInWithOtp({\n_71\n    email: \"example@email.com\",\n_71\n    options: {\n_71\n      emailRedirectTo: redirectTo,\n_71\n    },\n_71\n});\n_71\n_71\nif (error) throw error;\n_71\n// Email sent.\n",
      "overlap_text": {
        "previous_chunk_id": "b067d25c-4a19-4b6f-862b-96b9107d92c4",
        "text": "Content of the previous chunk for context: h1: Native Mobile Deep Linking h2: Setting up Deep Linking [\\#](\\#setting-up-deep-linking)\n\nase\"\n_10\n}\n_10\n}\n`\n\nIn your project's [auth settings](https://supabase.com/dashboard/project/_/auth/url-configuration) add the redirect URL, e.g. `com.supabase://**`.\n"
      }
    }
  },
  {
    "chunk_id": "d9457d01-2f6f-4b7b-bf41-2d849827d894",
    "metadata": {
      "token_count": 117,
      "source_url": "https://supabase.com/docs/guides/auth/native-mobile-deep-linking",
      "page_title": "Native Mobile Deep Linking | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Native Mobile Deep Linking",
        "h2": "Setting up Deep Linking [\\#](\\#setting-up-deep-linking)"
      },
      "text": "_71\n};\n_71\n_71\nexport default function Auth() {\n_71\n// Handle linking into app from email app.\n_71\nconst url = Linking.useURL();\n_71\nif (url) createSessionFromUrl(url);\n_71\n_71\nreturn (\n_71\n    <>\n_71\n      <Button onPress={performOAuth} title=\"Sign in with Github\" />\n_71\n      <Button onPress={sendMagicLink} title=\"Send Magic Link\" />\n_71\n    </>\n_71\n);\n_71\n}\n`\n\n",
      "overlap_text": {
        "previous_chunk_id": "48ce83cf-dc08-407a-9987-c29680eb8c93",
        "text": "Content of the previous chunk for context: h1: Native Mobile Deep Linking h2: Setting up Deep Linking [\\#](\\#setting-up-deep-linking)\n\nexample@email.com\",\n_71\n    options: {\n_71\n      emailRedirectTo: redirectTo,\n_71\n    },\n_71\n});\n_71\n_71\nif (error) throw error;\n_71\n// Email sent.\n"
      }
    }
  },
  {
    "chunk_id": "14be6b6d-fb02-4559-9be9-d0aa3e71d50c",
    "metadata": {
      "token_count": 48,
      "source_url": "https://supabase.com/docs/guides/auth/native-mobile-deep-linking",
      "page_title": "Native Mobile Deep Linking | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Native Mobile Deep Linking",
        "h2": "Setting up Deep Linking [\\#](\\#setting-up-deep-linking)"
      },
      "text": "For the best user experience it is recommended to use universal links which require a more elaborate setup. You can find the detailed setup instructions in the [Expo docs](https://docs.expo.dev/guides/deep-linking/).\n",
      "overlap_text": {
        "previous_chunk_id": "d9457d01-2f6f-4b7b-bf41-2d849827d894",
        "text": "Content of the previous chunk for context: h1: Native Mobile Deep Linking h2: Setting up Deep Linking [\\#](\\#setting-up-deep-linking)\n\n\n      <Button onPress={performOAuth} title=\"Sign in with Github\" />\n_71\n      <Button onPress={sendMagicLink} title=\"Send Magic Link\" />\n_71\n    </>\n_71\n);\n_71\n}\n`\n\n"
      }
    }
  },
  {
    "chunk_id": "77b47596-7405-4dca-820f-f314aa6de11a",
    "metadata": {
      "token_count": 440,
      "source_url": "https://supabase.com/docs/guides/auth/rate-limits",
      "page_title": "Rate limits | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Rate limits",
        "h2": "Rate limits protect your services from abuse"
      },
      "text": "* * *\n\nSupabase Auth enforces rate limits on endpoints to prevent abuse. Some rate limits are [customizable](/dashboard/project/_/auth/rate-limits).\n\n| Endpoint | Path | Limited By | Rate Limit |\n| --- | --- | --- | --- |\n| All endpoints that send emails | `/auth/v1/signup` `/auth/v1/recover` `/auth/v1/user` [1](#user-content-fn-1) | Sum of combined requests | Defaults to 4 emails per hour as of 14th July 2023. As of 21 Oct 2023, this has been updated to 2 emails per hour. You can only change this with your own custom SMTP setup. |\n| All endpoints that send One-Time-Passwords (OTP) | `/auth/v1/otp` | Sum of combined requests | Defaults to 30 OTPs per hour. Is customizable. |\n| Send OTPs or magiclinks | `/auth/v1/otp` | Last request | Defaults to 60 seconds window before a new request is allowed. Is customizable. |\n| Signup confirmation request | `/auth/v1/signup` | Last request | Defaults to 60 seconds window before a new request is allowed. Is customizable. |\n| Password Reset Request | `/auth/v1/recover` | Last request | Defaults to 60 seconds window before a new request is allowed. Is customizable. |\n| Verification requests | `/auth/v1/verify` | IP Address | 360 requests per hour (with bursts up to 30 requests) |\n| Token refresh requests | `/auth/v1/token` | IP Address | 1800 requests per hour (with bursts up to 30 requests) |\n| Create or Verify an MFA challenge | `/auth/v1/factors/:id/challenge` `/auth/v1/factors/:id/verify` | IP Address | 15 requests per hour (with bursts up to  requests) |\n| Anonymous sign-ins | `/auth/v1/signup` [2](#user-content-fn-2) | IP Address | 30 requests per hour (with bursts up to 30 requests) |\n"
    }
  },
  {
    "chunk_id": "522ba473-981c-4b22-98e0-f71fe164f559",
    "metadata": {
      "token_count": 87,
      "source_url": "https://supabase.com/docs/guides/auth/rate-limits",
      "page_title": "Rate limits | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Rate limits",
        "h2": "Footnotes [\\#](\\#footnote-label)"
      },
      "text": "1. The rate limit is only applied on `/auth/v1/user` if this endpoint is called to update the user's email address. [\u21a9](#user-content-fnref-1)\n\n2. The rate limit is only applied on `/auth/v1/signup` if this endpoint is called without passing in an email or phone number in the request body. [\u21a9](#user-content-fnref-2)\n",
      "overlap_text": {
        "previous_chunk_id": "77b47596-7405-4dca-820f-f314aa6de11a",
        "text": "Content of the previous chunk for context: h1: Rate limits h2: Rate limits protect your services from abuse\n\n (with bursts up to  requests) |\n| Anonymous sign-ins | `/auth/v1/signup` [2](#user-content-fn-2) | IP Address | 30 requests per hour (with bursts up to 30 requests) |\n"
      }
    }
  },
  {
    "chunk_id": "23de2eee-e5b5-4272-a27a-c14a31b86baf",
    "metadata": {
      "token_count": 82,
      "source_url": "https://supabase.com/docs/guides/auth/sessions/implicit-flow",
      "page_title": "Implicit flow | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Implicit flow",
        "h2": "About authenticating with implicit flow."
      },
      "text": "* * *\n\nThe implicit flow is one of two ways that a user can authenticate and your app can receive the necessary access and refresh tokens.\n\nThe flow is an implementation detail handled for you by Supabase Auth, but understanding the difference between implicit and [PKCE flow](/docs/guides/auth/sessions/pkce-flow) is important for understanding the difference between client-only and server-side auth.\n"
    }
  },
  {
    "chunk_id": "2f3b0934-66ed-41f2-848d-acd73a401dba",
    "metadata": {
      "token_count": 98,
      "source_url": "https://supabase.com/docs/guides/auth/sessions/implicit-flow",
      "page_title": "Implicit flow | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Implicit flow",
        "h2": "How it works [\\#](\\#how-it-works)"
      },
      "text": "After a successful signin, the user is redirected to your app with a URL that looks like this:\n\n`\n_10\nhttps://yourapp.com/...#access_token=<...>&refresh_token=<...>&...\n`\n\nThe access and refresh tokens are contained in the URL fragment.\n\nThe client libraries:\n\n- Detect this type of URL\n- Extract the access token, refresh token, and some extra information\n- Persist this information to local storage for further use by the library and your app\n",
      "overlap_text": {
        "previous_chunk_id": "23de2eee-e5b5-4272-a27a-c14a31b86baf",
        "text": "Content of the previous chunk for context: h1: Implicit flow h2: About authenticating with implicit flow.\n\n implementation detail handled for you by Supabase Auth, but understanding the difference between implicit and [PKCE flow](/docs/guides/auth/sessions/pkce-flow) is important for understanding the difference between client-only and server-side auth.\n"
      }
    }
  },
  {
    "chunk_id": "a7f2a38d-8e66-4cbb-856b-cc61f2ffb25b",
    "metadata": {
      "token_count": 127,
      "source_url": "https://supabase.com/docs/guides/auth/sessions/implicit-flow",
      "page_title": "Implicit flow | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Implicit flow",
        "h2": "Limitations [\\#](\\#limitations)"
      },
      "text": "The implicit flow only works on the client. Web browsers do not send the URL fragment to the server by design. This is a security feature:\n\n- You may be hosting your single-page app on a third-party server. The third-party service shouldn't get access to your user's credentials.\n- Even if the server is under your direct control, `GET` requests and their full URLs are often logged. This approach avoids leaking credentials in request or access logs.\n\nIf you wish to obtain the access token and refresh token on a server, use the [PKCE flow](/docs/guides/auth/sessions/pkce-flow).\n",
      "overlap_text": {
        "previous_chunk_id": "2f3b0934-66ed-41f2-848d-acd73a401dba",
        "text": "Content of the previous chunk for context: h1: Implicit flow h2: How it works [\\#](\\#how-it-works)\n\n tokens are contained in the URL fragment.\n\nThe client libraries:\n\n- Detect this type of URL\n- Extract the access token, refresh token, and some extra information\n- Persist this information to local storage for further use by the library and your app\n"
      }
    }
  },
  {
    "chunk_id": "f9c16479-5f67-494d-b69e-5675cd73aca8",
    "metadata": {
      "token_count": 84,
      "source_url": "https://supabase.com/docs/guides/auth/users",
      "page_title": "Users | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Users"
      },
      "text": "* * *\n\nA **user** in Supabase Auth is someone with a user ID, stored in the Auth schema. Once someone is a user, they can be issued an Access Token, which can be used to access Supabase endpoints. The token is tied to the user, so you can restrict access to resources via [RLS policies](/docs/guides/database/postgres/row-level-security).\n"
    }
  },
  {
    "chunk_id": "2b9006d3-afa2-4d2c-a1ce-713124ac0f8e",
    "metadata": {
      "token_count": 103,
      "source_url": "https://supabase.com/docs/guides/auth/users",
      "page_title": "Users | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Users",
        "h2": "Permanent and anonymous users [\\#](\\#permanent-and-anonymous-users)"
      },
      "text": "Supabase distinguishes between permanent and anonymous users.\n\n- **Permanent users** are tied to a piece of Personally Identifiable Information (PII), such as an email address, a phone number, or a third-party identity. They can use these identities to sign back into their account after signing out.\n- **Anonymous users** aren't tied to any identities. They have a user ID and a personalized Access Token, but they have no way of signing back in as the same user if they are signed out.\n",
      "overlap_text": {
        "previous_chunk_id": "f9c16479-5f67-494d-b69e-5675cd73aca8",
        "text": "Content of the previous chunk for context: h1: Users\n\n issued an Access Token, which can be used to access Supabase endpoints. The token is tied to the user, so you can restrict access to resources via [RLS policies](/docs/guides/database/postgres/row-level-security).\n"
      }
    }
  },
  {
    "chunk_id": "3884d8e4-1d2e-4223-9951-ad3bebe53f79",
    "metadata": {
      "token_count": 122,
      "source_url": "https://supabase.com/docs/guides/auth/users",
      "page_title": "Users | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Users",
        "h2": "Permanent and anonymous users [\\#](\\#permanent-and-anonymous-users)"
      },
      "text": "\nAnonymous users are useful for:\n\n- E-commerce applications, to create shopping carts before checkout\n- Full-feature demos without collecting personal information\n- Temporary or throw-away accounts\n\nSee the [Anonymous Signins guide](/docs/guides/auth/auth-anonymous) to learn more about anonymous users.\n\n##### Anonymous users do not use the anon role\n\nJust like permanent users, anonymous users use the **authenticated** role for database access.\n\nThe **anon** role is for those who aren't signed in at all and are not tied to any user ID. We refer to these as unauthenticated or public users.\n",
      "overlap_text": {
        "previous_chunk_id": "2b9006d3-afa2-4d2c-a1ce-713124ac0f8e",
        "text": "Content of the previous chunk for context: h1: Users h2: Permanent and anonymous users [\\#](\\#permanent-and-anonymous-users)\n\n back into their account after signing out.\n- **Anonymous users** aren't tied to any identities. They have a user ID and a personalized Access Token, but they have no way of signing back in as the same user if they are signed out.\n"
      }
    }
  },
  {
    "chunk_id": "cf86cd3b-8a05-4c3a-833a-b0d2e3fd05b8",
    "metadata": {
      "token_count": 106,
      "source_url": "https://supabase.com/docs/guides/auth/users",
      "page_title": "Users | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Users",
        "h2": "The user object [\\#](\\#the-user-object)"
      },
      "text": "The user object stores all the information related to a user in your application. The user object can be retrieved using one of these methods:\n\n1. [`supabase.auth.getUser()`](/docs/reference/javascript/auth-getuser)\n2. Retrieve a user object as an admin using [`supabase.auth.admin.getUserById()`](/docs/reference/javascript/auth-admin-listusers)\n\nA user can sign in with one of the following methods:\n\n- Password-based method (with email or phone)\n- Passwordless method (with email or phone)\n",
      "overlap_text": {
        "previous_chunk_id": "3884d8e4-1d2e-4223-9951-ad3bebe53f79",
        "text": "Content of the previous chunk for context: h1: Users h2: Permanent and anonymous users [\\#](\\#permanent-and-anonymous-users)\n\n permanent users, anonymous users use the **authenticated** role for database access.\n\nThe **anon** role is for those who aren't signed in at all and are not tied to any user ID. We refer to these as unauthenticated or public users.\n"
      }
    }
  },
  {
    "chunk_id": "3c75a504-e6cc-455d-a555-9ad8a2b8236c",
    "metadata": {
      "token_count": 111,
      "source_url": "https://supabase.com/docs/guides/auth/users",
      "page_title": "Users | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Users",
        "h2": "The user object [\\#](\\#the-user-object)"
      },
      "text": "- OAuth\n- SAML SSO\n\nAn identity describes the authentication method that a user can use to sign in. A user can have multiple identities. These are the types of identities supported:\n\n- Email\n- Phone\n- OAuth\n- SAML\n\nA user with an email or phone identity will be able to sign in with either a password or passwordless method (e.g. use a one-time password (OTP) or magiclink). By default, a user with an unverified email or phone number will not be able to sign in.\n",
      "overlap_text": {
        "previous_chunk_id": "cf86cd3b-8a05-4c3a-833a-b0d2e3fd05b8",
        "text": "Content of the previous chunk for context: h1: Users h2: The user object [\\#](\\#the-user-object)\n\nsupabase.auth.admin.getUserById()`](/docs/reference/javascript/auth-admin-listusers)\n\nA user can sign in with one of the following methods:\n\n- Password-based method (with email or phone)\n- Passwordless method (with email or phone)\n"
      }
    }
  },
  {
    "chunk_id": "89276d1d-8875-42cc-9062-7106d9b12af6",
    "metadata": {
      "token_count": 430,
      "source_url": "https://supabase.com/docs/guides/auth/users",
      "page_title": "Users | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Users",
        "h2": "The user object [\\#](\\#the-user-object)"
      },
      "text": "\nThe user object contains the following attributes:\n\n| Attributes | Type | Description |\n| --- | --- | --- |\n| id | `string` | The unique id of the identity of the user. |\n| aud | `string` | The audience claim. |\n| role | `string` | The role claim used by Postgres to perform Row Level Security (RLS) checks. |\n| email | `string` | The user's email address. |\n| email\\_confirmed\\_at | `string` | The timestamp that the user's email was confirmed. If null, it means that the user's email is not confirmed. |\n| phone | `string` | The user's phone number. |\n| phone\\_confirmed\\_at | `string` | The timestamp that the user's phone was confirmed. If null, it means that the user's phone is not confirmed. |\n| confirmed\\_at | `string` | The timestamp that either the user's email or phone was confirmed. If null, it means that the user does not have a confirmed email address and phone number. |\n| last\\_sign\\_in\\_at | `string` | The timestamp that the user last signed in. |\n| app\\_metadata | `object` | The `provider` attribute indicates the first provider that the user used to sign up with. The `providers` attribute indicates the list of providers that the user can use to login with. |\n| user\\_metadata | `object` | Defaults to the first provider's identity data but can contain additional custom user metadata if specified. Refer to [**User Identity**](/docs/guides/auth/auth-identity-linking#the-user-identity) for more information about the identity object. |\n| identities | `UserIdentity[]` | Contains an object array of identities linked to the user. |\n| created\\_at | `string` | The timestamp that the user was created. |\n| updated\\_at | `string` | The timestamp that the user was last updated. |\n| is\\_anonymous | `boolean` | Is true if the user is an anonymous user. |\n",
      "overlap_text": {
        "previous_chunk_id": "3c75a504-e6cc-455d-a555-9ad8a2b8236c",
        "text": "Content of the previous chunk for context: h1: Users h2: The user object [\\#](\\#the-user-object)\n\n be able to sign in with either a password or passwordless method (e.g. use a one-time password (OTP) or magiclink). By default, a user with an unverified email or phone number will not be able to sign in.\n"
      }
    }
  },
  {
    "chunk_id": "80d64a9b-6023-4f5e-b912-c1282b484a61",
    "metadata": {
      "token_count": 17,
      "source_url": "https://supabase.com/docs/guides/auth/users",
      "page_title": "Users | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Users",
        "h2": "Resources [\\#](\\#resources)"
      },
      "text": "- [User Management guide](/docs/guides/auth/managing-user-data)\n",
      "overlap_text": {
        "previous_chunk_id": "89276d1d-8875-42cc-9062-7106d9b12af6",
        "text": "Content of the previous chunk for context: h1: Users h2: The user object [\\#](\\#the-user-object)\n\n` | The timestamp that the user was created. |\n| updated\\_at | `string` | The timestamp that the user was last updated. |\n| is\\_anonymous | `boolean` | Is true if the user is an anonymous user. |\n"
      }
    }
  },
  {
    "chunk_id": "89a78c70-f2e5-420a-b559-b38136c35a10",
    "metadata": {
      "token_count": 144,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers",
      "page_title": "Auth Helpers | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Helpers"
      },
      "text": "* * *\n\nThe Auth helpers package is in maintenance mode and we won\u2019t be actively improving it. We strongly recommend using the new `@supabase/ssr` package instead of `auth-helpers`. `@supabase/ssr` takes the core concepts of the Auth Helpers package and makes them available to any server framework. Check out the [migration doc](/docs/guides/auth/server-side/migrating-to-ssr-from-auth-helpers) to learn more.\n\nWorking with server-side frameworks is slightly different to client-side frameworks. In this section we cover the various ways of handling server-side authentication and demonstrate how to use the Supabase helper-libraries to make the process more seamless.\n"
    }
  },
  {
    "chunk_id": "14c14c0d-9bb3-47e8-ac01-3762d751ba86",
    "metadata": {
      "token_count": 97,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers",
      "page_title": "Auth Helpers | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Helpers"
      },
      "text": "\n[**Next.js** \\\\\n\\\\\nHelpers for authenticating users in Next.js applications.](/docs/guides/auth/auth-helpers/nextjs)\n\n[**SvelteKit** \\\\\n\\\\\nHelpers for authenticating users in SvelteKit applications.](/docs/guides/auth/auth-helpers/sveltekit)\n\n[**Remix** \\\\\n\\\\\nHelpers for authenticating users in Remix applications.](/docs/guides/auth/auth-helpers/remix)\n",
      "overlap_text": {
        "previous_chunk_id": "89a78c70-f2e5-420a-b559-b38136c35a10",
        "text": "Content of the previous chunk for context: h1: Auth Helpers\n\n) to learn more.\n\nWorking with server-side frameworks is slightly different to client-side frameworks. In this section we cover the various ways of handling server-side authentication and demonstrate how to use the Supabase helper-libraries to make the process more seamless.\n"
      }
    }
  },
  {
    "chunk_id": "efcb7f8a-eeea-43fb-94d9-85e3f46efc94",
    "metadata": {
      "token_count": 27,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers",
      "page_title": "Auth Helpers | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Helpers",
        "h2": "Status [\\#](\\#status)"
      },
      "text": "The Auth Helpers are in `beta`. They are usable in their current state, but it's likely that there will be breaking changes.\n",
      "overlap_text": {
        "previous_chunk_id": "14c14c0d-9bb3-47e8-ac01-3762d751ba86",
        "text": "Content of the previous chunk for context: h1: Auth Helpers\n\n in SvelteKit applications.](/docs/guides/auth/auth-helpers/sveltekit)\n\n[**Remix** \\\\\n\\\\\nHelpers for authenticating users in Remix applications.](/docs/guides/auth/auth-helpers/remix)\n"
      }
    }
  },
  {
    "chunk_id": "747c8db8-9ac5-4439-acc3-ac3b8ad30f00",
    "metadata": {
      "token_count": 37,
      "source_url": "https://supabase.com/docs/guides/auth/auth-helpers",
      "page_title": "Auth Helpers | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth Helpers",
        "h2": "Additional links [\\#](\\#additional-links)"
      },
      "text": "- [Source code](https://github.com/supabase/auth-helpers)\n- [Known bugs and issues](https://github.com/supabase/auth-helpers/issues)\n",
      "overlap_text": {
        "previous_chunk_id": "efcb7f8a-eeea-43fb-94d9-85e3f46efc94",
        "text": "Content of the previous chunk for context: h1: Auth Helpers h2: Status [\\#](\\#status)\n\nThe Auth Helpers are in `beta`. They are usable in their current state, but it's likely that there will be breaking changes.\n"
      }
    }
  },
  {
    "chunk_id": "00f8de4c-53d9-43d5-a104-8c9b4f48a669",
    "metadata": {
      "token_count": 67,
      "source_url": "https://supabase.com/docs/guides/auth",
      "page_title": "Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth",
        "h2": "Use Supabase to authenticate and authorize your users."
      },
      "text": "* * *\n\nSupabase Auth makes it easy to implement authentication and authorization in your app. We provide client SDKs and API endpoints to help you create and manage users.\n\nYour users can use many popular Auth methods, including password, magic link, one-time password (OTP), social login, and single sign-on (SSO).\n"
    }
  },
  {
    "chunk_id": "4d956e07-23f4-4529-9562-9ad556bef5cc",
    "metadata": {
      "token_count": 108,
      "source_url": "https://supabase.com/docs/guides/auth",
      "page_title": "Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth",
        "h2": "About authentication and authorization [\\#](\\#about-authentication-and-authorization)"
      },
      "text": "Authentication and authorization are the core responsibilities of any Auth system.\n\n- **Authentication** means checking that a user is who they say they are.\n- **Authorization** means checking what resources a user is allowed to access.\n\nSupabase Auth uses [JSON Web Tokens (JWTs)](/docs/guides/auth/jwts) for authentication. Auth integrates with Supabase's database features, making it easy to use [Row Level Security (RLS)](/docs/guides/database/postgres/row-level-security) for authorization.\n",
      "overlap_text": {
        "previous_chunk_id": "00f8de4c-53d9-43d5-a104-8c9b4f48a669",
        "text": "Content of the previous chunk for context: h1: Auth h2: Use Supabase to authenticate and authorize your users.\n\n app. We provide client SDKs and API endpoints to help you create and manage users.\n\nYour users can use many popular Auth methods, including password, magic link, one-time password (OTP), social login, and single sign-on (SSO).\n"
      }
    }
  },
  {
    "chunk_id": "743fd0c2-4eb1-41aa-aabe-72d9dd6b4e02",
    "metadata": {
      "token_count": 143,
      "source_url": "https://supabase.com/docs/guides/auth",
      "page_title": "Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth",
        "h2": "The Supabase ecosystem [\\#](\\#the-supabase-ecosystem)"
      },
      "text": "You can use Supabase Auth as a standalone product, but it's also built to integrate with the Supabase ecosystem.\n\nAuth uses your project's Postgres database under the hood, storing user data and other Auth information in a special schema. You can connect this data to your own tables using triggers and foreign key references.\n\nAuth also enables access control to your database's automatically generated [REST API](/docs/guides/api). When using Supabase SDKs, your data requests are automatically sent with the user's Auth Token. The Auth Token scopes database access on a row-by-row level when used along with [RLS policies](/docs/guides/database/postgres/row-level-security).\n",
      "overlap_text": {
        "previous_chunk_id": "4d956e07-23f4-4529-9562-9ad556bef5cc",
        "text": "Content of the previous chunk for context: h1: Auth h2: About authentication and authorization [\\#](\\#about-authentication-and-authorization)\n\n/guides/auth/jwts) for authentication. Auth integrates with Supabase's database features, making it easy to use [Row Level Security (RLS)](/docs/guides/database/postgres/row-level-security) for authorization.\n"
      }
    }
  },
  {
    "chunk_id": "389783d5-423b-427b-8f28-57a906f51fdb",
    "metadata": {
      "token_count": 796,
      "source_url": "https://supabase.com/docs/guides/auth",
      "page_title": "Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth",
        "h2": "Providers [\\#](\\#providers)"
      },
      "text": "Supabase Auth works with many popular Auth methods, including Social and Phone Auth using third-party providers. See the following sections for a list of supported third-party providers.\n\n### Social Auth [\\#](\\#social-auth)\n\n[![Apple Icon](https://supabase.com/docs/img/icons/apple-icon.svg)\\\\\n\\\\\n**Apple**](/docs/guides/auth/social-login/auth-apple) [![Azure (Microsoft) Icon](https://supabase.com/docs/guides/Microsoft)\\\\\n\\\\\n**Azure (Microsoft)**](/docs/guides/auth/social-login/auth-azure) [![Bitbucket Icon](https://supabase.com/docs/img/icons/bitbucket-icon.svg)\\\\\n\\\\\n**Bitbucket**](/docs/guides/auth/social-login/auth-bitbucket) [![Discord Icon](https://supabase.com/docs/img/icons/discord-icon.svg)\\\\\n\\\\\n**Discord**](/docs/guides/auth/social-login/auth-discord) [![Facebook Icon](https://supabase.com/docs/img/icons/facebook-icon.svg)\\\\\n\\\\\n**Facebook**](/docs/guides/auth/social-login/auth-facebook) [![Figma Icon](https://supabase.com/docs/img/icons/figma-icon.svg)\\\\\n\\\\\n**Figma**](/docs/guides/auth/social-login/auth-figma) [![GitHub Icon](https://supabase.com/docs/img/icons/github-icon-light.svg)\\\\\n\\\\\n**GitHub**](/docs/guides/auth/social-login/auth-github) [![GitLab Icon](https://supabase.com/docs/img/icons/gitlab-icon.svg)\\\\\n\\\\\n**GitLab**](/docs/guides/auth/social-login/auth-gitlab) [![Google Icon](https://supabase.com/docs/img/icons/google-icon.svg)\\\\\n\\\\\n**Google**](/docs/guides/auth/social-login/auth-google) [![Kakao Icon](https://supabase.com/docs/img/icons/kakao-icon.svg)\\\\\n\\\\\n**Kakao**](/docs/guides/auth/social-login/auth-kakao) [![Keycloak Icon](https://supabase.com/docs/img/icons/keycloak-icon.svg)\\\\\n\\\\\n**Keycloak**](/docs/guides/auth/social-login/auth-keycloak) [![LinkedIn Icon](https://supabase.com/docs/img/icons/linkedin-icon.svg)\\\\\n\\\\\n**LinkedIn**](/docs/guides/auth/social-login/auth-linkedin) [![Notion Icon](https://supabase.com/docs/img/icons/notion-icon.svg)\\\\\n\\\\\n**Notion**](/docs/guides/auth/social-login/auth-notion) [![Slack Icon](https://supabase.com/docs/img/icons/slack-icon.svg)\\\\\n\\\\\n**Slack**](/docs/guides/auth/social-login/auth-slack) [![Spotify Icon](https://supabase.com/docs/img/icons/spotify-icon.svg)\\\\\n\\\\\n**Spotify**](/docs/guides/auth/social-login/auth-spotify) [![Twitter Icon](https://supabase.com/docs/img/icons/twitter-icon-light.svg)\\\\\n\\\\\n**Twitter**](/docs/guides/auth/social-login/auth-twitter) [![Twitch Icon](https://supabase.com/docs/img/icons/twitch-icon.svg)\\\\\n\\\\\n**Twitch**](/docs/guides/auth/social-login/auth-twitch) [![WorkOS Icon](https://supabase.com/docs/img/icons/workos-icon.svg)\\\\\n\\\\\n**WorkOS**](/docs/guides/auth/social-login/auth-workos) [![Zoom Icon](https://supabase.com/docs/img/icons/zoom-icon.svg)\\\\\n\\\\\n",
      "overlap_text": {
        "previous_chunk_id": "743fd0c2-4eb1-41aa-aabe-72d9dd6b4e02",
        "text": "Content of the previous chunk for context: h1: Auth h2: The Supabase ecosystem [\\#](\\#the-supabase-ecosystem)\n\n SDKs, your data requests are automatically sent with the user's Auth Token. The Auth Token scopes database access on a row-by-row level when used along with [RLS policies](/docs/guides/database/postgres/row-level-security).\n"
      }
    }
  },
  {
    "chunk_id": "f61f0c9a-f413-4c55-a8bd-cdc853f0cb78",
    "metadata": {
      "token_count": 174,
      "source_url": "https://supabase.com/docs/guides/auth",
      "page_title": "Auth | Supabase Docs"
    },
    "data": {
      "headers": {
        "h1": "Auth",
        "h2": "Providers [\\#](\\#providers)"
      },
      "text": "**Zoom**](/docs/guides/auth/social-login/auth-zoom)\n\n### Phone Auth [\\#](\\#phone-auth)\n\n[![MessageBird Icon](https://supabase.com/docs/img/icons/messagebird-icon.svg)\\\\\n\\\\\n**MessageBird**](/docs/guides/auth/phone-login?showSmsProvider=MessageBird) [![Twilio Icon](https://supabase.com/docs/img/icons/twilio-icon.svg)\\\\\n\\\\\n**Twilio**](/docs/guides/auth/phone-login?showSmsProvider=Twilio) [![Vonage Icon](https://supabase.com/docs/img/icons/vonage-icon-light.svg)\\\\\n\\\\\n**Vonage**](/docs/guides/auth/phone-login?showSmsProvider=Vonage)\n",
      "overlap_text": {
        "previous_chunk_id": "389783d5-423b-427b-8f28-57a906f51fdb",
        "text": "Content of the previous chunk for context: h1: Auth h2: Providers [\\#](\\#providers)\n\n/icons/workos-icon.svg)\\\\\n\\\\\n**WorkOS**](/docs/guides/auth/social-login/auth-workos) [![Zoom Icon](https://supabase.com/docs/img/icons/zoom-icon.svg)\\\\\n\\\\\n"
      }
    }
  }
]