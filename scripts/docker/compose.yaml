name: kollektiv

x-versions: &versions
  REDIS_IMAGE: redis
  REDIS_VERSION: 7.4.1-alpine
  CHROMA_IMAGE: chromadb/chroma
  CHROMA_VERSION: 0.5.23
  WORKER_IMAGE: kollektiv-worker
  WORKER_VERSION: latest

services:
  redis:
    image: ${REDIS_IMAGE:-redis}:${REDIS_VERSION:-7.4.1-alpine}
    ports:
      - "6379:6379"
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped
  chromadb:
    image: ${CHROMA_IMAGE:-chromadb/chroma}:${CHROMA_VERSION:-0.5.23}
    container_name: chromadb
    ports:
      - "8000:8000"
    env_file:
      - ../../config/.env
    healthcheck:
      test: [ "CMD", "curl", "-f", "${CHROMA_PRIVATE_URL}/api/v1/heartbeat" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
  arq_worker:
    container_name: arq_worker
    image: ${WORKER_IMAGE:-kollektiv-worker}:${WORKER_VERSION:-latest}
    build:
      context: ../../
      dockerfile: scripts/docker/Dockerfile
    develop:
      watch:
    # Sync the working directory with the `/app` directory in the container
      - action: sync
        path: .
        target: /app
        # Exclude the project virtual environment
        ignore:
          - .venv/
          - .git/
          - __pycache__/
          - "*.pyc"
      # Rebuild the image on changes to the `pyproject.toml`
      - action: rebuild
        path: ./uv.lock
    entrypoint: ["/app/scripts/docker/entrypoint.sh"]
    command: ["uv", "run", "kollektiv", "worker"]
    env_file:
      - ../../config/.env
    environment:
      - REDIS_URL=redis://redis:6379 # need to connect to the redis service in the container, not localhost
      - CHROMA_PRIVATE_URL=http://chromadb:8000 # need to connect to the chromadb service in the container, not localhost
      - SERVICE=worker
    depends_on:
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "uv", "run", "arq", "--check", "src.infra.arq.worker:WorkerSettings"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
