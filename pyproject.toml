[tool.poetry]
name = "kollektiv"
version = "0.1.6"
description = ""
authors = ["AZ <azuev@outlook.com>"]
readme = "README.md"
package-mode = false
packages = [{include = "src"}]


[tool.poetry.dependencies]
python = ">=3.12.7,<3.13"
pre-commit = "^4.0.1"
anthropic = "^0.39.0"
chromadb = "^0.5.17"
firecrawl = "^1.4.0"
openai = "^1.54.0"
colorama = "^0.4.6"
langchain = "^0.3.7"
cohere = "^5.11.3"
markdown = "^3.7"
pytest = "^8.3.3"
weave = "^0.51.19"
pytest-cov = "^6.0.0"
ruff = "^0.7.2"
ragas = "^0.2.3"
types-requests = "^2.32.0.20241016"
pydantic = "^2.9.2"
httpx = "^0.27.2"
tiktoken = "^0.8.0"
python-dotenv = "^1.0.1"
datasets = "^3.1.0"
llama-index = "^0.11.21"
fastapi = ">=0.110.1,<0.113"
chainlit = "^1.3.1"
pytest-asyncio = "^0.24.0"
google-cloud-aiplatform = "^1.71.1"



[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.scripts]
crawl = "src.core.content.crawler.crawler:run_crawler"
kollektiv = "app:run"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]
pythonpath = [".", "src"]
asyncio_mode = "auto"
asyncio_fixture_loop_scope = "function"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
markers = [
    "integration: mark test as integration test",
    "e2e: mark test as end-to-end test",
    "slow: mark test as slow running"
]


[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
show_missing = true
skip_covered = true
skip_empty = true
precision = 1

[tool.coverage.html]
directory = "reports/coverage"    # HTML report directory
title = "Coverage Report"


[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "src/experimental",
    "src/typestubs"
]
pythonVersion = "3.12"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = "warning"
reportUnknownArgumentType = false
reportOptionalMemberAccess = false
reportGeneralTypeIssues = "warning"
reportUnknownVariableType = "warning"
reportPrivateUsage = "warning"
reportPropertyTypeMismatch = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportMissingParameterType = false
reportSelfClsParameterType = false
reportMissingTypeArgument = false
reportUnknownParameterType = false
reportUnknownMemberType = false


[tool.ruff]
line-length = 120
target-version = "py312"
indent-width = 4
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".pytype",
    ".ruff_cache",
    ".ipynb_checkpoints",
    "__pypackages__",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "D",    # pydocstyle
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "PT",   # flake8-pytest-style
    "S",    # Bandit security rules
    "N",    # pep8-naming
    "TCH",  # typechecking
    "PYI",  # pyi
    "ANN",  # type annotation checks
]
fixable = ["ALL"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
ignore = [
    "D100",  # Missing docstring in public module
    "D212",  # Multi-line docstring should start at the first line
    "D107",  # Missing docstring in __init__
    "D415",  # First line should end with period
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "ANN204",  # Missing return type annotation for special method __init__
    "E203",   # Whitespace before ':'
    "E266",   # Too many leading '#' for block comment
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D100", "D104", "D107", "D212"]
"tests/*" = [
    "D100", "D101", "D102", "D103", "S101",
    "ANN001", "ANN201", "ANN101",  # Type annotation rules
]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["property", "classmethod", "staticmethod"]

[tool.ruff.lint.isort]
known-third-party = ["anthropic", "openai", "pydantic"]
known-first-party = ["src"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
