[project]
name = "kollektiv"
version = "0.2.0-dev.1"  # Static version
description = "Kollektiv is an open-source RAG LLM chatbot that allows you to sync LLMs with any website"
authors = [{ name = "AZ", email = "azuev@outlook.com" }]
requires-python = ">=3.12,<3.13"
readme = "README.md"
dependencies = [
    "openai>=1.42.0,<2",
    "colorama>=0.4.6,<0.5",
    "tiktoken>=0.7.0,<0.8",
    "markdown~=3.7",
    "numpy>=1.26.4,<2.0", # Pinned to avoid GLIBC issues
    "cohere>=5.9.0,<6",
    "firecrawl-py>=1.2.3,<2",
    "weave>=0.51.12,<0.52",
    "wandb>=0.18.3,<0.19",
    "anthropic>=0.37.1,<0.38",
    "ragas>=0.2.3,<0.3",
    "pydantic-settings>=2.6.1,<3",
    "supabase>=2.10.0,<3",
    "sentry-sdk[fastapi]>=2.19.0,<3",
    "sentry-cli>=2.39.1,<3",
    "sse-starlette>=2.1.3,<3",
    "redis[hiredis]>=5.2.1,<6",
    "logfire[asyncpg, fastapi, httpx, redis, system-metrics]>=2.11.0,<3",
    "fastapi[standard]>=0.115.6,<0.116",
    "uvicorn[standard]>=0.34.0,<0.35",
    "arq>=0.26.3,<0.27",
    "msgpack>=1.1.0,<2",
    "chromadb>=0.5,<0.6",
]

[project.scripts]
kollektiv = "src.cli:main"

[dependency-groups]
dev = [
    "pytest>=8.3.3,<9",
    "pre-commit>=4.0.1,<5",
    "ruff>=0.7.3,<0.8",
    "mypy>=1.13.0,<2",
    "pytest-cov>=6.0.0,<7",
    "pytest-asyncio>=0.24.0,<0.25",
    "types-requests>=2.32.0.20241016,<3",
    "types-pytz>=2024.2.0.20241003,<2025",
    "types-aiofiles>=24.1.0.20240626,<25",
    "types-colorama>=0.4.15.20240311,<0.5",
    "types-markdown>=3.7.0.20240822,<4",
    "fakeredis>=2.26.2,<3",
    "types-pyyaml>=6.0.12.20241230",
    "git-filter-repo>=2.47.0",
    "ngrok>=1.4.0",
]




[tool.hatch.build.targets.sdist]
include = ["src"]
exclude = [
    "tests",
    "scripts",
    "docs",
    "*.md",
]

[tool.hatch.build.targets.wheel]
include = ["src"]
packages = ["src"]

[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true



[tool.uv]
package = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]
pythonpath = [".", "src"]
asyncio_mode = "auto"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
markers = [
    "integration: mark test as integration test",
    "e2e: mark test as end-to-end test",
    "slow: mark test as slow running",
]

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
show_missing = true
skip_covered = true
skip_empty = true
precision = 2

[tool.mypy]
python_version = "3.12"
strict = true

# handle __init__ specifically
disallow_incomplete_defs = true

# For cleaner output
disallow_subclassing_any = false
disallow_any_explicit = false

# For faster performance
follow_imports = "normal"

plugins = ["pydantic.mypy"]

# Ignore noise
disable_error_code = [
    "misc",            # Ignore misc issues like untyped decorators
    "union-attr",      # Ignore union attribute access
]

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false       # Allow untyped definitions
check_untyped_defs = false          # Don't check untyped definitions
warn_return_any = false             # Don't warn about implicit Any returns
warn_unused_ignores = true
no_implicit_optional = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[tool.ruff]
line-length = 120
target-version = "py312"
indent-width = 4
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".pytype",
    ".ruff_cache",
    ".ipynb_checkpoints",
    "__pypackages__",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "D",   # pydocstyle
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "PT",  # flake8-pytest-style
    "S",   # Bandit security rules
    "N",   # pep8-naming
    "TCH", # typechecking
    "PYI", # pyi
    "ANN", # type annotation checks
]
fixable = ["ALL"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
ignore = [
    "D100",   # Missing docstring in public module
    "D212",   # Multi-line docstring should start at the first line
    "D107",   # Missing docstring in __init__
    "D415",   # First line should end with period
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "ANN204", # Missing return type annotation for special method __init__
    "E203",   # Whitespace before ':'
    "E266",   # Too many leading '#' for block comment
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D100", "D104", "D107", "D212"]
"tests/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "S101",
    "ANN001",
    "ANN201",
    "ANN101", # Type annotation rules
]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["property", "classmethod", "staticmethod"]

[tool.ruff.lint.isort]
known-third-party = ["anthropic", "openai", "pydantic"]
known-first-party = ["src"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
