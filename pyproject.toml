[tool.poetry]
name = "kollektiv"
version = "0.1.6"
description = ""
authors = ["AZ <azuev@outlook.com>"]
readme = "README.md"
package-mode = false
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
openai = "^1.42.0"
colorama = "^0.4.6"
requests = "^2.32.3"
tiktoken = "^0.7.0"
markdown = "^3.7"
google-cloud-aiplatform = "^1.64.0"
cohere = "^5.9.0"
firecrawl-py = "^1.2.3"
pydantic = "^2.9.0"
pytest = "^8.3.3"
pre-commit = "^3.8.0"
jq = "^1.8.0"
weave = "^0.51.12"
wandb = "^0.18.3"
uvicorn = ">=0.25.0,<0.26.0"
pytest-cov = "^6.0.0"
ruff = "^0.7.1"
pytest-asyncio = "^0.24.0"
anthropic = "^0.37.1"
ragas = "^0.2.3"
chromadb = "^0.5.16"
chainlit = "^1.3.1"
langchain = "^0.3.6"



[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]
pythonpath = [
    ".",
    "src",
]
asyncio_mode = "auto"
asyncio_fixture_loop_scope = "function"
asyncio_default_fixture_loop_scope = "function"

filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

markers = [
    "integration: mark test as integration test",
    "e2e: mark test as end-to-end test",
    "slow: mark test as slow running"
]

[tool.coverage.run]
source = ["src"]

[tool.poetry.scripts]
crawl = "src.crawling.crawler:run_crawler"
kollektiv = "main:run"



[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]

show_missing = true
skip_covered = true
skip_empty = true
precision = 2


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Same as current Black config
line-length = 120
target-version = "py312"
indent-width = 4



# Exclude patterns
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".pytype",
    ".ruff_cache",
    ".ipynb_checkpoints",
    "__pypackages__",

]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "D",   # Enable pycodestyle docstring checks
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "PT",  # flake8-pytest-style
    "S",   # Bandit security rules
    "N",   # pep8-naming
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"



# Match your current flake8 ignores
ignore = [
    "D100",  # Missing docstring in public module
    "D212",  # Multi-line docstring should start at the first line
    "D107",  # Missing docstring in __init__
    "E203",  # Whitespace before ':'
    "E266",  # Too many leading '#' for block comment
    "D415",  # First line should end with a period, question mark, or exclamation point

]


# Match your current per-file-ignores
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D100", "D104", "D107", "D212"]
"tests/*" = ["D100", "D101", "D102", "D103", "S101"]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["property", "classmethod", "staticmethod"]

[tool.ruff.lint.isort]
known-third-party = ["anthropic", "openai", "pydantic"]
known-first-party = ["src"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
