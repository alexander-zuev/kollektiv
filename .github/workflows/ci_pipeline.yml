name: 10x CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.8.5"
  PYTHONPATH: ${{ github.workspace }}
  ENVIRONMENT: "staging"
  PYTHONUNBUFFERED: 1
  WANDB_MODE: "disabled"
  # Global env vars
  BASE_URL: ${{ secrets.STAGING_BASE_URL}}
  FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Poetry
        run: pip install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "poetry"

      - name: Install dependencies
        run: |
          poetry lock --no-update
          poetry install --with dev --no-interaction --no-root

      - name: Run mypy type checking
        run: |
          poetry run mypy src/ tests/ \
            --config-file pyproject.toml \
            --no-incremental \
            --show-error-codes
        continue-on-error: true

      - name: Run Ruff linting
        uses: astral-sh/ruff-action@v1
        with:
          args: check .
        continue-on-error: true

      - name: Check code formatting
        uses: astral-sh/ruff-action@v1
        with:
          args: format --check .
        continue-on-error: true

  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Poetry
        run: pip install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "poetry"

      - name: Install dependencies
        run: |
          poetry lock --no-update
          poetry install --with dev --no-interaction --no-root

      - name: Run all tests
        id: all-tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          poetry run pytest \
            tests/unit tests/integration \
            --quiet \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing:skip-covered \
            --cov-config=pyproject.toml \

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
